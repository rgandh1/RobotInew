<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 2.8.7 (Jython 2.7rc1 on java1.7.0_79)" generated="20151014 10:36:11.839">
<suite source="/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC" id="s1" name="MTC">
<suite source="/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/MTC_PREPAID-Abandon" id="s1-s1" name="MTC PREPAID-Abandon">
<suite source="/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/MTC_PREPAID-Abandon/MTC_PREPAID-Abandon-robot-suite.txt" id="s1-s1-s1" name="MTC PREPAID-Abandon-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20151014 10:36:13.667" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20151014 10:36:13.671" level="INFO">${date} = Wed Oct 14 10:36:13 CEST 2015</msg>
<status status="PASS" endtime="20151014 10:36:13.670" starttime="20151014 10:36:13.654"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151014 10:36:13.678" level="INFO">Date and time: Wed Oct 14 10:36:13 CEST 2015</msg>
<status status="PASS" endtime="20151014 10:36:13.679" starttime="20151014 10:36:13.674"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151014 10:36:13.683" level="INFO">Target IN machine: 10.105.170.135</msg>
<status status="PASS" endtime="20151014 10:36:13.684" starttime="20151014 10:36:13.681"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:13.757" starttime="20151014 10:36:13.755"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:13.986" starttime="20151014 10:36:13.772"></status>
</kw>
<msg timestamp="20151014 10:36:13.988" level="INFO">${ssh_connection} = 1</msg>
<status status="PASS" endtime="20151014 10:36:13.987" starttime="20151014 10:36:13.759"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20151014 10:36:14.000" level="INFO">Logging into '10.105.170.135:22' as 'qa_automation'.</msg>
<msg timestamp="20151014 10:36:14.495" level="INFO">Read output: Last login: Wed Oct 14 08:32:19 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app.tb07 ~]$</msg>
<status status="PASS" endtime="20151014 10:36:14.498" starttime="20151014 10:36:13.997"></status>
</kw>
<status status="PASS" endtime="20151014 10:36:14.502" starttime="20151014 10:36:13.990"></status>
</kw>
<msg timestamp="20151014 10:36:14.506" level="INFO">${ssh_connection} = 1</msg>
<status status="PASS" endtime="20151014 10:36:14.505" starttime="20151014 10:36:13.738"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20151014 10:36:14.514" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20151014 10:36:14.513" starttime="20151014 10:36:14.508"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20151014 10:36:14.517" level="INFO">Executing command 'sudo service inew-mvno-corein-service-moc-2.1.1 status'.</msg>
<msg timestamp="20151014 10:36:14.893" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151014 10:36:14.896" level="INFO">${output} = I-New MVNO VirginMobile Colombia - Core - Service 2.1.1 is running PID: 485 </msg>
<status status="PASS" endtime="20151014 10:36:14.895" starttime="20151014 10:36:14.515"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:14.913" starttime="20151014 10:36:14.906"></status>
</kw>
<msg timestamp="20151014 10:36:14.916" level="INFO">${status} = PASS</msg>
<msg timestamp="20151014 10:36:14.918" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20151014 10:36:14.915" starttime="20151014 10:36:14.900"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:14.935" starttime="20151014 10:36:14.932"></status>
</kw>
<msg timestamp="20151014 10:36:14.939" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151014 10:36:14.938" starttime="20151014 10:36:14.921"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20151014 10:36:14.948" level="INFO">${version_r} =  2.1.1 is running PID: 485 </msg>
<status status="PASS" endtime="20151014 10:36:14.947" starttime="20151014 10:36:14.942"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20151014 10:36:14.958" level="INFO">${version} =  2.1.1 </msg>
<status status="PASS" endtime="20151014 10:36:14.957" starttime="20151014 10:36:14.951"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:14.964" starttime="20151014 10:36:14.961"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:14.989" starttime="20151014 10:36:14.984"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20151014 10:36:14.998" starttime="20151014 10:36:14.992"></status>
</kw>
<status status="PASS" endtime="20151014 10:36:15.003" starttime="20151014 10:36:14.968"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:15.020" starttime="20151014 10:36:15.016"></status>
</kw>
<msg timestamp="20151014 10:36:15.024" level="INFO">${ver} =  2.1.1 </msg>
<status status="PASS" endtime="20151014 10:36:15.022" starttime="20151014 10:36:15.007"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:15.031" starttime="20151014 10:36:15.026"></status>
</kw>
<msg timestamp="20151014 10:36:15.036" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20151014 10:36:15.038" level="INFO">${in_version} =  2.1.1 </msg>
<status status="PASS" endtime="20151014 10:36:15.034" starttime="20151014 10:36:13.704"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:15.142" starttime="20151014 10:36:15.138"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:15.218" starttime="20151014 10:36:15.155"></status>
</kw>
<msg timestamp="20151014 10:36:15.222" level="INFO">${ssh_connection} = 2</msg>
<status status="PASS" endtime="20151014 10:36:15.220" starttime="20151014 10:36:15.144"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20151014 10:36:15.241" level="INFO">Logging into '10.105.170.171:22' as 'qa_automation'.</msg>
<msg timestamp="20151014 10:36:27.720" level="INFO">Read output: Last login: Wed Oct 14 08:32:32 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr.tb07 ~]$</msg>
<status status="PASS" endtime="20151014 10:36:27.723" starttime="20151014 10:36:15.236"></status>
</kw>
<status status="PASS" endtime="20151014 10:36:27.726" starttime="20151014 10:36:15.224"></status>
</kw>
<msg timestamp="20151014 10:36:27.733" level="INFO">${ssh_connection} = 2</msg>
<status status="PASS" endtime="20151014 10:36:27.730" starttime="20151014 10:36:15.117"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20151014 10:36:27.746" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20151014 10:36:27.745" starttime="20151014 10:36:27.736"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20151014 10:36:27.751" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20151014 10:36:28.139" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151014 10:36:28.144" level="INFO">${output} = I-New CS MVNO - XDR Writer - Server 5.1.0.16360 is running PID: 8775 </msg>
<status status="PASS" endtime="20151014 10:36:28.141" starttime="20151014 10:36:27.749"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:28.158" starttime="20151014 10:36:28.152"></status>
</kw>
<msg timestamp="20151014 10:36:28.161" level="INFO">${status} = PASS</msg>
<msg timestamp="20151014 10:36:28.162" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20151014 10:36:28.160" starttime="20151014 10:36:28.147"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:28.179" starttime="20151014 10:36:28.176"></status>
</kw>
<msg timestamp="20151014 10:36:28.182" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151014 10:36:28.181" starttime="20151014 10:36:28.165"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20151014 10:36:28.191" level="INFO">${version_r} =  5.1.0.16360 is running PID: 8775 </msg>
<status status="PASS" endtime="20151014 10:36:28.189" starttime="20151014 10:36:28.185"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20151014 10:36:28.199" level="INFO">${version} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20151014 10:36:28.198" starttime="20151014 10:36:28.193"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:28.205" starttime="20151014 10:36:28.201"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:28.228" starttime="20151014 10:36:28.223"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20151014 10:36:28.236" starttime="20151014 10:36:28.230"></status>
</kw>
<status status="PASS" endtime="20151014 10:36:28.239" starttime="20151014 10:36:28.207"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:28.258" starttime="20151014 10:36:28.254"></status>
</kw>
<msg timestamp="20151014 10:36:28.262" level="INFO">${ver} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20151014 10:36:28.260" starttime="20151014 10:36:28.243"></status>
</kw>
<msg timestamp="20151014 10:36:28.267" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20151014 10:36:28.269" level="INFO">${xdr_version} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20151014 10:36:28.265" starttime="20151014 10:36:15.067"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:28.367" starttime="20151014 10:36:28.363"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:28.435" starttime="20151014 10:36:28.378"></status>
</kw>
<msg timestamp="20151014 10:36:28.439" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20151014 10:36:28.437" starttime="20151014 10:36:28.370"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20151014 10:36:28.458" level="INFO">Logging into '10.105.170.125:22' as 'qa_automation'.</msg>
<msg timestamp="20151014 10:36:28.959" level="INFO">Read output: Last login: Wed Oct 14 08:32:33 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb07 ~]$</msg>
<status status="PASS" endtime="20151014 10:36:28.962" starttime="20151014 10:36:28.453"></status>
</kw>
<status status="PASS" endtime="20151014 10:36:28.964" starttime="20151014 10:36:28.442"></status>
</kw>
<msg timestamp="20151014 10:36:28.968" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20151014 10:36:28.967" starttime="20151014 10:36:28.343"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20151014 10:36:28.981" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20151014 10:36:28.980" starttime="20151014 10:36:28.971"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20151014 10:36:28.989" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20151014 10:36:29.171" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151014 10:36:29.176" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.1.14.25039
Negret Rating &amp; Charging Engine 5.1.14.25039 is running (PID:9531, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20151014 10:36:29.174" starttime="20151014 10:36:28.984"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:29.191" starttime="20151014 10:36:29.185"></status>
</kw>
<msg timestamp="20151014 10:36:29.194" level="INFO">${status} = PASS</msg>
<msg timestamp="20151014 10:36:29.196" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20151014 10:36:29.193" starttime="20151014 10:36:29.179"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:29.213" starttime="20151014 10:36:29.209"></status>
</kw>
<msg timestamp="20151014 10:36:29.216" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151014 10:36:29.215" starttime="20151014 10:36:29.198"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20151014 10:36:29.224" level="INFO">${version_r} =  5.1.14.25039 is running (PID:9531, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20151014 10:36:29.223" starttime="20151014 10:36:29.218"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20151014 10:36:29.232" level="INFO">${version} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20151014 10:36:29.231" starttime="20151014 10:36:29.227"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:29.238" starttime="20151014 10:36:29.235"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:29.262" starttime="20151014 10:36:29.258"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20151014 10:36:29.270" starttime="20151014 10:36:29.265"></status>
</kw>
<status status="PASS" endtime="20151014 10:36:29.274" starttime="20151014 10:36:29.241"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:29.290" starttime="20151014 10:36:29.286"></status>
</kw>
<msg timestamp="20151014 10:36:29.293" level="INFO">${ver} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20151014 10:36:29.292" starttime="20151014 10:36:29.277"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:29.300" starttime="20151014 10:36:29.296"></status>
</kw>
<msg timestamp="20151014 10:36:29.306" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20151014 10:36:29.307" level="INFO">${crce_version} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20151014 10:36:29.303" starttime="20151014 10:36:28.297"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151014 10:36:29.315" level="INFO">IN state= OK version= 2.1.1 </msg>
<status status="PASS" endtime="20151014 10:36:29.316" starttime="20151014 10:36:29.310"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151014 10:36:29.324" level="INFO">XDR state= OK version= 5.1.0.16360 </msg>
<status status="PASS" endtime="20151014 10:36:29.325" starttime="20151014 10:36:29.319"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151014 10:36:29.333" level="INFO">CRCE state= OK version= 5.1.14.25039 </msg>
<status status="PASS" endtime="20151014 10:36:29.335" starttime="20151014 10:36:29.328"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20151014 10:36:29.342" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151014 10:36:29.343" starttime="20151014 10:36:29.337"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20151014 10:36:29.350" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151014 10:36:29.352" starttime="20151014 10:36:29.346"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20151014 10:36:29.359" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151014 10:36:29.360" starttime="20151014 10:36:29.354"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:29.381" starttime="20151014 10:36:29.372"></status>
</kw>
<msg timestamp="20151014 10:36:29.384" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20151014 10:36:29.383" starttime="20151014 10:36:29.362"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20151014 10:36:29.392" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20151014 10:36:29.394" starttime="20151014 10:36:29.387"></status>
</kw>
<status status="PASS" endtime="20151014 10:36:29.396" starttime="20151014 10:36:13.643"></status>
</kw>
<test id="s1-s1-s1-t1" name="Run MTC Abandon Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:29.422" starttime="20151014 10:36:29.419"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20151014 10:36:29.430" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20151014 10:36:29.429" starttime="20151014 10:36:29.425"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20151014 10:36:29.465" level="INFO">msg=crce_host=10.105.170.125</msg>
<status status="PASS" endtime="20151014 10:36:29.466" starttime="20151014 10:36:29.461"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20151014 10:36:29.473" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20151014 10:36:29.474" starttime="20151014 10:36:29.469"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20151014 10:36:29.503" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20151014 10:36:29.506" starttime="20151014 10:36:29.476"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20151014 10:36:29.514" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20151014 10:36:29.516" starttime="20151014 10:36:29.509"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20151014 10:36:29.522" level="INFO">msg=imsiRangeStart=732123710001000</msg>
<status status="PASS" endtime="20151014 10:36:29.524" starttime="20151014 10:36:29.518"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20151014 10:36:29.530" level="INFO">msg=msisdnRangeStart=573190001000</msg>
<status status="PASS" endtime="20151014 10:36:29.531" starttime="20151014 10:36:29.526"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20151014 10:36:29.537" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20151014 10:36:29.539" starttime="20151014 10:36:29.534"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20151014 10:36:29.545" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20151014 10:36:29.546" starttime="20151014 10:36:29.541"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20151014 10:36:29.553" level="INFO">msg=tariffId=101002</msg>
<status status="PASS" endtime="20151014 10:36:29.554" starttime="20151014 10:36:29.549"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20151014 10:36:29.560" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20151014 10:36:29.561" starttime="20151014 10:36:29.556"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20151014 10:36:29.592" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151014 10:36:29.593" starttime="20151014 10:36:29.585"></status>
</kw>
<status status="PASS" endtime="20151014 10:36:29.595" starttime="20151014 10:36:29.581"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20151014 10:36:29.607" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/soapui.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151014 10:36:29.608" starttime="20151014 10:36:29.602"></status>
</kw>
<status status="PASS" endtime="20151014 10:36:29.610" starttime="20151014 10:36:29.598"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20151014 10:36:29.622" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/soapui-errors.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151014 10:36:29.624" starttime="20151014 10:36:29.617"></status>
</kw>
<status status="PASS" endtime="20151014 10:36:29.625" starttime="20151014 10:36:29.613"></status>
</kw>
<status status="PASS" endtime="20151014 10:36:29.626" starttime="20151014 10:36:29.567"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20151014 10:36:29.630" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20151014 10:36:29.631" starttime="20151014 10:36:29.627"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:29.634" starttime="20151014 10:36:29.632"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:29.637" starttime="20151014 10:36:29.635"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:29.640" starttime="20151014 10:36:29.638"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:29.643" starttime="20151014 10:36:29.641"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:29.646" starttime="20151014 10:36:29.644"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:29.648" starttime="20151014 10:36:29.647"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:29.651" starttime="20151014 10:36:29.650"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:29.655" starttime="20151014 10:36:29.653"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:29.657" starttime="20151014 10:36:29.656"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:29.660" starttime="20151014 10:36:29.659"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:29.663" starttime="20151014 10:36:29.661"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:29.666" starttime="20151014 10:36:29.664"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20151014 10:36:29.670" level="INFO">Running with the following project properties set: [u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=732123710001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=573190001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101002', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20151014 10:36:38.198" level="INFO">10:36:29,842 WARN  [SoapUI] Missing folder [/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/ext] for external libraries
10:36:29,843 INFO  [DefaultSoapUICore] Creating new settings at [/root/soapui-settings.xml]
10:36:31,733 INFO  [WsdlProject] Loaded project from [file:/opt/robot/robotworkspace/libs/global-keyword-resources/crce-subscriberadmin/robot_crce_bridge-soapui-project.xml]
10:36:31,754 INFO  [SoapUITestCaseRunner] Setting project property [crceHost] to [10.105.170.125]
10:36:31,754 INFO  [SoapUITestCaseRunner] Setting project property [crcePort] to [8080]
10:36:31,754 INFO  [SoapUITestCaseRunner] Setting project property [crceWebservicesBasePath] to [/inew-mvno-crce-webservices/]
10:36:31,755 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.amount] to [2]
10:36:31,755 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.imsiRangeStart] to [732123710001000]
10:36:31,755 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.msisdnRangeStart] to [573190001000]
10:36:31,755 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.type] to [PREPAID]
10:36:31,755 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.languageid] to [1]
10:36:31,755 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.tariffId] to [101002]
10:36:31,756 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.balance] to [10000000]
10:36:31,756 INFO  [SoapUITestCaseRunner] Running SoapUI tests in project [Robotframework_CRCE-Bridge]
10:36:31,756 INFO  [SoapUITestCaseRunner] Running TestCase [createTestSubscribers]
10:36:31,768 INFO  [SoapUITestCaseRunner] Running SoapUI testcase [createTestSubscribers]
10:36:31,775 INFO  [SoapUITestCaseRunner] running step [init_repeat_counter]
10:36:32,221 INFO  [SoapUITestCaseRunner] running step [01_init_next_subscriber]
10:36:32,282 INFO  [SoapUITestCaseRunner] running step [getSubscriberProfileByImsi]
10:36:32,469 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:36:32,470 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
10:36:32,504 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:36:32,511 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:36:32,734 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:36:32,734 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:36:32,734 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:36:32,734 INFO  [SoapUITestCaseRunner] running step [cancel_on_SOAP_error]
10:36:32,805 INFO  [SoapUITestCaseRunner] running step [transfer_response_values]
10:36:33,078 INFO  [SoapUITestCaseRunner] running step [cancel_on_CRCE_error_OR_skip_delete_on_UnknownSubscriber]
10:36:33,105 INFO  [SoapUITestCaseRunner] running step [deleteSubscriber]
10:36:33,106 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:36:33,108 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:36:33,108 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
10:36:33,812 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:36:33,812 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:36:33,820 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:36:33,820 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:36:33,820 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:36:33,821 INFO  [SoapUITestCaseRunner] running step [2nd_cancel_on_SOAP_error]
10:36:33,919 INFO  [SoapUITestCaseRunner] running step [2nd_transfer_response_values]
10:36:33,925 INFO  [SoapUITestCaseRunner] running step [cancel_on_deletion_error]
10:36:33,974 INFO  [SoapUITestCaseRunner] running step [02_createSubscriber]
10:36:33,978 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:36:33,980 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:36:33,980 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
10:36:34,007 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:36:34,008 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:36:34,014 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:36:34,014 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:36:34,014 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:36:34,015 INFO  [SoapUITestCaseRunner] running step [3rd_cancel_on_SOAP_error]
10:36:34,084 INFO  [SoapUITestCaseRunner] running step [3rd_transfer_response_values]
10:36:34,095 INFO  [SoapUITestCaseRunner] running step [cancel_on_create_error]
10:36:34,131 INFO  [SoapUITestCaseRunner] running step [activateSubscriber]
10:36:34,132 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:36:34,134 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:36:34,134 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
10:36:34,683 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:36:34,683 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:36:34,690 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:36:34,690 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:36:34,691 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:36:34,691 INFO  [SoapUITestCaseRunner] running step [4th_cancel_on_SOAP_error]
10:36:34,757 INFO  [SoapUITestCaseRunner] running step [4th_transfer_response_values]
10:36:34,763 INFO  [SoapUITestCaseRunner] running step [cancel_on_activate_error]
10:36:34,807 INFO  [SoapUITestCaseRunner] running step [getMainAccount]
10:36:34,810 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:36:34,812 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:36:34,812 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/accounts HTTP/1.1
10:36:35,218 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:36:35,218 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:36:35,232 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:36:35,232 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:36:35,233 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:36:35,233 INFO  [SoapUITestCaseRunner] running step [5th_cancel_on_SOAP_error]
10:36:35,297 INFO  [SoapUITestCaseRunner] running step [5th_transfer_response_values]
10:36:35,318 INFO  [SoapUITestCaseRunner] running step [cancel_on_getmainaccount_error]
10:36:35,362 INFO  [SoapUITestCaseRunner] running step [setBalance]
10:36:35,365 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:36:35,367 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:36:35,367 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/account_administration HTTP/1.1
10:36:35,775 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:36:35,775 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:36:35,788 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:36:35,788 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:36:35,789 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:36:35,789 INFO  [SoapUITestCaseRunner] running step [6th_cancel_on_SOAP_error]
10:36:35,856 INFO  [SoapUITestCaseRunner] running step [6th_transfer_response_values]
10:36:35,867 INFO  [SoapUITestCaseRunner] running step [cancel_on_setbalance_error]
10:36:35,911 INFO  [SoapUITestCaseRunner] running step [repeat_01_amount_times]
10:36:35,973 INFO  [SoapUITestCaseRunner] running step [01_init_next_subscriber]
10:36:35,978 INFO  [SoapUITestCaseRunner] running step [getSubscriberProfileByImsi]
10:36:35,980 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:36:35,982 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:36:35,982 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
10:36:36,005 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:36:36,005 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:36:36,021 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:36:36,021 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:36:36,021 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:36:36,021 INFO  [SoapUITestCaseRunner] running step [cancel_on_SOAP_error]
10:36:36,022 INFO  [SoapUITestCaseRunner] running step [transfer_response_values]
10:36:36,046 INFO  [SoapUITestCaseRunner] running step [cancel_on_CRCE_error_OR_skip_delete_on_UnknownSubscriber]
10:36:36,047 INFO  [SoapUITestCaseRunner] running step [deleteSubscriber]
10:36:36,049 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:36:36,051 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:36:36,051 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
10:36:36,899 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:36:36,899 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:36:36,905 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:36:36,905 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:36:36,905 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:36:36,906 INFO  [SoapUITestCaseRunner] running step [2nd_cancel_on_SOAP_error]
10:36:36,906 INFO  [SoapUITestCaseRunner] running step [2nd_transfer_response_values]
10:36:36,912 INFO  [SoapUITestCaseRunner] running step [cancel_on_deletion_error]
10:36:36,913 INFO  [SoapUITestCaseRunner] running step [02_createSubscriber]
10:36:36,916 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:36:36,918 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:36:36,918 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
10:36:36,944 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:36:36,944 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:36:36,950 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:36:36,950 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:36:36,950 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:36:36,950 INFO  [SoapUITestCaseRunner] running step [3rd_cancel_on_SOAP_error]
10:36:36,951 INFO  [SoapUITestCaseRunner] running step [3rd_transfer_response_values]
10:36:36,960 INFO  [SoapUITestCaseRunner] running step [cancel_on_create_error]
10:36:36,961 INFO  [SoapUITestCaseRunner] running step [activateSubscriber]
10:36:36,964 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:36:36,966 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:36:36,966 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
10:36:37,458 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:36:37,459 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:36:37,464 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:36:37,465 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:36:37,465 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:36:37,465 INFO  [SoapUITestCaseRunner] running step [4th_cancel_on_SOAP_error]
10:36:37,465 INFO  [SoapUITestCaseRunner] running step [4th_transfer_response_values]
10:36:37,471 INFO  [SoapUITestCaseRunner] running step [cancel_on_activate_error]
10:36:37,472 INFO  [SoapUITestCaseRunner] running step [getMainAccount]
10:36:37,474 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:36:37,476 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:36:37,476 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/accounts HTTP/1.1
10:36:37,724 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:36:37,724 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:36:37,736 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:36:37,736 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:36:37,737 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:36:37,737 INFO  [SoapUITestCaseRunner] running step [5th_cancel_on_SOAP_error]
10:36:37,737 INFO  [SoapUITestCaseRunner] running step [5th_transfer_response_values]
10:36:37,760 INFO  [SoapUITestCaseRunner] running step [cancel_on_getmainaccount_error]
10:36:37,760 INFO  [SoapUITestCaseRunner] running step [setBalance]
10:36:37,763 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:36:37,764 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:36:37,764 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/account_administration HTTP/1.1
10:36:38,088 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:36:38,089 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:36:38,101 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:36:38,101 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:36:38,101 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:36:38,101 INFO  [SoapUITestCaseRunner] running step [6th_cancel_on_SOAP_error]
10:36:38,102 INFO  [SoapUITestCaseRunner] running step [6th_transfer_response_values]
10:36:38,111 INFO  [SoapUITestCaseRunner] running step [cancel_on_setbalance_error]
10:36:38,112 INFO  [SoapUITestCaseRunner] running step [repeat_01_amount_times]
10:36:38,113 INFO  [SoapUITestCaseRunner] running step [finish_successful]
10:36:38,186 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK
10:36:38,188 INFO  [SoapUITestCaseRunner] Finished running SoapUI testcase [createTestSubscribers], time taken: 6355ms, status: FINISHED
10:36:38,188 INFO  [SoapUITestCaseRunner] TestCase [createTestSubscribers] finished with status [FINISHED] in 6355ms</msg>
<status status="PASS" endtime="20151014 10:36:38.206" starttime="20151014 10:36:29.669"></status>
</kw>
<msg timestamp="20151014 10:36:38.213" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20151014 10:36:38.214" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20151014 10:36:38.209" starttime="20151014 10:36:29.667"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20151014 10:36:38.247" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20151014 10:36:38.245" starttime="20151014 10:36:38.240"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20151014 10:36:38.252" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20151014 10:36:38.252" starttime="20151014 10:36:38.250"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20151014 10:36:38.257" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20151014 10:36:38.256" starttime="20151014 10:36:38.254"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20151014 10:36:38.264" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20151014 10:36:38.269" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20151014 10:36:38.270" starttime="20151014 10:36:38.261"></status>
</kw>
<msg timestamp="20151014 10:36:38.271" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20151014 10:36:38.272" level="INFO">${return_log_entry} = 2015-10-14 10:36:38,186 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151014 10:36:38.271" starttime="20151014 10:36:38.258"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:38.282" starttime="20151014 10:36:38.280"></status>
</kw>
<msg timestamp="20151014 10:36:38.283" level="INFO">${return_log_entry} = 2015-10-14 10:36:38,186 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151014 10:36:38.283" starttime="20151014 10:36:38.273"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:38.292" starttime="20151014 10:36:38.290"></status>
</kw>
<msg timestamp="20151014 10:36:38.293" level="INFO">${return_log_entry} = 2015-10-14 10:36:38,186 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151014 10:36:38.292" starttime="20151014 10:36:38.285"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:38.302" starttime="20151014 10:36:38.299"></status>
</kw>
<msg timestamp="20151014 10:36:38.303" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151014 10:36:38.303" starttime="20151014 10:36:38.294"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:38.314" starttime="20151014 10:36:38.312"></status>
</kw>
<msg timestamp="20151014 10:36:38.316" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151014 10:36:38.315" starttime="20151014 10:36:38.304"></status>
</kw>
<msg timestamp="20151014 10:36:38.318" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151014 10:36:38.317" starttime="20151014 10:36:38.220"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:38.328" starttime="20151014 10:36:38.327"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:38.331" starttime="20151014 10:36:38.330"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:38.334" starttime="20151014 10:36:38.332"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20151014 10:36:38.349" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20151014 10:36:38.350" starttime="20151014 10:36:38.343"></status>
</kw>
<status status="PASS" endtime="20151014 10:36:38.350" starttime="20151014 10:36:38.341"></status>
</kw>
<status status="PASS" endtime="20151014 10:36:38.351" starttime="20151014 10:36:38.335"></status>
</kw>
<status status="PASS" endtime="20151014 10:36:38.352" starttime="20151014 10:36:38.319"></status>
</kw>
<msg timestamp="20151014 10:36:38.355" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20151014 10:36:38.354" starttime="20151014 10:36:29.436"></status>
</kw>
<kw type="kw" name="${calling_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20151014 10:36:38.361" level="INFO">${calling_party_msisdn} = 573190001001</msg>
<status status="PASS" endtime="20151014 10:36:38.361" starttime="20151014 10:36:38.356"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20151014 10:36:38.364" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151014 10:36:38.365" starttime="20151014 10:36:38.363"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151014 10:36:38.368" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20151014 10:36:38.369" starttime="20151014 10:36:38.366"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MTC abandon *******</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:38.372" starttime="20151014 10:36:38.370"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the MTC abandon call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151014 10:36:38.375" level="INFO">Running the MTC abandon call...</msg>
<status status="PASS" endtime="20151014 10:36:38.375" starttime="20151014 10:36:38.373"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MTC Abandon">
<doc>Runs an abandoned non-roaming MTC session</doc>
<arguments>
<arg>${calling_party_msisdn}</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MTC CGS">
<doc>Runs a standard (non-roaming) MTC session (meaning a session that needs only mscAddress and mtcAPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>mtc-abandon</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_imsi}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mtc_req}</arg>
<arg>${queue_mtc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20151014 10:36:38.409" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-subscribers.csv</msg>
<status status="PASS" endtime="20151014 10:36:38.408" starttime="20151014 10:36:38.406"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20151014 10:36:38.412" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv</msg>
<status status="PASS" endtime="20151014 10:36:38.412" starttime="20151014 10:36:38.410"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20151014 10:36:38.416" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini</msg>
<status status="PASS" endtime="20151014 10:36:38.416" starttime="20151014 10:36:38.414"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20151014 10:36:38.420" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-abandon.cgs</msg>
<status status="PASS" endtime="20151014 10:36:38.419" starttime="20151014 10:36:38.417"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:38.423" starttime="20151014 10:36:38.421"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cd_imsi};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20151014 10:36:38.427" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151014 10:36:38.428" starttime="20151014 10:36:38.424"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:38.431" starttime="20151014 10:36:38.429"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mtcAPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20151014 10:36:38.463" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151014 10:36:38.464" starttime="20151014 10:36:38.457"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20151014 10:36:38.470" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151014 10:36:38.471" starttime="20151014 10:36:38.465"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:38.474" starttime="20151014 10:36:38.472"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20151014 10:36:38.478" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151014 10:36:38.479" starttime="20151014 10:36:38.475"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MTC;${queue_mtc_req};${queue_mtc_res};6;1;1</arg>
</arguments>
<msg timestamp="20151014 10:36:38.485" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151014 10:36:38.486" starttime="20151014 10:36:38.480"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:38.489" starttime="20151014 10:36:38.488"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20151014 10:36:38.503" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-abandon.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20151014 10:36:52.772" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20151014 10:36:52.766" starttime="20151014 10:36:38.491"></status>
</kw>
<msg timestamp="20151014 10:36:52.782" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20151014 10:36:52.780" starttime="20151014 10:36:38.393"></status>
</kw>
<msg timestamp="20151014 10:36:52.787" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20151014 10:36:52.784" starttime="20151014 10:36:38.378"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151014 10:36:52.796" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20151014 10:36:52.798" starttime="20151014 10:36:52.791"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20151014 10:36:52.805" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151014 10:36:52.807" starttime="20151014 10:36:52.800"></status>
</kw>
<doc>Test will make an abandoned MTC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MTC_only</tag>
<tag>TNZ_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20151014 10:36:52.810" starttime="20151014 10:36:29.400"></status>
</test>
<doc>Testing the abandoned MTC call

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20151014 10:36:52.821" starttime="20151014 10:36:12.363"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20151014 10:36:52.844" starttime="20151014 10:36:12.332"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/MTC_PREPAID-Busy" id="s1-s2" name="MTC PREPAID-Busy">
<suite source="/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/MTC_PREPAID-Busy/MTC_PREPAID-Busy-robot-suite.txt" id="s1-s2-s1" name="MTC PREPAID-Busy-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20151014 10:36:53.147" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20151014 10:36:53.155" level="INFO">${date} = Wed Oct 14 10:36:53 CEST 2015</msg>
<status status="PASS" endtime="20151014 10:36:53.154" starttime="20151014 10:36:53.142"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151014 10:36:53.162" level="INFO">Date and time: Wed Oct 14 10:36:53 CEST 2015</msg>
<status status="PASS" endtime="20151014 10:36:53.164" starttime="20151014 10:36:53.158"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151014 10:36:53.171" level="INFO">Target IN machine: 10.105.170.135</msg>
<status status="PASS" endtime="20151014 10:36:53.172" starttime="20151014 10:36:53.166"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:53.264" starttime="20151014 10:36:53.261"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:53.343" starttime="20151014 10:36:53.280"></status>
</kw>
<msg timestamp="20151014 10:36:53.346" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20151014 10:36:53.345" starttime="20151014 10:36:53.267"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20151014 10:36:53.363" level="INFO">Logging into '10.105.170.135:22' as 'qa_automation'.</msg>
<msg timestamp="20151014 10:36:53.880" level="INFO">Read output: Last login: Wed Oct 14 08:36:14 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app.tb07 ~]$</msg>
<status status="PASS" endtime="20151014 10:36:53.882" starttime="20151014 10:36:53.360"></status>
</kw>
<status status="PASS" endtime="20151014 10:36:53.882" starttime="20151014 10:36:53.350"></status>
</kw>
<msg timestamp="20151014 10:36:53.885" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20151014 10:36:53.885" starttime="20151014 10:36:53.241"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20151014 10:36:53.891" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20151014 10:36:53.891" starttime="20151014 10:36:53.886"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20151014 10:36:53.894" level="INFO">Executing command 'sudo service inew-mvno-corein-service-moc-2.1.1 status'.</msg>
<msg timestamp="20151014 10:36:54.267" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151014 10:36:54.272" level="INFO">${output} = I-New MVNO VirginMobile Colombia - Core - Service 2.1.1 is running PID: 485 </msg>
<status status="PASS" endtime="20151014 10:36:54.270" starttime="20151014 10:36:53.892"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:54.286" starttime="20151014 10:36:54.280"></status>
</kw>
<msg timestamp="20151014 10:36:54.288" level="INFO">${status} = PASS</msg>
<msg timestamp="20151014 10:36:54.290" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20151014 10:36:54.287" starttime="20151014 10:36:54.275"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:54.305" starttime="20151014 10:36:54.302"></status>
</kw>
<msg timestamp="20151014 10:36:54.308" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151014 10:36:54.306" starttime="20151014 10:36:54.292"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20151014 10:36:54.315" level="INFO">${version_r} =  2.1.1 is running PID: 485 </msg>
<status status="PASS" endtime="20151014 10:36:54.314" starttime="20151014 10:36:54.310"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20151014 10:36:54.322" level="INFO">${version} =  2.1.1 </msg>
<status status="PASS" endtime="20151014 10:36:54.321" starttime="20151014 10:36:54.317"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:54.327" starttime="20151014 10:36:54.324"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:54.345" starttime="20151014 10:36:54.341"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20151014 10:36:54.350" starttime="20151014 10:36:54.347"></status>
</kw>
<status status="PASS" endtime="20151014 10:36:54.354" starttime="20151014 10:36:54.329"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:54.367" starttime="20151014 10:36:54.364"></status>
</kw>
<msg timestamp="20151014 10:36:54.370" level="INFO">${ver} =  2.1.1 </msg>
<status status="PASS" endtime="20151014 10:36:54.369" starttime="20151014 10:36:54.356"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:54.376" starttime="20151014 10:36:54.372"></status>
</kw>
<msg timestamp="20151014 10:36:54.381" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20151014 10:36:54.382" level="INFO">${in_version} =  2.1.1 </msg>
<status status="PASS" endtime="20151014 10:36:54.379" starttime="20151014 10:36:53.197"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:54.463" starttime="20151014 10:36:54.459"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20151014 10:36:54.520" starttime="20151014 10:36:54.474"></status>
</kw>
<msg timestamp="20151014 10:36:54.522" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20151014 10:36:54.522" starttime="20151014 10:36:54.465"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20151014 10:36:54.531" level="INFO">Logging into '10.105.170.171:22' as 'qa_automation'.</msg>
<msg timestamp="20151014 10:37:07.021" level="INFO">Read output: Last login: Wed Oct 14 08:36:27 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr.tb07 ~]$</msg>
<status status="PASS" endtime="20151014 10:37:07.028" starttime="20151014 10:36:54.529"></status>
</kw>
<status status="PASS" endtime="20151014 10:37:07.029" starttime="20151014 10:36:54.524"></status>
</kw>
<msg timestamp="20151014 10:37:07.034" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20151014 10:37:07.033" starttime="20151014 10:36:54.442"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20151014 10:37:07.044" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20151014 10:37:07.043" starttime="20151014 10:37:07.036"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20151014 10:37:07.048" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20151014 10:37:07.432" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151014 10:37:07.435" level="INFO">${output} = I-New CS MVNO - XDR Writer - Server 5.1.0.16360 is running PID: 8775 </msg>
<status status="PASS" endtime="20151014 10:37:07.434" starttime="20151014 10:37:07.046"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:07.447" starttime="20151014 10:37:07.442"></status>
</kw>
<msg timestamp="20151014 10:37:07.449" level="INFO">${status} = PASS</msg>
<msg timestamp="20151014 10:37:07.451" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20151014 10:37:07.448" starttime="20151014 10:37:07.438"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:07.464" starttime="20151014 10:37:07.462"></status>
</kw>
<msg timestamp="20151014 10:37:07.467" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151014 10:37:07.466" starttime="20151014 10:37:07.453"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20151014 10:37:07.474" level="INFO">${version_r} =  5.1.0.16360 is running PID: 8775 </msg>
<status status="PASS" endtime="20151014 10:37:07.473" starttime="20151014 10:37:07.469"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20151014 10:37:07.481" level="INFO">${version} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20151014 10:37:07.480" starttime="20151014 10:37:07.476"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:07.485" starttime="20151014 10:37:07.483"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:07.508" starttime="20151014 10:37:07.506"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20151014 10:37:07.512" starttime="20151014 10:37:07.508"></status>
</kw>
<status status="PASS" endtime="20151014 10:37:07.515" starttime="20151014 10:37:07.488"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:07.530" starttime="20151014 10:37:07.527"></status>
</kw>
<msg timestamp="20151014 10:37:07.533" level="INFO">${ver} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20151014 10:37:07.532" starttime="20151014 10:37:07.517"></status>
</kw>
<msg timestamp="20151014 10:37:07.538" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20151014 10:37:07.539" level="INFO">${xdr_version} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20151014 10:37:07.536" starttime="20151014 10:36:54.404"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:07.614" starttime="20151014 10:37:07.611"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:07.688" starttime="20151014 10:37:07.626"></status>
</kw>
<msg timestamp="20151014 10:37:07.691" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20151014 10:37:07.690" starttime="20151014 10:37:07.617"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20151014 10:37:07.708" level="INFO">Logging into '10.105.170.125:22' as 'qa_automation'.</msg>
<msg timestamp="20151014 10:37:08.203" level="INFO">Read output: Last login: Wed Oct 14 08:36:28 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb07 ~]$</msg>
<status status="PASS" endtime="20151014 10:37:08.205" starttime="20151014 10:37:07.704"></status>
</kw>
<status status="PASS" endtime="20151014 10:37:08.208" starttime="20151014 10:37:07.694"></status>
</kw>
<msg timestamp="20151014 10:37:08.214" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20151014 10:37:08.212" starttime="20151014 10:37:07.597"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20151014 10:37:08.225" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20151014 10:37:08.224" starttime="20151014 10:37:08.216"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20151014 10:37:08.231" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20151014 10:37:08.404" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151014 10:37:08.407" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.1.14.25039
Negret Rating &amp; Charging Engine 5.1.14.25039 is running (PID:9531, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20151014 10:37:08.406" starttime="20151014 10:37:08.227"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:08.419" starttime="20151014 10:37:08.414"></status>
</kw>
<msg timestamp="20151014 10:37:08.422" level="INFO">${status} = PASS</msg>
<msg timestamp="20151014 10:37:08.423" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20151014 10:37:08.421" starttime="20151014 10:37:08.410"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:08.437" starttime="20151014 10:37:08.434"></status>
</kw>
<msg timestamp="20151014 10:37:08.439" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151014 10:37:08.438" starttime="20151014 10:37:08.425"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20151014 10:37:08.446" level="INFO">${version_r} =  5.1.14.25039 is running (PID:9531, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20151014 10:37:08.445" starttime="20151014 10:37:08.441"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20151014 10:37:08.453" level="INFO">${version} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20151014 10:37:08.452" starttime="20151014 10:37:08.448"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:08.457" starttime="20151014 10:37:08.455"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:08.475" starttime="20151014 10:37:08.471"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20151014 10:37:08.488" starttime="20151014 10:37:08.477"></status>
</kw>
<status status="PASS" endtime="20151014 10:37:08.490" starttime="20151014 10:37:08.460"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:08.505" starttime="20151014 10:37:08.502"></status>
</kw>
<msg timestamp="20151014 10:37:08.508" level="INFO">${ver} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20151014 10:37:08.507" starttime="20151014 10:37:08.492"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:08.513" starttime="20151014 10:37:08.510"></status>
</kw>
<msg timestamp="20151014 10:37:08.518" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20151014 10:37:08.519" level="INFO">${crce_version} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20151014 10:37:08.516" starttime="20151014 10:37:07.561"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151014 10:37:08.525" level="INFO">IN state= OK version= 2.1.1 </msg>
<status status="PASS" endtime="20151014 10:37:08.527" starttime="20151014 10:37:08.521"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151014 10:37:08.533" level="INFO">XDR state= OK version= 5.1.0.16360 </msg>
<status status="PASS" endtime="20151014 10:37:08.534" starttime="20151014 10:37:08.529"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151014 10:37:08.541" level="INFO">CRCE state= OK version= 5.1.14.25039 </msg>
<status status="PASS" endtime="20151014 10:37:08.542" starttime="20151014 10:37:08.536"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20151014 10:37:08.548" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151014 10:37:08.549" starttime="20151014 10:37:08.544"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20151014 10:37:08.554" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151014 10:37:08.556" starttime="20151014 10:37:08.551"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20151014 10:37:08.561" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151014 10:37:08.562" starttime="20151014 10:37:08.558"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:08.581" starttime="20151014 10:37:08.573"></status>
</kw>
<msg timestamp="20151014 10:37:08.583" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20151014 10:37:08.582" starttime="20151014 10:37:08.564"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20151014 10:37:08.590" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20151014 10:37:08.591" starttime="20151014 10:37:08.585"></status>
</kw>
<status status="PASS" endtime="20151014 10:37:08.593" starttime="20151014 10:36:53.136"></status>
</kw>
<test id="s1-s2-s1-t1" name="Run MTC Busy Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:08.614" starttime="20151014 10:37:08.611"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20151014 10:37:08.620" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20151014 10:37:08.619" starttime="20151014 10:37:08.616"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20151014 10:37:08.636" level="INFO">msg=crce_host=10.105.170.125</msg>
<status status="PASS" endtime="20151014 10:37:08.637" starttime="20151014 10:37:08.635"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20151014 10:37:08.639" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20151014 10:37:08.640" starttime="20151014 10:37:08.638"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20151014 10:37:08.642" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20151014 10:37:08.643" starttime="20151014 10:37:08.640"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20151014 10:37:08.645" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20151014 10:37:08.645" starttime="20151014 10:37:08.643"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20151014 10:37:08.671" level="INFO">msg=imsiRangeStart=732123710001000</msg>
<status status="PASS" endtime="20151014 10:37:08.672" starttime="20151014 10:37:08.646"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20151014 10:37:08.674" level="INFO">msg=msisdnRangeStart=573190001000</msg>
<status status="PASS" endtime="20151014 10:37:08.675" starttime="20151014 10:37:08.673"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20151014 10:37:08.677" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20151014 10:37:08.678" starttime="20151014 10:37:08.676"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20151014 10:37:08.680" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20151014 10:37:08.681" starttime="20151014 10:37:08.679"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20151014 10:37:08.683" level="INFO">msg=tariffId=101002</msg>
<status status="PASS" endtime="20151014 10:37:08.683" starttime="20151014 10:37:08.681"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20151014 10:37:08.686" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20151014 10:37:08.686" starttime="20151014 10:37:08.684"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20151014 10:37:08.696" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151014 10:37:08.697" starttime="20151014 10:37:08.694"></status>
</kw>
<status status="PASS" endtime="20151014 10:37:08.698" starttime="20151014 10:37:08.692"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20151014 10:37:08.702" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/soapui.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151014 10:37:08.702" starttime="20151014 10:37:08.700"></status>
</kw>
<status status="PASS" endtime="20151014 10:37:08.703" starttime="20151014 10:37:08.698"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20151014 10:37:08.707" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/soapui-errors.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151014 10:37:08.708" starttime="20151014 10:37:08.705"></status>
</kw>
<status status="PASS" endtime="20151014 10:37:08.709" starttime="20151014 10:37:08.704"></status>
</kw>
<status status="PASS" endtime="20151014 10:37:08.709" starttime="20151014 10:37:08.688"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20151014 10:37:08.713" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20151014 10:37:08.713" starttime="20151014 10:37:08.710"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:08.716" starttime="20151014 10:37:08.714"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:08.718" starttime="20151014 10:37:08.717"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:08.721" starttime="20151014 10:37:08.719"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:08.723" starttime="20151014 10:37:08.722"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:08.725" starttime="20151014 10:37:08.724"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:08.727" starttime="20151014 10:37:08.726"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:08.730" starttime="20151014 10:37:08.729"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:08.733" starttime="20151014 10:37:08.731"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:08.736" starttime="20151014 10:37:08.734"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:08.738" starttime="20151014 10:37:08.736"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:08.741" starttime="20151014 10:37:08.739"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:08.743" starttime="20151014 10:37:08.741"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20151014 10:37:08.747" level="INFO">Running with the following project properties set: [u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=732123710001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=573190001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101002', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20151014 10:37:14.216" level="INFO">10:37:14,213 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151014 10:37:14.218" starttime="20151014 10:37:08.745"></status>
</kw>
<msg timestamp="20151014 10:37:14.223" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20151014 10:37:14.224" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20151014 10:37:14.220" starttime="20151014 10:37:08.744"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20151014 10:37:14.244" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20151014 10:37:14.243" starttime="20151014 10:37:14.236"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20151014 10:37:14.250" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20151014 10:37:14.249" starttime="20151014 10:37:14.246"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20151014 10:37:14.256" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20151014 10:37:14.255" starttime="20151014 10:37:14.252"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20151014 10:37:14.266" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20151014 10:37:14.268" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20151014 10:37:14.269" starttime="20151014 10:37:14.262"></status>
</kw>
<msg timestamp="20151014 10:37:14.272" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20151014 10:37:14.273" level="INFO">${return_log_entry} = 2015-10-14 10:37:14,213 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151014 10:37:14.271" starttime="20151014 10:37:14.258"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:14.290" starttime="20151014 10:37:14.286"></status>
</kw>
<msg timestamp="20151014 10:37:14.292" level="INFO">${return_log_entry} = 2015-10-14 10:37:14,213 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151014 10:37:14.291" starttime="20151014 10:37:14.275"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:14.307" starttime="20151014 10:37:14.304"></status>
</kw>
<msg timestamp="20151014 10:37:14.309" level="INFO">${return_log_entry} = 2015-10-14 10:37:14,213 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151014 10:37:14.309" starttime="20151014 10:37:14.295"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:14.325" starttime="20151014 10:37:14.321"></status>
</kw>
<msg timestamp="20151014 10:37:14.327" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151014 10:37:14.326" starttime="20151014 10:37:14.311"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:14.346" starttime="20151014 10:37:14.343"></status>
</kw>
<msg timestamp="20151014 10:37:14.349" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151014 10:37:14.348" starttime="20151014 10:37:14.329"></status>
</kw>
<msg timestamp="20151014 10:37:14.353" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151014 10:37:14.352" starttime="20151014 10:37:14.227"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:14.367" starttime="20151014 10:37:14.364"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:14.372" starttime="20151014 10:37:14.369"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:14.376" starttime="20151014 10:37:14.374"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20151014 10:37:14.384" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20151014 10:37:14.385" starttime="20151014 10:37:14.382"></status>
</kw>
<status status="PASS" endtime="20151014 10:37:14.385" starttime="20151014 10:37:14.380"></status>
</kw>
<status status="PASS" endtime="20151014 10:37:14.386" starttime="20151014 10:37:14.377"></status>
</kw>
<status status="PASS" endtime="20151014 10:37:14.387" starttime="20151014 10:37:14.355"></status>
</kw>
<msg timestamp="20151014 10:37:14.389" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20151014 10:37:14.388" starttime="20151014 10:37:08.625"></status>
</kw>
<kw type="kw" name="${calling_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20151014 10:37:14.393" level="INFO">${calling_party_msisdn} = 573190001001</msg>
<status status="PASS" endtime="20151014 10:37:14.393" starttime="20151014 10:37:14.390"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20151014 10:37:14.396" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151014 10:37:14.397" starttime="20151014 10:37:14.394"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151014 10:37:14.399" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20151014 10:37:14.399" starttime="20151014 10:37:14.397"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run busy MTC *******</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:14.402" starttime="20151014 10:37:14.400"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the short MTC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151014 10:37:14.404" level="INFO">Running the short MTC call...</msg>
<status status="PASS" endtime="20151014 10:37:14.404" starttime="20151014 10:37:14.403"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MTC Busy">
<doc>Runs a busy non-roaming MTC session</doc>
<arguments>
<arg>${calling_party_msisdn}</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MTC CGS">
<doc>Runs a standard (non-roaming) MTC session (meaning a session that needs only mscAddress and mtcAPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>mtc-busy</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_imsi}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mtc_req}</arg>
<arg>${queue_mtc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20151014 10:37:14.426" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-subscribers.csv</msg>
<status status="PASS" endtime="20151014 10:37:14.426" starttime="20151014 10:37:14.424"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20151014 10:37:14.429" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv</msg>
<status status="PASS" endtime="20151014 10:37:14.428" starttime="20151014 10:37:14.427"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20151014 10:37:14.432" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini</msg>
<status status="PASS" endtime="20151014 10:37:14.431" starttime="20151014 10:37:14.430"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20151014 10:37:14.435" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-busy.cgs</msg>
<status status="PASS" endtime="20151014 10:37:14.434" starttime="20151014 10:37:14.433"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:14.437" starttime="20151014 10:37:14.435"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cd_imsi};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20151014 10:37:14.440" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151014 10:37:14.441" starttime="20151014 10:37:14.437"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:14.443" starttime="20151014 10:37:14.442"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mtcAPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20151014 10:37:14.446" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151014 10:37:14.447" starttime="20151014 10:37:14.444"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20151014 10:37:14.450" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151014 10:37:14.451" starttime="20151014 10:37:14.447"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:14.453" starttime="20151014 10:37:14.452"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20151014 10:37:14.457" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151014 10:37:14.457" starttime="20151014 10:37:14.454"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MTC;${queue_mtc_req};${queue_mtc_res};6;1;1</arg>
</arguments>
<msg timestamp="20151014 10:37:14.461" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151014 10:37:14.462" starttime="20151014 10:37:14.458"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:14.464" starttime="20151014 10:37:14.463"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20151014 10:37:14.474" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-busy.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20151014 10:37:23.718" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20151014 10:37:23.715" starttime="20151014 10:37:14.465"></status>
</kw>
<msg timestamp="20151014 10:37:23.723" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20151014 10:37:23.721" starttime="20151014 10:37:14.416"></status>
</kw>
<msg timestamp="20151014 10:37:23.727" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20151014 10:37:23.725" starttime="20151014 10:37:14.407"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151014 10:37:23.734" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20151014 10:37:23.735" starttime="20151014 10:37:23.731"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20151014 10:37:23.741" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151014 10:37:23.743" starttime="20151014 10:37:23.737"></status>
</kw>
<doc>Test will make a busy MTC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MTC_only</tag>
<tag>TNZ_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20151014 10:37:23.745" starttime="20151014 10:37:08.596"></status>
</test>
<doc>Testing the prepaid busy MTC call (called party is busy)

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20151014 10:37:23.754" starttime="20151014 10:36:52.905"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20151014 10:37:23.775" starttime="20151014 10:36:52.859"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/MTC_PREPAID-NoAnswer" id="s1-s3" name="MTC PREPAID-NoAnswer">
<suite source="/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/MTC_PREPAID-NoAnswer/MTC_PREPAID-NoAnswer-robot-suite.txt" id="s1-s3-s1" name="MTC PREPAID-NoAnswer-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20151014 10:37:24.126" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20151014 10:37:24.173" level="INFO">${date} = Wed Oct 14 10:37:24 CEST 2015</msg>
<status status="PASS" endtime="20151014 10:37:24.170" starttime="20151014 10:37:24.117"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151014 10:37:24.181" level="INFO">Date and time: Wed Oct 14 10:37:24 CEST 2015</msg>
<status status="PASS" endtime="20151014 10:37:24.182" starttime="20151014 10:37:24.176"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151014 10:37:24.188" level="INFO">Target IN machine: 10.105.170.135</msg>
<status status="PASS" endtime="20151014 10:37:24.190" starttime="20151014 10:37:24.184"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:24.253" starttime="20151014 10:37:24.250"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:24.325" starttime="20151014 10:37:24.265"></status>
</kw>
<msg timestamp="20151014 10:37:24.328" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20151014 10:37:24.327" starttime="20151014 10:37:24.255"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20151014 10:37:24.345" level="INFO">Logging into '10.105.170.135:22' as 'qa_automation'.</msg>
<msg timestamp="20151014 10:37:24.841" level="INFO">Read output: Last login: Wed Oct 14 08:36:53 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app.tb07 ~]$</msg>
<status status="PASS" endtime="20151014 10:37:24.842" starttime="20151014 10:37:24.341"></status>
</kw>
<status status="PASS" endtime="20151014 10:37:24.842" starttime="20151014 10:37:24.330"></status>
</kw>
<msg timestamp="20151014 10:37:24.844" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20151014 10:37:24.844" starttime="20151014 10:37:24.238"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20151014 10:37:24.849" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20151014 10:37:24.849" starttime="20151014 10:37:24.845"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20151014 10:37:24.852" level="INFO">Executing command 'sudo service inew-mvno-corein-service-moc-2.1.1 status'.</msg>
<msg timestamp="20151014 10:37:25.223" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151014 10:37:25.227" level="INFO">${output} = I-New MVNO VirginMobile Colombia - Core - Service 2.1.1 is running PID: 485 </msg>
<status status="PASS" endtime="20151014 10:37:25.225" starttime="20151014 10:37:24.850"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:25.238" starttime="20151014 10:37:25.233"></status>
</kw>
<msg timestamp="20151014 10:37:25.240" level="INFO">${status} = PASS</msg>
<msg timestamp="20151014 10:37:25.241" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20151014 10:37:25.239" starttime="20151014 10:37:25.229"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:25.255" starttime="20151014 10:37:25.253"></status>
</kw>
<msg timestamp="20151014 10:37:25.258" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151014 10:37:25.257" starttime="20151014 10:37:25.243"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20151014 10:37:25.264" level="INFO">${version_r} =  2.1.1 is running PID: 485 </msg>
<status status="PASS" endtime="20151014 10:37:25.263" starttime="20151014 10:37:25.259"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20151014 10:37:25.270" level="INFO">${version} =  2.1.1 </msg>
<status status="PASS" endtime="20151014 10:37:25.269" starttime="20151014 10:37:25.265"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:25.274" starttime="20151014 10:37:25.272"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:25.289" starttime="20151014 10:37:25.285"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20151014 10:37:25.295" starttime="20151014 10:37:25.290"></status>
</kw>
<status status="PASS" endtime="20151014 10:37:25.298" starttime="20151014 10:37:25.276"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:25.313" starttime="20151014 10:37:25.309"></status>
</kw>
<msg timestamp="20151014 10:37:25.316" level="INFO">${ver} =  2.1.1 </msg>
<status status="PASS" endtime="20151014 10:37:25.315" starttime="20151014 10:37:25.300"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:25.321" starttime="20151014 10:37:25.318"></status>
</kw>
<msg timestamp="20151014 10:37:25.326" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20151014 10:37:25.327" level="INFO">${in_version} =  2.1.1 </msg>
<status status="PASS" endtime="20151014 10:37:25.324" starttime="20151014 10:37:24.209"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:25.432" starttime="20151014 10:37:25.429"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:25.501" starttime="20151014 10:37:25.444"></status>
</kw>
<msg timestamp="20151014 10:37:25.504" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20151014 10:37:25.503" starttime="20151014 10:37:25.434"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20151014 10:37:25.521" level="INFO">Logging into '10.105.170.171:22' as 'qa_automation'.</msg>
<msg timestamp="20151014 10:37:37.995" level="INFO">Read output: Last login: Wed Oct 14 08:37:06 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr.tb07 ~]$</msg>
<status status="PASS" endtime="20151014 10:37:37.998" starttime="20151014 10:37:25.517"></status>
</kw>
<status status="PASS" endtime="20151014 10:37:38.002" starttime="20151014 10:37:25.507"></status>
</kw>
<msg timestamp="20151014 10:37:38.007" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20151014 10:37:38.005" starttime="20151014 10:37:25.415"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20151014 10:37:38.019" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20151014 10:37:38.018" starttime="20151014 10:37:38.009"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20151014 10:37:38.024" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20151014 10:37:38.418" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151014 10:37:38.421" level="INFO">${output} = I-New CS MVNO - XDR Writer - Server 5.1.0.16360 is running PID: 8775 </msg>
<status status="PASS" endtime="20151014 10:37:38.420" starttime="20151014 10:37:38.021"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:38.432" starttime="20151014 10:37:38.427"></status>
</kw>
<msg timestamp="20151014 10:37:38.434" level="INFO">${status} = PASS</msg>
<msg timestamp="20151014 10:37:38.435" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20151014 10:37:38.433" starttime="20151014 10:37:38.423"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:38.448" starttime="20151014 10:37:38.445"></status>
</kw>
<msg timestamp="20151014 10:37:38.450" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151014 10:37:38.450" starttime="20151014 10:37:38.437"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20151014 10:37:38.457" level="INFO">${version_r} =  5.1.0.16360 is running PID: 8775 </msg>
<status status="PASS" endtime="20151014 10:37:38.456" starttime="20151014 10:37:38.452"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20151014 10:37:38.463" level="INFO">${version} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20151014 10:37:38.462" starttime="20151014 10:37:38.459"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:38.467" starttime="20151014 10:37:38.464"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:38.482" starttime="20151014 10:37:38.479"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20151014 10:37:38.490" starttime="20151014 10:37:38.484"></status>
</kw>
<status status="PASS" endtime="20151014 10:37:38.492" starttime="20151014 10:37:38.470"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:38.505" starttime="20151014 10:37:38.502"></status>
</kw>
<msg timestamp="20151014 10:37:38.508" level="INFO">${ver} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20151014 10:37:38.507" starttime="20151014 10:37:38.494"></status>
</kw>
<msg timestamp="20151014 10:37:38.512" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20151014 10:37:38.513" level="INFO">${xdr_version} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20151014 10:37:38.510" starttime="20151014 10:37:25.344"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:38.574" starttime="20151014 10:37:38.572"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:38.644" starttime="20151014 10:37:38.585"></status>
</kw>
<msg timestamp="20151014 10:37:38.647" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20151014 10:37:38.646" starttime="20151014 10:37:38.576"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20151014 10:37:38.663" level="INFO">Logging into '10.105.170.125:22' as 'qa_automation'.</msg>
<msg timestamp="20151014 10:37:39.163" level="INFO">Read output: Last login: Wed Oct 14 08:37:08 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb07 ~]$</msg>
<status status="PASS" endtime="20151014 10:37:39.166" starttime="20151014 10:37:38.659"></status>
</kw>
<status status="PASS" endtime="20151014 10:37:39.169" starttime="20151014 10:37:38.649"></status>
</kw>
<msg timestamp="20151014 10:37:39.174" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20151014 10:37:39.173" starttime="20151014 10:37:38.560"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20151014 10:37:39.186" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20151014 10:37:39.185" starttime="20151014 10:37:39.177"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20151014 10:37:39.191" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20151014 10:37:39.363" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151014 10:37:39.366" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.1.14.25039
Negret Rating &amp; Charging Engine 5.1.14.25039 is running (PID:9531, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20151014 10:37:39.365" starttime="20151014 10:37:39.188"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:39.378" starttime="20151014 10:37:39.373"></status>
</kw>
<msg timestamp="20151014 10:37:39.380" level="INFO">${status} = PASS</msg>
<msg timestamp="20151014 10:37:39.381" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20151014 10:37:39.379" starttime="20151014 10:37:39.369"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:39.395" starttime="20151014 10:37:39.392"></status>
</kw>
<msg timestamp="20151014 10:37:39.398" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151014 10:37:39.397" starttime="20151014 10:37:39.383"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20151014 10:37:39.405" level="INFO">${version_r} =  5.1.14.25039 is running (PID:9531, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20151014 10:37:39.404" starttime="20151014 10:37:39.400"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20151014 10:37:39.412" level="INFO">${version} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20151014 10:37:39.411" starttime="20151014 10:37:39.407"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:39.417" starttime="20151014 10:37:39.414"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:39.434" starttime="20151014 10:37:39.430"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20151014 10:37:39.439" starttime="20151014 10:37:39.436"></status>
</kw>
<status status="PASS" endtime="20151014 10:37:39.443" starttime="20151014 10:37:39.420"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:39.457" starttime="20151014 10:37:39.454"></status>
</kw>
<msg timestamp="20151014 10:37:39.460" level="INFO">${ver} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20151014 10:37:39.459" starttime="20151014 10:37:39.445"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:39.466" starttime="20151014 10:37:39.463"></status>
</kw>
<msg timestamp="20151014 10:37:39.471" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20151014 10:37:39.472" level="INFO">${crce_version} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20151014 10:37:39.469" starttime="20151014 10:37:38.531"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151014 10:37:39.490" level="INFO">IN state= OK version= 2.1.1 </msg>
<status status="PASS" endtime="20151014 10:37:39.492" starttime="20151014 10:37:39.474"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151014 10:37:39.497" level="INFO">XDR state= OK version= 5.1.0.16360 </msg>
<status status="PASS" endtime="20151014 10:37:39.499" starttime="20151014 10:37:39.494"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151014 10:37:39.505" level="INFO">CRCE state= OK version= 5.1.14.25039 </msg>
<status status="PASS" endtime="20151014 10:37:39.506" starttime="20151014 10:37:39.501"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20151014 10:37:39.511" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151014 10:37:39.512" starttime="20151014 10:37:39.508"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20151014 10:37:39.517" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151014 10:37:39.518" starttime="20151014 10:37:39.514"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20151014 10:37:39.523" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151014 10:37:39.524" starttime="20151014 10:37:39.520"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:39.552" starttime="20151014 10:37:39.535"></status>
</kw>
<msg timestamp="20151014 10:37:39.555" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20151014 10:37:39.554" starttime="20151014 10:37:39.526"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20151014 10:37:39.560" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20151014 10:37:39.561" starttime="20151014 10:37:39.556"></status>
</kw>
<status status="PASS" endtime="20151014 10:37:39.563" starttime="20151014 10:37:24.110"></status>
</kw>
<test id="s1-s3-s1-t1" name="Run MTC NoAnswer Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:39.581" starttime="20151014 10:37:39.578"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20151014 10:37:39.586" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20151014 10:37:39.585" starttime="20151014 10:37:39.583"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20151014 10:37:39.609" level="INFO">msg=crce_host=10.105.170.125</msg>
<status status="PASS" endtime="20151014 10:37:39.610" starttime="20151014 10:37:39.606"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20151014 10:37:39.614" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20151014 10:37:39.616" starttime="20151014 10:37:39.612"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20151014 10:37:39.620" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20151014 10:37:39.621" starttime="20151014 10:37:39.617"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20151014 10:37:39.625" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20151014 10:37:39.626" starttime="20151014 10:37:39.623"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20151014 10:37:39.628" level="INFO">msg=imsiRangeStart=732123710001000</msg>
<status status="PASS" endtime="20151014 10:37:39.628" starttime="20151014 10:37:39.626"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20151014 10:37:39.630" level="INFO">msg=msisdnRangeStart=573190001000</msg>
<status status="PASS" endtime="20151014 10:37:39.631" starttime="20151014 10:37:39.629"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20151014 10:37:39.633" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20151014 10:37:39.633" starttime="20151014 10:37:39.631"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20151014 10:37:39.635" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20151014 10:37:39.636" starttime="20151014 10:37:39.634"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20151014 10:37:39.638" level="INFO">msg=tariffId=101002</msg>
<status status="PASS" endtime="20151014 10:37:39.638" starttime="20151014 10:37:39.636"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20151014 10:37:39.640" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20151014 10:37:39.641" starttime="20151014 10:37:39.639"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20151014 10:37:39.650" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151014 10:37:39.650" starttime="20151014 10:37:39.647"></status>
</kw>
<status status="PASS" endtime="20151014 10:37:39.651" starttime="20151014 10:37:39.646"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20151014 10:37:39.655" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/soapui.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151014 10:37:39.656" starttime="20151014 10:37:39.653"></status>
</kw>
<status status="PASS" endtime="20151014 10:37:39.656" starttime="20151014 10:37:39.652"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20151014 10:37:39.660" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/soapui-errors.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151014 10:37:39.661" starttime="20151014 10:37:39.658"></status>
</kw>
<status status="PASS" endtime="20151014 10:37:39.662" starttime="20151014 10:37:39.657"></status>
</kw>
<status status="PASS" endtime="20151014 10:37:39.669" starttime="20151014 10:37:39.642"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20151014 10:37:39.672" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20151014 10:37:39.673" starttime="20151014 10:37:39.670"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:39.675" starttime="20151014 10:37:39.673"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:39.677" starttime="20151014 10:37:39.676"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:39.679" starttime="20151014 10:37:39.678"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:39.681" starttime="20151014 10:37:39.680"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:39.683" starttime="20151014 10:37:39.682"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:39.685" starttime="20151014 10:37:39.684"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:39.688" starttime="20151014 10:37:39.686"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:39.690" starttime="20151014 10:37:39.688"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:39.692" starttime="20151014 10:37:39.691"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:39.694" starttime="20151014 10:37:39.693"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:39.696" starttime="20151014 10:37:39.695"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:39.699" starttime="20151014 10:37:39.697"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20151014 10:37:39.702" level="INFO">Running with the following project properties set: [u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=732123710001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=573190001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101002', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20151014 10:37:45.525" level="INFO">10:37:45,522 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151014 10:37:45.527" starttime="20151014 10:37:39.701"></status>
</kw>
<msg timestamp="20151014 10:37:45.531" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20151014 10:37:45.532" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20151014 10:37:45.529" starttime="20151014 10:37:39.700"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20151014 10:37:45.549" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20151014 10:37:45.548" starttime="20151014 10:37:45.544"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20151014 10:37:45.554" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20151014 10:37:45.553" starttime="20151014 10:37:45.550"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20151014 10:37:45.560" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20151014 10:37:45.559" starttime="20151014 10:37:45.556"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20151014 10:37:45.570" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20151014 10:37:45.571" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20151014 10:37:45.573" starttime="20151014 10:37:45.565"></status>
</kw>
<msg timestamp="20151014 10:37:45.575" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20151014 10:37:45.576" level="INFO">${return_log_entry} = 2015-10-14 10:37:45,522 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151014 10:37:45.574" starttime="20151014 10:37:45.562"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:45.591" starttime="20151014 10:37:45.588"></status>
</kw>
<msg timestamp="20151014 10:37:45.593" level="INFO">${return_log_entry} = 2015-10-14 10:37:45,522 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151014 10:37:45.592" starttime="20151014 10:37:45.578"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:45.607" starttime="20151014 10:37:45.604"></status>
</kw>
<msg timestamp="20151014 10:37:45.609" level="INFO">${return_log_entry} = 2015-10-14 10:37:45,522 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151014 10:37:45.609" starttime="20151014 10:37:45.596"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:45.624" starttime="20151014 10:37:45.620"></status>
</kw>
<msg timestamp="20151014 10:37:45.625" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151014 10:37:45.625" starttime="20151014 10:37:45.611"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:45.634" starttime="20151014 10:37:45.632"></status>
</kw>
<msg timestamp="20151014 10:37:45.635" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151014 10:37:45.634" starttime="20151014 10:37:45.626"></status>
</kw>
<msg timestamp="20151014 10:37:45.636" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151014 10:37:45.636" starttime="20151014 10:37:45.535"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:45.643" starttime="20151014 10:37:45.641"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:45.645" starttime="20151014 10:37:45.644"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:45.647" starttime="20151014 10:37:45.646"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20151014 10:37:45.655" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20151014 10:37:45.656" starttime="20151014 10:37:45.653"></status>
</kw>
<status status="PASS" endtime="20151014 10:37:45.656" starttime="20151014 10:37:45.651"></status>
</kw>
<status status="PASS" endtime="20151014 10:37:45.657" starttime="20151014 10:37:45.648"></status>
</kw>
<status status="PASS" endtime="20151014 10:37:45.657" starttime="20151014 10:37:45.637"></status>
</kw>
<msg timestamp="20151014 10:37:45.659" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20151014 10:37:45.658" starttime="20151014 10:37:39.591"></status>
</kw>
<kw type="kw" name="${calling_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20151014 10:37:45.664" level="INFO">${calling_party_msisdn} = 573190001001</msg>
<status status="PASS" endtime="20151014 10:37:45.663" starttime="20151014 10:37:45.660"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20151014 10:37:45.666" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151014 10:37:45.667" starttime="20151014 10:37:45.665"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151014 10:37:45.669" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20151014 10:37:45.670" starttime="20151014 10:37:45.668"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MTC 1s *******</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:45.671" starttime="20151014 10:37:45.670"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the short MTC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151014 10:37:45.673" level="INFO">Running the short MTC call...</msg>
<status status="PASS" endtime="20151014 10:37:45.674" starttime="20151014 10:37:45.672"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MTC NoAnswer">
<doc>Runs a noAnswer non-roaming MTC session</doc>
<arguments>
<arg>${calling_party_msisdn}</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MTC CGS">
<doc>Runs a standard (non-roaming) MTC session (meaning a session that needs only mscAddress and mtcAPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>mtc-noanswer</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_imsi}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mtc_req}</arg>
<arg>${queue_mtc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20151014 10:37:45.717" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-subscribers.csv</msg>
<status status="PASS" endtime="20151014 10:37:45.717" starttime="20151014 10:37:45.715"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20151014 10:37:45.720" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv</msg>
<status status="PASS" endtime="20151014 10:37:45.720" starttime="20151014 10:37:45.718"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20151014 10:37:45.723" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini</msg>
<status status="PASS" endtime="20151014 10:37:45.722" starttime="20151014 10:37:45.721"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20151014 10:37:45.726" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-noanswer.cgs</msg>
<status status="PASS" endtime="20151014 10:37:45.725" starttime="20151014 10:37:45.724"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:45.727" starttime="20151014 10:37:45.726"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cd_imsi};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20151014 10:37:45.731" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151014 10:37:45.732" starttime="20151014 10:37:45.728"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:45.734" starttime="20151014 10:37:45.733"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mtcAPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20151014 10:37:45.737" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151014 10:37:45.737" starttime="20151014 10:37:45.734"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20151014 10:37:45.741" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151014 10:37:45.742" starttime="20151014 10:37:45.738"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:45.744" starttime="20151014 10:37:45.743"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20151014 10:37:45.747" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151014 10:37:45.748" starttime="20151014 10:37:45.745"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MTC;${queue_mtc_req};${queue_mtc_res};6;1;1</arg>
</arguments>
<msg timestamp="20151014 10:37:45.752" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151014 10:37:45.753" starttime="20151014 10:37:45.748"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:45.755" starttime="20151014 10:37:45.754"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20151014 10:37:45.773" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-noanswer.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20151014 10:37:50.912" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20151014 10:37:50.909" starttime="20151014 10:37:45.756"></status>
</kw>
<msg timestamp="20151014 10:37:50.917" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20151014 10:37:50.915" starttime="20151014 10:37:45.706"></status>
</kw>
<msg timestamp="20151014 10:37:50.922" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20151014 10:37:50.920" starttime="20151014 10:37:45.676"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151014 10:37:50.929" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20151014 10:37:50.930" starttime="20151014 10:37:50.926"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20151014 10:37:50.936" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151014 10:37:50.937" starttime="20151014 10:37:50.932"></status>
</kw>
<doc>Test will make the no answer MTC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MTC_only</tag>
<tag>TNZ_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20151014 10:37:50.939" starttime="20151014 10:37:39.566"></status>
</test>
<doc>Testing the prepaid the no answer MTC call

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20151014 10:37:50.947" starttime="20151014 10:37:23.828"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20151014 10:37:50.967" starttime="20151014 10:37:23.788"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/MTC_PREPAID-ShortDuration" id="s1-s4" name="MTC PREPAID-ShortDuration">
<suite source="/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/MTC_PREPAID-ShortDuration/MTC_PREPAID-ShortDuration-robot-suite.txt" id="s1-s4-s1" name="MTC PREPAID-ShortDuration-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20151014 10:37:51.234" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20151014 10:37:51.239" level="INFO">${date} = Wed Oct 14 10:37:51 CEST 2015</msg>
<status status="PASS" endtime="20151014 10:37:51.238" starttime="20151014 10:37:51.230"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151014 10:37:51.242" level="INFO">Date and time: Wed Oct 14 10:37:51 CEST 2015</msg>
<status status="PASS" endtime="20151014 10:37:51.242" starttime="20151014 10:37:51.240"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151014 10:37:51.245" level="INFO">Target IN machine: 10.105.170.135</msg>
<status status="PASS" endtime="20151014 10:37:51.245" starttime="20151014 10:37:51.243"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:51.273" starttime="20151014 10:37:51.272"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:51.333" starttime="20151014 10:37:51.279"></status>
</kw>
<msg timestamp="20151014 10:37:51.336" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20151014 10:37:51.335" starttime="20151014 10:37:51.274"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20151014 10:37:51.344" level="INFO">Logging into '10.105.170.135:22' as 'qa_automation'.</msg>
<msg timestamp="20151014 10:37:51.769" level="INFO">Read output: Last login: Wed Oct 14 08:37:24 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app.tb07 ~]$</msg>
<status status="PASS" endtime="20151014 10:37:51.771" starttime="20151014 10:37:51.343"></status>
</kw>
<status status="PASS" endtime="20151014 10:37:51.773" starttime="20151014 10:37:51.337"></status>
</kw>
<msg timestamp="20151014 10:37:51.776" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20151014 10:37:51.775" starttime="20151014 10:37:51.267"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20151014 10:37:51.788" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20151014 10:37:51.787" starttime="20151014 10:37:51.778"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20151014 10:37:51.794" level="INFO">Executing command 'sudo service inew-mvno-corein-service-moc-2.1.1 status'.</msg>
<msg timestamp="20151014 10:37:52.149" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151014 10:37:52.154" level="INFO">${output} = I-New MVNO VirginMobile Colombia - Core - Service 2.1.1 is running PID: 485 </msg>
<status status="PASS" endtime="20151014 10:37:52.152" starttime="20151014 10:37:51.790"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:52.163" starttime="20151014 10:37:52.159"></status>
</kw>
<msg timestamp="20151014 10:37:52.166" level="INFO">${status} = PASS</msg>
<msg timestamp="20151014 10:37:52.167" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20151014 10:37:52.165" starttime="20151014 10:37:52.156"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:52.179" starttime="20151014 10:37:52.176"></status>
</kw>
<msg timestamp="20151014 10:37:52.181" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151014 10:37:52.180" starttime="20151014 10:37:52.168"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20151014 10:37:52.187" level="INFO">${version_r} =  2.1.1 is running PID: 485 </msg>
<status status="PASS" endtime="20151014 10:37:52.186" starttime="20151014 10:37:52.183"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20151014 10:37:52.192" level="INFO">${version} =  2.1.1 </msg>
<status status="PASS" endtime="20151014 10:37:52.191" starttime="20151014 10:37:52.188"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:52.196" starttime="20151014 10:37:52.194"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:52.210" starttime="20151014 10:37:52.207"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20151014 10:37:52.215" starttime="20151014 10:37:52.212"></status>
</kw>
<status status="PASS" endtime="20151014 10:37:52.219" starttime="20151014 10:37:52.198"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:52.234" starttime="20151014 10:37:52.231"></status>
</kw>
<msg timestamp="20151014 10:37:52.236" level="INFO">${ver} =  2.1.1 </msg>
<status status="PASS" endtime="20151014 10:37:52.235" starttime="20151014 10:37:52.221"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:52.241" starttime="20151014 10:37:52.238"></status>
</kw>
<msg timestamp="20151014 10:37:52.245" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20151014 10:37:52.246" level="INFO">${in_version} =  2.1.1 </msg>
<status status="PASS" endtime="20151014 10:37:52.243" starttime="20151014 10:37:51.254"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:52.309" starttime="20151014 10:37:52.306"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20151014 10:37:52.408" starttime="20151014 10:37:52.320"></status>
</kw>
<msg timestamp="20151014 10:37:52.412" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20151014 10:37:52.410" starttime="20151014 10:37:52.311"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20151014 10:37:52.427" level="INFO">Logging into '10.105.170.171:22' as 'qa_automation'.</msg>
<msg timestamp="20151014 10:38:04.901" level="INFO">Read output: Last login: Wed Oct 14 08:37:37 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr.tb07 ~]$</msg>
<status status="PASS" endtime="20151014 10:38:04.903" starttime="20151014 10:37:52.424"></status>
</kw>
<status status="PASS" endtime="20151014 10:38:04.904" starttime="20151014 10:37:52.414"></status>
</kw>
<msg timestamp="20151014 10:38:04.907" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20151014 10:38:04.906" starttime="20151014 10:37:52.295"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20151014 10:38:04.912" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20151014 10:38:04.912" starttime="20151014 10:38:04.908"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20151014 10:38:04.914" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20151014 10:38:05.297" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151014 10:38:05.301" level="INFO">${output} = I-New CS MVNO - XDR Writer - Server 5.1.0.16360 is running PID: 8775 </msg>
<status status="PASS" endtime="20151014 10:38:05.299" starttime="20151014 10:38:04.913"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20151014 10:38:05.310" starttime="20151014 10:38:05.306"></status>
</kw>
<msg timestamp="20151014 10:38:05.312" level="INFO">${status} = PASS</msg>
<msg timestamp="20151014 10:38:05.313" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20151014 10:38:05.311" starttime="20151014 10:38:05.302"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20151014 10:38:05.325" starttime="20151014 10:38:05.323"></status>
</kw>
<msg timestamp="20151014 10:38:05.327" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151014 10:38:05.326" starttime="20151014 10:38:05.315"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20151014 10:38:05.333" level="INFO">${version_r} =  5.1.0.16360 is running PID: 8775 </msg>
<status status="PASS" endtime="20151014 10:38:05.332" starttime="20151014 10:38:05.329"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20151014 10:38:05.339" level="INFO">${version} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20151014 10:38:05.338" starttime="20151014 10:38:05.334"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20151014 10:38:05.342" starttime="20151014 10:38:05.340"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:38:05.356" starttime="20151014 10:38:05.353"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20151014 10:38:05.361" starttime="20151014 10:38:05.358"></status>
</kw>
<status status="PASS" endtime="20151014 10:38:05.364" starttime="20151014 10:38:05.345"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:38:05.377" starttime="20151014 10:38:05.373"></status>
</kw>
<msg timestamp="20151014 10:38:05.379" level="INFO">${ver} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20151014 10:38:05.378" starttime="20151014 10:38:05.366"></status>
</kw>
<msg timestamp="20151014 10:38:05.384" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20151014 10:38:05.384" level="INFO">${xdr_version} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20151014 10:38:05.382" starttime="20151014 10:37:52.267"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20151014 10:38:05.444" starttime="20151014 10:38:05.441"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20151014 10:38:05.512" starttime="20151014 10:38:05.455"></status>
</kw>
<msg timestamp="20151014 10:38:05.515" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20151014 10:38:05.514" starttime="20151014 10:38:05.446"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20151014 10:38:05.529" level="INFO">Logging into '10.105.170.125:22' as 'qa_automation'.</msg>
<msg timestamp="20151014 10:38:05.986" level="INFO">Read output: Last login: Wed Oct 14 08:37:38 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb07 ~]$</msg>
<status status="PASS" endtime="20151014 10:38:05.989" starttime="20151014 10:38:05.526"></status>
</kw>
<status status="PASS" endtime="20151014 10:38:05.991" starttime="20151014 10:38:05.517"></status>
</kw>
<msg timestamp="20151014 10:38:05.995" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20151014 10:38:05.994" starttime="20151014 10:38:05.429"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20151014 10:38:06.007" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20151014 10:38:06.006" starttime="20151014 10:38:05.997"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20151014 10:38:06.012" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20151014 10:38:06.184" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151014 10:38:06.186" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.1.14.25039
Negret Rating &amp; Charging Engine 5.1.14.25039 is running (PID:9531, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20151014 10:38:06.185" starttime="20151014 10:38:06.009"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20151014 10:38:06.196" starttime="20151014 10:38:06.191"></status>
</kw>
<msg timestamp="20151014 10:38:06.198" level="INFO">${status} = PASS</msg>
<msg timestamp="20151014 10:38:06.199" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20151014 10:38:06.197" starttime="20151014 10:38:06.188"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20151014 10:38:06.210" starttime="20151014 10:38:06.208"></status>
</kw>
<msg timestamp="20151014 10:38:06.212" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151014 10:38:06.211" starttime="20151014 10:38:06.200"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20151014 10:38:06.218" level="INFO">${version_r} =  5.1.14.25039 is running (PID:9531, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20151014 10:38:06.217" starttime="20151014 10:38:06.214"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20151014 10:38:06.223" level="INFO">${version} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20151014 10:38:06.222" starttime="20151014 10:38:06.219"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20151014 10:38:06.227" starttime="20151014 10:38:06.225"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:38:06.240" starttime="20151014 10:38:06.237"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20151014 10:38:06.247" starttime="20151014 10:38:06.242"></status>
</kw>
<status status="PASS" endtime="20151014 10:38:06.249" starttime="20151014 10:38:06.229"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:38:06.260" starttime="20151014 10:38:06.258"></status>
</kw>
<msg timestamp="20151014 10:38:06.263" level="INFO">${ver} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20151014 10:38:06.262" starttime="20151014 10:38:06.251"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:38:06.266" starttime="20151014 10:38:06.264"></status>
</kw>
<msg timestamp="20151014 10:38:06.271" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20151014 10:38:06.271" level="INFO">${crce_version} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20151014 10:38:06.269" starttime="20151014 10:38:05.401"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151014 10:38:06.276" level="INFO">IN state= OK version= 2.1.1 </msg>
<status status="PASS" endtime="20151014 10:38:06.277" starttime="20151014 10:38:06.273"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151014 10:38:06.282" level="INFO">XDR state= OK version= 5.1.0.16360 </msg>
<status status="PASS" endtime="20151014 10:38:06.283" starttime="20151014 10:38:06.279"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151014 10:38:06.288" level="INFO">CRCE state= OK version= 5.1.14.25039 </msg>
<status status="PASS" endtime="20151014 10:38:06.289" starttime="20151014 10:38:06.285"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20151014 10:38:06.294" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151014 10:38:06.295" starttime="20151014 10:38:06.291"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20151014 10:38:06.299" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151014 10:38:06.300" starttime="20151014 10:38:06.296"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20151014 10:38:06.304" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151014 10:38:06.305" starttime="20151014 10:38:06.301"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:38:06.320" starttime="20151014 10:38:06.314"></status>
</kw>
<msg timestamp="20151014 10:38:06.323" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20151014 10:38:06.322" starttime="20151014 10:38:06.307"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20151014 10:38:06.328" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20151014 10:38:06.329" starttime="20151014 10:38:06.324"></status>
</kw>
<status status="PASS" endtime="20151014 10:38:06.330" starttime="20151014 10:37:51.224"></status>
</kw>
<test id="s1-s4-s1-t1" name="Run MTC Short Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20151014 10:38:06.346" starttime="20151014 10:38:06.343"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20151014 10:38:06.350" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20151014 10:38:06.349" starttime="20151014 10:38:06.347"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20151014 10:38:06.369" level="INFO">msg=crce_host=10.105.170.125</msg>
<status status="PASS" endtime="20151014 10:38:06.370" starttime="20151014 10:38:06.367"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20151014 10:38:06.374" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20151014 10:38:06.375" starttime="20151014 10:38:06.372"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20151014 10:38:06.377" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20151014 10:38:06.377" starttime="20151014 10:38:06.376"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20151014 10:38:06.379" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20151014 10:38:06.379" starttime="20151014 10:38:06.378"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20151014 10:38:06.381" level="INFO">msg=imsiRangeStart=732123710001000</msg>
<status status="PASS" endtime="20151014 10:38:06.382" starttime="20151014 10:38:06.380"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20151014 10:38:06.383" level="INFO">msg=msisdnRangeStart=573190001000</msg>
<status status="PASS" endtime="20151014 10:38:06.384" starttime="20151014 10:38:06.382"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20151014 10:38:06.386" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20151014 10:38:06.386" starttime="20151014 10:38:06.384"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20151014 10:38:06.388" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20151014 10:38:06.388" starttime="20151014 10:38:06.387"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20151014 10:38:06.390" level="INFO">msg=tariffId=101002</msg>
<status status="PASS" endtime="20151014 10:38:06.391" starttime="20151014 10:38:06.389"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20151014 10:38:06.392" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20151014 10:38:06.393" starttime="20151014 10:38:06.391"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20151014 10:38:06.401" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151014 10:38:06.401" starttime="20151014 10:38:06.399"></status>
</kw>
<status status="PASS" endtime="20151014 10:38:06.402" starttime="20151014 10:38:06.398"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20151014 10:38:06.405" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/soapui.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151014 10:38:06.406" starttime="20151014 10:38:06.404"></status>
</kw>
<status status="PASS" endtime="20151014 10:38:06.406" starttime="20151014 10:38:06.403"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20151014 10:38:06.410" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/soapui-errors.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151014 10:38:06.410" starttime="20151014 10:38:06.408"></status>
</kw>
<status status="PASS" endtime="20151014 10:38:06.411" starttime="20151014 10:38:06.407"></status>
</kw>
<status status="PASS" endtime="20151014 10:38:06.411" starttime="20151014 10:38:06.394"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20151014 10:38:06.414" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20151014 10:38:06.415" starttime="20151014 10:38:06.412"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:38:06.417" starttime="20151014 10:38:06.415"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:38:06.419" starttime="20151014 10:38:06.417"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:38:06.421" starttime="20151014 10:38:06.419"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20151014 10:38:06.422" starttime="20151014 10:38:06.421"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20151014 10:38:06.424" starttime="20151014 10:38:06.423"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:38:06.426" starttime="20151014 10:38:06.425"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:38:06.428" starttime="20151014 10:38:06.427"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:38:06.430" starttime="20151014 10:38:06.429"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:38:06.432" starttime="20151014 10:38:06.431"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:38:06.434" starttime="20151014 10:38:06.433"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:38:06.436" starttime="20151014 10:38:06.435"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:38:06.440" starttime="20151014 10:38:06.437"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20151014 10:38:06.443" level="INFO">Running with the following project properties set: [u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=732123710001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=573190001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101002', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20151014 10:38:12.467" level="INFO">10:38:12,463 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151014 10:38:12.469" starttime="20151014 10:38:06.442"></status>
</kw>
<msg timestamp="20151014 10:38:12.475" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20151014 10:38:12.475" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20151014 10:38:12.472" starttime="20151014 10:38:06.440"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20151014 10:38:12.494" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20151014 10:38:12.493" starttime="20151014 10:38:12.490"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20151014 10:38:12.500" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20151014 10:38:12.498" starttime="20151014 10:38:12.496"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20151014 10:38:12.504" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20151014 10:38:12.504" starttime="20151014 10:38:12.501"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20151014 10:38:12.513" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20151014 10:38:12.514" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20151014 10:38:12.515" starttime="20151014 10:38:12.510"></status>
</kw>
<msg timestamp="20151014 10:38:12.517" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20151014 10:38:12.518" level="INFO">${return_log_entry} = 2015-10-14 10:38:12,463 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151014 10:38:12.516" starttime="20151014 10:38:12.506"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:38:12.531" starttime="20151014 10:38:12.528"></status>
</kw>
<msg timestamp="20151014 10:38:12.533" level="INFO">${return_log_entry} = 2015-10-14 10:38:12,463 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151014 10:38:12.532" starttime="20151014 10:38:12.520"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:38:12.544" starttime="20151014 10:38:12.542"></status>
</kw>
<msg timestamp="20151014 10:38:12.546" level="INFO">${return_log_entry} = 2015-10-14 10:38:12,463 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151014 10:38:12.545" starttime="20151014 10:38:12.534"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:38:12.558" starttime="20151014 10:38:12.555"></status>
</kw>
<msg timestamp="20151014 10:38:12.560" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151014 10:38:12.560" starttime="20151014 10:38:12.548"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:38:12.576" starttime="20151014 10:38:12.574"></status>
</kw>
<msg timestamp="20151014 10:38:12.578" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151014 10:38:12.578" starttime="20151014 10:38:12.562"></status>
</kw>
<msg timestamp="20151014 10:38:12.581" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151014 10:38:12.580" starttime="20151014 10:38:12.480"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:38:12.593" starttime="20151014 10:38:12.591"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:38:12.597" starttime="20151014 10:38:12.595"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20151014 10:38:12.601" starttime="20151014 10:38:12.598"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20151014 10:38:12.615" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20151014 10:38:12.616" starttime="20151014 10:38:12.612"></status>
</kw>
<status status="PASS" endtime="20151014 10:38:12.618" starttime="20151014 10:38:12.609"></status>
</kw>
<status status="PASS" endtime="20151014 10:38:12.619" starttime="20151014 10:38:12.602"></status>
</kw>
<status status="PASS" endtime="20151014 10:38:12.620" starttime="20151014 10:38:12.583"></status>
</kw>
<msg timestamp="20151014 10:38:12.624" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20151014 10:38:12.622" starttime="20151014 10:38:06.355"></status>
</kw>
<kw type="kw" name="${calling_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20151014 10:38:12.628" level="INFO">${calling_party_msisdn} = 573190001001</msg>
<status status="PASS" endtime="20151014 10:38:12.628" starttime="20151014 10:38:12.625"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20151014 10:38:12.630" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151014 10:38:12.630" starttime="20151014 10:38:12.629"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151014 10:38:12.632" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20151014 10:38:12.633" starttime="20151014 10:38:12.631"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MTC 1s *******</arg>
</arguments>
<status status="PASS" endtime="20151014 10:38:12.634" starttime="20151014 10:38:12.633"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the short MTC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151014 10:38:12.636" level="INFO">Running the short MTC call...</msg>
<status status="PASS" endtime="20151014 10:38:12.637" starttime="20151014 10:38:12.635"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MTC 1s">
<doc>Runs a standard (i.e. non-roaming) MTC 1s session</doc>
<arguments>
<arg>${calling_party_msisdn}</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MTC CGS">
<doc>Runs a standard (non-roaming) MTC session (meaning a session that needs only mscAddress and mtcAPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>mtc1s</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_imsi}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mtc_req}</arg>
<arg>${queue_mtc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20151014 10:38:12.654" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv</msg>
<status status="PASS" endtime="20151014 10:38:12.653" starttime="20151014 10:38:12.652"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20151014 10:38:12.656" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv</msg>
<status status="PASS" endtime="20151014 10:38:12.656" starttime="20151014 10:38:12.654"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20151014 10:38:12.658" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini</msg>
<status status="PASS" endtime="20151014 10:38:12.658" starttime="20151014 10:38:12.657"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20151014 10:38:12.661" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc1s.cgs</msg>
<status status="PASS" endtime="20151014 10:38:12.660" starttime="20151014 10:38:12.659"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20151014 10:38:12.662" starttime="20151014 10:38:12.661"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cd_imsi};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20151014 10:38:12.665" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151014 10:38:12.666" starttime="20151014 10:38:12.663"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20151014 10:38:12.667" starttime="20151014 10:38:12.666"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mtcAPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20151014 10:38:12.670" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151014 10:38:12.670" starttime="20151014 10:38:12.668"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20151014 10:38:12.673" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151014 10:38:12.674" starttime="20151014 10:38:12.671"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20151014 10:38:12.675" starttime="20151014 10:38:12.674"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20151014 10:38:12.677" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151014 10:38:12.678" starttime="20151014 10:38:12.676"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MTC;${queue_mtc_req};${queue_mtc_res};6;1;1</arg>
</arguments>
<msg timestamp="20151014 10:38:12.681" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151014 10:38:12.682" starttime="20151014 10:38:12.679"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20151014 10:38:12.683" starttime="20151014 10:38:12.682"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20151014 10:38:12.693" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc1s.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20151014 10:38:17.936" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20151014 10:38:17.933" starttime="20151014 10:38:12.684"></status>
</kw>
<msg timestamp="20151014 10:38:17.940" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20151014 10:38:17.938" starttime="20151014 10:38:12.646"></status>
</kw>
<msg timestamp="20151014 10:38:17.944" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20151014 10:38:17.942" starttime="20151014 10:38:12.639"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151014 10:38:17.948" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20151014 10:38:17.950" starttime="20151014 10:38:17.946"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20151014 10:38:17.955" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151014 10:38:17.956" starttime="20151014 10:38:17.952"></status>
</kw>
<doc>Test will make a short MTC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MTC_only</tag>
<tag>TNZ_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20151014 10:38:17.958" starttime="20151014 10:38:06.333"></status>
</test>
<doc>Testing the prepaid MTC call, duration is 1s

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20151014 10:38:17.968" starttime="20151014 10:37:51.018"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20151014 10:38:17.986" starttime="20151014 10:37:50.980"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20151014 10:38:18.013" starttime="20151014 10:36:11.856"></status>
</suite>
<statistics>
<total>
<stat pass="4" fail="0">Critical Tests</stat>
<stat pass="4" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="4" info="" doc="" combined="" fail="0" links="">matko.sanseovic</stat>
<stat pass="4" info="" doc="" combined="" fail="0" links="">MTC_only</stat>
<stat pass="4" info="" doc="" combined="" fail="0" links="">TNZ_supported</stat>
</tag>
<suite>
<stat pass="4" id="s1" fail="0" name="MTC">MTC</stat>
<stat pass="1" id="s1-s1" fail="0" name="MTC PREPAID-Abandon">MTC.MTC PREPAID-Abandon</stat>
<stat pass="1" id="s1-s1-s1" fail="0" name="MTC PREPAID-Abandon-robot-suite">MTC.MTC PREPAID-Abandon.MTC PREPAID-Abandon-robot-suite</stat>
<stat pass="1" id="s1-s2" fail="0" name="MTC PREPAID-Busy">MTC.MTC PREPAID-Busy</stat>
<stat pass="1" id="s1-s2-s1" fail="0" name="MTC PREPAID-Busy-robot-suite">MTC.MTC PREPAID-Busy.MTC PREPAID-Busy-robot-suite</stat>
<stat pass="1" id="s1-s3" fail="0" name="MTC PREPAID-NoAnswer">MTC.MTC PREPAID-NoAnswer</stat>
<stat pass="1" id="s1-s3-s1" fail="0" name="MTC PREPAID-NoAnswer-robot-suite">MTC.MTC PREPAID-NoAnswer.MTC PREPAID-NoAnswer-robot-suite</stat>
<stat pass="1" id="s1-s4" fail="0" name="MTC PREPAID-ShortDuration">MTC.MTC PREPAID-ShortDuration</stat>
<stat pass="1" id="s1-s4-s1" fail="0" name="MTC PREPAID-ShortDuration-robot-suite">MTC.MTC PREPAID-ShortDuration.MTC PREPAID-ShortDuration-robot-suite</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
