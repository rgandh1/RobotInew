<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 2.8.7 (Jython 2.7rc1 on java1.7.0_79)" generated="20150701 14:18:15.012">
<suite source="/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/regression-robot-suite.txt" id="s1" name="Regression-Robot-Suite">
<kw type="setup" name="Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20150701 14:18:16.763" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20150701 14:18:16.767" level="INFO">${date} = Wed Jul  1 14:18:16 CEST 2015</msg>
<status status="PASS" endtime="20150701 14:18:16.766" starttime="20150701 14:18:16.749"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150701 14:18:16.772" level="INFO">Date and time: Wed Jul  1 14:18:16 CEST 2015</msg>
<status status="PASS" endtime="20150701 14:18:16.773" starttime="20150701 14:18:16.769"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150701 14:18:16.778" level="INFO">Target IN machine: 10.105.113.135</msg>
<status status="PASS" endtime="20150701 14:18:16.779" starttime="20150701 14:18:16.775"></status>
</kw>
<kw type="kw" name="${in_version} = Check IN Version">
<doc>Checks the version of the running service</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:17.009" starttime="20150701 14:18:16.793"></status>
</kw>
<kw type="kw" name="${output_login} = SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
</arguments>
<msg timestamp="20150701 14:18:17.024" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20150701 14:18:18.293" level="INFO">Read output: Last login: Wed Jul  1 12:16:06 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$[m</msg>
<msg timestamp="20150701 14:18:18.300" level="INFO">${output_login} = Last login: Wed Jul  1 12:16:06 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$[m </msg>
<status status="PASS" endtime="20150701 14:18:18.296" starttime="20150701 14:18:17.017"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output_login}</arg>
</arguments>
<msg timestamp="20150701 14:18:18.310" level="INFO">Last login: Wed Jul  1 12:16:06 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$[m </msg>
<status status="PASS" endtime="20150701 14:18:18.312" starttime="20150701 14:18:18.304"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service inew-mvno-corein-services status</arg>
</arguments>
<msg timestamp="20150701 14:18:18.320" level="INFO">Executing command 'sudo service inew-mvno-corein-services status'.</msg>
<msg timestamp="20150701 14:18:21.004" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150701 14:18:21.010" level="INFO">${output} =  inew-mvna-corein-router-mfc-3.0.1
I-New MVNA TNZ - Core - Service 3.0.1 2015.03.26-15:26:48 is running PID: 2349 
 inew-mvna-corein-router-moc-3.0.1
I-New MVNA TNZ - Core - Service 3.0.1 2015.03.26-1...</msg>
<status status="PASS" endtime="20150701 14:18:21.007" starttime="20150701 14:18:18.316"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20150701 14:18:21.023" level="INFO">${version_r} =  3.0.1 2015.03.26-15:26:48 is running PID: 11348 </msg>
<status status="PASS" endtime="20150701 14:18:21.021" starttime="20150701 14:18:21.015"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20150701 14:18:21.034" level="INFO">${version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20150701 14:18:21.033" starttime="20150701 14:18:21.027"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150701 14:18:21.045" starttime="20150701 14:18:21.039"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN version: ${version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150701 14:18:21.059" level="INFO">IN version:  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20150701 14:18:21.061" starttime="20150701 14:18:21.053"></status>
</kw>
<msg timestamp="20150701 14:18:21.068" level="INFO">${in_version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20150701 14:18:21.065" starttime="20150701 14:18:16.781"></status>
</kw>
<kw type="kw" name="${xdr_version} = Check XDR Version">
<doc>Checks the version of the running service</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${XDR HOST}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:21.272" starttime="20150701 14:18:21.099"></status>
</kw>
<kw type="kw" name="${output_login} = SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
</arguments>
<msg timestamp="20150701 14:18:21.282" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150701 14:18:22.633" level="INFO">Read output: Last login: Wed Jul  1 12:16:05 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$[m</msg>
<msg timestamp="20150701 14:18:22.639" level="INFO">${output_login} = Last login: Wed Jul  1 12:16:05 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$[m </msg>
<status status="PASS" endtime="20150701 14:18:22.636" starttime="20150701 14:18:21.276"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output_login}</arg>
</arguments>
<msg timestamp="20150701 14:18:22.648" level="INFO">Last login: Wed Jul  1 12:16:05 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$[m </msg>
<status status="PASS" endtime="20150701 14:18:22.650" starttime="20150701 14:18:22.643"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service inew-mvno-xdr status</arg>
</arguments>
<msg timestamp="20150701 14:18:22.657" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20150701 14:18:23.249" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150701 14:18:23.255" level="INFO">${output} = I-New UMS MVNO - XDR - Server 5.3.0.22932 is running PID: 3350 </msg>
<status status="PASS" endtime="20150701 14:18:23.252" starttime="20150701 14:18:22.653"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20150701 14:18:23.267" level="INFO">${version_r} =  5.3.0.22932 is running PID: 3350 </msg>
<status status="PASS" endtime="20150701 14:18:23.266" starttime="20150701 14:18:23.259"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20150701 14:18:23.277" level="INFO">${version} =  5.3.0.22932 </msg>
<status status="PASS" endtime="20150701 14:18:23.276" starttime="20150701 14:18:23.271"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150701 14:18:23.290" starttime="20150701 14:18:23.281"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR version: ${version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150701 14:18:23.298" level="INFO">XDR version:  5.3.0.22932 </msg>
<status status="PASS" endtime="20150701 14:18:23.300" starttime="20150701 14:18:23.293"></status>
</kw>
<msg timestamp="20150701 14:18:23.307" level="INFO">${xdr_version} =  5.3.0.22932 </msg>
<status status="PASS" endtime="20150701 14:18:23.303" starttime="20150701 14:18:21.072"></status>
</kw>
<kw type="kw" name="${crce_version} = Check CRCE Version">
<doc>Checks the version of the running service</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${CRCE HOST}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:23.400" starttime="20150701 14:18:23.334"></status>
</kw>
<kw type="kw" name="${output_login} = SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
</arguments>
<msg timestamp="20150701 14:18:23.415" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20150701 14:18:24.756" level="INFO">Read output: Last login: Wed Jul  1 12:16:06 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$[m</msg>
<msg timestamp="20150701 14:18:24.763" level="INFO">${output_login} = Last login: Wed Jul  1 12:16:06 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$[m </msg>
<status status="PASS" endtime="20150701 14:18:24.759" starttime="20150701 14:18:23.403"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output_login}</arg>
</arguments>
<msg timestamp="20150701 14:18:24.770" level="INFO">Last login: Wed Jul  1 12:16:06 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$[m </msg>
<status status="PASS" endtime="20150701 14:18:24.772" starttime="20150701 14:18:24.766"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service inew-mvno-crce status</arg>
</arguments>
<msg timestamp="20150701 14:18:24.778" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20150701 14:18:24.974" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150701 14:18:24.978" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.3.12.25820
Negret Rating &amp; Charging Engine 5.3.12.25820 is running (PID:1768, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20150701 14:18:24.976" starttime="20150701 14:18:24.775"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20150701 14:18:24.987" level="INFO">${version_r} =  5.3.12.25820 is running (PID:1768, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20150701 14:18:24.986" starttime="20150701 14:18:24.981"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20150701 14:18:24.996" level="INFO">${version} =  5.3.12.25820 </msg>
<status status="PASS" endtime="20150701 14:18:24.995" starttime="20150701 14:18:24.990"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150701 14:18:25.007" starttime="20150701 14:18:25.000"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE version: ${version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150701 14:18:25.015" level="INFO">CRCE version:  5.3.12.25820 </msg>
<status status="PASS" endtime="20150701 14:18:25.017" starttime="20150701 14:18:25.010"></status>
</kw>
<msg timestamp="20150701 14:18:25.023" level="INFO">${crce_version} =  5.3.12.25820 </msg>
<status status="PASS" endtime="20150701 14:18:25.020" starttime="20150701 14:18:23.310"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20150701 14:18:25.034" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20150701 14:18:25.033" starttime="20150701 14:18:25.026"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>1</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20150701 14:18:25.079" level="INFO">msg=crce_host=10.105.113.125</msg>
<status status="PASS" endtime="20150701 14:18:25.081" starttime="20150701 14:18:25.075"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20150701 14:18:25.088" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20150701 14:18:25.090" starttime="20150701 14:18:25.084"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20150701 14:18:25.097" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20150701 14:18:25.098" starttime="20150701 14:18:25.092"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20150701 14:18:25.101" level="INFO">msg=amount=1</msg>
<status status="PASS" endtime="20150701 14:18:25.102" starttime="20150701 14:18:25.099"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20150701 14:18:25.105" level="INFO">msg=imsiRangeStart=530052041010000</msg>
<status status="PASS" endtime="20150701 14:18:25.106" starttime="20150701 14:18:25.103"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20150701 14:18:25.109" level="INFO">msg=msisdnRangeStart=642041010000</msg>
<status status="PASS" endtime="20150701 14:18:25.110" starttime="20150701 14:18:25.107"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20150701 14:18:25.113" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20150701 14:18:25.114" starttime="20150701 14:18:25.111"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20150701 14:18:25.117" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20150701 14:18:25.118" starttime="20150701 14:18:25.115"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20150701 14:18:25.121" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20150701 14:18:25.121" starttime="20150701 14:18:25.119"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20150701 14:18:25.125" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20150701 14:18:25.125" starttime="20150701 14:18:25.123"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20150701 14:18:25.296" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150701 14:18:25.299" starttime="20150701 14:18:25.289"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:25.302" starttime="20150701 14:18:25.281"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20150701 14:18:25.318" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/soapui.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150701 14:18:25.320" starttime="20150701 14:18:25.312"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:25.323" starttime="20150701 14:18:25.306"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20150701 14:18:25.338" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/soapui-errors.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150701 14:18:25.340" starttime="20150701 14:18:25.332"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:25.342" starttime="20150701 14:18:25.326"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:25.345" starttime="20150701 14:18:25.229"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20150701 14:18:25.358" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20150701 14:18:25.360" starttime="20150701 14:18:25.349"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:25.368" starttime="20150701 14:18:25.363"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:25.376" starttime="20150701 14:18:25.371"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:25.384" starttime="20150701 14:18:25.379"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:25.392" starttime="20150701 14:18:25.388"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:25.399" starttime="20150701 14:18:25.395"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:25.406" starttime="20150701 14:18:25.401"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:25.414" starttime="20150701 14:18:25.409"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:25.421" starttime="20150701 14:18:25.416"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:25.429" starttime="20150701 14:18:25.424"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:25.436" starttime="20150701 14:18:25.432"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:25.444" starttime="20150701 14:18:25.439"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:25.451" starttime="20150701 14:18:25.447"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20150701 14:18:25.462" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20150701 14:18:31.881" level="INFO">14:18:25,642 WARN  [SoapUI] Missing folder [/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/ext] for external libraries
14:18:25,642 INFO  [DefaultSoapUICore] Creating new settings at [/root/soapui-settings.xml]
14:18:27,393 INFO  [WsdlProject] Loaded project from [file:/opt/robot/robotworkspace/libs/global-keyword-resources/crce-subscriberadmin/robot_crce_bridge-soapui-project.xml]
14:18:27,414 INFO  [SoapUITestCaseRunner] Setting project property [crceHost] to [10.105.113.125]
14:18:27,414 INFO  [SoapUITestCaseRunner] Setting project property [crcePort] to [8080]
14:18:27,414 INFO  [SoapUITestCaseRunner] Setting project property [crceWebservicesBasePath] to [/inew-mvno-crce-webservices/]
14:18:27,414 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.amount] to [1]
14:18:27,415 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.imsiRangeStart] to [530052041010000]
14:18:27,415 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.msisdnRangeStart] to [642041010000]
14:18:27,415 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.type] to [PREPAID]
14:18:27,415 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.languageid] to [1]
14:18:27,415 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.tariffId] to [101001]
14:18:27,415 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.balance] to [10000000]
14:18:27,416 INFO  [SoapUITestCaseRunner] Running SoapUI tests in project [Robotframework_CRCE-Bridge]
14:18:27,416 INFO  [SoapUITestCaseRunner] Running TestCase [createTestSubscribers]
14:18:27,425 INFO  [SoapUITestCaseRunner] Running SoapUI testcase [createTestSubscribers]
14:18:27,431 INFO  [SoapUITestCaseRunner] running step [init_repeat_counter]
14:18:28,086 INFO  [SoapUITestCaseRunner] running step [01_init_next_subscriber]
14:18:28,206 INFO  [SoapUITestCaseRunner] running step [getSubscriberProfileByImsi]
14:18:28,401 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
14:18:28,401 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
14:18:28,642 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
14:18:28,649 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
14:18:28,834 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
14:18:28,834 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
14:18:28,834 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
14:18:28,835 INFO  [SoapUITestCaseRunner] running step [cancel_on_SOAP_error]
14:18:28,904 INFO  [SoapUITestCaseRunner] running step [transfer_response_values]
14:18:29,182 INFO  [SoapUITestCaseRunner] running step [cancel_on_CRCE_error_OR_skip_delete_on_UnknownSubscriber]
14:18:29,209 INFO  [SoapUITestCaseRunner] running step [deleteSubscriber]
14:18:29,211 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
14:18:29,213 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
14:18:29,213 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
14:18:29,920 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
14:18:29,920 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
14:18:29,928 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
14:18:29,929 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
14:18:29,929 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
14:18:29,929 INFO  [SoapUITestCaseRunner] running step [2nd_cancel_on_SOAP_error]
14:18:30,003 INFO  [SoapUITestCaseRunner] running step [2nd_transfer_response_values]
14:18:30,009 INFO  [SoapUITestCaseRunner] running step [cancel_on_deletion_error]
14:18:30,058 INFO  [SoapUITestCaseRunner] running step [02_createSubscriber]
14:18:30,063 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
14:18:30,065 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
14:18:30,065 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
14:18:30,095 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
14:18:30,095 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
14:18:30,102 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
14:18:30,102 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
14:18:30,102 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
14:18:30,102 INFO  [SoapUITestCaseRunner] running step [3rd_cancel_on_SOAP_error]
14:18:30,171 INFO  [SoapUITestCaseRunner] running step [3rd_transfer_response_values]
14:18:30,182 INFO  [SoapUITestCaseRunner] running step [cancel_on_create_error]
14:18:30,224 INFO  [SoapUITestCaseRunner] running step [activateSubscriber]
14:18:30,226 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
14:18:30,227 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
14:18:30,227 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
14:18:30,745 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
14:18:30,745 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
14:18:30,753 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
14:18:30,753 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
14:18:30,753 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
14:18:30,753 INFO  [SoapUITestCaseRunner] running step [4th_cancel_on_SOAP_error]
14:18:30,822 INFO  [SoapUITestCaseRunner] running step [4th_transfer_response_values]
14:18:30,828 INFO  [SoapUITestCaseRunner] running step [cancel_on_activate_error]
14:18:30,870 INFO  [SoapUITestCaseRunner] running step [getMainAccount]
14:18:30,874 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
14:18:30,876 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
14:18:30,876 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/accounts HTTP/1.1
14:18:31,285 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
14:18:31,286 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
14:18:31,300 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
14:18:31,300 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
14:18:31,301 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
14:18:31,301 INFO  [SoapUITestCaseRunner] running step [5th_cancel_on_SOAP_error]
14:18:31,368 INFO  [SoapUITestCaseRunner] running step [5th_transfer_response_values]
14:18:31,389 INFO  [SoapUITestCaseRunner] running step [cancel_on_getmainaccount_error]
14:18:31,434 INFO  [SoapUITestCaseRunner] running step [setBalance]
14:18:31,437 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
14:18:31,439 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
14:18:31,440 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/account_administration HTTP/1.1
14:18:31,645 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
14:18:31,645 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
14:18:31,658 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
14:18:31,658 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
14:18:31,658 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
14:18:31,658 INFO  [SoapUITestCaseRunner] running step [6th_cancel_on_SOAP_error]
14:18:31,725 INFO  [SoapUITestCaseRunner] running step [6th_transfer_response_values]
14:18:31,735 INFO  [SoapUITestCaseRunner] running step [cancel_on_setbalance_error]
14:18:31,779 INFO  [SoapUITestCaseRunner] running step [repeat_01_amount_times]
14:18:31,841 INFO  [SoapUITestCaseRunner] running step [finish_successful]
14:18:31,877 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK
14:18:31,878 INFO  [SoapUITestCaseRunner] Finished running SoapUI testcase [createTestSubscribers], time taken: 4411ms, status: FINISHED
14:18:31,878 INFO  [SoapUITestCaseRunner] TestCase [createTestSubscribers] finished with status [FINISHED] in 4411ms</msg>
<status status="PASS" endtime="20150701 14:18:31.884" starttime="20150701 14:18:25.459"></status>
</kw>
<msg timestamp="20150701 14:18:31.887" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20150701 14:18:31.888" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20150701 14:18:31.886" starttime="20150701 14:18:25.454"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20150701 14:18:31.908" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20150701 14:18:31.907" starttime="20150701 14:18:31.904"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20150701 14:18:31.912" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20150701 14:18:31.911" starttime="20150701 14:18:31.909"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20150701 14:18:31.916" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20150701 14:18:31.916" starttime="20150701 14:18:31.914"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20150701 14:18:31.924" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20150701 14:18:31.930" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20150701 14:18:31.931" starttime="20150701 14:18:31.921"></status>
</kw>
<msg timestamp="20150701 14:18:31.933" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20150701 14:18:31.933" level="INFO">${return_log_entry} = 2015-07-01 14:18:31,877 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20150701 14:18:31.932" starttime="20150701 14:18:31.918"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:31.949" starttime="20150701 14:18:31.947"></status>
</kw>
<msg timestamp="20150701 14:18:31.951" level="INFO">${return_log_entry} = 2015-07-01 14:18:31,877 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20150701 14:18:31.950" starttime="20150701 14:18:31.935"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:31.961" starttime="20150701 14:18:31.958"></status>
</kw>
<msg timestamp="20150701 14:18:31.963" level="INFO">${return_log_entry} = 2015-07-01 14:18:31,877 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20150701 14:18:31.962" starttime="20150701 14:18:31.953"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:31.973" starttime="20150701 14:18:31.970"></status>
</kw>
<msg timestamp="20150701 14:18:31.975" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20150701 14:18:31.974" starttime="20150701 14:18:31.964"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:31.987" starttime="20150701 14:18:31.985"></status>
</kw>
<msg timestamp="20150701 14:18:31.988" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20150701 14:18:31.988" starttime="20150701 14:18:31.976"></status>
</kw>
<msg timestamp="20150701 14:18:31.990" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20150701 14:18:31.990" starttime="20150701 14:18:31.891"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:32.006" starttime="20150701 14:18:32.004"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:32.009" starttime="20150701 14:18:32.007"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:32.012" starttime="20150701 14:18:32.010"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20150701 14:18:32.027" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20150701 14:18:32.028" starttime="20150701 14:18:32.021"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:32.029" starttime="20150701 14:18:32.019"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:32.030" starttime="20150701 14:18:32.013"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:32.031" starttime="20150701 14:18:31.992"></status>
</kw>
<msg timestamp="20150701 14:18:32.034" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20150701 14:18:32.033" starttime="20150701 14:18:25.041"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20150701 14:18:32.037" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150701 14:18:32.038" starttime="20150701 14:18:32.035"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150701 14:18:32.041" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20150701 14:18:32.042" starttime="20150701 14:18:32.039"></status>
</kw>
<kw type="kw" name="${week} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date +%V</arg>
</arguments>
<msg timestamp="20150701 14:18:32.050" level="INFO">Running command 'date +%V 2&gt;&amp;1'</msg>
<msg timestamp="20150701 14:18:32.054" level="INFO">${week} = 27</msg>
<status status="PASS" endtime="20150701 14:18:32.053" starttime="20150701 14:18:32.043"></status>
</kw>
<kw type="kw" name="${year} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date +%Y</arg>
</arguments>
<msg timestamp="20150701 14:18:32.060" level="INFO">Running command 'date +%Y 2&gt;&amp;1'</msg>
<msg timestamp="20150701 14:18:32.065" level="INFO">${year} = 2015</msg>
<status status="PASS" endtime="20150701 14:18:32.064" starttime="20150701 14:18:32.055"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${YYYYwWW}</arg>
<arg>${year}w${week}</arg>
</arguments>
<msg timestamp="20150701 14:18:32.110" level="INFO">${YYYYwWW} = 2015w27</msg>
<status status="PASS" endtime="20150701 14:18:32.112" starttime="20150701 14:18:32.068"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:32.114" starttime="20150701 14:18:16.738"></status>
</kw>
<test id="s1-t1" name="Run MOC Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Connect with XDR and start the log monitoring</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:32.148" starttime="20150701 14:18:32.144"></status>
</kw>
<kw type="kw" name="${ssh_connection_xdr} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:32.241" starttime="20150701 14:18:32.237"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:32.314" starttime="20150701 14:18:32.255"></status>
</kw>
<msg timestamp="20150701 14:18:32.318" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20150701 14:18:32.317" starttime="20150701 14:18:32.243"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150701 14:18:32.339" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150701 14:18:32.793" level="INFO">Read output: Last login: Wed Jul  1 12:18:21 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150701 14:18:32.794" starttime="20150701 14:18:32.334"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:32.795" starttime="20150701 14:18:32.321"></status>
</kw>
<msg timestamp="20150701 14:18:32.797" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20150701 14:18:32.797" starttime="20150701 14:18:32.211"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:32.811" starttime="20150701 14:18:32.808"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150701 14:18:32.814" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor4.log'.</msg>
<status status="PASS" endtime="20150701 14:18:32.818" starttime="20150701 14:18:32.812"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:32.819" starttime="20150701 14:18:32.799"></status>
</kw>
<msg timestamp="20150701 14:18:32.821" level="INFO">${ssh_connection_xdr} = 4</msg>
<status status="PASS" endtime="20150701 14:18:32.820" starttime="20150701 14:18:32.181"></status>
</kw>
<kw type="kw" name="${ssh_connection_in} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN_MOC_LOG_FILE_PATH}${IN_LOG_FILE_NAME}</arg>
<arg>host=${IN-APP HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:32.861" starttime="20150701 14:18:32.859"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:32.924" starttime="20150701 14:18:32.868"></status>
</kw>
<msg timestamp="20150701 14:18:32.927" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20150701 14:18:32.926" starttime="20150701 14:18:32.862"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150701 14:18:32.947" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20150701 14:18:33.445" level="INFO">Read output: Last login: Wed Jul  1 12:18:17 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$</msg>
<status status="PASS" endtime="20150701 14:18:33.446" starttime="20150701 14:18:32.942"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:33.447" starttime="20150701 14:18:32.930"></status>
</kw>
<msg timestamp="20150701 14:18:33.450" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20150701 14:18:33.449" starttime="20150701 14:18:32.848"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:33.524" starttime="20150701 14:18:33.522"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150701 14:18:33.528" level="INFO">Starting command 'tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log'.</msg>
<status status="PASS" endtime="20150701 14:18:33.532" starttime="20150701 14:18:33.525"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:33.533" starttime="20150701 14:18:33.452"></status>
</kw>
<msg timestamp="20150701 14:18:33.536" level="INFO">${ssh_connection_in} = 5</msg>
<status status="PASS" endtime="20150701 14:18:33.535" starttime="20150701 14:18:32.835"></status>
</kw>
<kw type="kw" name="${ssh_connection_crce} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE_LOG_FILE_PATH}</arg>
<arg>host=${CRCE HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:33.576" starttime="20150701 14:18:33.574"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:33.638" starttime="20150701 14:18:33.583"></status>
</kw>
<msg timestamp="20150701 14:18:33.642" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20150701 14:18:33.641" starttime="20150701 14:18:33.577"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150701 14:18:33.661" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20150701 14:18:34.065" level="INFO">Read output: Last login: Wed Jul  1 12:18:23 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$</msg>
<status status="PASS" endtime="20150701 14:18:34.067" starttime="20150701 14:18:33.657"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:34.068" starttime="20150701 14:18:33.645"></status>
</kw>
<msg timestamp="20150701 14:18:34.071" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20150701 14:18:34.070" starttime="20150701 14:18:33.563"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:34.083" starttime="20150701 14:18:34.081"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150701 14:18:34.086" level="INFO">Starting command 'tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor6.log'.</msg>
<status status="PASS" endtime="20150701 14:18:34.092" starttime="20150701 14:18:34.084"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:34.092" starttime="20150701 14:18:34.073"></status>
</kw>
<msg timestamp="20150701 14:18:34.095" level="INFO">${ssh_connection_crce} = 6</msg>
<status status="PASS" endtime="20150701 14:18:34.094" starttime="20150701 14:18:33.550"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run Auto-MOC *******</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:34.098" starttime="20150701 14:18:34.096"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the MOC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150701 14:18:34.101" level="INFO">Running the MOC call...</msg>
<status status="PASS" endtime="20150701 14:18:34.101" starttime="20150701 14:18:34.099"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MOC 1s">
<doc>Runs a standard MOC 1s session</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MOC CGS">
<doc>Runs a standard MOC session (meaning a session that needs only mscAddress and mocBPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>moc1s</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_moc_req}</arg>
<arg>${queue_moc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20150701 14:18:34.132" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv</msg>
<status status="PASS" endtime="20150701 14:18:34.132" starttime="20150701 14:18:34.130"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20150701 14:18:34.136" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv</msg>
<status status="PASS" endtime="20150701 14:18:34.135" starttime="20150701 14:18:34.133"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20150701 14:18:34.139" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini</msg>
<status status="PASS" endtime="20150701 14:18:34.139" starttime="20150701 14:18:34.137"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20150701 14:18:34.142" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc1s.cgs</msg>
<status status="PASS" endtime="20150701 14:18:34.142" starttime="20150701 14:18:34.140"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:34.148" starttime="20150701 14:18:34.147"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20150701 14:18:34.153" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150701 14:18:34.153" starttime="20150701 14:18:34.149"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:34.156" starttime="20150701 14:18:34.154"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mocBPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20150701 14:18:34.159" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150701 14:18:34.160" starttime="20150701 14:18:34.157"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20150701 14:18:34.164" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150701 14:18:34.165" starttime="20150701 14:18:34.161"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:34.167" starttime="20150701 14:18:34.166"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20150701 14:18:34.171" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150701 14:18:34.172" starttime="20150701 14:18:34.168"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MOC;${queue_moc_req};${queue_moc_res};6;1;1</arg>
</arguments>
<msg timestamp="20150701 14:18:34.177" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150701 14:18:34.177" starttime="20150701 14:18:34.173"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:34.180" starttime="20150701 14:18:34.178"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20150701 14:18:34.189" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc1s.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20150701 14:18:39.502" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150701 14:18:39.499" starttime="20150701 14:18:34.181"></status>
</kw>
<msg timestamp="20150701 14:18:39.507" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150701 14:18:39.505" starttime="20150701 14:18:34.117"></status>
</kw>
<msg timestamp="20150701 14:18:39.513" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150701 14:18:39.511" starttime="20150701 14:18:34.104"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20150701 14:18:44.521" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20150701 14:18:44.524" starttime="20150701 14:18:39.516"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150701 14:18:44.532" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20150701 14:18:44.533" starttime="20150701 14:18:44.528"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection_in}</arg>
<arg>MOC_${TAILED_IN_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:44.582" starttime="20150701 14:18:44.578"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150701 14:18:44.593" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150701 14:18:44.592" starttime="20150701 14:18:44.585"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150701 14:18:44.604" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150701 14:18:44.605" starttime="20150701 14:18:44.596"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:44.629" starttime="20150701 14:18:44.624"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150701 14:18:44.634" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150701 14:18:44.682" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150701 14:18:44.685" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150701 14:18:44.684" starttime="20150701 14:18:44.631"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150701 14:18:44.692" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150701 14:18:44.793" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150701 14:18:44.796" level="INFO">${processes_string} =   845 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log
  861 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log
...</msg>
<status status="PASS" endtime="20150701 14:18:44.795" starttime="20150701 14:18:44.688"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150701 14:18:44.805" level="INFO">@{processes_list} = [   845 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log |   861 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00....</msg>
<status status="PASS" endtime="20150701 14:18:44.803" starttime="20150701 14:18:44.798"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} =   845 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:18:44.816" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:18:44.815" starttime="20150701 14:18:44.811"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:18:44.823" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:18:44.879" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:18:44.880" starttime="20150701 14:18:44.819"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:44.882" starttime="20150701 14:18:44.809"></status>
</kw>
<kw type="foritem" name="${process} =   861 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:18:44.890" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:18:44.889" starttime="20150701 14:18:44.885"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:18:44.896" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:18:44.962" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:18:44.963" starttime="20150701 14:18:44.892"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:44.964" starttime="20150701 14:18:44.883"></status>
</kw>
<kw type="foritem" name="${process} =  1033 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor2.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:18:44.974" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:18:44.973" starttime="20150701 14:18:44.968"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:18:44.980" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:18:45.046" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:18:45.048" starttime="20150701 14:18:44.976"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:45.051" starttime="20150701 14:18:44.966"></status>
</kw>
<kw type="foritem" name="${process} =  1048 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:18:45.061" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:18:45.059" starttime="20150701 14:18:45.055"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:18:45.067" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:18:45.128" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:18:45.130" starttime="20150701 14:18:45.063"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:45.131" starttime="20150701 14:18:45.053"></status>
</kw>
<kw type="foritem" name="${process} =  1303 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-mtc-00.log &gt; tmpfilemonitor2.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:18:45.143" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:18:45.141" starttime="20150701 14:18:45.137"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:18:45.148" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:18:45.211" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:18:45.213" starttime="20150701 14:18:45.145"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:45.215" starttime="20150701 14:18:45.133"></status>
</kw>
<kw type="foritem" name="${process} =  1319 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-mtc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:18:45.224" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:18:45.223" starttime="20150701 14:18:45.218"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:18:45.230" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:18:45.318" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:18:45.320" starttime="20150701 14:18:45.226"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:45.321" starttime="20150701 14:18:45.216"></status>
</kw>
<kw type="foritem" name="${process} =  1611 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-mfc-00.log &gt; tmpfilemonitor2.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:18:45.330" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:18:45.328" starttime="20150701 14:18:45.324"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:18:45.335" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:18:45.403" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:18:45.404" starttime="20150701 14:18:45.332"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:45.406" starttime="20150701 14:18:45.322"></status>
</kw>
<kw type="foritem" name="${process} =  1626 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-mfc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:18:45.414" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:18:45.413" starttime="20150701 14:18:45.409"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:18:45.420" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:18:45.487" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:18:45.490" starttime="20150701 14:18:45.417"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:45.491" starttime="20150701 14:18:45.407"></status>
</kw>
<kw type="foritem" name="${process} =  4986 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:18:45.499" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:18:45.498" starttime="20150701 14:18:45.494"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:18:45.505" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:18:45.569" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:18:45.572" starttime="20150701 14:18:45.502"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:45.573" starttime="20150701 14:18:45.492"></status>
</kw>
<kw type="foritem" name="${process} =  5008 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:18:45.584" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:18:45.582" starttime="20150701 14:18:45.578"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:18:45.590" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:18:45.650" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:18:45.653" starttime="20150701 14:18:45.586"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:45.657" starttime="20150701 14:18:45.576"></status>
</kw>
<kw type="foritem" name="${process} =  5303 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor2.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:18:45.666" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:18:45.665" starttime="20150701 14:18:45.660"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:18:45.672" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:18:45.732" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:18:45.735" starttime="20150701 14:18:45.668"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:45.738" starttime="20150701 14:18:45.658"></status>
</kw>
<kw type="foritem" name="${process} =  5318 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:18:45.747" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:18:45.746" starttime="20150701 14:18:45.741"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:18:45.754" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:18:45.817" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:18:45.821" starttime="20150701 14:18:45.750"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:45.822" starttime="20150701 14:18:45.740"></status>
</kw>
<kw type="foritem" name="${process} =  5804 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-mtc-00.log &gt; tmpfilemonitor2.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:18:45.831" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:18:45.830" starttime="20150701 14:18:45.826"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:18:45.837" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:18:45.899" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:18:45.901" starttime="20150701 14:18:45.834"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:45.902" starttime="20150701 14:18:45.823"></status>
</kw>
<kw type="foritem" name="${process} =  5819 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-mtc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:18:45.910" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:18:45.909" starttime="20150701 14:18:45.905"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:18:45.916" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:18:45.982" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:18:45.983" starttime="20150701 14:18:45.912"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:45.985" starttime="20150701 14:18:45.903"></status>
</kw>
<kw type="foritem" name="${process} =  6171 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-mfc-00.log &gt; tmpfilemonitor2.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:18:45.993" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:18:45.992" starttime="20150701 14:18:45.987"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:18:45.999" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:18:46.064" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:18:46.066" starttime="20150701 14:18:45.995"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:46.068" starttime="20150701 14:18:45.985"></status>
</kw>
<kw type="foritem" name="${process} =  6186 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-mfc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:18:46.077" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:18:46.076" starttime="20150701 14:18:46.072"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:18:46.083" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:18:46.146" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:18:46.151" starttime="20150701 14:18:46.080"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:46.153" starttime="20150701 14:18:46.070"></status>
</kw>
<kw type="foritem" name="${process} =  9423 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-mfc-00.log &gt; tmpfilemonitor5.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:18:46.162" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:18:46.160" starttime="20150701 14:18:46.155"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:18:46.168" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:18:46.226" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:18:46.231" starttime="20150701 14:18:46.164"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:46.232" starttime="20150701 14:18:46.153"></status>
</kw>
<kw type="foritem" name="${process} =  9438 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-mfc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:18:46.243" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:18:46.242" starttime="20150701 14:18:46.237"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:18:46.249" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:18:46.314" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:18:46.317" starttime="20150701 14:18:46.246"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:46.319" starttime="20150701 14:18:46.235"></status>
</kw>
<kw type="foritem" name="${process} = 19503 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:18:46.328" level="INFO">${pid} = 19503</msg>
<status status="PASS" endtime="20150701 14:18:46.326" starttime="20150701 14:18:46.322"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:18:46.334" level="INFO">Executing command 'kill -9 19503'.</msg>
<msg timestamp="20150701 14:18:46.421" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150701 14:18:46.425" starttime="20150701 14:18:46.330"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:46.426" starttime="20150701 14:18:46.320"></status>
</kw>
<kw type="foritem" name="${process} = 19518 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:18:46.436" level="INFO">${pid} = 19518</msg>
<status status="PASS" endtime="20150701 14:18:46.435" starttime="20150701 14:18:46.430"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:18:46.443" level="INFO">Executing command 'kill -9 19518'.</msg>
<msg timestamp="20150701 14:18:46.502" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150701 14:18:46.503" starttime="20150701 14:18:46.439"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:46.505" starttime="20150701 14:18:46.428"></status>
</kw>
<kw type="foritem" name="${process} = 19545 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:18:46.513" level="INFO">${pid} = 19545</msg>
<status status="PASS" endtime="20150701 14:18:46.512" starttime="20150701 14:18:46.508"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:18:46.519" level="INFO">Executing command 'kill -9 19545'.</msg>
<msg timestamp="20150701 14:18:46.582" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:18:46.584" starttime="20150701 14:18:46.515"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:46.586" starttime="20150701 14:18:46.506"></status>
</kw>
<kw type="foritem" name="${process} = 19561 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:18:46.594" level="INFO">${pid} = 19561</msg>
<status status="PASS" endtime="20150701 14:18:46.593" starttime="20150701 14:18:46.589"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:18:46.600" level="INFO">Executing command 'kill -9 19561'.</msg>
<msg timestamp="20150701 14:18:46.661" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:18:46.662" starttime="20150701 14:18:46.596"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:46.664" starttime="20150701 14:18:46.587"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:46.664" starttime="20150701 14:18:44.807"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:46.667" starttime="20150701 14:18:44.608"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150701 14:18:46.673" level="INFO">Starting command 'cat tmpfilemonitor5.log'.</msg>
<status status="PASS" endtime="20150701 14:18:46.704" starttime="20150701 14:18:46.670"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150701 14:18:46.709" level="INFO">Reading output of command 'cat tmpfilemonitor5.log'.</msg>
<msg timestamp="20150701 14:18:46.749" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150701 14:18:46.752" level="INFO">${stdout_string} = [2015-07-01 12:18:35,715][DEBUG][IPROT_TRACING                                     ][][][][][] [-&gt;|][CMD [ConnectorMetaData: CN [iSigInbound1], SID [7], AdditionalInfo [];CorrelationId: 506930], Delay...</msg>
<status status="PASS" endtime="20150701 14:18:46.750" starttime="20150701 14:18:46.707"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150701 14:18:46.758" level="INFO">Executing command 'rm tmpfilemonitor5.log'.</msg>
<msg timestamp="20150701 14:18:46.831" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150701 14:18:46.832" starttime="20150701 14:18:46.754"></status>
</kw>
<msg timestamp="20150701 14:18:46.837" level="INFO">${tailed_text} = [2015-07-01 12:18:35,715][DEBUG][IPROT_TRACING                                     ][][][][][] [-&gt;|][CMD [ConnectorMetaData: CN [iSigInbound1], SID [7], AdditionalInfo [];CorrelationId: 506930], Delay...</msg>
<status status="PASS" endtime="20150701 14:18:46.835" starttime="20150701 14:18:44.560"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20150701 14:18:46.856" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MOC_ssh_tail_log-in.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MOC_ssh_tail_log-in.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150701 14:18:46.857" starttime="20150701 14:18:46.849"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:46.859" starttime="20150701 14:18:46.839"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:46.880" starttime="20150701 14:18:46.876"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150701 14:18:46.885" starttime="20150701 14:18:46.882"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:46.891" starttime="20150701 14:18:46.862"></status>
</kw>
<msg timestamp="20150701 14:18:46.895" level="INFO">${tailed_text} = [2015-07-01 12:18:35,715][DEBUG][IPROT_TRACING                                     ][][][][][] [-&gt;|][CMD [ConnectorMetaData: CN [iSigInbound1], SID [7], AdditionalInfo [];CorrelationId: 506930], Delay...</msg>
<status status="PASS" endtime="20150701 14:18:46.893" starttime="20150701 14:18:44.539"></status>
</kw>
<kw type="kw" name="Check MOC IN log">
<doc>Checks the tailed log file of MOC call created on IN.</doc>
<arguments>
<arg>MOC_${TAILED_IN_LOG_FILE}</arg>
<arg>${rc}</arg>
</arguments>
<kw type="kw" name="${temp} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${log_file}</arg>
</arguments>
<msg timestamp="20150701 14:18:46.918" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MOC_ssh_tail_log-in.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MOC_ssh_tail_log-in.log&lt;/a&gt;'</msg>
<msg timestamp="20150701 14:18:46.921" level="INFO">${temp} = [2015-07-01 12:18:35,715][DEBUG][IPROT_TRACING                                     ][][][][][] [-&gt;|][CMD [ConnectorMetaData: CN [iSigInbound1], SID [7], AdditionalInfo [];CorrelationId: 506930], Delay...</msg>
<status status="PASS" endtime="20150701 14:18:46.920" starttime="20150701 14:18:46.914"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rel_c}</arg>
<arg>0</arg>
<arg>msg=CG session failed - check MOC IN log</arg>
</arguments>
<msg timestamp="20150701 14:18:46.928" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150701 14:18:46.929" starttime="20150701 14:18:46.923"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>TrafficType: Originating</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:46.935" starttime="20150701 14:18:46.931"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>Imsi: ${TESTSUBCRIBERS IMSI RANGE START}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:46.942" starttime="20150701 14:18:46.937"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>UsedTime: 1000</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:46.948" starttime="20150701 14:18:46.944"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Not Contain</arg>
<arg>${temp}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:46.954" starttime="20150701 14:18:46.950"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:46.955" starttime="20150701 14:18:46.898"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN OK...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150701 14:18:46.961" level="INFO">IN OK...</msg>
<status status="PASS" endtime="20150701 14:18:46.962" starttime="20150701 14:18:46.958"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection_xdr}</arg>
<arg>MOC_${TAILED_XDR_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:46.985" starttime="20150701 14:18:46.984"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150701 14:18:46.990" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150701 14:18:46.990" starttime="20150701 14:18:46.986"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150701 14:18:46.995" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150701 14:18:46.996" starttime="20150701 14:18:46.991"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:47.006" starttime="20150701 14:18:47.004"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150701 14:18:47.008" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150701 14:18:47.055" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150701 14:18:47.057" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150701 14:18:47.056" starttime="20150701 14:18:47.007"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150701 14:18:47.059" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150701 14:18:47.166" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150701 14:18:47.169" level="INFO">${processes_string} = 18165 ?        Ss     0:00 bash -c tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor4.log
18180 ?        S      0:00 tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
18200 ?       ...</msg>
<status status="PASS" endtime="20150701 14:18:47.168" starttime="20150701 14:18:47.058"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150701 14:18:47.180" level="INFO">@{processes_list} = [ 18165 ?        Ss     0:00 bash -c tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor4.log | 18180 ?        S      0:00 tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 18200 ? ...</msg>
<status status="PASS" endtime="20150701 14:18:47.178" starttime="20150701 14:18:47.172"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 18165 ?        Ss     0:00 bash -c tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor4.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:18:47.191" level="INFO">${pid} = 18165</msg>
<status status="PASS" endtime="20150701 14:18:47.190" starttime="20150701 14:18:47.185"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:18:47.197" level="INFO">Executing command 'kill -9 18165'.</msg>
<msg timestamp="20150701 14:18:47.261" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150701 14:18:47.262" starttime="20150701 14:18:47.193"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:47.264" starttime="20150701 14:18:47.184"></status>
</kw>
<kw type="foritem" name="${process} = 18180 ?        S      0:00 tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:18:47.272" level="INFO">${pid} = 18180</msg>
<status status="PASS" endtime="20150701 14:18:47.270" starttime="20150701 14:18:47.266"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:18:47.277" level="INFO">Executing command 'kill -9 18180'.</msg>
<msg timestamp="20150701 14:18:47.342" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150701 14:18:47.344" starttime="20150701 14:18:47.274"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:47.345" starttime="20150701 14:18:47.264"></status>
</kw>
<kw type="foritem" name="${process} = 18200 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:18:47.353" level="INFO">${pid} = 18200</msg>
<status status="PASS" endtime="20150701 14:18:47.352" starttime="20150701 14:18:47.348"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:18:47.359" level="INFO">Executing command 'kill -9 18200'.</msg>
<msg timestamp="20150701 14:18:47.423" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:18:47.425" starttime="20150701 14:18:47.355"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:47.426" starttime="20150701 14:18:47.346"></status>
</kw>
<kw type="foritem" name="${process} = 18216 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:18:47.434" level="INFO">${pid} = 18216</msg>
<status status="PASS" endtime="20150701 14:18:47.433" starttime="20150701 14:18:47.429"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:18:47.439" level="INFO">Executing command 'kill -9 18216'.</msg>
<msg timestamp="20150701 14:18:47.491" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:18:47.493" starttime="20150701 14:18:47.436"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:47.494" starttime="20150701 14:18:47.427"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:47.494" starttime="20150701 14:18:47.181"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:47.496" starttime="20150701 14:18:46.997"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150701 14:18:47.502" level="INFO">Starting command 'cat tmpfilemonitor4.log'.</msg>
<status status="PASS" endtime="20150701 14:18:47.535" starttime="20150701 14:18:47.499"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150701 14:18:47.539" level="INFO">Reading output of command 'cat tmpfilemonitor4.log'.</msg>
<msg timestamp="20150701 14:18:47.563" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150701 14:18:47.566" level="INFO">${stdout_string} = [2015-07-01 12:18:39,008][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150701 14:18:47.564" starttime="20150701 14:18:47.537"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150701 14:18:47.571" level="INFO">Executing command 'rm tmpfilemonitor4.log'.</msg>
<msg timestamp="20150701 14:18:47.639" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150701 14:18:47.640" starttime="20150701 14:18:47.568"></status>
</kw>
<msg timestamp="20150701 14:18:47.645" level="INFO">${tailed_text} = [2015-07-01 12:18:39,008][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150701 14:18:47.642" starttime="20150701 14:18:46.977"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20150701 14:18:47.662" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MOC_ssh_tail_log-xdr.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MOC_ssh_tail_log-xdr.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150701 14:18:47.664" starttime="20150701 14:18:47.656"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:47.666" starttime="20150701 14:18:47.647"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:47.686" starttime="20150701 14:18:47.683"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150701 14:18:47.693" starttime="20150701 14:18:47.689"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:47.696" starttime="20150701 14:18:47.668"></status>
</kw>
<msg timestamp="20150701 14:18:47.700" level="INFO">${tailed_text} = [2015-07-01 12:18:39,008][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150701 14:18:47.698" starttime="20150701 14:18:46.967"></status>
</kw>
<kw type="kw" name="Check MOC XDR log">
<doc>Checks the tailed log file of MOC call created on XDR.</doc>
<arguments>
<arg>MOC_${TAILED_XDR_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${temp} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${log_file}</arg>
</arguments>
<msg timestamp="20150701 14:18:47.720" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MOC_ssh_tail_log-xdr.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MOC_ssh_tail_log-xdr.log&lt;/a&gt;'</msg>
<msg timestamp="20150701 14:18:47.723" level="INFO">${temp} = [2015-07-01 12:18:39,008][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150701 14:18:47.721" starttime="20150701 14:18:47.716"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${temp}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:47.728" starttime="20150701 14:18:47.725"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Not Contain</arg>
<arg>${temp}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:47.733" starttime="20150701 14:18:47.730"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${temp}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:47.738" starttime="20150701 14:18:47.735"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:47.745" starttime="20150701 14:18:47.740"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>CRCE|CDR</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:47.750" starttime="20150701 14:18:47.747"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>(on-net)|Originating|</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:47.756" starttime="20150701 14:18:47.752"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:47.758" starttime="20150701 14:18:47.703"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR OK...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150701 14:18:47.762" level="INFO">XDR OK...</msg>
<status status="PASS" endtime="20150701 14:18:47.765" starttime="20150701 14:18:47.760"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection_crce}</arg>
<arg>MOC_${TAILED_CRCE_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:47.801" starttime="20150701 14:18:47.798"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150701 14:18:47.811" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150701 14:18:47.810" starttime="20150701 14:18:47.803"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150701 14:18:47.821" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150701 14:18:47.822" starttime="20150701 14:18:47.814"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:47.842" starttime="20150701 14:18:47.838"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150701 14:18:47.847" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150701 14:18:47.918" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150701 14:18:47.919" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150701 14:18:47.919" starttime="20150701 14:18:47.844"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150701 14:18:47.922" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150701 14:18:48.015" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150701 14:18:48.019" level="INFO">${processes_string} =  8488 ?        Ss     0:00 bash -c tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor6.log
 8503 ?        S      0:00 tail -0f /var/log/inew/crce/5.3.12/negret-0.log
 8664 ?        Ss   ...</msg>
<status status="PASS" endtime="20150701 14:18:48.017" starttime="20150701 14:18:47.920"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150701 14:18:48.027" level="INFO">@{processes_list} = [  8488 ?        Ss     0:00 bash -c tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor6.log |  8503 ?        S      0:00 tail -0f /var/log/inew/crce/5.3.12/negret-0.log |  8664 ?       ...</msg>
<status status="PASS" endtime="20150701 14:18:48.025" starttime="20150701 14:18:48.021"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} =  8488 ?        Ss     0:00 bash -c tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor6.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:18:48.037" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:18:48.036" starttime="20150701 14:18:48.032"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:18:48.042" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:18:48.093" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:18:48.094" starttime="20150701 14:18:48.039"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:48.096" starttime="20150701 14:18:48.030"></status>
</kw>
<kw type="foritem" name="${process} =  8503 ?        S      0:00 tail -0f /var/log/inew/crce/5.3.12/negret-0.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:18:48.104" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:18:48.103" starttime="20150701 14:18:48.099"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:18:48.109" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:18:48.172" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:18:48.173" starttime="20150701 14:18:48.106"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:48.174" starttime="20150701 14:18:48.096"></status>
</kw>
<kw type="foritem" name="${process} =  8664 ?        Ss     0:00 bash -c tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor3.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:18:48.182" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:18:48.181" starttime="20150701 14:18:48.177"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:18:48.188" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:18:48.250" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:18:48.251" starttime="20150701 14:18:48.184"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:48.253" starttime="20150701 14:18:48.175"></status>
</kw>
<kw type="foritem" name="${process} =  8679 ?        S      0:00 tail -0f /var/log/inew/crce/5.3.12/negret-0.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:18:48.261" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:18:48.259" starttime="20150701 14:18:48.255"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:18:48.266" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:18:48.329" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:18:48.331" starttime="20150701 14:18:48.263"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:48.332" starttime="20150701 14:18:48.253"></status>
</kw>
<kw type="foritem" name="${process} =  8895 ?        Ss     0:00 bash -c tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor6.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:18:48.340" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:18:48.339" starttime="20150701 14:18:48.335"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:18:48.345" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:18:48.408" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:18:48.410" starttime="20150701 14:18:48.342"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:48.411" starttime="20150701 14:18:48.333"></status>
</kw>
<kw type="foritem" name="${process} =  8910 ?        S      0:00 tail -0f /var/log/inew/crce/5.3.12/negret-0.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:18:48.419" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:18:48.417" starttime="20150701 14:18:48.413"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:18:48.424" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:18:48.487" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:18:48.489" starttime="20150701 14:18:48.421"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:48.490" starttime="20150701 14:18:48.412"></status>
</kw>
<kw type="foritem" name="${process} =  9130 ?        Ss     0:00 bash -c tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor9.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:18:48.498" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:18:48.496" starttime="20150701 14:18:48.492"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:18:48.503" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:18:48.566" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:18:48.567" starttime="20150701 14:18:48.500"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:48.569" starttime="20150701 14:18:48.491"></status>
</kw>
<kw type="foritem" name="${process} =  9145 ?        S      0:00 tail -0f /var/log/inew/crce/5.3.12/negret-0.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:18:48.576" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:18:48.575" starttime="20150701 14:18:48.571"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:18:48.582" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:18:48.645" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:18:48.647" starttime="20150701 14:18:48.578"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:48.648" starttime="20150701 14:18:48.569"></status>
</kw>
<kw type="foritem" name="${process} =  9512 ?        Ss     0:00 bash -c tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor6.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:18:48.655" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:18:48.654" starttime="20150701 14:18:48.650"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:18:48.661" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:18:48.724" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:18:48.725" starttime="20150701 14:18:48.657"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:48.727" starttime="20150701 14:18:48.649"></status>
</kw>
<kw type="foritem" name="${process} =  9527 ?        S      0:00 tail -0f /var/log/inew/crce/5.3.12/negret-0.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:18:48.734" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:18:48.733" starttime="20150701 14:18:48.729"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:18:48.740" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:18:48.802" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:18:48.804" starttime="20150701 14:18:48.737"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:48.805" starttime="20150701 14:18:48.727"></status>
</kw>
<kw type="foritem" name="${process} =  9950 ?        Ss     0:00 bash -c tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor6.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:18:48.813" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:18:48.812" starttime="20150701 14:18:48.808"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:18:48.818" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:18:48.881" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:18:48.882" starttime="20150701 14:18:48.815"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:48.884" starttime="20150701 14:18:48.806"></status>
</kw>
<kw type="foritem" name="${process} =  9965 ?        S      0:00 tail -0f /var/log/inew/crce/5.3.12/negret-0.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:18:48.891" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:18:48.890" starttime="20150701 14:18:48.886"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:18:48.897" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:18:48.960" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:18:48.961" starttime="20150701 14:18:48.893"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:48.963" starttime="20150701 14:18:48.884"></status>
</kw>
<kw type="foritem" name="${process} = 16170 ?        Ss     0:00 bash -c tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor6.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:18:48.971" level="INFO">${pid} = 16170</msg>
<status status="PASS" endtime="20150701 14:18:48.969" starttime="20150701 14:18:48.965"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:18:48.976" level="INFO">Executing command 'kill -9 16170'.</msg>
<msg timestamp="20150701 14:18:49.039" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150701 14:18:49.041" starttime="20150701 14:18:48.973"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:49.043" starttime="20150701 14:18:48.963"></status>
</kw>
<kw type="foritem" name="${process} = 16185 ?        S      0:00 tail -0f /var/log/inew/crce/5.3.12/negret-0.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:18:49.052" level="INFO">${pid} = 16185</msg>
<status status="PASS" endtime="20150701 14:18:49.051" starttime="20150701 14:18:49.046"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:18:49.057" level="INFO">Executing command 'kill -9 16185'.</msg>
<msg timestamp="20150701 14:18:49.117" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150701 14:18:49.119" starttime="20150701 14:18:49.054"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:49.120" starttime="20150701 14:18:49.045"></status>
</kw>
<kw type="foritem" name="${process} = 16205 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:18:49.127" level="INFO">${pid} = 16205</msg>
<status status="PASS" endtime="20150701 14:18:49.126" starttime="20150701 14:18:49.122"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:18:49.133" level="INFO">Executing command 'kill -9 16205'.</msg>
<msg timestamp="20150701 14:18:49.196" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:18:49.197" starttime="20150701 14:18:49.130"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:49.198" starttime="20150701 14:18:49.121"></status>
</kw>
<kw type="foritem" name="${process} = 16221 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:18:49.206" level="INFO">${pid} = 16221</msg>
<status status="PASS" endtime="20150701 14:18:49.205" starttime="20150701 14:18:49.201"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:18:49.211" level="INFO">Executing command 'kill -9 16221'.</msg>
<msg timestamp="20150701 14:18:49.289" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:18:49.290" starttime="20150701 14:18:49.208"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:49.291" starttime="20150701 14:18:49.199"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:49.292" starttime="20150701 14:18:48.028"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:49.294" starttime="20150701 14:18:47.825"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150701 14:18:49.304" level="INFO">Starting command 'cat tmpfilemonitor6.log'.</msg>
<status status="PASS" endtime="20150701 14:18:49.331" starttime="20150701 14:18:49.297"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150701 14:18:49.336" level="INFO">Reading output of command 'cat tmpfilemonitor6.log'.</msg>
<msg timestamp="20150701 14:18:49.450" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150701 14:18:49.454" level="INFO">${stdout_string} = [2015-07-01 12:18:35,734][FINEST][630][   SubscriberPeerImpl.getSubscriberProfileByImsi()] Reading subscriber profile by IMSI [imsi=530052041010000]
[2015-07-01 12:18:36,009][FINEST][630][            ...</msg>
<status status="PASS" endtime="20150701 14:18:49.452" starttime="20150701 14:18:49.333"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150701 14:18:49.460" level="INFO">Executing command 'rm tmpfilemonitor6.log'.</msg>
<msg timestamp="20150701 14:18:49.502" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150701 14:18:49.504" starttime="20150701 14:18:49.456"></status>
</kw>
<msg timestamp="20150701 14:18:49.509" level="INFO">${tailed_text} = [2015-07-01 12:18:35,734][FINEST][630][   SubscriberPeerImpl.getSubscriberProfileByImsi()] Reading subscriber profile by IMSI [imsi=530052041010000]
[2015-07-01 12:18:36,009][FINEST][630][            ...</msg>
<status status="PASS" endtime="20150701 14:18:49.507" starttime="20150701 14:18:47.784"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20150701 14:18:49.529" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MOC_ssh_tail_log-crce.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MOC_ssh_tail_log-crce.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150701 14:18:49.530" starttime="20150701 14:18:49.521"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:49.532" starttime="20150701 14:18:49.511"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:49.551" starttime="20150701 14:18:49.547"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150701 14:18:49.556" starttime="20150701 14:18:49.553"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:49.560" starttime="20150701 14:18:49.534"></status>
</kw>
<msg timestamp="20150701 14:18:49.564" level="INFO">${tailed_text} = [2015-07-01 12:18:35,734][FINEST][630][   SubscriberPeerImpl.getSubscriberProfileByImsi()] Reading subscriber profile by IMSI [imsi=530052041010000]
[2015-07-01 12:18:36,009][FINEST][630][            ...</msg>
<status status="PASS" endtime="20150701 14:18:49.562" starttime="20150701 14:18:47.769"></status>
</kw>
<kw type="kw" name="Check MOC CRCE log">
<doc>Checks the tailed log file created on CRCE.</doc>
<arguments>
<arg>MOC_${TAILED_CRCE_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${temp} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${log_file}</arg>
</arguments>
<msg timestamp="20150701 14:18:49.587" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MOC_ssh_tail_log-crce.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MOC_ssh_tail_log-crce.log&lt;/a&gt;'</msg>
<msg timestamp="20150701 14:18:49.591" level="INFO">${temp} = [2015-07-01 12:18:35,734][FINEST][630][   SubscriberPeerImpl.getSubscriberProfileByImsi()] Reading subscriber profile by IMSI [imsi=530052041010000]
[2015-07-01 12:18:36,009][FINEST][630][            ...</msg>
<status status="PASS" endtime="20150701 14:18:49.590" starttime="20150701 14:18:49.580"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Not Contain</arg>
<arg>${temp}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:49.596" starttime="20150701 14:18:49.593"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>finalCommit=true, usedTime=1000</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:49.602" starttime="20150701 14:18:49.598"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>Sending ticket to inew-cs.crce.cdr</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:49.608" starttime="20150701 14:18:49.604"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>|20000|20000|</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:49.613" starttime="20150701 14:18:49.609"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:49.615" starttime="20150701 14:18:49.567"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE OK...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150701 14:18:49.620" level="INFO">CRCE OK...</msg>
<status status="PASS" endtime="20150701 14:18:49.622" starttime="20150701 14:18:49.618"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Check XDR DB *******</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:49.626" starttime="20150701 14:18:49.624"></status>
</kw>
<kw type="kw" name="dblib_support-resource.DBLIB Connect to PostgresDB">
<doc>this helper shields testsuite developers from the necessity to know driver and connection string details.</doc>
<arguments>
<arg>${XDR DB HOST}</arg>
<arg>${XDR DB PORT}</arg>
<arg>${XDR DB NAME}</arg>
<arg>${XDR DB USER}</arg>
<arg>${XDR DB PWD}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Connect To Database">
<doc></doc>
<arguments>
<arg>org.postgresql.Driver</arg>
<arg>jdbc:postgresql://${host}:${port}/${dbName}</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:49.731" starttime="20150701 14:18:49.646"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:49.732" starttime="20150701 14:18:49.630"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${db} ${table} and check if entry exists.</doc>
<arguments>
<arg>xdr</arg>
<arg>crce_cdr_${YYYYwWW}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>1000</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${db}' == 'xdr'</arg>
<arg>AnalyseXdrDB</arg>
<arg>${table}</arg>
<arg>${called_party}</arg>
<arg>${call_length}</arg>
</arguments>
<kw type="kw" name="AnalyseXdrDB">
<doc>Look into the crce_cdr_2015w27 and check if entry exists.</doc>
<arguments>
<arg>${table}</arg>
<arg>${called_party}</arg>
<arg>${call_length}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select calledmsisdn, callduration from ${table} where id in (select max(id) from ${table});</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:49.779" starttime="20150701 14:18:49.778"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:49.811" starttime="20150701 14:18:49.780"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:49.813" starttime="20150701 14:18:49.812"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150701 14:18:49.816" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150701 14:18:49.818" level="INFO">${queryResultSetLines} = 642041010000|1000|
</msg>
<status status="PASS" endtime="20150701 14:18:49.817" starttime="20150701 14:18:49.814"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:49.820" starttime="20150701 14:18:49.818"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150701 14:18:49.822" level="INFO">1 lines returned</msg>
<msg timestamp="20150701 14:18:49.823" level="INFO">@{queryResultSet} = [ 642041010000|1000| ]</msg>
<status status="PASS" endtime="20150701 14:18:49.823" starttime="20150701 14:18:49.820"></status>
</kw>
<msg timestamp="20150701 14:18:49.825" level="INFO">@{queryRows} = [ 642041010000|1000| ]</msg>
<status status="PASS" endtime="20150701 14:18:49.824" starttime="20150701 14:18:49.772"></status>
</kw>
<kw type="kw" name="@{fields} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>@{queryRows}[0]</arg>
<arg>|</arg>
</arguments>
<msg timestamp="20150701 14:18:49.828" level="INFO">@{fields} = [ 642041010000 | 1000 |  ]</msg>
<status status="PASS" endtime="20150701 14:18:49.828" starttime="20150701 14:18:49.826"></status>
</kw>
<kw type="kw" name="${b_party} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{fields}[0]</arg>
</arguments>
<msg timestamp="20150701 14:18:49.831" level="INFO">${b_party} = 642041010000</msg>
<status status="PASS" endtime="20150701 14:18:49.830" starttime="20150701 14:18:49.829"></status>
</kw>
<kw type="kw" name="${duration} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{fields}[1]</arg>
</arguments>
<msg timestamp="20150701 14:18:49.834" level="INFO">${duration} = 1000</msg>
<status status="PASS" endtime="20150701 14:18:49.833" starttime="20150701 14:18:49.832"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${b_party}</arg>
<arg>${called_party}</arg>
<arg>msg=XDR DB ${table} values are wrong</arg>
</arguments>
<msg timestamp="20150701 14:18:49.837" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150701 14:18:49.837" starttime="20150701 14:18:49.835"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${duration}</arg>
<arg>${call_length}</arg>
<arg>msg=XDR DB ${table} values are wrong</arg>
</arguments>
<msg timestamp="20150701 14:18:49.840" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150701 14:18:49.841" starttime="20150701 14:18:49.838"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:49.842" starttime="20150701 14:18:49.765"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:49.842" starttime="20150701 14:18:49.760"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:49.843" starttime="20150701 14:18:49.753"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Disconnect From Database">
<doc></doc>
<arguments>
</arguments>
<msg timestamp="20150701 14:18:49.846" level="INFO">SQL Warnings on this connection: null</msg>
<status status="PASS" endtime="20150701 14:18:49.846" starttime="20150701 14:18:49.844"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR DB OK...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150701 14:18:49.848" level="INFO">XDR DB OK...</msg>
<status status="PASS" endtime="20150701 14:18:49.849" starttime="20150701 14:18:49.847"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Checking Subscriber's Account Balance *******</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:49.851" starttime="20150701 14:18:49.850"></status>
</kw>
<kw type="kw" name="Check Subscriber Balance">
<doc>Check the CRCE DB entry for test subscriber's monetary account balance.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${EXPECTED_BALANCE_1S_MOC}</arg>
</arguments>
<kw type="kw" name="dblib_support-resource.DBLIB Connect to PostgresDB">
<doc>this helper shields testsuite developers from the necessity to know driver and connection string details.</doc>
<arguments>
<arg>${CRCE DB HOST}</arg>
<arg>${CRCE DB PORT}</arg>
<arg>${CRCE DB NAME}</arg>
<arg>${CRCE DB USER}</arg>
<arg>${CRCE DB PWD}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Connect To Database">
<doc></doc>
<arguments>
<arg>org.postgresql.Driver</arg>
<arg>jdbc:postgresql://${host}:${port}/${dbName}</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:49.877" starttime="20150701 14:18:49.866"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:49.878" starttime="20150701 14:18:49.859"></status>
</kw>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select balance from acc_subscriber_accounts where category=1 and subscriber_id in (select id from profiler_subscriber_profiles where msisdn='${subscriber}');</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:49.897" starttime="20150701 14:18:49.894"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:50.479" starttime="20150701 14:18:49.899"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:50.486" starttime="20150701 14:18:50.483"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150701 14:18:50.493" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150701 14:18:50.496" level="INFO">${queryResultSetLines} = 9980000|
</msg>
<status status="PASS" endtime="20150701 14:18:50.495" starttime="20150701 14:18:50.489"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:50.500" starttime="20150701 14:18:50.498"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150701 14:18:50.506" level="INFO">1 lines returned</msg>
<msg timestamp="20150701 14:18:50.508" level="INFO">@{queryResultSet} = [ 9980000| ]</msg>
<status status="PASS" endtime="20150701 14:18:50.507" starttime="20150701 14:18:50.502"></status>
</kw>
<msg timestamp="20150701 14:18:50.512" level="INFO">@{queryRows} = [ 9980000| ]</msg>
<status status="PASS" endtime="20150701 14:18:50.510" starttime="20150701 14:18:49.882"></status>
</kw>
<kw type="kw" name="@{fields} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>@{queryRows}[0]</arg>
<arg>|</arg>
</arguments>
<msg timestamp="20150701 14:18:50.519" level="INFO">@{fields} = [ 9980000 |  ]</msg>
<status status="PASS" endtime="20150701 14:18:50.518" starttime="20150701 14:18:50.514"></status>
</kw>
<kw type="kw" name="${balance} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{fields}[0]</arg>
</arguments>
<msg timestamp="20150701 14:18:50.525" level="INFO">${balance} = 9980000</msg>
<status status="PASS" endtime="20150701 14:18:50.524" starttime="20150701 14:18:50.521"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Disconnect From Database">
<doc></doc>
<arguments>
</arguments>
<msg timestamp="20150701 14:18:50.530" level="INFO">SQL Warnings on this connection: null</msg>
<status status="PASS" endtime="20150701 14:18:50.531" starttime="20150701 14:18:50.527"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${balance}</arg>
<arg>${expected_bal}</arg>
<arg>msg=Balance ${balance} NOT OK!</arg>
</arguments>
<msg timestamp="20150701 14:18:50.538" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150701 14:18:50.539" starttime="20150701 14:18:50.533"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Balance= ${balance} OK!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150701 14:18:50.544" level="INFO">Balance= 9980000 OK!</msg>
<status status="PASS" endtime="20150701 14:18:50.546" starttime="20150701 14:18:50.541"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:50.548" starttime="20150701 14:18:49.852"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close All Connections">
<doc>Closes all open connections.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150701 14:18:50.554" starttime="20150701 14:18:50.551"></status>
</kw>
<doc>Test will make a MOC call, duration 1s.
Logs from XDR, IN and CRCE are collected and analysed as well as XDR DB. Before the call subscriber's
balance is set, and after the call balance is checked for correct charging.

Arguments:
none
Returns:
none
Fails:

=================================================================================</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MFC_involved</tag>
<tag>MOC_involved</tag>
<tag>MTC_involved</tag>
<tag>SMS_involved</tag>
<tag>TNZ_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20150701 14:18:50.556" starttime="20150701 14:18:32.120"></status>
</test>
<test id="s1-t2" name="Run Long MOC Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Connect with XDR, IN, CRCE and start the log monitoring</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:50.584" starttime="20150701 14:18:50.581"></status>
</kw>
<kw type="kw" name="${ssh_connection_xdr} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:50.618" starttime="20150701 14:18:50.617"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:50.677" starttime="20150701 14:18:50.624"></status>
</kw>
<msg timestamp="20150701 14:18:50.680" level="INFO">${ssh_connection} = 1</msg>
<status status="PASS" endtime="20150701 14:18:50.679" starttime="20150701 14:18:50.619"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150701 14:18:50.696" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150701 14:18:51.079" level="INFO">Read output: Last login: Wed Jul  1 12:18:32 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150701 14:18:51.081" starttime="20150701 14:18:50.692"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:51.084" starttime="20150701 14:18:50.682"></status>
</kw>
<msg timestamp="20150701 14:18:51.089" level="INFO">${ssh_connection} = 1</msg>
<status status="PASS" endtime="20150701 14:18:51.087" starttime="20150701 14:18:50.610"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:51.102" starttime="20150701 14:18:51.100"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150701 14:18:51.105" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor1.log'.</msg>
<status status="PASS" endtime="20150701 14:18:51.108" starttime="20150701 14:18:51.103"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:51.109" starttime="20150701 14:18:51.093"></status>
</kw>
<msg timestamp="20150701 14:18:51.111" level="INFO">${ssh_connection_xdr} = 1</msg>
<status status="PASS" endtime="20150701 14:18:51.110" starttime="20150701 14:18:50.602"></status>
</kw>
<kw type="kw" name="${ssh_connection_in} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN_MOC_LOG_FILE_PATH}${IN_LOG_FILE_NAME}</arg>
<arg>host=${IN-APP HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:51.139" starttime="20150701 14:18:51.137"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:51.200" starttime="20150701 14:18:51.144"></status>
</kw>
<msg timestamp="20150701 14:18:51.202" level="INFO">${ssh_connection} = 2</msg>
<status status="PASS" endtime="20150701 14:18:51.201" starttime="20150701 14:18:51.140"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150701 14:18:51.214" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20150701 14:18:51.625" level="INFO">Read output: Last login: Wed Jul  1 12:18:33 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$</msg>
<status status="PASS" endtime="20150701 14:18:51.627" starttime="20150701 14:18:51.210"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:51.628" starttime="20150701 14:18:51.203"></status>
</kw>
<msg timestamp="20150701 14:18:51.632" level="INFO">${ssh_connection} = 2</msg>
<status status="PASS" endtime="20150701 14:18:51.631" starttime="20150701 14:18:51.131"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:51.650" starttime="20150701 14:18:51.647"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150701 14:18:51.656" level="INFO">Starting command 'tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor2.log'.</msg>
<status status="PASS" endtime="20150701 14:18:51.660" starttime="20150701 14:18:51.652"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:51.662" starttime="20150701 14:18:51.635"></status>
</kw>
<msg timestamp="20150701 14:18:51.665" level="INFO">${ssh_connection_in} = 2</msg>
<status status="PASS" endtime="20150701 14:18:51.664" starttime="20150701 14:18:51.122"></status>
</kw>
<kw type="kw" name="${ssh_connection_crce} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE_LOG_FILE_PATH}</arg>
<arg>host=${CRCE HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:51.723" starttime="20150701 14:18:51.720"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:51.782" starttime="20150701 14:18:51.728"></status>
</kw>
<msg timestamp="20150701 14:18:51.784" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20150701 14:18:51.783" starttime="20150701 14:18:51.724"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150701 14:18:51.800" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20150701 14:18:52.250" level="INFO">Read output: Last login: Wed Jul  1 12:18:33 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$</msg>
<status status="PASS" endtime="20150701 14:18:52.252" starttime="20150701 14:18:51.796"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:52.253" starttime="20150701 14:18:51.786"></status>
</kw>
<msg timestamp="20150701 14:18:52.255" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20150701 14:18:52.254" starttime="20150701 14:18:51.706"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:52.263" starttime="20150701 14:18:52.262"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150701 14:18:52.266" level="INFO">Starting command 'tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor3.log'.</msg>
<status status="PASS" endtime="20150701 14:18:52.280" starttime="20150701 14:18:52.264"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:52.281" starttime="20150701 14:18:52.257"></status>
</kw>
<msg timestamp="20150701 14:18:52.283" level="INFO">${ssh_connection_crce} = 3</msg>
<status status="PASS" endtime="20150701 14:18:52.282" starttime="20150701 14:18:51.689"></status>
</kw>
<kw type="kw" name="Reset Subscriber Balance">
<doc>Reset the test subscriber's monetary account balance to initial value.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<kw type="kw" name="dblib_support-resource.DBLIB Connect to PostgresDB">
<doc>this helper shields testsuite developers from the necessity to know driver and connection string details.</doc>
<arguments>
<arg>${CRCE DB HOST}</arg>
<arg>${CRCE DB PORT}</arg>
<arg>${CRCE DB NAME}</arg>
<arg>${CRCE DB USER}</arg>
<arg>${CRCE DB PWD}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Connect To Database">
<doc></doc>
<arguments>
<arg>org.postgresql.Driver</arg>
<arg>jdbc:postgresql://${host}:${port}/${dbName}</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:52.302" starttime="20150701 14:18:52.295"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:52.303" starttime="20150701 14:18:52.289"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>update acc_subscriber_accounts set balance=10000000 where category=1 and subscriber_id in (select id from profiler_subscriber_profiles where msisdn='${subscriber}');</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:52.657" starttime="20150701 14:18:52.304"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Disconnect From Database">
<doc></doc>
<arguments>
</arguments>
<msg timestamp="20150701 14:18:52.662" level="INFO">SQL Warnings on this connection: null</msg>
<status status="PASS" endtime="20150701 14:18:52.663" starttime="20150701 14:18:52.659"></status>
</kw>
<status status="PASS" endtime="20150701 14:18:52.665" starttime="20150701 14:18:52.284"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run Auto-MOC *******</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:52.670" starttime="20150701 14:18:52.667"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the Long MOC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150701 14:18:52.674" level="INFO">Running the Long MOC call...</msg>
<status status="PASS" endtime="20150701 14:18:52.676" starttime="20150701 14:18:52.671"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MOC 136s">
<doc>Runs a standard MOC 136s session</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MOC CGS">
<doc>Runs a standard MOC session (meaning a session that needs only mscAddress and mocBPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>moc136s</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_moc_req}</arg>
<arg>${queue_moc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20150701 14:18:52.726" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-subscribers.csv</msg>
<status status="PASS" endtime="20150701 14:18:52.725" starttime="20150701 14:18:52.721"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20150701 14:18:52.732" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-fleXml.csv</msg>
<status status="PASS" endtime="20150701 14:18:52.731" starttime="20150701 14:18:52.728"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20150701 14:18:52.738" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-workspace.ini</msg>
<status status="PASS" endtime="20150701 14:18:52.737" starttime="20150701 14:18:52.734"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20150701 14:18:52.744" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc136s.cgs</msg>
<status status="PASS" endtime="20150701 14:18:52.743" starttime="20150701 14:18:52.740"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:52.748" starttime="20150701 14:18:52.746"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20150701 14:18:52.756" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150701 14:18:52.758" starttime="20150701 14:18:52.750"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:52.762" starttime="20150701 14:18:52.759"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mocBPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20150701 14:18:52.768" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150701 14:18:52.769" starttime="20150701 14:18:52.764"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20150701 14:18:52.777" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150701 14:18:52.778" starttime="20150701 14:18:52.771"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:52.783" starttime="20150701 14:18:52.780"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20150701 14:18:52.789" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150701 14:18:52.790" starttime="20150701 14:18:52.784"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MOC;${queue_moc_req};${queue_moc_res};6;1;1</arg>
</arguments>
<msg timestamp="20150701 14:18:52.799" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150701 14:18:52.800" starttime="20150701 14:18:52.792"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20150701 14:18:52.804" starttime="20150701 14:18:52.802"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20150701 14:18:52.820" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc136s.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20150701 14:21:15.098" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150701 14:21:15.092" starttime="20150701 14:18:52.806"></status>
</kw>
<msg timestamp="20150701 14:21:15.107" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150701 14:21:15.105" starttime="20150701 14:18:52.703"></status>
</kw>
<msg timestamp="20150701 14:21:15.111" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150701 14:21:15.109" starttime="20150701 14:18:52.681"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20150701 14:21:20.118" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20150701 14:21:20.121" starttime="20150701 14:21:15.113"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150701 14:21:20.127" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20150701 14:21:20.129" starttime="20150701 14:21:20.124"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection_in}</arg>
<arg>LongMOC_${TAILED_IN_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:20.160" starttime="20150701 14:21:20.156"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150701 14:21:20.171" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150701 14:21:20.170" starttime="20150701 14:21:20.161"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150701 14:21:20.178" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150701 14:21:20.179" starttime="20150701 14:21:20.172"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:20.195" starttime="20150701 14:21:20.191"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150701 14:21:20.199" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150701 14:21:20.303" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150701 14:21:20.305" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150701 14:21:20.304" starttime="20150701 14:21:20.196"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150701 14:21:20.311" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150701 14:21:20.405" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150701 14:21:20.407" level="INFO">${processes_string} =   845 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log
  861 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log
...</msg>
<status status="PASS" endtime="20150701 14:21:20.406" starttime="20150701 14:21:20.307"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150701 14:21:20.414" level="INFO">@{processes_list} = [   845 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log |   861 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00....</msg>
<status status="PASS" endtime="20150701 14:21:20.413" starttime="20150701 14:21:20.409"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} =   845 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:20.423" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:20.422" starttime="20150701 14:21:20.419"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:20.428" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:20.486" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:20.487" starttime="20150701 14:21:20.425"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:20.488" starttime="20150701 14:21:20.417"></status>
</kw>
<kw type="foritem" name="${process} =   861 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:20.495" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:20.494" starttime="20150701 14:21:20.490"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:20.500" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:20.567" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:20.568" starttime="20150701 14:21:20.497"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:20.570" starttime="20150701 14:21:20.489"></status>
</kw>
<kw type="foritem" name="${process} =  1033 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor2.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:20.578" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:20.577" starttime="20150701 14:21:20.573"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:20.582" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:20.660" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:20.661" starttime="20150701 14:21:20.579"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:20.663" starttime="20150701 14:21:20.571"></status>
</kw>
<kw type="foritem" name="${process} =  1048 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:20.671" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:20.670" starttime="20150701 14:21:20.665"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:20.676" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:20.739" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:20.740" starttime="20150701 14:21:20.673"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:20.741" starttime="20150701 14:21:20.664"></status>
</kw>
<kw type="foritem" name="${process} =  1303 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-mtc-00.log &gt; tmpfilemonitor2.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:20.748" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:20.747" starttime="20150701 14:21:20.743"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:20.752" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:20.817" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:20.818" starttime="20150701 14:21:20.749"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:20.819" starttime="20150701 14:21:20.742"></status>
</kw>
<kw type="foritem" name="${process} =  1319 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-mtc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:20.826" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:20.825" starttime="20150701 14:21:20.822"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:20.831" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:20.896" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:20.898" starttime="20150701 14:21:20.828"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:20.899" starttime="20150701 14:21:20.820"></status>
</kw>
<kw type="foritem" name="${process} =  1611 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-mfc-00.log &gt; tmpfilemonitor2.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:20.906" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:20.905" starttime="20150701 14:21:20.901"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:20.911" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:20.978" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:20.979" starttime="20150701 14:21:20.908"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:20.980" starttime="20150701 14:21:20.900"></status>
</kw>
<kw type="foritem" name="${process} =  1626 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-mfc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:20.987" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:20.986" starttime="20150701 14:21:20.982"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:20.992" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:21.060" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:21.062" starttime="20150701 14:21:20.989"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:21.064" starttime="20150701 14:21:20.981"></status>
</kw>
<kw type="foritem" name="${process} =  4986 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:21.072" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:21.071" starttime="20150701 14:21:21.067"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:21.077" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:21.144" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:21.146" starttime="20150701 14:21:21.074"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:21.147" starttime="20150701 14:21:21.065"></status>
</kw>
<kw type="foritem" name="${process} =  5008 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:21.153" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:21.152" starttime="20150701 14:21:21.149"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:21.158" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:21.225" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:21.226" starttime="20150701 14:21:21.155"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:21.227" starttime="20150701 14:21:21.147"></status>
</kw>
<kw type="foritem" name="${process} =  5303 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor2.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:21.234" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:21.233" starttime="20150701 14:21:21.229"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:21.239" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:21.305" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:21.307" starttime="20150701 14:21:21.236"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:21.308" starttime="20150701 14:21:21.228"></status>
</kw>
<kw type="foritem" name="${process} =  5318 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:21.314" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:21.313" starttime="20150701 14:21:21.310"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:21.319" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:21.387" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:21.388" starttime="20150701 14:21:21.316"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:21.389" starttime="20150701 14:21:21.308"></status>
</kw>
<kw type="foritem" name="${process} =  5804 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-mtc-00.log &gt; tmpfilemonitor2.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:21.396" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:21.395" starttime="20150701 14:21:21.392"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:21.401" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:21.469" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:21.470" starttime="20150701 14:21:21.398"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:21.471" starttime="20150701 14:21:21.390"></status>
</kw>
<kw type="foritem" name="${process} =  5819 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-mtc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:21.478" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:21.477" starttime="20150701 14:21:21.474"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:21.483" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:21.550" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:21.551" starttime="20150701 14:21:21.480"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:21.553" starttime="20150701 14:21:21.472"></status>
</kw>
<kw type="foritem" name="${process} =  6171 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-mfc-00.log &gt; tmpfilemonitor2.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:21.559" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:21.558" starttime="20150701 14:21:21.555"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:21.564" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:21.652" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:21.653" starttime="20150701 14:21:21.561"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:21.654" starttime="20150701 14:21:21.553"></status>
</kw>
<kw type="foritem" name="${process} =  6186 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-mfc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:21.661" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:21.660" starttime="20150701 14:21:21.657"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:21.666" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:21.733" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:21.734" starttime="20150701 14:21:21.663"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:21.735" starttime="20150701 14:21:21.655"></status>
</kw>
<kw type="foritem" name="${process} =  9423 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-mfc-00.log &gt; tmpfilemonitor5.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:21.742" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:21.741" starttime="20150701 14:21:21.737"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:21.747" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:21.813" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:21.814" starttime="20150701 14:21:21.744"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:21.815" starttime="20150701 14:21:21.736"></status>
</kw>
<kw type="foritem" name="${process} =  9438 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-mfc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:21.822" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:21.821" starttime="20150701 14:21:21.817"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:21.827" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:21.895" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:21.896" starttime="20150701 14:21:21.824"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:21.898" starttime="20150701 14:21:21.816"></status>
</kw>
<kw type="foritem" name="${process} = 19958 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor2.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:21.905" level="INFO">${pid} = 19958</msg>
<status status="PASS" endtime="20150701 14:21:21.904" starttime="20150701 14:21:21.900"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:21.909" level="INFO">Executing command 'kill -9 19958'.</msg>
<msg timestamp="20150701 14:21:21.978" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150701 14:21:21.979" starttime="20150701 14:21:21.906"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:21.980" starttime="20150701 14:21:21.898"></status>
</kw>
<kw type="foritem" name="${process} = 19973 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:21.987" level="INFO">${pid} = 19973</msg>
<status status="PASS" endtime="20150701 14:21:21.986" starttime="20150701 14:21:21.982"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:21.992" level="INFO">Executing command 'kill -9 19973'.</msg>
<msg timestamp="20150701 14:21:22.060" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150701 14:21:22.061" starttime="20150701 14:21:21.989"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:22.063" starttime="20150701 14:21:21.981"></status>
</kw>
<kw type="foritem" name="${process} = 20106 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:22.071" level="INFO">${pid} = 20106</msg>
<status status="PASS" endtime="20150701 14:21:22.070" starttime="20150701 14:21:22.066"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:22.076" level="INFO">Executing command 'kill -9 20106'.</msg>
<msg timestamp="20150701 14:21:22.145" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:22.147" starttime="20150701 14:21:22.073"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:22.148" starttime="20150701 14:21:22.065"></status>
</kw>
<kw type="foritem" name="${process} = 20122 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:22.171" level="INFO">${pid} = 20122</msg>
<status status="PASS" endtime="20150701 14:21:22.170" starttime="20150701 14:21:22.150"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:22.175" level="INFO">Executing command 'kill -9 20122'.</msg>
<msg timestamp="20150701 14:21:22.226" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:22.227" starttime="20150701 14:21:22.173"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:22.229" starttime="20150701 14:21:22.149"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:22.229" starttime="20150701 14:21:20.416"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:22.232" starttime="20150701 14:21:20.182"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150701 14:21:22.237" level="INFO">Starting command 'cat tmpfilemonitor2.log'.</msg>
<status status="PASS" endtime="20150701 14:21:22.269" starttime="20150701 14:21:22.234"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150701 14:21:22.273" level="INFO">Reading output of command 'cat tmpfilemonitor2.log'.</msg>
<msg timestamp="20150701 14:21:22.326" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150701 14:21:22.328" level="INFO">${stdout_string} = [2015-07-01 12:18:54,295][DEBUG][IPROT_TRACING                                     ][][][][][] [-&gt;|][CMD [ConnectorMetaData: CN [iSigInbound1], SID [7], AdditionalInfo [];CorrelationId: 506940], Delay...</msg>
<status status="PASS" endtime="20150701 14:21:22.327" starttime="20150701 14:21:22.271"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150701 14:21:22.333" level="INFO">Executing command 'rm tmpfilemonitor2.log'.</msg>
<msg timestamp="20150701 14:21:22.395" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150701 14:21:22.396" starttime="20150701 14:21:22.330"></status>
</kw>
<msg timestamp="20150701 14:21:22.400" level="INFO">${tailed_text} = [2015-07-01 12:18:54,295][DEBUG][IPROT_TRACING                                     ][][][][][] [-&gt;|][CMD [ConnectorMetaData: CN [iSigInbound1], SID [7], AdditionalInfo [];CorrelationId: 506940], Delay...</msg>
<status status="PASS" endtime="20150701 14:21:22.398" starttime="20150701 14:21:20.147"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20150701 14:21:22.419" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/LongMOC_ssh_tail_log-in.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/LongMOC_ssh_tail_log-in.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150701 14:21:22.420" starttime="20150701 14:21:22.411"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:22.422" starttime="20150701 14:21:22.402"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:22.437" starttime="20150701 14:21:22.433"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150701 14:21:22.441" starttime="20150701 14:21:22.439"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:22.446" starttime="20150701 14:21:22.424"></status>
</kw>
<msg timestamp="20150701 14:21:22.450" level="INFO">${tailed_text} = [2015-07-01 12:18:54,295][DEBUG][IPROT_TRACING                                     ][][][][][] [-&gt;|][CMD [ConnectorMetaData: CN [iSigInbound1], SID [7], AdditionalInfo [];CorrelationId: 506940], Delay...</msg>
<status status="PASS" endtime="20150701 14:21:22.448" starttime="20150701 14:21:20.135"></status>
</kw>
<kw type="kw" name="Check Long MOC IN log">
<doc>Checks the tailed log file of multi-slice (long) MOC call created on IN.</doc>
<arguments>
<arg>LongMOC_${TAILED_IN_LOG_FILE}</arg>
<arg>${rc}</arg>
</arguments>
<kw type="kw" name="${temp} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${log_file}</arg>
</arguments>
<msg timestamp="20150701 14:21:22.465" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/LongMOC_ssh_tail_log-in.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/LongMOC_ssh_tail_log-in.log&lt;/a&gt;'</msg>
<msg timestamp="20150701 14:21:22.468" level="INFO">${temp} = [2015-07-01 12:18:54,295][DEBUG][IPROT_TRACING                                     ][][][][][] [-&gt;|][CMD [ConnectorMetaData: CN [iSigInbound1], SID [7], AdditionalInfo [];CorrelationId: 506940], Delay...</msg>
<status status="PASS" endtime="20150701 14:21:22.467" starttime="20150701 14:21:22.462"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rel_c}</arg>
<arg>0</arg>
<arg>msg=CG session failed - check MOC IN log</arg>
</arguments>
<msg timestamp="20150701 14:21:22.474" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150701 14:21:22.475" starttime="20150701 14:21:22.470"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>TrafficType: Originating</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:22.480" starttime="20150701 14:21:22.477"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>Imsi: ${TESTSUBCRIBERS IMSI RANGE START}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:22.486" starttime="20150701 14:21:22.482"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>UsedTime: 136000</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:22.491" starttime="20150701 14:21:22.488"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:22.496" starttime="20150701 14:21:22.493"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:22.498" starttime="20150701 14:21:22.453"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN OK...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150701 14:21:22.502" level="INFO">IN OK...</msg>
<status status="PASS" endtime="20150701 14:21:22.503" starttime="20150701 14:21:22.500"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection_xdr}</arg>
<arg>LongMOC_${TAILED_XDR_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:22.531" starttime="20150701 14:21:22.528"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150701 14:21:22.541" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150701 14:21:22.540" starttime="20150701 14:21:22.533"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150701 14:21:22.550" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150701 14:21:22.551" starttime="20150701 14:21:22.543"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:22.566" starttime="20150701 14:21:22.563"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150701 14:21:22.570" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150701 14:21:22.851" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150701 14:21:22.853" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150701 14:21:22.852" starttime="20150701 14:21:22.568"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150701 14:21:22.859" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150701 14:21:22.973" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150701 14:21:22.975" level="INFO">${processes_string} = 18342 ?        Ss     0:00 bash -c tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor1.log
18357 ?        S      0:00 tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
18439 ?       ...</msg>
<status status="PASS" endtime="20150701 14:21:22.974" starttime="20150701 14:21:22.855"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150701 14:21:22.982" level="INFO">@{processes_list} = [ 18342 ?        Ss     0:00 bash -c tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor1.log | 18357 ?        S      0:00 tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 18439 ? ...</msg>
<status status="PASS" endtime="20150701 14:21:22.981" starttime="20150701 14:21:22.977"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 18342 ?        Ss     0:00 bash -c tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor1.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:22.990" level="INFO">${pid} = 18342</msg>
<status status="PASS" endtime="20150701 14:21:22.989" starttime="20150701 14:21:22.986"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:22.995" level="INFO">Executing command 'kill -9 18342'.</msg>
<msg timestamp="20150701 14:21:23.057" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150701 14:21:23.059" starttime="20150701 14:21:22.992"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:23.061" starttime="20150701 14:21:22.984"></status>
</kw>
<kw type="foritem" name="${process} = 18357 ?        S      0:00 tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:23.068" level="INFO">${pid} = 18357</msg>
<status status="PASS" endtime="20150701 14:21:23.067" starttime="20150701 14:21:23.064"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:23.073" level="INFO">Executing command 'kill -9 18357'.</msg>
<msg timestamp="20150701 14:21:23.146" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150701 14:21:23.147" starttime="20150701 14:21:23.070"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:23.149" starttime="20150701 14:21:23.062"></status>
</kw>
<kw type="foritem" name="${process} = 18439 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:23.155" level="INFO">${pid} = 18439</msg>
<status status="PASS" endtime="20150701 14:21:23.154" starttime="20150701 14:21:23.151"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:23.160" level="INFO">Executing command 'kill -9 18439'.</msg>
<msg timestamp="20150701 14:21:23.232" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:23.233" starttime="20150701 14:21:23.157"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:23.234" starttime="20150701 14:21:23.149"></status>
</kw>
<kw type="foritem" name="${process} = 18455 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:23.262" level="INFO">${pid} = 18455</msg>
<status status="PASS" endtime="20150701 14:21:23.260" starttime="20150701 14:21:23.236"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:23.268" level="INFO">Executing command 'kill -9 18455'.</msg>
<msg timestamp="20150701 14:21:23.314" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:23.315" starttime="20150701 14:21:23.265"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:23.316" starttime="20150701 14:21:23.235"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:23.317" starttime="20150701 14:21:22.983"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:23.319" starttime="20150701 14:21:22.553"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150701 14:21:23.325" level="INFO">Starting command 'cat tmpfilemonitor1.log'.</msg>
<status status="PASS" endtime="20150701 14:21:23.357" starttime="20150701 14:21:23.322"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150701 14:21:23.361" level="INFO">Reading output of command 'cat tmpfilemonitor1.log'.</msg>
<msg timestamp="20150701 14:21:23.399" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150701 14:21:23.401" level="INFO">${stdout_string} = [2015-07-01 12:20:21,348][INFO ][Camel (ticket-router) thread #197 - JmsConsumer[inew-cs.provisioning]][StandardTicketRoute                               ][  96] Received ticket [ticket=1.0|321|2015-0...</msg>
<status status="PASS" endtime="20150701 14:21:23.400" starttime="20150701 14:21:23.359"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150701 14:21:23.406" level="INFO">Executing command 'rm tmpfilemonitor1.log'.</msg>
<msg timestamp="20150701 14:21:23.558" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150701 14:21:23.560" starttime="20150701 14:21:23.403"></status>
</kw>
<msg timestamp="20150701 14:21:23.564" level="INFO">${tailed_text} = [2015-07-01 12:20:21,348][INFO ][Camel (ticket-router) thread #197 - JmsConsumer[inew-cs.provisioning]][StandardTicketRoute                               ][  96] Received ticket [ticket=1.0|321|2015-0...</msg>
<status status="PASS" endtime="20150701 14:21:23.562" starttime="20150701 14:21:22.519"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20150701 14:21:23.581" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/LongMOC_ssh_tail_log-xdr.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/LongMOC_ssh_tail_log-xdr.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150701 14:21:23.583" starttime="20150701 14:21:23.576"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:23.584" starttime="20150701 14:21:23.566"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:23.600" starttime="20150701 14:21:23.597"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150701 14:21:23.606" starttime="20150701 14:21:23.602"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:23.607" starttime="20150701 14:21:23.588"></status>
</kw>
<msg timestamp="20150701 14:21:23.611" level="INFO">${tailed_text} = [2015-07-01 12:20:21,348][INFO ][Camel (ticket-router) thread #197 - JmsConsumer[inew-cs.provisioning]][StandardTicketRoute                               ][  96] Received ticket [ticket=1.0|321|2015-0...</msg>
<status status="PASS" endtime="20150701 14:21:23.609" starttime="20150701 14:21:22.507"></status>
</kw>
<kw type="kw" name="Check Long MOC XDR log">
<doc>Checks the tailed log file of MOC call created on XDR.</doc>
<arguments>
<arg>LongMOC_${TAILED_XDR_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${temp} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${log_file}</arg>
</arguments>
<msg timestamp="20150701 14:21:23.626" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/LongMOC_ssh_tail_log-xdr.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/LongMOC_ssh_tail_log-xdr.log&lt;/a&gt;'</msg>
<msg timestamp="20150701 14:21:23.628" level="INFO">${temp} = [2015-07-01 12:20:21,348][INFO ][Camel (ticket-router) thread #197 - JmsConsumer[inew-cs.provisioning]][StandardTicketRoute                               ][  96] Received ticket [ticket=1.0|321|2015-0...</msg>
<status status="PASS" endtime="20150701 14:21:23.627" starttime="20150701 14:21:23.623"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${temp}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:23.632" starttime="20150701 14:21:23.630"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:23.638" starttime="20150701 14:21:23.634"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>CRCE|CDR</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:23.642" starttime="20150701 14:21:23.639"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>136000|180000</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:23.647" starttime="20150701 14:21:23.644"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>(on-net)|Originating</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:23.652" starttime="20150701 14:21:23.649"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:23.654" starttime="20150701 14:21:23.614"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR OK...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150701 14:21:23.658" level="INFO">XDR OK...</msg>
<status status="PASS" endtime="20150701 14:21:23.659" starttime="20150701 14:21:23.655"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection_crce}</arg>
<arg>LongMOC_${TAILED_CRCE_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:23.685" starttime="20150701 14:21:23.682"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150701 14:21:23.694" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150701 14:21:23.693" starttime="20150701 14:21:23.687"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150701 14:21:23.701" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150701 14:21:23.702" starttime="20150701 14:21:23.695"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:23.717" starttime="20150701 14:21:23.714"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150701 14:21:23.721" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150701 14:21:23.819" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150701 14:21:23.820" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150701 14:21:23.820" starttime="20150701 14:21:23.718"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150701 14:21:23.823" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150701 14:21:23.917" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150701 14:21:23.919" level="INFO">${processes_string} =  8488 ?        Ss     0:00 bash -c tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor6.log
 8503 ?        S      0:00 tail -0f /var/log/inew/crce/5.3.12/negret-0.log
 8664 ?        Ss   ...</msg>
<status status="PASS" endtime="20150701 14:21:23.918" starttime="20150701 14:21:23.821"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150701 14:21:23.927" level="INFO">@{processes_list} = [  8488 ?        Ss     0:00 bash -c tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor6.log |  8503 ?        S      0:00 tail -0f /var/log/inew/crce/5.3.12/negret-0.log |  8664 ?       ...</msg>
<status status="PASS" endtime="20150701 14:21:23.926" starttime="20150701 14:21:23.922"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} =  8488 ?        Ss     0:00 bash -c tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor6.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:23.937" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:23.936" starttime="20150701 14:21:23.932"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:23.942" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:23.996" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:23.997" starttime="20150701 14:21:23.939"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:23.998" starttime="20150701 14:21:23.930"></status>
</kw>
<kw type="foritem" name="${process} =  8503 ?        S      0:00 tail -0f /var/log/inew/crce/5.3.12/negret-0.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:24.005" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:24.004" starttime="20150701 14:21:24.000"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:24.009" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:24.076" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:24.077" starttime="20150701 14:21:24.007"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:24.078" starttime="20150701 14:21:23.999"></status>
</kw>
<kw type="foritem" name="${process} =  8664 ?        Ss     0:00 bash -c tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor3.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:24.087" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:24.085" starttime="20150701 14:21:24.082"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:24.091" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:24.154" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:24.156" starttime="20150701 14:21:24.088"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:24.157" starttime="20150701 14:21:24.080"></status>
</kw>
<kw type="foritem" name="${process} =  8679 ?        S      0:00 tail -0f /var/log/inew/crce/5.3.12/negret-0.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:24.163" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:24.163" starttime="20150701 14:21:24.159"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:24.168" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:24.234" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:24.235" starttime="20150701 14:21:24.165"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:24.236" starttime="20150701 14:21:24.158"></status>
</kw>
<kw type="foritem" name="${process} =  8895 ?        Ss     0:00 bash -c tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor6.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:24.245" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:24.244" starttime="20150701 14:21:24.240"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:24.249" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:24.313" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:24.314" starttime="20150701 14:21:24.246"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:24.315" starttime="20150701 14:21:24.237"></status>
</kw>
<kw type="foritem" name="${process} =  8910 ?        S      0:00 tail -0f /var/log/inew/crce/5.3.12/negret-0.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:24.322" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:24.321" starttime="20150701 14:21:24.317"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:24.327" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:24.393" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:24.394" starttime="20150701 14:21:24.324"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:24.395" starttime="20150701 14:21:24.316"></status>
</kw>
<kw type="foritem" name="${process} =  9130 ?        Ss     0:00 bash -c tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor9.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:24.401" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:24.401" starttime="20150701 14:21:24.397"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:24.406" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:24.471" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:24.472" starttime="20150701 14:21:24.403"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:24.474" starttime="20150701 14:21:24.396"></status>
</kw>
<kw type="foritem" name="${process} =  9145 ?        S      0:00 tail -0f /var/log/inew/crce/5.3.12/negret-0.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:24.480" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:24.479" starttime="20150701 14:21:24.476"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:24.485" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:24.549" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:24.550" starttime="20150701 14:21:24.482"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:24.551" starttime="20150701 14:21:24.474"></status>
</kw>
<kw type="foritem" name="${process} =  9512 ?        Ss     0:00 bash -c tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor6.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:24.557" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:24.556" starttime="20150701 14:21:24.553"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:24.561" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:24.640" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:24.641" starttime="20150701 14:21:24.559"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:24.642" starttime="20150701 14:21:24.552"></status>
</kw>
<kw type="foritem" name="${process} =  9527 ?        S      0:00 tail -0f /var/log/inew/crce/5.3.12/negret-0.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:24.648" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:24.647" starttime="20150701 14:21:24.644"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:24.652" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:24.720" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:24.721" starttime="20150701 14:21:24.650"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:24.723" starttime="20150701 14:21:24.643"></status>
</kw>
<kw type="foritem" name="${process} =  9950 ?        Ss     0:00 bash -c tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor6.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:24.729" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:24.728" starttime="20150701 14:21:24.725"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:24.733" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:24.799" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:24.801" starttime="20150701 14:21:24.731"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:24.802" starttime="20150701 14:21:24.723"></status>
</kw>
<kw type="foritem" name="${process} =  9965 ?        S      0:00 tail -0f /var/log/inew/crce/5.3.12/negret-0.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:24.807" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:24.807" starttime="20150701 14:21:24.803"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:24.812" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:24.879" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:24.880" starttime="20150701 14:21:24.809"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:24.881" starttime="20150701 14:21:24.802"></status>
</kw>
<kw type="foritem" name="${process} = 16526 ?        Ss     0:00 bash -c tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor3.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:24.887" level="INFO">${pid} = 16526</msg>
<status status="PASS" endtime="20150701 14:21:24.886" starttime="20150701 14:21:24.883"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:24.891" level="INFO">Executing command 'kill -9 16526'.</msg>
<msg timestamp="20150701 14:21:24.958" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150701 14:21:24.959" starttime="20150701 14:21:24.889"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:24.960" starttime="20150701 14:21:24.882"></status>
</kw>
<kw type="foritem" name="${process} = 16541 ?        S      0:00 tail -0f /var/log/inew/crce/5.3.12/negret-0.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:24.966" level="INFO">${pid} = 16541</msg>
<status status="PASS" endtime="20150701 14:21:24.965" starttime="20150701 14:21:24.962"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:24.970" level="INFO">Executing command 'kill -9 16541'.</msg>
<msg timestamp="20150701 14:21:25.037" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150701 14:21:25.038" starttime="20150701 14:21:24.968"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:25.041" starttime="20150701 14:21:24.961"></status>
</kw>
<kw type="foritem" name="${process} = 16588 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:25.047" level="INFO">${pid} = 16588</msg>
<status status="PASS" endtime="20150701 14:21:25.046" starttime="20150701 14:21:25.043"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:25.052" level="INFO">Executing command 'kill -9 16588'.</msg>
<msg timestamp="20150701 14:21:25.116" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:25.117" starttime="20150701 14:21:25.049"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:25.118" starttime="20150701 14:21:25.042"></status>
</kw>
<kw type="foritem" name="${process} = 16604 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:25.124" level="INFO">${pid} = 16604</msg>
<status status="PASS" endtime="20150701 14:21:25.123" starttime="20150701 14:21:25.120"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:25.129" level="INFO">Executing command 'kill -9 16604'.</msg>
<msg timestamp="20150701 14:21:25.194" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:25.196" starttime="20150701 14:21:25.126"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:25.197" starttime="20150701 14:21:25.119"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:25.197" starttime="20150701 14:21:23.929"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:25.199" starttime="20150701 14:21:23.705"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150701 14:21:25.204" level="INFO">Starting command 'cat tmpfilemonitor3.log'.</msg>
<status status="PASS" endtime="20150701 14:21:25.237" starttime="20150701 14:21:25.201"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150701 14:21:25.241" level="INFO">Reading output of command 'cat tmpfilemonitor3.log'.</msg>
<msg timestamp="20150701 14:21:25.380" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150701 14:21:25.386" level="INFO">${stdout_string} = [2015-07-01 12:18:54,312][FINEST][630][   SubscriberPeerImpl.getSubscriberProfileByImsi()] Reading subscriber profile by IMSI [imsi=530052041010000]
[2015-07-01 12:18:54,597][FINEST][630][            ...</msg>
<status status="PASS" endtime="20150701 14:21:25.383" starttime="20150701 14:21:25.239"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150701 14:21:25.391" level="INFO">Executing command 'rm tmpfilemonitor3.log'.</msg>
<msg timestamp="20150701 14:21:25.433" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150701 14:21:25.435" starttime="20150701 14:21:25.388"></status>
</kw>
<msg timestamp="20150701 14:21:25.439" level="INFO">${tailed_text} = [2015-07-01 12:18:54,312][FINEST][630][   SubscriberPeerImpl.getSubscriberProfileByImsi()] Reading subscriber profile by IMSI [imsi=530052041010000]
[2015-07-01 12:18:54,597][FINEST][630][            ...</msg>
<status status="PASS" endtime="20150701 14:21:25.437" starttime="20150701 14:21:23.673"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20150701 14:21:25.458" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/LongMOC_ssh_tail_log-crce.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/LongMOC_ssh_tail_log-crce.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150701 14:21:25.459" starttime="20150701 14:21:25.450"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:25.461" starttime="20150701 14:21:25.441"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:25.475" starttime="20150701 14:21:25.472"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150701 14:21:25.480" starttime="20150701 14:21:25.477"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:25.483" starttime="20150701 14:21:25.463"></status>
</kw>
<msg timestamp="20150701 14:21:25.486" level="INFO">${tailed_text} = [2015-07-01 12:18:54,312][FINEST][630][   SubscriberPeerImpl.getSubscriberProfileByImsi()] Reading subscriber profile by IMSI [imsi=530052041010000]
[2015-07-01 12:18:54,597][FINEST][630][            ...</msg>
<status status="PASS" endtime="20150701 14:21:25.485" starttime="20150701 14:21:23.663"></status>
</kw>
<kw type="kw" name="Check Long MOC CRCE log">
<doc>Checks the tailed log file created on CRCE.</doc>
<arguments>
<arg>LongMOC_${TAILED_CRCE_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${temp} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${log_file}</arg>
</arguments>
<msg timestamp="20150701 14:21:25.501" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/LongMOC_ssh_tail_log-crce.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/LongMOC_ssh_tail_log-crce.log&lt;/a&gt;'</msg>
<msg timestamp="20150701 14:21:25.506" level="INFO">${temp} = [2015-07-01 12:18:54,312][FINEST][630][   SubscriberPeerImpl.getSubscriberProfileByImsi()] Reading subscriber profile by IMSI [imsi=530052041010000]
[2015-07-01 12:18:54,597][FINEST][630][            ...</msg>
<status status="PASS" endtime="20150701 14:21:25.505" starttime="20150701 14:21:25.498"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Not Contain</arg>
<arg>${temp}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:25.510" starttime="20150701 14:21:25.508"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>finalCommit=true, usedTime=136000</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:25.515" starttime="20150701 14:21:25.512"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>Sending ticket to inew-cs.crce.cdr</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:25.521" starttime="20150701 14:21:25.517"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>136000|180000</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:25.526" starttime="20150701 14:21:25.522"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:25.527" starttime="20150701 14:21:25.490"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE OK...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150701 14:21:25.531" level="INFO">CRCE OK...</msg>
<status status="PASS" endtime="20150701 14:21:25.533" starttime="20150701 14:21:25.529"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Check XDR DB *******</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:25.536" starttime="20150701 14:21:25.534"></status>
</kw>
<kw type="kw" name="dblib_support-resource.DBLIB Connect to PostgresDB">
<doc>this helper shields testsuite developers from the necessity to know driver and connection string details.</doc>
<arguments>
<arg>${XDR DB HOST}</arg>
<arg>${XDR DB PORT}</arg>
<arg>${XDR DB NAME}</arg>
<arg>${XDR DB USER}</arg>
<arg>${XDR DB PWD}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Connect To Database">
<doc></doc>
<arguments>
<arg>org.postgresql.Driver</arg>
<arg>jdbc:postgresql://${host}:${port}/${dbName}</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:25.563" starttime="20150701 14:21:25.550"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:25.565" starttime="20150701 14:21:25.540"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>AnalyseDBTable</arg>
<arg>xdr</arg>
<arg>crce_cdr_${YYYYwWW}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>1000</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:25.570" starttime="20150701 14:21:25.567"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Disconnect From Database">
<doc></doc>
<arguments>
</arguments>
<msg timestamp="20150701 14:21:25.574" level="INFO">SQL Warnings on this connection: null</msg>
<status status="PASS" endtime="20150701 14:21:25.575" starttime="20150701 14:21:25.572"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR DB OK...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150701 14:21:25.579" level="INFO">XDR DB OK...</msg>
<status status="PASS" endtime="20150701 14:21:25.581" starttime="20150701 14:21:25.577"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Checking Subscriber's Account Balance *******</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:25.585" starttime="20150701 14:21:25.582"></status>
</kw>
<kw type="kw" name="Check Subscriber Balance">
<doc>Check the CRCE DB entry for test subscriber's monetary account balance.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${EXPECTED_BALANCE_136S_MOC}</arg>
</arguments>
<kw type="kw" name="dblib_support-resource.DBLIB Connect to PostgresDB">
<doc>this helper shields testsuite developers from the necessity to know driver and connection string details.</doc>
<arguments>
<arg>${CRCE DB HOST}</arg>
<arg>${CRCE DB PORT}</arg>
<arg>${CRCE DB NAME}</arg>
<arg>${CRCE DB USER}</arg>
<arg>${CRCE DB PWD}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Connect To Database">
<doc></doc>
<arguments>
<arg>org.postgresql.Driver</arg>
<arg>jdbc:postgresql://${host}:${port}/${dbName}</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:25.623" starttime="20150701 14:21:25.611"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:25.625" starttime="20150701 14:21:25.600"></status>
</kw>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select balance from acc_subscriber_accounts where category=1 and subscriber_id in (select id from profiler_subscriber_profiles where msisdn='${subscriber}');</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:25.639" starttime="20150701 14:21:25.637"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:25.981" starttime="20150701 14:21:25.641"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:25.986" starttime="20150701 14:21:25.983"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150701 14:21:25.991" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150701 14:21:25.993" level="INFO">${queryResultSetLines} = 9940000|
</msg>
<status status="PASS" endtime="20150701 14:21:25.992" starttime="20150701 14:21:25.988"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:25.997" starttime="20150701 14:21:25.995"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150701 14:21:26.001" level="INFO">1 lines returned</msg>
<msg timestamp="20150701 14:21:26.004" level="INFO">@{queryResultSet} = [ 9940000| ]</msg>
<status status="PASS" endtime="20150701 14:21:26.002" starttime="20150701 14:21:25.999"></status>
</kw>
<msg timestamp="20150701 14:21:26.008" level="INFO">@{queryRows} = [ 9940000| ]</msg>
<status status="PASS" endtime="20150701 14:21:26.006" starttime="20150701 14:21:25.628"></status>
</kw>
<kw type="kw" name="@{fields} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>@{queryRows}[0]</arg>
<arg>|</arg>
</arguments>
<msg timestamp="20150701 14:21:26.014" level="INFO">@{fields} = [ 9940000 |  ]</msg>
<status status="PASS" endtime="20150701 14:21:26.013" starttime="20150701 14:21:26.010"></status>
</kw>
<kw type="kw" name="${balance} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{fields}[0]</arg>
</arguments>
<msg timestamp="20150701 14:21:26.019" level="INFO">${balance} = 9940000</msg>
<status status="PASS" endtime="20150701 14:21:26.018" starttime="20150701 14:21:26.015"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Disconnect From Database">
<doc></doc>
<arguments>
</arguments>
<msg timestamp="20150701 14:21:26.023" level="INFO">SQL Warnings on this connection: null</msg>
<status status="PASS" endtime="20150701 14:21:26.024" starttime="20150701 14:21:26.020"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${balance}</arg>
<arg>${expected_bal}</arg>
<arg>msg=Balance ${balance} NOT OK!</arg>
</arguments>
<msg timestamp="20150701 14:21:26.029" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150701 14:21:26.031" starttime="20150701 14:21:26.025"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Balance= ${balance} OK!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150701 14:21:26.035" level="INFO">Balance= 9940000 OK!</msg>
<status status="PASS" endtime="20150701 14:21:26.036" starttime="20150701 14:21:26.032"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:26.038" starttime="20150701 14:21:25.588"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close All Connections">
<doc>Closes all open connections.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150701 14:21:26.044" starttime="20150701 14:21:26.041"></status>
</kw>
<doc>Longer MOC call; duration is 136s. The goal is to have call duration longer than 1 slice (60secs)
Logs from XDR, IN and CRCE are collected and analysed as well as XDR DB
Arguments:
subscriber
Returns:
Fails:

==</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MFC_involved</tag>
<tag>MOC_involved</tag>
<tag>MTC_involved</tag>
<tag>SMS_involved</tag>
<tag>TNZ_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20150701 14:21:26.046" starttime="20150701 14:18:50.564"></status>
</test>
<test id="s1-t3" name="Run MTC Call">
<kw type="kw" name="${ssh_connection_xdr} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:26.104" starttime="20150701 14:21:26.103"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:26.992" starttime="20150701 14:21:26.109"></status>
</kw>
<msg timestamp="20150701 14:21:26.996" level="INFO">${ssh_connection} = 1</msg>
<status status="PASS" endtime="20150701 14:21:26.994" starttime="20150701 14:21:26.105"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150701 14:21:27.014" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150701 14:21:27.959" level="INFO">Read output: Last login: Wed Jul  1 12:18:50 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150701 14:21:27.961" starttime="20150701 14:21:27.011"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:27.961" starttime="20150701 14:21:26.998"></status>
</kw>
<msg timestamp="20150701 14:21:27.964" level="INFO">${ssh_connection} = 1</msg>
<status status="PASS" endtime="20150701 14:21:27.963" starttime="20150701 14:21:26.098"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:27.971" starttime="20150701 14:21:27.970"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150701 14:21:27.974" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor1.log'.</msg>
<status status="PASS" endtime="20150701 14:21:27.978" starttime="20150701 14:21:27.972"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:27.978" starttime="20150701 14:21:27.965"></status>
</kw>
<msg timestamp="20150701 14:21:27.980" level="INFO">${ssh_connection_xdr} = 1</msg>
<status status="PASS" endtime="20150701 14:21:27.979" starttime="20150701 14:21:26.083"></status>
</kw>
<kw type="kw" name="${ssh_connection_in} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN_MTC_LOG_FILE_PATH}${IN_LOG_FILE_NAME}</arg>
<arg>host=${IN-APP HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:28.004" starttime="20150701 14:21:28.003"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:28.052" starttime="20150701 14:21:28.009"></status>
</kw>
<msg timestamp="20150701 14:21:28.053" level="INFO">${ssh_connection} = 2</msg>
<status status="PASS" endtime="20150701 14:21:28.052" starttime="20150701 14:21:28.005"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150701 14:21:28.059" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20150701 14:21:28.518" level="INFO">Read output: Last login: Wed Jul  1 12:18:51 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$</msg>
<status status="PASS" endtime="20150701 14:21:28.519" starttime="20150701 14:21:28.057"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:28.520" starttime="20150701 14:21:28.054"></status>
</kw>
<msg timestamp="20150701 14:21:28.522" level="INFO">${ssh_connection} = 2</msg>
<status status="PASS" endtime="20150701 14:21:28.521" starttime="20150701 14:21:27.997"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:28.529" starttime="20150701 14:21:28.527"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150701 14:21:28.531" level="INFO">Starting command 'tail -0f /var/log/inew/core-in/log-mem/inew-in-mtc-00.log &gt; tmpfilemonitor2.log'.</msg>
<status status="PASS" endtime="20150701 14:21:28.534" starttime="20150701 14:21:28.530"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:28.542" starttime="20150701 14:21:28.523"></status>
</kw>
<msg timestamp="20150701 14:21:28.543" level="INFO">${ssh_connection_in} = 2</msg>
<status status="PASS" endtime="20150701 14:21:28.542" starttime="20150701 14:21:27.991"></status>
</kw>
<kw type="kw" name="${ssh_connection_crce} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE_LOG_FILE_PATH}</arg>
<arg>host=${CRCE HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:28.565" starttime="20150701 14:21:28.564"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:28.643" starttime="20150701 14:21:28.569"></status>
</kw>
<msg timestamp="20150701 14:21:28.644" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20150701 14:21:28.643" starttime="20150701 14:21:28.566"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150701 14:21:28.651" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20150701 14:21:29.058" level="INFO">Read output: Last login: Wed Jul  1 12:18:52 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$</msg>
<status status="PASS" endtime="20150701 14:21:29.061" starttime="20150701 14:21:28.649"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:29.064" starttime="20150701 14:21:28.645"></status>
</kw>
<msg timestamp="20150701 14:21:29.069" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20150701 14:21:29.067" starttime="20150701 14:21:28.559"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:29.087" starttime="20150701 14:21:29.082"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150701 14:21:29.092" level="INFO">Starting command 'tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor3.log'.</msg>
<status status="PASS" endtime="20150701 14:21:29.096" starttime="20150701 14:21:29.089"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:29.098" starttime="20150701 14:21:29.072"></status>
</kw>
<msg timestamp="20150701 14:21:29.099" level="INFO">${ssh_connection_crce} = 3</msg>
<status status="PASS" endtime="20150701 14:21:29.098" starttime="20150701 14:21:28.552"></status>
</kw>
<kw type="kw" name="Reset Subscriber Balance">
<doc>Reset the test subscriber's monetary account balance to initial value.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<kw type="kw" name="dblib_support-resource.DBLIB Connect to PostgresDB">
<doc>this helper shields testsuite developers from the necessity to know driver and connection string details.</doc>
<arguments>
<arg>${CRCE DB HOST}</arg>
<arg>${CRCE DB PORT}</arg>
<arg>${CRCE DB NAME}</arg>
<arg>${CRCE DB USER}</arg>
<arg>${CRCE DB PWD}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Connect To Database">
<doc></doc>
<arguments>
<arg>org.postgresql.Driver</arg>
<arg>jdbc:postgresql://${host}:${port}/${dbName}</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:29.123" starttime="20150701 14:21:29.109"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:29.126" starttime="20150701 14:21:29.105"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>update acc_subscriber_accounts set balance=10000000 where category=1 and subscriber_id in (select id from profiler_subscriber_profiles where msisdn='${subscriber}');</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:29.540" starttime="20150701 14:21:29.127"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Disconnect From Database">
<doc></doc>
<arguments>
</arguments>
<msg timestamp="20150701 14:21:29.546" level="INFO">SQL Warnings on this connection: null</msg>
<status status="PASS" endtime="20150701 14:21:29.546" starttime="20150701 14:21:29.543"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:29.548" starttime="20150701 14:21:29.100"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the MTC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150701 14:21:29.552" level="INFO">Running the MTC call...</msg>
<status status="PASS" endtime="20150701 14:21:29.554" starttime="20150701 14:21:29.550"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run Auto-MTC *******</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:29.558" starttime="20150701 14:21:29.555"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MTC 1s">
<doc>Runs a standard (i.e. non-roaming) MTC 1s session</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MTC REQ QUEUE}</arg>
<arg>${AMQ-SIG MTC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MTC CGS">
<doc>Runs a standard (non-roaming) MTC session (meaning a session that needs only mscAddress and mtcAPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>mtc1s</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_imsi}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mtc_req}</arg>
<arg>${queue_mtc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20150701 14:21:29.599" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv</msg>
<status status="PASS" endtime="20150701 14:21:29.598" starttime="20150701 14:21:29.594"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20150701 14:21:29.604" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv</msg>
<status status="PASS" endtime="20150701 14:21:29.603" starttime="20150701 14:21:29.600"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20150701 14:21:29.610" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini</msg>
<status status="PASS" endtime="20150701 14:21:29.609" starttime="20150701 14:21:29.606"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20150701 14:21:29.615" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc1s.cgs</msg>
<status status="PASS" endtime="20150701 14:21:29.614" starttime="20150701 14:21:29.611"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:29.619" starttime="20150701 14:21:29.617"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cd_imsi};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20150701 14:21:29.626" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150701 14:21:29.627" starttime="20150701 14:21:29.620"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:29.630" starttime="20150701 14:21:29.628"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mtcAPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20150701 14:21:29.636" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150701 14:21:29.637" starttime="20150701 14:21:29.632"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20150701 14:21:29.644" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150701 14:21:29.645" starttime="20150701 14:21:29.639"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:29.649" starttime="20150701 14:21:29.647"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20150701 14:21:29.655" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150701 14:21:29.656" starttime="20150701 14:21:29.651"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MTC;${queue_mtc_req};${queue_mtc_res};6;1;1</arg>
</arguments>
<msg timestamp="20150701 14:21:29.663" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150701 14:21:29.664" starttime="20150701 14:21:29.658"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:29.668" starttime="20150701 14:21:29.666"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20150701 14:21:29.687" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc1s.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20150701 14:21:34.824" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150701 14:21:34.821" starttime="20150701 14:21:29.669"></status>
</kw>
<msg timestamp="20150701 14:21:34.828" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150701 14:21:34.826" starttime="20150701 14:21:29.579"></status>
</kw>
<msg timestamp="20150701 14:21:34.831" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150701 14:21:34.830" starttime="20150701 14:21:29.562"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20150701 14:21:39.836" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20150701 14:21:39.838" starttime="20150701 14:21:34.833"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150701 14:21:39.844" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20150701 14:21:39.845" starttime="20150701 14:21:39.841"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection_in}</arg>
<arg>MTC_${TAILED_IN_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:39.870" starttime="20150701 14:21:39.867"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150701 14:21:39.879" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150701 14:21:39.878" starttime="20150701 14:21:39.871"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150701 14:21:39.886" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150701 14:21:39.887" starttime="20150701 14:21:39.881"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:39.900" starttime="20150701 14:21:39.897"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150701 14:21:39.903" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150701 14:21:39.948" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150701 14:21:39.950" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150701 14:21:39.949" starttime="20150701 14:21:39.902"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150701 14:21:39.955" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150701 14:21:40.054" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150701 14:21:40.057" level="INFO">${processes_string} =   845 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log
  861 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log
...</msg>
<status status="PASS" endtime="20150701 14:21:40.055" starttime="20150701 14:21:39.952"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150701 14:21:40.063" level="INFO">@{processes_list} = [   845 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log |   861 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00....</msg>
<status status="PASS" endtime="20150701 14:21:40.062" starttime="20150701 14:21:40.059"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} =   845 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:40.070" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:40.069" starttime="20150701 14:21:40.066"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:40.074" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:40.133" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:40.134" starttime="20150701 14:21:40.072"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:40.135" starttime="20150701 14:21:40.065"></status>
</kw>
<kw type="foritem" name="${process} =   861 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:40.141" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:40.140" starttime="20150701 14:21:40.137"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:40.145" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:40.215" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:40.216" starttime="20150701 14:21:40.142"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:40.217" starttime="20150701 14:21:40.136"></status>
</kw>
<kw type="foritem" name="${process} =  1033 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor2.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:40.223" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:40.222" starttime="20150701 14:21:40.219"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:40.227" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:40.298" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:40.299" starttime="20150701 14:21:40.225"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:40.300" starttime="20150701 14:21:40.218"></status>
</kw>
<kw type="foritem" name="${process} =  1048 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:40.306" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:40.305" starttime="20150701 14:21:40.302"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:40.310" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:40.379" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:40.381" starttime="20150701 14:21:40.308"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:40.382" starttime="20150701 14:21:40.301"></status>
</kw>
<kw type="foritem" name="${process} =  1303 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-mtc-00.log &gt; tmpfilemonitor2.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:40.387" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:40.386" starttime="20150701 14:21:40.384"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:40.392" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:40.457" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:40.459" starttime="20150701 14:21:40.389"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:40.460" starttime="20150701 14:21:40.382"></status>
</kw>
<kw type="foritem" name="${process} =  1319 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-mtc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:40.465" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:40.465" starttime="20150701 14:21:40.462"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:40.469" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:40.537" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:40.539" starttime="20150701 14:21:40.467"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:40.539" starttime="20150701 14:21:40.460"></status>
</kw>
<kw type="foritem" name="${process} =  1611 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-mfc-00.log &gt; tmpfilemonitor2.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:40.545" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:40.544" starttime="20150701 14:21:40.541"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:40.549" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:40.618" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:40.619" starttime="20150701 14:21:40.547"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:40.620" starttime="20150701 14:21:40.540"></status>
</kw>
<kw type="foritem" name="${process} =  1626 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-mfc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:40.626" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:40.625" starttime="20150701 14:21:40.622"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:40.631" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:40.704" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:40.706" starttime="20150701 14:21:40.629"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:40.706" starttime="20150701 14:21:40.621"></status>
</kw>
<kw type="foritem" name="${process} =  4986 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:40.712" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:40.711" starttime="20150701 14:21:40.708"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:40.716" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:40.787" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:40.788" starttime="20150701 14:21:40.714"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:40.789" starttime="20150701 14:21:40.707"></status>
</kw>
<kw type="foritem" name="${process} =  5008 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:40.794" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:40.793" starttime="20150701 14:21:40.790"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:40.798" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:40.865" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:40.867" starttime="20150701 14:21:40.796"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:40.868" starttime="20150701 14:21:40.789"></status>
</kw>
<kw type="foritem" name="${process} =  5303 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor2.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:40.873" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:40.872" starttime="20150701 14:21:40.869"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:40.877" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:40.944" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:40.945" starttime="20150701 14:21:40.875"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:40.946" starttime="20150701 14:21:40.868"></status>
</kw>
<kw type="foritem" name="${process} =  5318 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:40.951" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:40.950" starttime="20150701 14:21:40.947"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:40.955" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:41.027" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:41.029" starttime="20150701 14:21:40.952"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:41.030" starttime="20150701 14:21:40.946"></status>
</kw>
<kw type="foritem" name="${process} =  5804 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-mtc-00.log &gt; tmpfilemonitor2.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:41.037" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:41.036" starttime="20150701 14:21:41.033"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:41.041" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:41.107" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:41.108" starttime="20150701 14:21:41.039"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:41.109" starttime="20150701 14:21:41.032"></status>
</kw>
<kw type="foritem" name="${process} =  5819 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-mtc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:41.115" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:41.114" starttime="20150701 14:21:41.111"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:41.119" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:41.190" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:41.192" starttime="20150701 14:21:41.116"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:41.193" starttime="20150701 14:21:41.110"></status>
</kw>
<kw type="foritem" name="${process} =  6171 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-mfc-00.log &gt; tmpfilemonitor2.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:41.200" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:41.199" starttime="20150701 14:21:41.196"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:41.204" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:41.269" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:41.271" starttime="20150701 14:21:41.202"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:41.271" starttime="20150701 14:21:41.194"></status>
</kw>
<kw type="foritem" name="${process} =  6186 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-mfc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:41.277" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:41.276" starttime="20150701 14:21:41.273"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:41.281" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:41.350" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:41.351" starttime="20150701 14:21:41.278"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:41.352" starttime="20150701 14:21:41.272"></status>
</kw>
<kw type="foritem" name="${process} =  9423 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-mfc-00.log &gt; tmpfilemonitor5.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:41.358" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:41.357" starttime="20150701 14:21:41.354"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:41.362" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:41.430" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:41.431" starttime="20150701 14:21:41.359"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:41.432" starttime="20150701 14:21:41.353"></status>
</kw>
<kw type="foritem" name="${process} =  9438 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-mfc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:41.437" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:41.436" starttime="20150701 14:21:41.434"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:41.441" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:41.509" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:41.510" starttime="20150701 14:21:41.439"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:41.511" starttime="20150701 14:21:41.432"></status>
</kw>
<kw type="foritem" name="${process} = 20522 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-mtc-00.log &gt; tmpfilemonitor2.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:41.516" level="INFO">${pid} = 20522</msg>
<status status="PASS" endtime="20150701 14:21:41.515" starttime="20150701 14:21:41.513"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:41.520" level="INFO">Executing command 'kill -9 20522'.</msg>
<msg timestamp="20150701 14:21:41.591" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150701 14:21:41.592" starttime="20150701 14:21:41.518"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:41.593" starttime="20150701 14:21:41.512"></status>
</kw>
<kw type="foritem" name="${process} = 20537 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-mtc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:41.598" level="INFO">${pid} = 20537</msg>
<status status="PASS" endtime="20150701 14:21:41.598" starttime="20150701 14:21:41.594"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:41.602" level="INFO">Executing command 'kill -9 20537'.</msg>
<msg timestamp="20150701 14:21:41.694" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150701 14:21:41.695" starttime="20150701 14:21:41.600"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:41.696" starttime="20150701 14:21:41.593"></status>
</kw>
<kw type="foritem" name="${process} = 20568 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:41.701" level="INFO">${pid} = 20568</msg>
<status status="PASS" endtime="20150701 14:21:41.701" starttime="20150701 14:21:41.698"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:41.705" level="INFO">Executing command 'kill -9 20568'.</msg>
<msg timestamp="20150701 14:21:41.778" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:41.779" starttime="20150701 14:21:41.703"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:41.780" starttime="20150701 14:21:41.697"></status>
</kw>
<kw type="foritem" name="${process} = 20584 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:41.785" level="INFO">${pid} = 20584</msg>
<status status="PASS" endtime="20150701 14:21:41.785" starttime="20150701 14:21:41.782"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:41.789" level="INFO">Executing command 'kill -9 20584'.</msg>
<msg timestamp="20150701 14:21:41.863" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:41.864" starttime="20150701 14:21:41.787"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:41.865" starttime="20150701 14:21:41.780"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:41.866" starttime="20150701 14:21:40.064"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:41.867" starttime="20150701 14:21:39.889"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150701 14:21:41.872" level="INFO">Starting command 'cat tmpfilemonitor2.log'.</msg>
<status status="PASS" endtime="20150701 14:21:41.906" starttime="20150701 14:21:41.870"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150701 14:21:41.909" level="INFO">Reading output of command 'cat tmpfilemonitor2.log'.</msg>
<msg timestamp="20150701 14:21:41.949" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150701 14:21:41.951" level="INFO">${stdout_string} = [2015-07-01 12:21:31,032][DEBUG][IPROT_TRACING                                     ][][][][][] [-&gt;|][CMD [ConnectorMetaData: CN [iSigInbound1], SID [7], AdditionalInfo [];CorrelationId: 506950], Delay...</msg>
<status status="PASS" endtime="20150701 14:21:41.950" starttime="20150701 14:21:41.908"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150701 14:21:41.955" level="INFO">Executing command 'rm tmpfilemonitor2.log'.</msg>
<msg timestamp="20150701 14:21:42.031" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150701 14:21:42.032" starttime="20150701 14:21:41.952"></status>
</kw>
<msg timestamp="20150701 14:21:42.037" level="INFO">${tailed_text} = [2015-07-01 12:21:31,032][DEBUG][IPROT_TRACING                                     ][][][][][] [-&gt;|][CMD [ConnectorMetaData: CN [iSigInbound1], SID [7], AdditionalInfo [];CorrelationId: 506950], Delay...</msg>
<status status="PASS" endtime="20150701 14:21:42.035" starttime="20150701 14:21:39.859"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20150701 14:21:42.052" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MTC_ssh_tail_log-in.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MTC_ssh_tail_log-in.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150701 14:21:42.053" starttime="20150701 14:21:42.047"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:42.054" starttime="20150701 14:21:42.038"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:42.067" starttime="20150701 14:21:42.064"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150701 14:21:42.071" starttime="20150701 14:21:42.069"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:42.075" starttime="20150701 14:21:42.056"></status>
</kw>
<msg timestamp="20150701 14:21:42.078" level="INFO">${tailed_text} = [2015-07-01 12:21:31,032][DEBUG][IPROT_TRACING                                     ][][][][][] [-&gt;|][CMD [ConnectorMetaData: CN [iSigInbound1], SID [7], AdditionalInfo [];CorrelationId: 506950], Delay...</msg>
<status status="PASS" endtime="20150701 14:21:42.077" starttime="20150701 14:21:39.849"></status>
</kw>
<kw type="kw" name="Check MTC IN log">
<doc>Checks the tailed IN log file created during MTC test case</doc>
<arguments>
<arg>MTC_${TAILED_IN_LOG_FILE}</arg>
<arg>${rc}</arg>
</arguments>
<kw type="kw" name="${temp} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${log_file}</arg>
</arguments>
<msg timestamp="20150701 14:21:42.092" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MTC_ssh_tail_log-in.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MTC_ssh_tail_log-in.log&lt;/a&gt;'</msg>
<msg timestamp="20150701 14:21:42.094" level="INFO">${temp} = [2015-07-01 12:21:31,032][DEBUG][IPROT_TRACING                                     ][][][][][] [-&gt;|][CMD [ConnectorMetaData: CN [iSigInbound1], SID [7], AdditionalInfo [];CorrelationId: 506950], Delay...</msg>
<status status="PASS" endtime="20150701 14:21:42.093" starttime="20150701 14:21:42.089"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rel_c}</arg>
<arg>0</arg>
<arg>msg=CG session failed - check MTC IN log</arg>
</arguments>
<msg timestamp="20150701 14:21:42.099" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150701 14:21:42.100" starttime="20150701 14:21:42.096"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>Imsi: ${TESTSUBCRIBERS IMSI RANGE START}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:42.105" starttime="20150701 14:21:42.102"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>UsedTime: 36000</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:42.109" starttime="20150701 14:21:42.106"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>TrafficType: Terminating</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:42.113" starttime="20150701 14:21:42.111"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:42.117" starttime="20150701 14:21:42.115"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:42.119" starttime="20150701 14:21:42.081"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN OK...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150701 14:21:42.122" level="INFO">IN OK...</msg>
<status status="PASS" endtime="20150701 14:21:42.124" starttime="20150701 14:21:42.120"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection_xdr}</arg>
<arg>MTC_${TAILED_XDR_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:42.146" starttime="20150701 14:21:42.143"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150701 14:21:42.154" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150701 14:21:42.153" starttime="20150701 14:21:42.147"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150701 14:21:42.161" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150701 14:21:42.162" starttime="20150701 14:21:42.156"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:42.175" starttime="20150701 14:21:42.173"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150701 14:21:42.179" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150701 14:21:42.222" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150701 14:21:42.224" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150701 14:21:42.223" starttime="20150701 14:21:42.177"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150701 14:21:42.229" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150701 14:21:42.319" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150701 14:21:42.321" level="INFO">${processes_string} = 18580 ?        Ss     0:00 bash -c tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor1.log
18595 ?        S      0:00 tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
18617 ?       ...</msg>
<status status="PASS" endtime="20150701 14:21:42.320" starttime="20150701 14:21:42.226"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150701 14:21:42.326" level="INFO">@{processes_list} = [ 18580 ?        Ss     0:00 bash -c tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor1.log | 18595 ?        S      0:00 tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 18617 ? ...</msg>
<status status="PASS" endtime="20150701 14:21:42.325" starttime="20150701 14:21:42.322"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 18580 ?        Ss     0:00 bash -c tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor1.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:42.333" level="INFO">${pid} = 18580</msg>
<status status="PASS" endtime="20150701 14:21:42.332" starttime="20150701 14:21:42.330"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:42.337" level="INFO">Executing command 'kill -9 18580'.</msg>
<msg timestamp="20150701 14:21:42.397" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150701 14:21:42.398" starttime="20150701 14:21:42.335"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:42.399" starttime="20150701 14:21:42.328"></status>
</kw>
<kw type="foritem" name="${process} = 18595 ?        S      0:00 tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:42.405" level="INFO">${pid} = 18595</msg>
<status status="PASS" endtime="20150701 14:21:42.404" starttime="20150701 14:21:42.401"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:42.409" level="INFO">Executing command 'kill -9 18595'.</msg>
<msg timestamp="20150701 14:21:42.478" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150701 14:21:42.479" starttime="20150701 14:21:42.406"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:42.480" starttime="20150701 14:21:42.400"></status>
</kw>
<kw type="foritem" name="${process} = 18617 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:42.486" level="INFO">${pid} = 18617</msg>
<status status="PASS" endtime="20150701 14:21:42.485" starttime="20150701 14:21:42.482"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:42.490" level="INFO">Executing command 'kill -9 18617'.</msg>
<msg timestamp="20150701 14:21:42.560" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:42.561" starttime="20150701 14:21:42.487"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:42.562" starttime="20150701 14:21:42.481"></status>
</kw>
<kw type="foritem" name="${process} = 18633 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:42.567" level="INFO">${pid} = 18633</msg>
<status status="PASS" endtime="20150701 14:21:42.567" starttime="20150701 14:21:42.564"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:42.571" level="INFO">Executing command 'kill -9 18633'.</msg>
<msg timestamp="20150701 14:21:42.641" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:42.642" starttime="20150701 14:21:42.569"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:42.643" starttime="20150701 14:21:42.562"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:42.644" starttime="20150701 14:21:42.327"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:42.644" starttime="20150701 14:21:42.164"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150701 14:21:42.648" level="INFO">Starting command 'cat tmpfilemonitor1.log'.</msg>
<status status="PASS" endtime="20150701 14:21:42.684" starttime="20150701 14:21:42.646"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150701 14:21:42.688" level="INFO">Reading output of command 'cat tmpfilemonitor1.log'.</msg>
<msg timestamp="20150701 14:21:42.722" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150701 14:21:42.724" level="INFO">${stdout_string} = [2015-07-01 12:21:34,082][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150701 14:21:42.723" starttime="20150701 14:21:42.686"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150701 14:21:42.728" level="INFO">Executing command 'rm tmpfilemonitor1.log'.</msg>
<msg timestamp="20150701 14:21:42.802" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150701 14:21:42.803" starttime="20150701 14:21:42.726"></status>
</kw>
<msg timestamp="20150701 14:21:42.806" level="INFO">${tailed_text} = [2015-07-01 12:21:34,082][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150701 14:21:42.805" starttime="20150701 14:21:42.136"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20150701 14:21:42.819" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MTC_ssh_tail_log-xdr.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MTC_ssh_tail_log-xdr.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150701 14:21:42.820" starttime="20150701 14:21:42.815"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:42.821" starttime="20150701 14:21:42.807"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:42.833" starttime="20150701 14:21:42.831"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150701 14:21:42.837" starttime="20150701 14:21:42.835"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:42.841" starttime="20150701 14:21:42.823"></status>
</kw>
<msg timestamp="20150701 14:21:42.843" level="INFO">${tailed_text} = [2015-07-01 12:21:34,082][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150701 14:21:42.842" starttime="20150701 14:21:42.127"></status>
</kw>
<kw type="kw" name="Check MTC XDR log">
<doc>Checks the tailed log file created on XDR during MTC call.</doc>
<arguments>
<arg>MTC_${TAILED_XDR_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${temp} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${log_file}</arg>
</arguments>
<msg timestamp="20150701 14:21:42.856" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MTC_ssh_tail_log-xdr.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MTC_ssh_tail_log-xdr.log&lt;/a&gt;'</msg>
<msg timestamp="20150701 14:21:42.858" level="INFO">${temp} = [2015-07-01 12:21:34,082][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150701 14:21:42.857" starttime="20150701 14:21:42.854"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${temp}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:42.862" starttime="20150701 14:21:42.860"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Not Contain</arg>
<arg>${temp}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:42.866" starttime="20150701 14:21:42.863"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${temp}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:42.869" starttime="20150701 14:21:42.867"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:42.873" starttime="20150701 14:21:42.871"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>CRCE|CDR</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:42.877" starttime="20150701 14:21:42.875"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>(on-net)|Terminating</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:42.881" starttime="20150701 14:21:42.879"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:42.882" starttime="20150701 14:21:42.846"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR OK...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150701 14:21:42.886" level="INFO">XDR OK...</msg>
<status status="PASS" endtime="20150701 14:21:42.887" starttime="20150701 14:21:42.884"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection_crce}</arg>
<arg>MTC_${TAILED_CRCE_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:42.909" starttime="20150701 14:21:42.907"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150701 14:21:42.918" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150701 14:21:42.917" starttime="20150701 14:21:42.911"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150701 14:21:42.925" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150701 14:21:42.925" starttime="20150701 14:21:42.919"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:42.938" starttime="20150701 14:21:42.935"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150701 14:21:42.941" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150701 14:21:42.984" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150701 14:21:42.986" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150701 14:21:42.985" starttime="20150701 14:21:42.939"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150701 14:21:42.990" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150701 14:21:43.083" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150701 14:21:43.086" level="INFO">${processes_string} =  8488 ?        Ss     0:00 bash -c tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor6.log
 8503 ?        S      0:00 tail -0f /var/log/inew/crce/5.3.12/negret-0.log
 8664 ?        Ss   ...</msg>
<status status="PASS" endtime="20150701 14:21:43.084" starttime="20150701 14:21:42.987"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150701 14:21:43.091" level="INFO">@{processes_list} = [  8488 ?        Ss     0:00 bash -c tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor6.log |  8503 ?        S      0:00 tail -0f /var/log/inew/crce/5.3.12/negret-0.log |  8664 ?       ...</msg>
<status status="PASS" endtime="20150701 14:21:43.090" starttime="20150701 14:21:43.087"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} =  8488 ?        Ss     0:00 bash -c tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor6.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:43.098" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:43.098" starttime="20150701 14:21:43.094"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:43.102" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:43.162" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:43.163" starttime="20150701 14:21:43.100"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:43.164" starttime="20150701 14:21:43.093"></status>
</kw>
<kw type="foritem" name="${process} =  8503 ?        S      0:00 tail -0f /var/log/inew/crce/5.3.12/negret-0.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:43.170" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:43.169" starttime="20150701 14:21:43.166"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:43.174" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:43.242" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:43.243" starttime="20150701 14:21:43.171"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:43.244" starttime="20150701 14:21:43.165"></status>
</kw>
<kw type="foritem" name="${process} =  8664 ?        Ss     0:00 bash -c tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor3.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:43.249" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:43.248" starttime="20150701 14:21:43.245"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:43.253" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:43.322" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:43.323" starttime="20150701 14:21:43.251"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:43.323" starttime="20150701 14:21:43.244"></status>
</kw>
<kw type="foritem" name="${process} =  8679 ?        S      0:00 tail -0f /var/log/inew/crce/5.3.12/negret-0.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:43.329" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:43.328" starttime="20150701 14:21:43.325"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:43.332" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:43.401" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:43.402" starttime="20150701 14:21:43.330"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:43.403" starttime="20150701 14:21:43.324"></status>
</kw>
<kw type="foritem" name="${process} =  8895 ?        Ss     0:00 bash -c tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor6.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:43.408" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:43.407" starttime="20150701 14:21:43.405"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:43.412" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:43.480" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:43.481" starttime="20150701 14:21:43.410"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:43.482" starttime="20150701 14:21:43.403"></status>
</kw>
<kw type="foritem" name="${process} =  8910 ?        S      0:00 tail -0f /var/log/inew/crce/5.3.12/negret-0.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:43.487" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:43.486" starttime="20150701 14:21:43.483"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:43.491" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:43.559" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:43.560" starttime="20150701 14:21:43.488"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:43.561" starttime="20150701 14:21:43.482"></status>
</kw>
<kw type="foritem" name="${process} =  9130 ?        Ss     0:00 bash -c tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor9.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:43.566" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:43.565" starttime="20150701 14:21:43.562"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:43.570" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:43.638" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:43.639" starttime="20150701 14:21:43.567"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:43.640" starttime="20150701 14:21:43.561"></status>
</kw>
<kw type="foritem" name="${process} =  9145 ?        S      0:00 tail -0f /var/log/inew/crce/5.3.12/negret-0.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:43.645" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:43.645" starttime="20150701 14:21:43.642"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:43.649" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:43.719" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:43.720" starttime="20150701 14:21:43.647"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:43.720" starttime="20150701 14:21:43.641"></status>
</kw>
<kw type="foritem" name="${process} =  9512 ?        Ss     0:00 bash -c tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor6.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:43.726" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:43.725" starttime="20150701 14:21:43.722"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:43.730" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:43.798" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:43.799" starttime="20150701 14:21:43.728"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:43.801" starttime="20150701 14:21:43.721"></status>
</kw>
<kw type="foritem" name="${process} =  9527 ?        S      0:00 tail -0f /var/log/inew/crce/5.3.12/negret-0.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:43.806" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:43.805" starttime="20150701 14:21:43.802"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:43.810" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:43.878" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:43.879" starttime="20150701 14:21:43.807"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:43.880" starttime="20150701 14:21:43.801"></status>
</kw>
<kw type="foritem" name="${process} =  9950 ?        Ss     0:00 bash -c tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor6.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:43.885" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:43.884" starttime="20150701 14:21:43.882"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:43.889" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:43.956" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:43.957" starttime="20150701 14:21:43.887"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:43.957" starttime="20150701 14:21:43.880"></status>
</kw>
<kw type="foritem" name="${process} =  9965 ?        S      0:00 tail -0f /var/log/inew/crce/5.3.12/negret-0.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:43.963" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:43.962" starttime="20150701 14:21:43.959"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:43.967" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:44.035" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:44.036" starttime="20150701 14:21:43.964"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:44.038" starttime="20150701 14:21:43.958"></status>
</kw>
<kw type="foritem" name="${process} = 16909 ?        Ss     0:00 bash -c tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor3.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:44.044" level="INFO">${pid} = 16909</msg>
<status status="PASS" endtime="20150701 14:21:44.043" starttime="20150701 14:21:44.041"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:44.048" level="INFO">Executing command 'kill -9 16909'.</msg>
<msg timestamp="20150701 14:21:44.115" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150701 14:21:44.117" starttime="20150701 14:21:44.046"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:44.118" starttime="20150701 14:21:44.040"></status>
</kw>
<kw type="foritem" name="${process} = 16924 ?        S      0:00 tail -0f /var/log/inew/crce/5.3.12/negret-0.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:44.125" level="INFO">${pid} = 16924</msg>
<status status="PASS" endtime="20150701 14:21:44.124" starttime="20150701 14:21:44.120"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:44.129" level="INFO">Executing command 'kill -9 16924'.</msg>
<msg timestamp="20150701 14:21:44.194" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150701 14:21:44.195" starttime="20150701 14:21:44.126"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:44.196" starttime="20150701 14:21:44.118"></status>
</kw>
<kw type="foritem" name="${process} = 16943 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:44.201" level="INFO">${pid} = 16943</msg>
<status status="PASS" endtime="20150701 14:21:44.200" starttime="20150701 14:21:44.198"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:44.205" level="INFO">Executing command 'kill -9 16943'.</msg>
<msg timestamp="20150701 14:21:44.272" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:44.273" starttime="20150701 14:21:44.203"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:44.274" starttime="20150701 14:21:44.196"></status>
</kw>
<kw type="foritem" name="${process} = 16959 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:44.280" level="INFO">${pid} = 16959</msg>
<status status="PASS" endtime="20150701 14:21:44.279" starttime="20150701 14:21:44.276"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:44.284" level="INFO">Executing command 'kill -9 16959'.</msg>
<msg timestamp="20150701 14:21:44.351" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:44.352" starttime="20150701 14:21:44.281"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:44.353" starttime="20150701 14:21:44.275"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:44.354" starttime="20150701 14:21:43.092"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:44.356" starttime="20150701 14:21:42.928"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150701 14:21:44.361" level="INFO">Starting command 'cat tmpfilemonitor3.log'.</msg>
<status status="PASS" endtime="20150701 14:21:44.394" starttime="20150701 14:21:44.358"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150701 14:21:44.397" level="INFO">Reading output of command 'cat tmpfilemonitor3.log'.</msg>
<msg timestamp="20150701 14:21:44.436" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150701 14:21:44.438" level="INFO">${stdout_string} = [2015-07-01 12:21:31,052][FINEST][104][   SubscriberPeerImpl.getSubscriberProfileByImsi()] Reading subscriber profile by IMSI [imsi=530052041010000]
[2015-07-01 12:21:31,196][FINEST][104][            ...</msg>
<status status="PASS" endtime="20150701 14:21:44.437" starttime="20150701 14:21:44.396"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150701 14:21:44.442" level="INFO">Executing command 'rm tmpfilemonitor3.log'.</msg>
<msg timestamp="20150701 14:21:44.514" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150701 14:21:44.515" starttime="20150701 14:21:44.440"></status>
</kw>
<msg timestamp="20150701 14:21:44.519" level="INFO">${tailed_text} = [2015-07-01 12:21:31,052][FINEST][104][   SubscriberPeerImpl.getSubscriberProfileByImsi()] Reading subscriber profile by IMSI [imsi=530052041010000]
[2015-07-01 12:21:31,196][FINEST][104][            ...</msg>
<status status="PASS" endtime="20150701 14:21:44.517" starttime="20150701 14:21:42.899"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20150701 14:21:44.533" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MTC_ssh_tail_log-crce.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MTC_ssh_tail_log-crce.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150701 14:21:44.534" starttime="20150701 14:21:44.528"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:44.536" starttime="20150701 14:21:44.520"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:44.548" starttime="20150701 14:21:44.546"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150701 14:21:44.552" starttime="20150701 14:21:44.550"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:44.556" starttime="20150701 14:21:44.538"></status>
</kw>
<msg timestamp="20150701 14:21:44.560" level="INFO">${tailed_text} = [2015-07-01 12:21:31,052][FINEST][104][   SubscriberPeerImpl.getSubscriberProfileByImsi()] Reading subscriber profile by IMSI [imsi=530052041010000]
[2015-07-01 12:21:31,196][FINEST][104][            ...</msg>
<status status="PASS" endtime="20150701 14:21:44.558" starttime="20150701 14:21:42.890"></status>
</kw>
<kw type="kw" name="Check MTC CRCE log">
<doc>Checks the tailed log file created on CRCE.</doc>
<arguments>
<arg>MTC_${TAILED_CRCE_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${temp} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${log_file}</arg>
</arguments>
<msg timestamp="20150701 14:21:44.572" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MTC_ssh_tail_log-crce.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MTC_ssh_tail_log-crce.log&lt;/a&gt;'</msg>
<msg timestamp="20150701 14:21:44.575" level="INFO">${temp} = [2015-07-01 12:21:31,052][FINEST][104][   SubscriberPeerImpl.getSubscriberProfileByImsi()] Reading subscriber profile by IMSI [imsi=530052041010000]
[2015-07-01 12:21:31,196][FINEST][104][            ...</msg>
<status status="PASS" endtime="20150701 14:21:44.574" starttime="20150701 14:21:44.570"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Not Contain</arg>
<arg>${temp}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:44.578" starttime="20150701 14:21:44.576"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>(on-net)|Terminating</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:44.582" starttime="20150701 14:21:44.580"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>finalCommit=true, usedTime=36000</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:44.586" starttime="20150701 14:21:44.584"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>Sending ticket to inew-cs.crce.cdr</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:44.590" starttime="20150701 14:21:44.588"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>|36000|60000|</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:44.594" starttime="20150701 14:21:44.592"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:44.596" starttime="20150701 14:21:44.562"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE OK...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150701 14:21:44.600" level="INFO">CRCE OK...</msg>
<status status="PASS" endtime="20150701 14:21:44.601" starttime="20150701 14:21:44.598"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Check XDR DB *******</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:44.605" starttime="20150701 14:21:44.603"></status>
</kw>
<kw type="kw" name="dblib_support-resource.DBLIB Connect to PostgresDB">
<doc>this helper shields testsuite developers from the necessity to know driver and connection string details.</doc>
<arguments>
<arg>${XDR DB HOST}</arg>
<arg>${XDR DB PORT}</arg>
<arg>${XDR DB NAME}</arg>
<arg>${XDR DB USER}</arg>
<arg>${XDR DB PWD}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Connect To Database">
<doc></doc>
<arguments>
<arg>org.postgresql.Driver</arg>
<arg>jdbc:postgresql://${host}:${port}/${dbName}</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:44.630" starttime="20150701 14:21:44.617"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:44.632" starttime="20150701 14:21:44.608"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${db} ${table} and check if entry exists.</doc>
<arguments>
<arg>xdr</arg>
<arg>crce_cdr_${YYYYwWW}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>36000</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${db}' == 'xdr'</arg>
<arg>AnalyseXdrDB</arg>
<arg>${table}</arg>
<arg>${called_party}</arg>
<arg>${call_length}</arg>
</arguments>
<kw type="kw" name="AnalyseXdrDB">
<doc>Look into the crce_cdr_2015w27 and check if entry exists.</doc>
<arguments>
<arg>${table}</arg>
<arg>${called_party}</arg>
<arg>${call_length}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select calledmsisdn, callduration from ${table} where id in (select max(id) from ${table});</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:44.707" starttime="20150701 14:21:44.705"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:44.718" starttime="20150701 14:21:44.708"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:44.722" starttime="20150701 14:21:44.720"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150701 14:21:44.727" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150701 14:21:44.729" level="INFO">${queryResultSetLines} = 642041010000|36000|
</msg>
<status status="PASS" endtime="20150701 14:21:44.728" starttime="20150701 14:21:44.724"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:44.733" starttime="20150701 14:21:44.730"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150701 14:21:44.736" level="INFO">1 lines returned</msg>
<msg timestamp="20150701 14:21:44.738" level="INFO">@{queryResultSet} = [ 642041010000|36000| ]</msg>
<status status="PASS" endtime="20150701 14:21:44.737" starttime="20150701 14:21:44.734"></status>
</kw>
<msg timestamp="20150701 14:21:44.742" level="INFO">@{queryRows} = [ 642041010000|36000| ]</msg>
<status status="PASS" endtime="20150701 14:21:44.740" starttime="20150701 14:21:44.696"></status>
</kw>
<kw type="kw" name="@{fields} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>@{queryRows}[0]</arg>
<arg>|</arg>
</arguments>
<msg timestamp="20150701 14:21:44.747" level="INFO">@{fields} = [ 642041010000 | 36000 |  ]</msg>
<status status="PASS" endtime="20150701 14:21:44.746" starttime="20150701 14:21:44.743"></status>
</kw>
<kw type="kw" name="${b_party} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{fields}[0]</arg>
</arguments>
<msg timestamp="20150701 14:21:44.752" level="INFO">${b_party} = 642041010000</msg>
<status status="PASS" endtime="20150701 14:21:44.751" starttime="20150701 14:21:44.748"></status>
</kw>
<kw type="kw" name="${duration} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{fields}[1]</arg>
</arguments>
<msg timestamp="20150701 14:21:44.756" level="INFO">${duration} = 36000</msg>
<status status="PASS" endtime="20150701 14:21:44.756" starttime="20150701 14:21:44.753"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${b_party}</arg>
<arg>${called_party}</arg>
<arg>msg=XDR DB ${table} values are wrong</arg>
</arguments>
<msg timestamp="20150701 14:21:44.761" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150701 14:21:44.762" starttime="20150701 14:21:44.758"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${duration}</arg>
<arg>${call_length}</arg>
<arg>msg=XDR DB ${table} values are wrong</arg>
</arguments>
<msg timestamp="20150701 14:21:44.767" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150701 14:21:44.768" starttime="20150701 14:21:44.764"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:44.769" starttime="20150701 14:21:44.686"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:44.771" starttime="20150701 14:21:44.677"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:44.772" starttime="20150701 14:21:44.669"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Disconnect From Database">
<doc></doc>
<arguments>
</arguments>
<msg timestamp="20150701 14:21:44.776" level="INFO">SQL Warnings on this connection: null</msg>
<status status="PASS" endtime="20150701 14:21:44.777" starttime="20150701 14:21:44.774"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR DB OK...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150701 14:21:44.781" level="INFO">XDR DB OK...</msg>
<status status="PASS" endtime="20150701 14:21:44.782" starttime="20150701 14:21:44.779"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Checking Subscriber's Account Balance *******</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:44.786" starttime="20150701 14:21:44.783"></status>
</kw>
<kw type="kw" name="Check Subscriber Balance">
<doc>Check the CRCE DB entry for test subscriber's monetary account balance.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${EXPECTED_BALANCE_36S_MTC}</arg>
</arguments>
<kw type="kw" name="dblib_support-resource.DBLIB Connect to PostgresDB">
<doc>this helper shields testsuite developers from the necessity to know driver and connection string details.</doc>
<arguments>
<arg>${CRCE DB HOST}</arg>
<arg>${CRCE DB PORT}</arg>
<arg>${CRCE DB NAME}</arg>
<arg>${CRCE DB USER}</arg>
<arg>${CRCE DB PWD}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Connect To Database">
<doc></doc>
<arguments>
<arg>org.postgresql.Driver</arg>
<arg>jdbc:postgresql://${host}:${port}/${dbName}</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:44.821" starttime="20150701 14:21:44.808"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:44.823" starttime="20150701 14:21:44.798"></status>
</kw>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select balance from acc_subscriber_accounts where category=1 and subscriber_id in (select id from profiler_subscriber_profiles where msisdn='${subscriber}');</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:44.836" starttime="20150701 14:21:44.834"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:45.186" starttime="20150701 14:21:44.837"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:45.192" starttime="20150701 14:21:45.189"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150701 14:21:45.196" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150701 14:21:45.198" level="INFO">${queryResultSetLines} = 10000000|
</msg>
<status status="PASS" endtime="20150701 14:21:45.198" starttime="20150701 14:21:45.194"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:45.202" starttime="20150701 14:21:45.200"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150701 14:21:45.205" level="INFO">1 lines returned</msg>
<msg timestamp="20150701 14:21:45.207" level="INFO">@{queryResultSet} = [ 10000000| ]</msg>
<status status="PASS" endtime="20150701 14:21:45.206" starttime="20150701 14:21:45.203"></status>
</kw>
<msg timestamp="20150701 14:21:45.210" level="INFO">@{queryRows} = [ 10000000| ]</msg>
<status status="PASS" endtime="20150701 14:21:45.209" starttime="20150701 14:21:44.825"></status>
</kw>
<kw type="kw" name="@{fields} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>@{queryRows}[0]</arg>
<arg>|</arg>
</arguments>
<msg timestamp="20150701 14:21:45.215" level="INFO">@{fields} = [ 10000000 |  ]</msg>
<status status="PASS" endtime="20150701 14:21:45.214" starttime="20150701 14:21:45.212"></status>
</kw>
<kw type="kw" name="${balance} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{fields}[0]</arg>
</arguments>
<msg timestamp="20150701 14:21:45.220" level="INFO">${balance} = 10000000</msg>
<status status="PASS" endtime="20150701 14:21:45.219" starttime="20150701 14:21:45.217"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Disconnect From Database">
<doc></doc>
<arguments>
</arguments>
<msg timestamp="20150701 14:21:45.224" level="INFO">SQL Warnings on this connection: null</msg>
<status status="PASS" endtime="20150701 14:21:45.225" starttime="20150701 14:21:45.221"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${balance}</arg>
<arg>${expected_bal}</arg>
<arg>msg=Balance ${balance} NOT OK!</arg>
</arguments>
<msg timestamp="20150701 14:21:45.229" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150701 14:21:45.230" starttime="20150701 14:21:45.226"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Balance= ${balance} OK!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150701 14:21:45.234" level="INFO">Balance= 10000000 OK!</msg>
<status status="PASS" endtime="20150701 14:21:45.235" starttime="20150701 14:21:45.232"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:45.237" starttime="20150701 14:21:44.788"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close All Connections">
<doc>Closes all open connections.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150701 14:21:45.242" starttime="20150701 14:21:45.240"></status>
</kw>
<doc>Reset the test subscriber's monetary account balance to initial value.

Arguments:
subscriber
Returns:
Fails:

==</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MFC_involved</tag>
<tag>MOC_involved</tag>
<tag>MTC_involved</tag>
<tag>SMS_involved</tag>
<tag>TNZ_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20150701 14:21:45.243" starttime="20150701 14:21:26.050"></status>
</test>
<test id="s1-t4" name="Run MFC Call">
<kw type="kw" name="${ssh_connection_xdr} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:45.304" starttime="20150701 14:21:45.301"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:45.374" starttime="20150701 14:21:45.313"></status>
</kw>
<msg timestamp="20150701 14:21:45.377" level="INFO">${ssh_connection} = 1</msg>
<status status="PASS" endtime="20150701 14:21:45.376" starttime="20150701 14:21:45.305"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150701 14:21:45.389" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150701 14:21:45.800" level="INFO">Read output: Last login: Wed Jul  1 12:21:27 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150701 14:21:45.801" starttime="20150701 14:21:45.386"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:45.802" starttime="20150701 14:21:45.378"></status>
</kw>
<msg timestamp="20150701 14:21:45.804" level="INFO">${ssh_connection} = 1</msg>
<status status="PASS" endtime="20150701 14:21:45.803" starttime="20150701 14:21:45.292"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:45.810" starttime="20150701 14:21:45.809"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150701 14:21:45.812" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor1.log'.</msg>
<status status="PASS" endtime="20150701 14:21:45.816" starttime="20150701 14:21:45.811"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:45.816" starttime="20150701 14:21:45.805"></status>
</kw>
<msg timestamp="20150701 14:21:45.818" level="INFO">${ssh_connection_xdr} = 1</msg>
<status status="PASS" endtime="20150701 14:21:45.817" starttime="20150701 14:21:45.278"></status>
</kw>
<kw type="kw" name="${ssh_connection_in} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN_MFC_LOG_FILE_PATH}${IN_LOG_FILE_NAME}</arg>
<arg>host=${IN-APP HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:45.838" starttime="20150701 14:21:45.837"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:45.897" starttime="20150701 14:21:45.843"></status>
</kw>
<msg timestamp="20150701 14:21:45.900" level="INFO">${ssh_connection} = 2</msg>
<status status="PASS" endtime="20150701 14:21:45.899" starttime="20150701 14:21:45.839"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150701 14:21:45.912" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20150701 14:21:46.315" level="INFO">Read output: Last login: Wed Jul  1 12:21:28 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$</msg>
<status status="PASS" endtime="20150701 14:21:46.316" starttime="20150701 14:21:45.909"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:46.317" starttime="20150701 14:21:45.902"></status>
</kw>
<msg timestamp="20150701 14:21:46.319" level="INFO">${ssh_connection} = 2</msg>
<status status="PASS" endtime="20150701 14:21:46.319" starttime="20150701 14:21:45.832"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:46.325" starttime="20150701 14:21:46.324"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150701 14:21:46.327" level="INFO">Starting command 'tail -0f /var/log/inew/core-in/log-mem/inew-in-mfc-00.log &gt; tmpfilemonitor2.log'.</msg>
<status status="PASS" endtime="20150701 14:21:46.331" starttime="20150701 14:21:46.326"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:46.331" starttime="20150701 14:21:46.321"></status>
</kw>
<msg timestamp="20150701 14:21:46.333" level="INFO">${ssh_connection_in} = 2</msg>
<status status="PASS" endtime="20150701 14:21:46.332" starttime="20150701 14:21:45.826"></status>
</kw>
<kw type="kw" name="${ssh_connection_crce} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE_LOG_FILE_PATH}</arg>
<arg>host=${CRCE HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:46.353" starttime="20150701 14:21:46.352"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:46.410" starttime="20150701 14:21:46.358"></status>
</kw>
<msg timestamp="20150701 14:21:46.413" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20150701 14:21:46.412" starttime="20150701 14:21:46.354"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150701 14:21:46.426" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20150701 14:21:46.837" level="INFO">Read output: Last login: Wed Jul  1 12:21:28 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$</msg>
<status status="PASS" endtime="20150701 14:21:46.840" starttime="20150701 14:21:46.423"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:46.842" starttime="20150701 14:21:46.415"></status>
</kw>
<msg timestamp="20150701 14:21:46.845" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20150701 14:21:46.844" starttime="20150701 14:21:46.348"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:46.853" starttime="20150701 14:21:46.852"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150701 14:21:46.855" level="INFO">Starting command 'tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor3.log'.</msg>
<status status="PASS" endtime="20150701 14:21:46.858" starttime="20150701 14:21:46.854"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:46.859" starttime="20150701 14:21:46.848"></status>
</kw>
<msg timestamp="20150701 14:21:46.860" level="INFO">${ssh_connection_crce} = 3</msg>
<status status="PASS" endtime="20150701 14:21:46.859" starttime="20150701 14:21:46.341"></status>
</kw>
<kw type="kw" name="Reset Subscriber Balance">
<doc>Reset the test subscriber's monetary account balance to initial value.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<kw type="kw" name="dblib_support-resource.DBLIB Connect to PostgresDB">
<doc>this helper shields testsuite developers from the necessity to know driver and connection string details.</doc>
<arguments>
<arg>${CRCE DB HOST}</arg>
<arg>${CRCE DB PORT}</arg>
<arg>${CRCE DB NAME}</arg>
<arg>${CRCE DB USER}</arg>
<arg>${CRCE DB PWD}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Connect To Database">
<doc></doc>
<arguments>
<arg>org.postgresql.Driver</arg>
<arg>jdbc:postgresql://${host}:${port}/${dbName}</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:46.886" starttime="20150701 14:21:46.869"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:46.888" starttime="20150701 14:21:46.865"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>update acc_subscriber_accounts set balance=10000000 where category=1 and subscriber_id in (select id from profiler_subscriber_profiles where msisdn='${subscriber}');</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:47.250" starttime="20150701 14:21:46.889"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Disconnect From Database">
<doc></doc>
<arguments>
</arguments>
<msg timestamp="20150701 14:21:47.256" level="INFO">SQL Warnings on this connection: null</msg>
<status status="PASS" endtime="20150701 14:21:47.256" starttime="20150701 14:21:47.253"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:47.258" starttime="20150701 14:21:46.861"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the MFC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150701 14:21:47.262" level="INFO">Running the MFC call...</msg>
<status status="PASS" endtime="20150701 14:21:47.263" starttime="20150701 14:21:47.260"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run Auto-MFC *******</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:47.267" starttime="20150701 14:21:47.265"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MFC 1s">
<doc>Runs a standard MFC 1s session</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${FINAL_DESTINATION_MFC}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MFC REQ QUEUE}</arg>
<arg>${AMQ-SIG MFC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MFC CGS">
<doc>Runs a standard MFC session (meaning a session that needs only mscAddress, mfcAPartyMsisdn and mfcCPartyMsisdn paramters) for the passed cgs file</doc>
<arguments>
<arg>mfc1s</arg>
<arg>${cg_msisdn}</arg>
<arg>${rd_imsi}</arg>
<arg>${rd_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mfc_req}</arg>
<arg>${queue_mfc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20150701 14:21:47.303" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-subscribers.csv</msg>
<status status="PASS" endtime="20150701 14:21:47.302" starttime="20150701 14:21:47.300"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20150701 14:21:47.308" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv</msg>
<status status="PASS" endtime="20150701 14:21:47.307" starttime="20150701 14:21:47.305"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20150701 14:21:47.313" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini</msg>
<status status="PASS" endtime="20150701 14:21:47.312" starttime="20150701 14:21:47.309"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20150701 14:21:47.318" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mfc1s.cgs</msg>
<status status="PASS" endtime="20150701 14:21:47.317" starttime="20150701 14:21:47.314"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:47.321" starttime="20150701 14:21:47.319"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${rd_imsi};${rd_msisdn}\n</arg>
</arguments>
<msg timestamp="20150701 14:21:47.327" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150701 14:21:47.328" starttime="20150701 14:21:47.322"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:47.332" starttime="20150701 14:21:47.330"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;gmscAddress;mfcAPartyMsisdn;mfcCPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20150701 14:21:47.338" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150701 14:21:47.339" starttime="20150701 14:21:47.334"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${msc_address};${cg_msisdn};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20150701 14:21:47.346" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150701 14:21:47.347" starttime="20150701 14:21:47.341"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:47.350" starttime="20150701 14:21:47.349"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20150701 14:21:47.355" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150701 14:21:47.356" starttime="20150701 14:21:47.352"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MFC;${queue_mfc_req};${queue_mfc_res};6;1;1</arg>
</arguments>
<msg timestamp="20150701 14:21:47.363" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150701 14:21:47.364" starttime="20150701 14:21:47.358"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:47.368" starttime="20150701 14:21:47.366"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20150701 14:21:47.383" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mfc1s.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20150701 14:21:52.632" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150701 14:21:52.629" starttime="20150701 14:21:47.369"></status>
</kw>
<msg timestamp="20150701 14:21:52.635" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150701 14:21:52.634" starttime="20150701 14:21:47.287"></status>
</kw>
<msg timestamp="20150701 14:21:52.639" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150701 14:21:52.637" starttime="20150701 14:21:47.272"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20150701 14:21:57.643" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20150701 14:21:57.645" starttime="20150701 14:21:52.640"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150701 14:21:57.651" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20150701 14:21:57.652" starttime="20150701 14:21:57.648"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection_in}</arg>
<arg>MFC_${TAILED_IN_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:57.673" starttime="20150701 14:21:57.671"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150701 14:21:57.683" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150701 14:21:57.682" starttime="20150701 14:21:57.675"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150701 14:21:57.704" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150701 14:21:57.705" starttime="20150701 14:21:57.684"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:57.717" starttime="20150701 14:21:57.714"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150701 14:21:57.720" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150701 14:21:57.765" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150701 14:21:57.767" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150701 14:21:57.766" starttime="20150701 14:21:57.719"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150701 14:21:57.771" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150701 14:21:57.867" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150701 14:21:57.870" level="INFO">${processes_string} =   845 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log
  861 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log
...</msg>
<status status="PASS" endtime="20150701 14:21:57.869" starttime="20150701 14:21:57.769"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150701 14:21:57.875" level="INFO">@{processes_list} = [   845 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log |   861 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00....</msg>
<status status="PASS" endtime="20150701 14:21:57.874" starttime="20150701 14:21:57.871"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} =   845 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:57.882" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:57.881" starttime="20150701 14:21:57.878"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:57.886" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:57.946" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:57.947" starttime="20150701 14:21:57.883"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:57.948" starttime="20150701 14:21:57.877"></status>
</kw>
<kw type="foritem" name="${process} =   861 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:57.954" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:57.953" starttime="20150701 14:21:57.950"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:57.957" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:58.027" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:58.029" starttime="20150701 14:21:57.955"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:58.030" starttime="20150701 14:21:57.949"></status>
</kw>
<kw type="foritem" name="${process} =  1033 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor2.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:58.037" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:58.036" starttime="20150701 14:21:58.033"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:58.041" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:58.108" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:58.109" starttime="20150701 14:21:58.038"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:58.110" starttime="20150701 14:21:58.032"></status>
</kw>
<kw type="foritem" name="${process} =  1048 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:58.115" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:58.114" starttime="20150701 14:21:58.112"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:58.119" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:58.207" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:58.209" starttime="20150701 14:21:58.117"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:58.209" starttime="20150701 14:21:58.110"></status>
</kw>
<kw type="foritem" name="${process} =  1303 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-mtc-00.log &gt; tmpfilemonitor2.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:58.215" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:58.214" starttime="20150701 14:21:58.211"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:58.219" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:58.288" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:58.289" starttime="20150701 14:21:58.217"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:58.290" starttime="20150701 14:21:58.210"></status>
</kw>
<kw type="foritem" name="${process} =  1319 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-mtc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:58.295" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:58.294" starttime="20150701 14:21:58.292"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:58.299" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:58.370" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:58.371" starttime="20150701 14:21:58.297"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:58.372" starttime="20150701 14:21:58.290"></status>
</kw>
<kw type="foritem" name="${process} =  1611 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-mfc-00.log &gt; tmpfilemonitor2.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:58.377" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:58.376" starttime="20150701 14:21:58.373"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:58.381" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:58.449" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:58.450" starttime="20150701 14:21:58.378"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:58.451" starttime="20150701 14:21:58.372"></status>
</kw>
<kw type="foritem" name="${process} =  1626 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-mfc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:58.456" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:58.455" starttime="20150701 14:21:58.453"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:58.460" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:58.528" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:58.529" starttime="20150701 14:21:58.458"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:58.530" starttime="20150701 14:21:58.452"></status>
</kw>
<kw type="foritem" name="${process} =  4986 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:58.536" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:58.535" starttime="20150701 14:21:58.532"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:58.540" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:58.609" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:58.611" starttime="20150701 14:21:58.538"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:58.612" starttime="20150701 14:21:58.531"></status>
</kw>
<kw type="foritem" name="${process} =  5008 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:58.618" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:58.617" starttime="20150701 14:21:58.614"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:58.622" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:58.713" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:58.715" starttime="20150701 14:21:58.619"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:58.716" starttime="20150701 14:21:58.613"></status>
</kw>
<kw type="foritem" name="${process} =  5303 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor2.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:58.721" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:58.720" starttime="20150701 14:21:58.717"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:58.725" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:58.796" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:58.797" starttime="20150701 14:21:58.723"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:58.798" starttime="20150701 14:21:58.716"></status>
</kw>
<kw type="foritem" name="${process} =  5318 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:58.803" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:58.802" starttime="20150701 14:21:58.799"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:58.807" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:58.875" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:58.876" starttime="20150701 14:21:58.805"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:58.877" starttime="20150701 14:21:58.798"></status>
</kw>
<kw type="foritem" name="${process} =  5804 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-mtc-00.log &gt; tmpfilemonitor2.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:58.883" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:58.882" starttime="20150701 14:21:58.879"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:58.887" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:58.958" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:58.959" starttime="20150701 14:21:58.884"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:58.960" starttime="20150701 14:21:58.878"></status>
</kw>
<kw type="foritem" name="${process} =  5819 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-mtc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:58.965" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:58.964" starttime="20150701 14:21:58.962"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:58.969" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:59.039" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:59.040" starttime="20150701 14:21:58.967"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:59.042" starttime="20150701 14:21:58.961"></status>
</kw>
<kw type="foritem" name="${process} =  6171 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-mfc-00.log &gt; tmpfilemonitor2.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:59.049" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:59.048" starttime="20150701 14:21:59.045"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:59.052" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:59.119" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:59.120" starttime="20150701 14:21:59.050"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:59.121" starttime="20150701 14:21:59.044"></status>
</kw>
<kw type="foritem" name="${process} =  6186 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-mfc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:59.126" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:59.125" starttime="20150701 14:21:59.123"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:59.130" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:59.197" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:59.198" starttime="20150701 14:21:59.128"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:59.199" starttime="20150701 14:21:59.121"></status>
</kw>
<kw type="foritem" name="${process} =  9423 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-mfc-00.log &gt; tmpfilemonitor5.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:59.204" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:59.204" starttime="20150701 14:21:59.201"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:59.208" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:59.278" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:59.279" starttime="20150701 14:21:59.206"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:59.280" starttime="20150701 14:21:59.200"></status>
</kw>
<kw type="foritem" name="${process} =  9438 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-mfc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:59.285" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:21:59.284" starttime="20150701 14:21:59.282"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:59.289" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:21:59.358" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:59.359" starttime="20150701 14:21:59.287"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:59.360" starttime="20150701 14:21:59.280"></status>
</kw>
<kw type="foritem" name="${process} = 20982 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-mfc-00.log &gt; tmpfilemonitor2.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:59.365" level="INFO">${pid} = 20982</msg>
<status status="PASS" endtime="20150701 14:21:59.364" starttime="20150701 14:21:59.362"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:59.369" level="INFO">Executing command 'kill -9 20982'.</msg>
<msg timestamp="20150701 14:21:59.438" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150701 14:21:59.439" starttime="20150701 14:21:59.367"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:59.440" starttime="20150701 14:21:59.361"></status>
</kw>
<kw type="foritem" name="${process} = 20998 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-mfc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:59.445" level="INFO">${pid} = 20998</msg>
<status status="PASS" endtime="20150701 14:21:59.444" starttime="20150701 14:21:59.441"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:59.449" level="INFO">Executing command 'kill -9 20998'.</msg>
<msg timestamp="20150701 14:21:59.518" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150701 14:21:59.519" starttime="20150701 14:21:59.446"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:59.520" starttime="20150701 14:21:59.440"></status>
</kw>
<kw type="foritem" name="${process} = 21028 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:59.526" level="INFO">${pid} = 21028</msg>
<status status="PASS" endtime="20150701 14:21:59.525" starttime="20150701 14:21:59.522"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:59.529" level="INFO">Executing command 'kill -9 21028'.</msg>
<msg timestamp="20150701 14:21:59.598" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:59.599" starttime="20150701 14:21:59.527"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:59.600" starttime="20150701 14:21:59.521"></status>
</kw>
<kw type="foritem" name="${process} = 21044 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:21:59.605" level="INFO">${pid} = 21044</msg>
<status status="PASS" endtime="20150701 14:21:59.605" starttime="20150701 14:21:59.602"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:21:59.609" level="INFO">Executing command 'kill -9 21044'.</msg>
<msg timestamp="20150701 14:21:59.676" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:21:59.677" starttime="20150701 14:21:59.607"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:59.678" starttime="20150701 14:21:59.601"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:59.678" starttime="20150701 14:21:57.876"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:59.680" starttime="20150701 14:21:57.707"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150701 14:21:59.685" level="INFO">Starting command 'cat tmpfilemonitor2.log'.</msg>
<status status="PASS" endtime="20150701 14:21:59.719" starttime="20150701 14:21:59.682"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150701 14:21:59.724" level="INFO">Reading output of command 'cat tmpfilemonitor2.log'.</msg>
<msg timestamp="20150701 14:21:59.765" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150701 14:21:59.768" level="INFO">${stdout_string} = [2015-07-01 12:21:48,839][DEBUG][IPROT_TRACING                                     ][][][][][] [-&gt;|][CMD [ConnectorMetaData: CN [iSigInbound1], SID [7], AdditionalInfo [];CorrelationId: 506960], Delay...</msg>
<status status="PASS" endtime="20150701 14:21:59.767" starttime="20150701 14:21:59.722"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150701 14:21:59.772" level="INFO">Executing command 'rm tmpfilemonitor2.log'.</msg>
<msg timestamp="20150701 14:21:59.840" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150701 14:21:59.841" starttime="20150701 14:21:59.770"></status>
</kw>
<msg timestamp="20150701 14:21:59.844" level="INFO">${tailed_text} = [2015-07-01 12:21:48,839][DEBUG][IPROT_TRACING                                     ][][][][][] [-&gt;|][CMD [ConnectorMetaData: CN [iSigInbound1], SID [7], AdditionalInfo [];CorrelationId: 506960], Delay...</msg>
<status status="PASS" endtime="20150701 14:21:59.843" starttime="20150701 14:21:57.664"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20150701 14:21:59.859" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MFC_ssh_tail_log-in.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MFC_ssh_tail_log-in.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150701 14:21:59.860" starttime="20150701 14:21:59.854"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:59.861" starttime="20150701 14:21:59.846"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:59.873" starttime="20150701 14:21:59.870"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150701 14:21:59.876" starttime="20150701 14:21:59.874"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:59.880" starttime="20150701 14:21:59.863"></status>
</kw>
<msg timestamp="20150701 14:21:59.884" level="INFO">${tailed_text} = [2015-07-01 12:21:48,839][DEBUG][IPROT_TRACING                                     ][][][][][] [-&gt;|][CMD [ConnectorMetaData: CN [iSigInbound1], SID [7], AdditionalInfo [];CorrelationId: 506960], Delay...</msg>
<status status="PASS" endtime="20150701 14:21:59.882" starttime="20150701 14:21:57.655"></status>
</kw>
<kw type="kw" name="Check MFC IN log">
<doc>Checks the tailed log file created during MTC test case</doc>
<arguments>
<arg>MFC_${TAILED_IN_LOG_FILE}</arg>
<arg>${rc}</arg>
</arguments>
<kw type="kw" name="${temp} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${log_file}</arg>
</arguments>
<msg timestamp="20150701 14:21:59.918" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MFC_ssh_tail_log-in.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MFC_ssh_tail_log-in.log&lt;/a&gt;'</msg>
<msg timestamp="20150701 14:21:59.922" level="INFO">${temp} = [2015-07-01 12:21:48,839][DEBUG][IPROT_TRACING                                     ][][][][][] [-&gt;|][CMD [ConnectorMetaData: CN [iSigInbound1], SID [7], AdditionalInfo [];CorrelationId: 506960], Delay...</msg>
<status status="PASS" endtime="20150701 14:21:59.920" starttime="20150701 14:21:59.894"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rel_c}</arg>
<arg>0</arg>
<arg>msg=CG session failed - check MFC IN log</arg>
</arguments>
<msg timestamp="20150701 14:21:59.927" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150701 14:21:59.929" starttime="20150701 14:21:59.924"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>Imsi: ${TESTSUBCRIBERS IMSI RANGE START}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:59.933" starttime="20150701 14:21:59.930"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>UsedTime: 1000</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:59.938" starttime="20150701 14:21:59.935"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>TrafficType: Forwarding</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:59.942" starttime="20150701 14:21:59.939"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:59.946" starttime="20150701 14:21:59.943"></status>
</kw>
<status status="PASS" endtime="20150701 14:21:59.947" starttime="20150701 14:21:59.886"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN OK...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150701 14:21:59.951" level="INFO">IN OK...</msg>
<status status="PASS" endtime="20150701 14:21:59.952" starttime="20150701 14:21:59.948"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG session failed</arg>
</arguments>
<msg timestamp="20150701 14:21:59.956" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150701 14:21:59.957" starttime="20150701 14:21:59.953"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection_xdr}</arg>
<arg>MFC_${TAILED_XDR_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:21:59.979" starttime="20150701 14:21:59.976"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150701 14:21:59.988" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150701 14:21:59.987" starttime="20150701 14:21:59.980"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150701 14:21:59.995" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150701 14:21:59.996" starttime="20150701 14:21:59.989"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:22:00.008" starttime="20150701 14:22:00.006"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150701 14:22:00.011" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150701 14:22:00.059" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150701 14:22:00.061" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150701 14:22:00.060" starttime="20150701 14:22:00.010"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150701 14:22:00.065" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150701 14:22:00.140" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150701 14:22:00.142" level="INFO">${processes_string} = 18758 ?        Ss     0:00 bash -c tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor1.log
18773 ?        S      0:00 tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
18795 ?       ...</msg>
<status status="PASS" endtime="20150701 14:22:00.141" starttime="20150701 14:22:00.062"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150701 14:22:00.147" level="INFO">@{processes_list} = [ 18758 ?        Ss     0:00 bash -c tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor1.log | 18773 ?        S      0:00 tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 18795 ? ...</msg>
<status status="PASS" endtime="20150701 14:22:00.146" starttime="20150701 14:22:00.144"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 18758 ?        Ss     0:00 bash -c tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor1.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:22:00.154" level="INFO">${pid} = 18758</msg>
<status status="PASS" endtime="20150701 14:22:00.153" starttime="20150701 14:22:00.150"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:22:00.157" level="INFO">Executing command 'kill -9 18758'.</msg>
<msg timestamp="20150701 14:22:00.212" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150701 14:22:00.213" starttime="20150701 14:22:00.155"></status>
</kw>
<status status="PASS" endtime="20150701 14:22:00.214" starttime="20150701 14:22:00.149"></status>
</kw>
<kw type="foritem" name="${process} = 18773 ?        S      0:00 tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:22:00.219" level="INFO">${pid} = 18773</msg>
<status status="PASS" endtime="20150701 14:22:00.218" starttime="20150701 14:22:00.215"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:22:00.223" level="INFO">Executing command 'kill -9 18773'.</msg>
<msg timestamp="20150701 14:22:00.298" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150701 14:22:00.299" starttime="20150701 14:22:00.220"></status>
</kw>
<status status="PASS" endtime="20150701 14:22:00.300" starttime="20150701 14:22:00.214"></status>
</kw>
<kw type="foritem" name="${process} = 18795 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:22:00.305" level="INFO">${pid} = 18795</msg>
<status status="PASS" endtime="20150701 14:22:00.304" starttime="20150701 14:22:00.301"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:22:00.309" level="INFO">Executing command 'kill -9 18795'.</msg>
<msg timestamp="20150701 14:22:00.385" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:22:00.386" starttime="20150701 14:22:00.306"></status>
</kw>
<status status="PASS" endtime="20150701 14:22:00.387" starttime="20150701 14:22:00.300"></status>
</kw>
<kw type="foritem" name="${process} = 18811 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:22:00.392" level="INFO">${pid} = 18811</msg>
<status status="PASS" endtime="20150701 14:22:00.391" starttime="20150701 14:22:00.389"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:22:00.396" level="INFO">Executing command 'kill -9 18811'.</msg>
<msg timestamp="20150701 14:22:00.469" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:22:00.470" starttime="20150701 14:22:00.393"></status>
</kw>
<status status="PASS" endtime="20150701 14:22:00.471" starttime="20150701 14:22:00.388"></status>
</kw>
<status status="PASS" endtime="20150701 14:22:00.471" starttime="20150701 14:22:00.148"></status>
</kw>
<status status="PASS" endtime="20150701 14:22:00.472" starttime="20150701 14:21:59.998"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150701 14:22:00.477" level="INFO">Starting command 'cat tmpfilemonitor1.log'.</msg>
<status status="PASS" endtime="20150701 14:22:00.481" starttime="20150701 14:22:00.475"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150701 14:22:00.484" level="INFO">Reading output of command 'cat tmpfilemonitor1.log'.</msg>
<msg timestamp="20150701 14:22:00.515" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150701 14:22:00.518" level="INFO">${stdout_string} = [2015-07-01 12:21:51,993][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150701 14:22:00.517" starttime="20150701 14:22:00.482"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150701 14:22:00.522" level="INFO">Executing command 'rm tmpfilemonitor1.log'.</msg>
<msg timestamp="20150701 14:22:00.587" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150701 14:22:00.588" starttime="20150701 14:22:00.519"></status>
</kw>
<msg timestamp="20150701 14:22:00.592" level="INFO">${tailed_text} = [2015-07-01 12:21:51,993][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150701 14:22:00.590" starttime="20150701 14:21:59.969"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20150701 14:22:00.605" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MFC_ssh_tail_log-xdr.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MFC_ssh_tail_log-xdr.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150701 14:22:00.606" starttime="20150701 14:22:00.601"></status>
</kw>
<status status="PASS" endtime="20150701 14:22:00.607" starttime="20150701 14:22:00.593"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:22:00.618" starttime="20150701 14:22:00.616"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150701 14:22:00.622" starttime="20150701 14:22:00.620"></status>
</kw>
<status status="PASS" endtime="20150701 14:22:00.626" starttime="20150701 14:22:00.609"></status>
</kw>
<msg timestamp="20150701 14:22:00.629" level="INFO">${tailed_text} = [2015-07-01 12:21:51,993][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150701 14:22:00.627" starttime="20150701 14:21:59.961"></status>
</kw>
<kw type="kw" name="Check MFC XDR log">
<doc>Checks the tailed log file of MFC call created on XDR.</doc>
<arguments>
<arg>MFC_${TAILED_XDR_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${temp} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${log_file}</arg>
</arguments>
<msg timestamp="20150701 14:22:00.641" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MFC_ssh_tail_log-xdr.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MFC_ssh_tail_log-xdr.log&lt;/a&gt;'</msg>
<msg timestamp="20150701 14:22:00.644" level="INFO">${temp} = [2015-07-01 12:21:51,993][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150701 14:22:00.643" starttime="20150701 14:22:00.639"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Not Contain</arg>
<arg>${temp}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150701 14:22:00.648" starttime="20150701 14:22:00.645"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:22:00.652" starttime="20150701 14:22:00.650"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>${FINAL_DESTINATION_MFC}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:22:00.656" starttime="20150701 14:22:00.654"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>CRCE|CDR</arg>
</arguments>
<status status="PASS" endtime="20150701 14:22:00.660" starttime="20150701 14:22:00.658"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>(on-net)|Forwarding</arg>
</arguments>
<status status="PASS" endtime="20150701 14:22:00.664" starttime="20150701 14:22:00.661"></status>
</kw>
<status status="PASS" endtime="20150701 14:22:00.665" starttime="20150701 14:22:00.631"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR OK...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150701 14:22:00.668" level="INFO">XDR OK...</msg>
<status status="PASS" endtime="20150701 14:22:00.670" starttime="20150701 14:22:00.667"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection_crce}</arg>
<arg>MFC_${TAILED_CRCE_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:22:00.690" starttime="20150701 14:22:00.688"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150701 14:22:00.698" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150701 14:22:00.698" starttime="20150701 14:22:00.692"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150701 14:22:00.707" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150701 14:22:00.708" starttime="20150701 14:22:00.700"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:22:00.720" starttime="20150701 14:22:00.717"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150701 14:22:00.724" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150701 14:22:00.769" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150701 14:22:00.771" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150701 14:22:00.770" starttime="20150701 14:22:00.722"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150701 14:22:00.775" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150701 14:22:00.868" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150701 14:22:00.870" level="INFO">${processes_string} =  8488 ?        Ss     0:00 bash -c tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor6.log
 8503 ?        S      0:00 tail -0f /var/log/inew/crce/5.3.12/negret-0.log
 8664 ?        Ss   ...</msg>
<status status="PASS" endtime="20150701 14:22:00.869" starttime="20150701 14:22:00.772"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150701 14:22:00.875" level="INFO">@{processes_list} = [  8488 ?        Ss     0:00 bash -c tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor6.log |  8503 ?        S      0:00 tail -0f /var/log/inew/crce/5.3.12/negret-0.log |  8664 ?       ...</msg>
<status status="PASS" endtime="20150701 14:22:00.874" starttime="20150701 14:22:00.872"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} =  8488 ?        Ss     0:00 bash -c tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor6.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:22:00.882" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:22:00.881" starttime="20150701 14:22:00.878"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:22:00.885" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:22:00.951" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:22:00.953" starttime="20150701 14:22:00.883"></status>
</kw>
<status status="PASS" endtime="20150701 14:22:00.954" starttime="20150701 14:22:00.877"></status>
</kw>
<kw type="foritem" name="${process} =  8503 ?        S      0:00 tail -0f /var/log/inew/crce/5.3.12/negret-0.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:22:00.959" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:22:00.958" starttime="20150701 14:22:00.955"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:22:00.963" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:22:01.032" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:22:01.033" starttime="20150701 14:22:00.961"></status>
</kw>
<status status="PASS" endtime="20150701 14:22:01.035" starttime="20150701 14:22:00.954"></status>
</kw>
<kw type="foritem" name="${process} =  8664 ?        Ss     0:00 bash -c tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor3.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:22:01.042" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:22:01.041" starttime="20150701 14:22:01.038"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:22:01.045" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:22:01.110" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:22:01.111" starttime="20150701 14:22:01.043"></status>
</kw>
<status status="PASS" endtime="20150701 14:22:01.112" starttime="20150701 14:22:01.037"></status>
</kw>
<kw type="foritem" name="${process} =  8679 ?        S      0:00 tail -0f /var/log/inew/crce/5.3.12/negret-0.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:22:01.117" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:22:01.116" starttime="20150701 14:22:01.114"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:22:01.121" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:22:01.190" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:22:01.191" starttime="20150701 14:22:01.119"></status>
</kw>
<status status="PASS" endtime="20150701 14:22:01.192" starttime="20150701 14:22:01.113"></status>
</kw>
<kw type="foritem" name="${process} =  8895 ?        Ss     0:00 bash -c tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor6.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:22:01.197" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:22:01.196" starttime="20150701 14:22:01.193"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:22:01.201" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:22:01.270" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:22:01.271" starttime="20150701 14:22:01.198"></status>
</kw>
<status status="PASS" endtime="20150701 14:22:01.272" starttime="20150701 14:22:01.192"></status>
</kw>
<kw type="foritem" name="${process} =  8910 ?        S      0:00 tail -0f /var/log/inew/crce/5.3.12/negret-0.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:22:01.278" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:22:01.277" starttime="20150701 14:22:01.274"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:22:01.281" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:22:01.349" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:22:01.350" starttime="20150701 14:22:01.279"></status>
</kw>
<status status="PASS" endtime="20150701 14:22:01.351" starttime="20150701 14:22:01.273"></status>
</kw>
<kw type="foritem" name="${process} =  9130 ?        Ss     0:00 bash -c tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor9.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:22:01.356" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:22:01.355" starttime="20150701 14:22:01.352"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:22:01.359" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:22:01.428" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:22:01.429" starttime="20150701 14:22:01.357"></status>
</kw>
<status status="PASS" endtime="20150701 14:22:01.430" starttime="20150701 14:22:01.351"></status>
</kw>
<kw type="foritem" name="${process} =  9145 ?        S      0:00 tail -0f /var/log/inew/crce/5.3.12/negret-0.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:22:01.435" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:22:01.434" starttime="20150701 14:22:01.431"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:22:01.439" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:22:01.507" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:22:01.508" starttime="20150701 14:22:01.436"></status>
</kw>
<status status="PASS" endtime="20150701 14:22:01.509" starttime="20150701 14:22:01.430"></status>
</kw>
<kw type="foritem" name="${process} =  9512 ?        Ss     0:00 bash -c tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor6.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:22:01.515" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:22:01.514" starttime="20150701 14:22:01.511"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:22:01.518" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:22:01.590" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:22:01.592" starttime="20150701 14:22:01.516"></status>
</kw>
<status status="PASS" endtime="20150701 14:22:01.593" starttime="20150701 14:22:01.510"></status>
</kw>
<kw type="foritem" name="${process} =  9527 ?        S      0:00 tail -0f /var/log/inew/crce/5.3.12/negret-0.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:22:01.599" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:22:01.598" starttime="20150701 14:22:01.594"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:22:01.602" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:22:01.924" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:22:01.926" starttime="20150701 14:22:01.600"></status>
</kw>
<status status="PASS" endtime="20150701 14:22:01.927" starttime="20150701 14:22:01.593"></status>
</kw>
<kw type="foritem" name="${process} =  9950 ?        Ss     0:00 bash -c tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor6.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:22:01.932" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:22:01.931" starttime="20150701 14:22:01.928"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:22:01.936" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:22:02.003" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:22:02.004" starttime="20150701 14:22:01.934"></status>
</kw>
<status status="PASS" endtime="20150701 14:22:02.006" starttime="20150701 14:22:01.927"></status>
</kw>
<kw type="foritem" name="${process} =  9965 ?        S      0:00 tail -0f /var/log/inew/crce/5.3.12/negret-0.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:22:02.014" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150701 14:22:02.013" starttime="20150701 14:22:02.009"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:22:02.017" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150701 14:22:02.082" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:22:02.084" starttime="20150701 14:22:02.015"></status>
</kw>
<status status="PASS" endtime="20150701 14:22:02.085" starttime="20150701 14:22:02.008"></status>
</kw>
<kw type="foritem" name="${process} = 17264 ?        Ss     0:00 bash -c tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor3.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:22:02.091" level="INFO">${pid} = 17264</msg>
<status status="PASS" endtime="20150701 14:22:02.090" starttime="20150701 14:22:02.087"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:22:02.094" level="INFO">Executing command 'kill -9 17264'.</msg>
<msg timestamp="20150701 14:22:02.163" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150701 14:22:02.164" starttime="20150701 14:22:02.092"></status>
</kw>
<status status="PASS" endtime="20150701 14:22:02.165" starttime="20150701 14:22:02.085"></status>
</kw>
<kw type="foritem" name="${process} = 17279 ?        S      0:00 tail -0f /var/log/inew/crce/5.3.12/negret-0.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:22:02.171" level="INFO">${pid} = 17279</msg>
<status status="PASS" endtime="20150701 14:22:02.170" starttime="20150701 14:22:02.167"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:22:02.175" level="INFO">Executing command 'kill -9 17279'.</msg>
<msg timestamp="20150701 14:22:02.247" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150701 14:22:02.249" starttime="20150701 14:22:02.172"></status>
</kw>
<status status="PASS" endtime="20150701 14:22:02.250" starttime="20150701 14:22:02.166"></status>
</kw>
<kw type="foritem" name="${process} = 17298 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:22:02.256" level="INFO">${pid} = 17298</msg>
<status status="PASS" endtime="20150701 14:22:02.255" starttime="20150701 14:22:02.251"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:22:02.261" level="INFO">Executing command 'kill -9 17298'.</msg>
<msg timestamp="20150701 14:22:02.319" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:22:02.321" starttime="20150701 14:22:02.258"></status>
</kw>
<status status="PASS" endtime="20150701 14:22:02.322" starttime="20150701 14:22:02.250"></status>
</kw>
<kw type="foritem" name="${process} = 17314 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150701 14:22:02.327" level="INFO">${pid} = 17314</msg>
<status status="PASS" endtime="20150701 14:22:02.326" starttime="20150701 14:22:02.323"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150701 14:22:02.331" level="INFO">Executing command 'kill -9 17314'.</msg>
<msg timestamp="20150701 14:22:02.388" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150701 14:22:02.389" starttime="20150701 14:22:02.328"></status>
</kw>
<status status="PASS" endtime="20150701 14:22:02.390" starttime="20150701 14:22:02.322"></status>
</kw>
<status status="PASS" endtime="20150701 14:22:02.391" starttime="20150701 14:22:00.876"></status>
</kw>
<status status="PASS" endtime="20150701 14:22:02.392" starttime="20150701 14:22:00.710"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150701 14:22:02.397" level="INFO">Starting command 'cat tmpfilemonitor3.log'.</msg>
<status status="PASS" endtime="20150701 14:22:02.431" starttime="20150701 14:22:02.395"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150701 14:22:02.434" level="INFO">Reading output of command 'cat tmpfilemonitor3.log'.</msg>
<msg timestamp="20150701 14:22:02.460" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150701 14:22:02.462" level="INFO">${stdout_string} = [2015-07-01 12:21:48,858][FINEST][389][   SubscriberPeerImpl.getSubscriberProfileByImsi()] Reading subscriber profile by IMSI [imsi=530052041010000]
[2015-07-01 12:21:49,122][FINEST][389][            ...</msg>
<status status="PASS" endtime="20150701 14:22:02.461" starttime="20150701 14:22:02.432"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150701 14:22:02.466" level="INFO">Executing command 'rm tmpfilemonitor3.log'.</msg>
<msg timestamp="20150701 14:22:02.536" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150701 14:22:02.537" starttime="20150701 14:22:02.464"></status>
</kw>
<msg timestamp="20150701 14:22:02.541" level="INFO">${tailed_text} = [2015-07-01 12:21:48,858][FINEST][389][   SubscriberPeerImpl.getSubscriberProfileByImsi()] Reading subscriber profile by IMSI [imsi=530052041010000]
[2015-07-01 12:21:49,122][FINEST][389][            ...</msg>
<status status="PASS" endtime="20150701 14:22:02.539" starttime="20150701 14:22:00.681"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20150701 14:22:02.556" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MFC_ssh_tail_log-crce.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MFC_ssh_tail_log-crce.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150701 14:22:02.557" starttime="20150701 14:22:02.551"></status>
</kw>
<status status="PASS" endtime="20150701 14:22:02.558" starttime="20150701 14:22:02.543"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:22:02.569" starttime="20150701 14:22:02.567"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150701 14:22:02.573" starttime="20150701 14:22:02.571"></status>
</kw>
<status status="PASS" endtime="20150701 14:22:02.577" starttime="20150701 14:22:02.560"></status>
</kw>
<msg timestamp="20150701 14:22:02.580" level="INFO">${tailed_text} = [2015-07-01 12:21:48,858][FINEST][389][   SubscriberPeerImpl.getSubscriberProfileByImsi()] Reading subscriber profile by IMSI [imsi=530052041010000]
[2015-07-01 12:21:49,122][FINEST][389][            ...</msg>
<status status="PASS" endtime="20150701 14:22:02.579" starttime="20150701 14:22:00.673"></status>
</kw>
<kw type="kw" name="Check MFC CRCE log">
<doc>Checks the tailed log file created on CRCE.</doc>
<arguments>
<arg>MFC_${TAILED_CRCE_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${temp} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${log_file}</arg>
</arguments>
<msg timestamp="20150701 14:22:02.593" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MFC_ssh_tail_log-crce.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MFC_ssh_tail_log-crce.log&lt;/a&gt;'</msg>
<msg timestamp="20150701 14:22:02.596" level="INFO">${temp} = [2015-07-01 12:21:48,858][FINEST][389][   SubscriberPeerImpl.getSubscriberProfileByImsi()] Reading subscriber profile by IMSI [imsi=530052041010000]
[2015-07-01 12:21:49,122][FINEST][389][            ...</msg>
<status status="PASS" endtime="20150701 14:22:02.595" starttime="20150701 14:22:02.590"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Not Contain</arg>
<arg>${temp}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150701 14:22:02.599" starttime="20150701 14:22:02.597"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>(on-net)|Forwarding|</arg>
</arguments>
<status status="PASS" endtime="20150701 14:22:02.603" starttime="20150701 14:22:02.601"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>finalCommit=true, usedTime=1000</arg>
</arguments>
<status status="PASS" endtime="20150701 14:22:02.607" starttime="20150701 14:22:02.605"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>Sending ticket to inew-cs.crce.cdr</arg>
</arguments>
<status status="PASS" endtime="20150701 14:22:02.611" starttime="20150701 14:22:02.608"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>1000|60000</arg>
</arguments>
<status status="PASS" endtime="20150701 14:22:02.615" starttime="20150701 14:22:02.612"></status>
</kw>
<status status="PASS" endtime="20150701 14:22:02.616" starttime="20150701 14:22:02.583"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE OK...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150701 14:22:02.619" level="INFO">CRCE OK...</msg>
<status status="PASS" endtime="20150701 14:22:02.620" starttime="20150701 14:22:02.617"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Check XDR DB *******</arg>
</arguments>
<status status="PASS" endtime="20150701 14:22:02.624" starttime="20150701 14:22:02.622"></status>
</kw>
<kw type="kw" name="dblib_support-resource.DBLIB Connect to PostgresDB">
<doc>this helper shields testsuite developers from the necessity to know driver and connection string details.</doc>
<arguments>
<arg>${XDR DB HOST}</arg>
<arg>${XDR DB PORT}</arg>
<arg>${XDR DB NAME}</arg>
<arg>${XDR DB USER}</arg>
<arg>${XDR DB PWD}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Connect To Database">
<doc></doc>
<arguments>
<arg>org.postgresql.Driver</arg>
<arg>jdbc:postgresql://${host}:${port}/${dbName}</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:22:02.651" starttime="20150701 14:22:02.635"></status>
</kw>
<status status="PASS" endtime="20150701 14:22:02.653" starttime="20150701 14:22:02.627"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${db} ${table} and check if entry exists.</doc>
<arguments>
<arg>xdr</arg>
<arg>crce_cdr_${YYYYwWW}</arg>
<arg>${FINAL_DESTINATION_MFC}</arg>
<arg>1000</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${db}' == 'xdr'</arg>
<arg>AnalyseXdrDB</arg>
<arg>${table}</arg>
<arg>${called_party}</arg>
<arg>${call_length}</arg>
</arguments>
<kw type="kw" name="AnalyseXdrDB">
<doc>Look into the crce_cdr_2015w27 and check if entry exists.</doc>
<arguments>
<arg>${table}</arg>
<arg>${called_party}</arg>
<arg>${call_length}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select calledmsisdn, callduration from ${table} where id in (select max(id) from ${table});</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150701 14:22:02.725" starttime="20150701 14:22:02.723"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:22:02.734" starttime="20150701 14:22:02.727"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150701 14:22:02.737" starttime="20150701 14:22:02.735"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150701 14:22:02.742" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150701 14:22:02.744" level="INFO">${queryResultSetLines} = 642041010200|1000|
</msg>
<status status="PASS" endtime="20150701 14:22:02.743" starttime="20150701 14:22:02.739"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150701 14:22:02.748" starttime="20150701 14:22:02.746"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150701 14:22:02.751" level="INFO">1 lines returned</msg>
<msg timestamp="20150701 14:22:02.753" level="INFO">@{queryResultSet} = [ 642041010200|1000| ]</msg>
<status status="PASS" endtime="20150701 14:22:02.752" starttime="20150701 14:22:02.749"></status>
</kw>
<msg timestamp="20150701 14:22:02.756" level="INFO">@{queryRows} = [ 642041010200|1000| ]</msg>
<status status="PASS" endtime="20150701 14:22:02.755" starttime="20150701 14:22:02.715"></status>
</kw>
<kw type="kw" name="@{fields} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>@{queryRows}[0]</arg>
<arg>|</arg>
</arguments>
<msg timestamp="20150701 14:22:02.760" level="INFO">@{fields} = [ 642041010200 | 1000 |  ]</msg>
<status status="PASS" endtime="20150701 14:22:02.759" starttime="20150701 14:22:02.757"></status>
</kw>
<kw type="kw" name="${b_party} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{fields}[0]</arg>
</arguments>
<msg timestamp="20150701 14:22:02.765" level="INFO">${b_party} = 642041010200</msg>
<status status="PASS" endtime="20150701 14:22:02.764" starttime="20150701 14:22:02.762"></status>
</kw>
<kw type="kw" name="${duration} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{fields}[1]</arg>
</arguments>
<msg timestamp="20150701 14:22:02.769" level="INFO">${duration} = 1000</msg>
<status status="PASS" endtime="20150701 14:22:02.768" starttime="20150701 14:22:02.766"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${b_party}</arg>
<arg>${called_party}</arg>
<arg>msg=XDR DB ${table} values are wrong</arg>
</arguments>
<msg timestamp="20150701 14:22:02.774" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150701 14:22:02.775" starttime="20150701 14:22:02.770"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${duration}</arg>
<arg>${call_length}</arg>
<arg>msg=XDR DB ${table} values are wrong</arg>
</arguments>
<msg timestamp="20150701 14:22:02.779" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150701 14:22:02.780" starttime="20150701 14:22:02.776"></status>
</kw>
<status status="PASS" endtime="20150701 14:22:02.781" starttime="20150701 14:22:02.705"></status>
</kw>
<status status="PASS" endtime="20150701 14:22:02.782" starttime="20150701 14:22:02.696"></status>
</kw>
<status status="PASS" endtime="20150701 14:22:02.784" starttime="20150701 14:22:02.688"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Disconnect From Database">
<doc></doc>
<arguments>
</arguments>
<msg timestamp="20150701 14:22:02.787" level="INFO">SQL Warnings on this connection: null</msg>
<status status="PASS" endtime="20150701 14:22:02.788" starttime="20150701 14:22:02.785"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR DB OK...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150701 14:22:02.791" level="INFO">XDR DB OK...</msg>
<status status="PASS" endtime="20150701 14:22:02.792" starttime="20150701 14:22:02.789"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Checking Subscriber's Account Balance *******</arg>
</arguments>
<status status="PASS" endtime="20150701 14:22:02.796" starttime="20150701 14:22:02.794"></status>
</kw>
<kw type="kw" name="Check Subscriber Balance">
<doc>Check the CRCE DB entry for test subscriber's monetary account balance.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${EXPECTED_BALANCE_MFC}</arg>
</arguments>
<kw type="kw" name="dblib_support-resource.DBLIB Connect to PostgresDB">
<doc>this helper shields testsuite developers from the necessity to know driver and connection string details.</doc>
<arguments>
<arg>${CRCE DB HOST}</arg>
<arg>${CRCE DB PORT}</arg>
<arg>${CRCE DB NAME}</arg>
<arg>${CRCE DB USER}</arg>
<arg>${CRCE DB PWD}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Connect To Database">
<doc></doc>
<arguments>
<arg>org.postgresql.Driver</arg>
<arg>jdbc:postgresql://${host}:${port}/${dbName}</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:22:02.838" starttime="20150701 14:22:02.816"></status>
</kw>
<status status="PASS" endtime="20150701 14:22:02.840" starttime="20150701 14:22:02.807"></status>
</kw>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select balance from acc_subscriber_accounts where category=1 and subscriber_id in (select id from profiler_subscriber_profiles where msisdn='${subscriber}');</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150701 14:22:02.853" starttime="20150701 14:22:02.851"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150701 14:22:03.295" starttime="20150701 14:22:02.854"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150701 14:22:03.300" starttime="20150701 14:22:03.298"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150701 14:22:03.304" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150701 14:22:03.307" level="INFO">${queryResultSetLines} = 10000000|
</msg>
<status status="PASS" endtime="20150701 14:22:03.306" starttime="20150701 14:22:03.302"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150701 14:22:03.310" starttime="20150701 14:22:03.308"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150701 14:22:03.313" level="INFO">1 lines returned</msg>
<msg timestamp="20150701 14:22:03.315" level="INFO">@{queryResultSet} = [ 10000000| ]</msg>
<status status="PASS" endtime="20150701 14:22:03.314" starttime="20150701 14:22:03.311"></status>
</kw>
<msg timestamp="20150701 14:22:03.318" level="INFO">@{queryRows} = [ 10000000| ]</msg>
<status status="PASS" endtime="20150701 14:22:03.316" starttime="20150701 14:22:02.843"></status>
</kw>
<kw type="kw" name="@{fields} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>@{queryRows}[0]</arg>
<arg>|</arg>
</arguments>
<msg timestamp="20150701 14:22:03.323" level="INFO">@{fields} = [ 10000000 |  ]</msg>
<status status="PASS" endtime="20150701 14:22:03.322" starttime="20150701 14:22:03.319"></status>
</kw>
<kw type="kw" name="${balance} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{fields}[0]</arg>
</arguments>
<msg timestamp="20150701 14:22:03.327" level="INFO">${balance} = 10000000</msg>
<status status="PASS" endtime="20150701 14:22:03.326" starttime="20150701 14:22:03.324"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Disconnect From Database">
<doc></doc>
<arguments>
</arguments>
<msg timestamp="20150701 14:22:03.332" level="INFO">SQL Warnings on this connection: null</msg>
<status status="PASS" endtime="20150701 14:22:03.332" starttime="20150701 14:22:03.330"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${balance}</arg>
<arg>${expected_bal}</arg>
<arg>msg=Balance ${balance} NOT OK!</arg>
</arguments>
<msg timestamp="20150701 14:22:03.337" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150701 14:22:03.338" starttime="20150701 14:22:03.334"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Balance= ${balance} OK!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150701 14:22:03.342" level="INFO">Balance= 10000000 OK!</msg>
<status status="PASS" endtime="20150701 14:22:03.343" starttime="20150701 14:22:03.339"></status>
</kw>
<status status="PASS" endtime="20150701 14:22:03.344" starttime="20150701 14:22:02.798"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close All Connections">
<doc>Closes all open connections.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150701 14:22:03.349" starttime="20150701 14:22:03.346"></status>
</kw>
<doc>Reset the test subscriber's monetary account balance to initial value.

Arguments:
subscriber
Returns:
Fails:

==</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MFC_involved</tag>
<tag>MOC_involved</tag>
<tag>MTC_involved</tag>
<tag>SMS_involved</tag>
<tag>TNZ_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20150701 14:22:03.350" starttime="20150701 14:21:45.248"></status>
</test>
<kw type="teardown" name="Teardown Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Disconnect From Database</arg>
</arguments>
<status status="PASS" endtime="20150701 14:22:03.376" starttime="20150701 14:22:03.374"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Cleaning up</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150701 14:22:03.379" level="INFO">Cleaning up</msg>
<status status="PASS" endtime="20150701 14:22:03.380" starttime="20150701 14:22:03.377"></status>
</kw>
<kw type="kw" name="OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>mv *ssh_tail*.log log/</arg>
</arguments>
<msg timestamp="20150701 14:22:03.397" level="INFO">Running command 'mv *ssh_tail*.log log/ 2&gt;&amp;1'</msg>
<status status="PASS" endtime="20150701 14:22:03.400" starttime="20150701 14:22:03.382"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close All Connections">
<doc>Closes all open connections.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150701 14:22:03.404" starttime="20150701 14:22:03.402"></status>
</kw>
<status status="PASS" endtime="20150701 14:22:03.405" starttime="20150701 14:22:03.368"></status>
</kw>
<doc>This suite tests the set of "standard" calls: MOC, MTC, MFC and SMS.
It uses standardised library keywords encapsulating Call Generator's functionality. Tests try to
check other components (at the moment IN, CRCE and XDR) for evidences of calls - in log files and in DB.

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20150701 14:22:03.406" starttime="20150701 14:18:15.022"></status>
</suite>
<statistics>
<total>
<stat pass="4" fail="0">Critical Tests</stat>
<stat pass="4" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="4" info="" doc="" combined="" fail="0" links="">matko.sanseovic</stat>
<stat pass="4" info="" doc="" combined="" fail="0" links="">MFC_involved</stat>
<stat pass="4" info="" doc="" combined="" fail="0" links="">MOC_involved</stat>
<stat pass="4" info="" doc="" combined="" fail="0" links="">MTC_involved</stat>
<stat pass="4" info="" doc="" combined="" fail="0" links="">SMS_involved</stat>
<stat pass="4" info="" doc="" combined="" fail="0" links="">TNZ_supported</stat>
</tag>
<suite>
<stat pass="4" id="s1" fail="0" name="Regression-Robot-Suite">Regression-Robot-Suite</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
