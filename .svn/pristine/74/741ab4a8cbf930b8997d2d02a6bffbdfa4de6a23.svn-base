<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 2.8.7 (Jython 2.7rc1 on java1.7.0_79)" generated="20150623 08:17:54.782">
<suite source="/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/time_trial_xdr-robot-suite.txt" id="s1" name="Time Trial Xdr-Robot-Suite">
<kw type="setup" name="Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${time} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20150623 08:17:56.293" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20150623 08:17:56.300" level="INFO">${time} = Tue Jun 23 08:17:56 CEST 2015</msg>
<status status="PASS" endtime="20150623 08:17:56.298" starttime="20150623 08:17:56.278"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${time}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:17:56.306" level="INFO">Date and time: Tue Jun 23 08:17:56 CEST 2015</msg>
<status status="PASS" endtime="20150623 08:17:56.308" starttime="20150623 08:17:56.302"></status>
</kw>
<kw type="kw" name="Log The XDR Version">
<doc>Called at suite setup procedure to check if XDR is running and to see which version is there.</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${XDR HOST}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:17:56.657" starttime="20150623 08:17:56.326"></status>
</kw>
<kw type="kw" name="${output_login} = SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
</arguments>
<msg timestamp="20150623 08:17:56.688" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:17:57.896" level="INFO">Read output: Last login: Tue Jun 23 04:51:23 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$[m</msg>
<msg timestamp="20150623 08:17:57.905" level="INFO">${output_login} = Last login: Tue Jun 23 04:51:23 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$[m </msg>
<status status="PASS" endtime="20150623 08:17:57.901" starttime="20150623 08:17:56.675"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output_login}</arg>
</arguments>
<msg timestamp="20150623 08:17:57.923" level="INFO">Last login: Tue Jun 23 04:51:23 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$[m </msg>
<status status="PASS" endtime="20150623 08:17:57.927" starttime="20150623 08:17:57.914"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service inew-mvno-xdr status</arg>
</arguments>
<msg timestamp="20150623 08:17:57.940" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20150623 08:17:58.354" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:17:58.363" level="INFO">${output} = I-New UMS MVNO - XDR - Server 5.3.0.22932 is running PID: 5666 </msg>
<status status="PASS" endtime="20150623 08:17:58.359" starttime="20150623 08:17:57.933"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR Version and pid: ${output}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:17:58.381" level="INFO">XDR Version and pid: I-New UMS MVNO - XDR - Server 5.3.0.22932 is running PID: 5666 </msg>
<status status="PASS" endtime="20150623 08:17:58.385" starttime="20150623 08:17:58.371"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>I-New UMS MVNO - XDR</arg>
</arguments>
<status status="PASS" endtime="20150623 08:17:58.400" starttime="20150623 08:17:58.391"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>SSHLibrary.Close Connection</arg>
</arguments>
<status status="PASS" endtime="20150623 08:17:58.410" starttime="20150623 08:17:58.405"></status>
</kw>
<status status="PASS" endtime="20150623 08:17:58.414" starttime="20150623 08:17:56.311"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>SUT:${SUT_RESOURCE}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:17:58.428" level="INFO">SUT:/opt/robot/robotworkspace/suts/TNZ-resource.txt</msg>
<status status="PASS" endtime="20150623 08:17:58.431" starttime="20150623 08:17:58.420"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR IP address:${XDR HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:17:58.444" level="INFO">XDR IP address:10.105.113.171</msg>
<status status="PASS" endtime="20150623 08:17:58.447" starttime="20150623 08:17:58.436"></status>
</kw>
<kw type="kw" name="Check AMQ Availability">
<doc>Called at suite setup procedure to check if AMQ is UP</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${AMQ-XDR HOST}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:17:58.555" starttime="20150623 08:17:58.488"></status>
</kw>
<kw type="kw" name="${output_login} = SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
</arguments>
<msg timestamp="20150623 08:17:58.569" level="INFO">Logging into '10.105.113.124:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:17:59.838" level="INFO">Read output: Last login: Tue Jun 23 04:49:49 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@amq02.tb13 ~]$[m</msg>
<msg timestamp="20150623 08:17:59.846" level="INFO">${output_login} = Last login: Tue Jun 23 04:49:49 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@amq02.tb13 ~]$[m </msg>
<status status="PASS" endtime="20150623 08:17:59.842" starttime="20150623 08:17:58.561"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>netstat -an | grep ${AMQ-SIG PORT}</arg>
</arguments>
<msg timestamp="20150623 08:17:59.859" level="INFO">Executing command 'netstat -an | grep 61616'.</msg>
<msg timestamp="20150623 08:17:59.948" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:17:59.954" level="INFO">${output} = tcp        0      0 :::61616                    :::*                        LISTEN      
tcp        0      0 ::ffff:10.105.113.124:61616 ::ffff:10.105.113.171:37734 ESTABLISHED 
tcp        0      0 ::...</msg>
<status status="PASS" endtime="20150623 08:17:59.952" starttime="20150623 08:17:59.852"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>LISTEN</arg>
</arguments>
<status status="PASS" endtime="20150623 08:17:59.968" starttime="20150623 08:17:59.961"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo /etc/init.d/${AMQ-XDR SERVICE SCRIPT NAME} query -QQueue=${AMQ-XDR CRCE CDR QUEUE} | grep ConsumerCount</arg>
</arguments>
<msg timestamp="20150623 08:17:59.984" level="INFO">Executing command 'sudo /etc/init.d/amq-xdr-tb13 query -QQueue=inew-cs.crce.cdr | grep ConsumerCount'.</msg>
<msg timestamp="20150623 08:18:01.328" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:01.335" level="INFO">${output} = ConsumerCount = 10</msg>
<status status="PASS" endtime="20150623 08:18:01.332" starttime="20150623 08:17:59.974"></status>
</kw>
<kw type="kw" name="${count} = String.Get Substring">
<doc>Returns a substring from `start` index to `end` index.</doc>
<arguments>
<arg>${output}</arg>
<arg>16</arg>
</arguments>
<msg timestamp="20150623 08:18:01.349" level="INFO">${count} = 10</msg>
<status status="PASS" endtime="20150623 08:18:01.348" starttime="20150623 08:18:01.341"></status>
</kw>
<kw type="kw" name="BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>0 &lt; ${count}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:01.378" starttime="20150623 08:18:01.354"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:18:01.387" starttime="20150623 08:18:01.383"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:18:01.401" starttime="20150623 08:18:01.393"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:01.408" starttime="20150623 08:17:58.455"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>AMQ and consumers are UP</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:18:01.419" level="INFO">AMQ and consumers are UP</msg>
<status status="PASS" endtime="20150623 08:18:01.421" starttime="20150623 08:18:01.413"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Connect To Database">
<doc></doc>
<arguments>
<arg>org.postgresql.Driver</arg>
<arg>jdbc:postgresql://${XDR DB HOST}:${XDR DB PORT}/${XDR DB NAME}</arg>
<arg>${XDR DB USER}</arg>
<arg>${XDR DB PWD}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:01.531" starttime="20150623 08:18:01.426"></status>
</kw>
<kw type="kw" name="OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>rm -f ssh_tail_log-xdr.log</arg>
</arguments>
<msg timestamp="20150623 08:18:01.555" level="INFO">Running command 'rm -f ssh_tail_log-xdr.log 2&gt;&amp;1'</msg>
<status status="PASS" endtime="20150623 08:18:01.560" starttime="20150623 08:18:01.535"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:01.672" starttime="20150623 08:18:01.637"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:01.675" starttime="20150623 08:18:01.609"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>crce_cdr</arg>
<arg>sessionid</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:01.757" starttime="20150623 08:18:01.709"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:01.759" starttime="20150623 08:18:01.696"></status>
</kw>
<kw type="kw" name="${JNDI_PROVIDER_URL} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>tcp://${AMQ-XDR HOST}:${AMQ-SIG PORT}?jms.useAsyncSend=false</arg>
</arguments>
<msg timestamp="20150623 08:18:01.766" level="INFO">${JNDI_PROVIDER_URL} = tcp://10.105.113.124:61616?jms.useAsyncSend=false</msg>
<status status="PASS" endtime="20150623 08:18:01.765" starttime="20150623 08:18:01.761"></status>
</kw>
<kw type="kw" name="JMSLibrary.Init Provider">
<doc></doc>
<arguments>
<arg>${INITIAL_CONTEXT_FACTORY}</arg>
<arg>${JNDI_PROVIDER_URL}</arg>
<arg>connect=true</arg>
<arg>start=true</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:02.060" starttime="20150623 08:18:01.768"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:02.064" starttime="20150623 08:17:56.264"></status>
</kw>
<test id="s1-t1" name="Run Statistical Check">
<kw type="kw" name="${failure} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<msg timestamp="20150623 08:18:02.088" level="INFO">${failure} = 0</msg>
<status status="PASS" endtime="20150623 08:18:02.087" starttime="20150623 08:18:02.085"></status>
</kw>
<kw type="for" name="${loopIdx} IN RANGE [ 0 | 10 ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${loopIdx} = 0">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Sitting in first FOR, Loop No.: ${loopIdx}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:18:02.095" level="INFO">Sitting in first FOR, Loop No.: 0</msg>
<status status="PASS" endtime="20150623 08:18:02.096" starttime="20150623 08:18:02.092"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Timeout set to ${loopIdx} secs</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:18:02.101" level="INFO">Timeout set to 0 secs</msg>
<status status="PASS" endtime="20150623 08:18:02.102" starttime="20150623 08:18:02.098"></status>
</kw>
<kw type="kw" name="${failure} = Internal Loop">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${loopIdx}</arg>
</arguments>
<kw type="for" name="${index} IN RANGE [ 0 | 10 ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${index} = 0">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:02.205" starttime="20150623 08:18:02.203"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:02.275" starttime="20150623 08:18:02.216"></status>
</kw>
<msg timestamp="20150623 08:18:02.280" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20150623 08:18:02.279" starttime="20150623 08:18:02.207"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:18:02.311" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:18:03.298" level="INFO">Read output: Last login: Tue Jun 23 06:17:56 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:18:03.301" starttime="20150623 08:18:02.304"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:03.303" starttime="20150623 08:18:02.286"></status>
</kw>
<msg timestamp="20150623 08:18:03.306" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20150623 08:18:03.305" starttime="20150623 08:18:02.184"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:03.323" starttime="20150623 08:18:03.320"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:03.328" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor3.log'.</msg>
<status status="PASS" endtime="20150623 08:18:03.333" starttime="20150623 08:18:03.325"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:03.334" starttime="20150623 08:18:03.310"></status>
</kw>
<msg timestamp="20150623 08:18:03.337" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20150623 08:18:03.336" starttime="20150623 08:18:02.163"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:03.370" starttime="20150623 08:18:03.364"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:03.371" starttime="20150623 08:18:03.354"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:18:03.385" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:18:03.387" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:18:03.386" starttime="20150623 08:18:03.382"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:18:03.391" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:18:03.392" starttime="20150623 08:18:03.389"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:03.404" starttime="20150623 08:18:03.394"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:03.416" starttime="20150623 08:18:03.405"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:03.417" starttime="20150623 08:18:03.373"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:03.443" starttime="20150623 08:18:03.441"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:18:03.450" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:18:03.449" starttime="20150623 08:18:03.445"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:18:03.458" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:18:03.459" starttime="20150623 08:18:03.452"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:03.482" starttime="20150623 08:18:03.476"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:18:03.490" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:18:03.529" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:03.533" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:18:03.531" starttime="20150623 08:18:03.485"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:18:03.543" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:18:03.633" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:03.637" level="INFO">${processes_string} = 20005 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor3.log
20020 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
20043 ?        S...</msg>
<status status="PASS" endtime="20150623 08:18:03.636" starttime="20150623 08:18:03.537"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:18:03.650" level="INFO">@{processes_list} = [ 20005 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor3.log | 20020 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 20043 ?   ...</msg>
<status status="PASS" endtime="20150623 08:18:03.648" starttime="20150623 08:18:03.642"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 20005 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor3.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:03.667" level="INFO">${pid} = 20005</msg>
<status status="PASS" endtime="20150623 08:18:03.665" starttime="20150623 08:18:03.659"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:03.676" level="INFO">Executing command 'kill -9 20005'.</msg>
<msg timestamp="20150623 08:18:03.723" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:03.726" starttime="20150623 08:18:03.671"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:03.728" starttime="20150623 08:18:03.656"></status>
</kw>
<kw type="foritem" name="${process} = 20020 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:03.740" level="INFO">${pid} = 20020</msg>
<status status="PASS" endtime="20150623 08:18:03.739" starttime="20150623 08:18:03.732"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:03.749" level="INFO">Executing command 'kill -9 20020'.</msg>
<msg timestamp="20150623 08:18:03.808" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:03.810" starttime="20150623 08:18:03.744"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:03.812" starttime="20150623 08:18:03.729"></status>
</kw>
<kw type="foritem" name="${process} = 20043 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:03.824" level="INFO">${pid} = 20043</msg>
<status status="PASS" endtime="20150623 08:18:03.823" starttime="20150623 08:18:03.816"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:03.833" level="INFO">Executing command 'kill -9 20043'.</msg>
<msg timestamp="20150623 08:18:03.892" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:18:03.894" starttime="20150623 08:18:03.828"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:03.896" starttime="20150623 08:18:03.813"></status>
</kw>
<kw type="foritem" name="${process} = 20059 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:03.908" level="INFO">${pid} = 20059</msg>
<status status="PASS" endtime="20150623 08:18:03.907" starttime="20150623 08:18:03.900"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:03.917" level="INFO">Executing command 'kill -9 20059'.</msg>
<msg timestamp="20150623 08:18:03.968" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:18:03.971" starttime="20150623 08:18:03.912"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:03.973" starttime="20150623 08:18:03.897"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:03.974" starttime="20150623 08:18:03.653"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:03.976" starttime="20150623 08:18:03.462"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:03.985" level="INFO">Starting command 'cat tmpfilemonitor3.log'.</msg>
<status status="PASS" endtime="20150623 08:18:04.012" starttime="20150623 08:18:03.980"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:18:04.021" level="INFO">Reading output of command 'cat tmpfilemonitor3.log'.</msg>
<msg timestamp="20150623 08:18:04.061" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:04.065" level="INFO">${stdout_string} = [2015-06-23 05:30:16,661][INFO ][Camel (ticket-router) thread #202 - JmsConsumer[inew-cs.provisioning]][StandardTicketRoute                               ][  96] Received ticket [ticket=1.0|321|2015-0...</msg>
<status status="PASS" endtime="20150623 08:18:04.063" starttime="20150623 08:18:04.017"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:04.074" level="INFO">Executing command 'rm tmpfilemonitor3.log'.</msg>
<msg timestamp="20150623 08:18:04.146" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:04.149" starttime="20150623 08:18:04.069"></status>
</kw>
<msg timestamp="20150623 08:18:04.155" level="INFO">${tailed_text} = [2015-06-23 05:30:16,661][INFO ][Camel (ticket-router) thread #202 - JmsConsumer[inew-cs.provisioning]][StandardTicketRoute                               ][  96] Received ticket [ticket=1.0|321|2015-0...</msg>
<status status="PASS" endtime="20150623 08:18:04.153" starttime="20150623 08:18:03.431"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:04.172" starttime="20150623 08:18:04.159"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:04.204" starttime="20150623 08:18:04.198"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:18:04.212" starttime="20150623 08:18:04.207"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:04.217" starttime="20150623 08:18:04.176"></status>
</kw>
<msg timestamp="20150623 08:18:04.223" level="INFO">${tailed_text} = [2015-06-23 05:30:16,661][INFO ][Camel (ticket-router) thread #202 - JmsConsumer[inew-cs.provisioning]][StandardTicketRoute                               ][  96] Received ticket [ticket=1.0|321|2015-0...</msg>
<status status="PASS" endtime="20150623 08:18:04.221" starttime="20150623 08:18:03.420"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:04.271" starttime="20150623 08:18:04.265"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:04.273" starttime="20150623 08:18:04.253"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:04.287" starttime="20150623 08:18:04.277"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:04.297" starttime="20150623 08:18:04.290"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:04.302" starttime="20150623 08:18:04.300"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:04.304" starttime="20150623 08:18:04.231"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:04.345" starttime="20150623 08:18:04.343"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:04.367" starttime="20150623 08:18:04.346"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:04.371" starttime="20150623 08:18:04.369"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:18:04.375" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:18:04.377" level="INFO">${queryResultSetLines} = 1004463|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:18:04.376" starttime="20150623 08:18:04.372"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:04.381" starttime="20150623 08:18:04.379"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:18:04.384" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:18:04.386" level="INFO">@{queryResultSet} = [ 1004463|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:18:04.385" starttime="20150623 08:18:04.382"></status>
</kw>
<msg timestamp="20150623 08:18:04.389" level="INFO">@{queryRows} = [ 1004463|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:18:04.388" starttime="20150623 08:18:04.333"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:18:04.393" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:18:04.395" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:18:04.394" starttime="20150623 08:18:04.391"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:18:04.399" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:18:04.400" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:18:04.400" starttime="20150623 08:18:04.396"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:18:04.410" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:18:04.411" starttime="20150623 08:18:04.408"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:04.412" starttime="20150623 08:18:04.402"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:04.419" starttime="20150623 08:18:04.414"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:04.420" starttime="20150623 08:18:04.322"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:04.421" starttime="20150623 08:18:02.132"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:04.423" starttime="20150623 08:18:02.120"></status>
</kw>
<msg timestamp="20150623 08:18:04.426" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:18:04.425" starttime="20150623 08:18:02.117"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:18:04.430" level="INFO">Index in the 2. loop: 0</msg>
<status status="PASS" endtime="20150623 08:18:04.431" starttime="20150623 08:18:04.427"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:18:04.435" level="INFO">Slept 0 seconds</msg>
<status status="PASS" endtime="20150623 08:18:04.436" starttime="20150623 08:18:04.432"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:18:04.442" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:18:04.441" starttime="20150623 08:18:04.437"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:04.443" starttime="20150623 08:18:02.115"></status>
</kw>
<kw type="foritem" name="${index} = 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:04.505" starttime="20150623 08:18:04.503"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:04.572" starttime="20150623 08:18:04.513"></status>
</kw>
<msg timestamp="20150623 08:18:04.577" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20150623 08:18:04.575" starttime="20150623 08:18:04.507"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:18:04.601" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:18:04.984" level="INFO">Read output: Last login: Tue Jun 23 06:18:03 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:18:04.986" starttime="20150623 08:18:04.595"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:04.989" starttime="20150623 08:18:04.580"></status>
</kw>
<msg timestamp="20150623 08:18:04.994" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20150623 08:18:04.993" starttime="20150623 08:18:04.492"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:05.025" starttime="20150623 08:18:05.020"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:05.034" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor4.log'.</msg>
<status status="PASS" endtime="20150623 08:18:05.041" starttime="20150623 08:18:05.028"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:05.043" starttime="20150623 08:18:05.000"></status>
</kw>
<msg timestamp="20150623 08:18:05.049" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20150623 08:18:05.047" starttime="20150623 08:18:04.478"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:05.081" starttime="20150623 08:18:05.074"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:05.084" starttime="20150623 08:18:05.065"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:18:05.111" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:18:05.116" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:18:05.114" starttime="20150623 08:18:05.106"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:18:05.123" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:18:05.125" starttime="20150623 08:18:05.119"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:05.133" starttime="20150623 08:18:05.128"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:05.148" starttime="20150623 08:18:05.136"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:05.151" starttime="20150623 08:18:05.088"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:05.198" starttime="20150623 08:18:05.192"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:18:05.210" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:18:05.209" starttime="20150623 08:18:05.200"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:18:05.221" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:18:05.223" starttime="20150623 08:18:05.213"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:05.250" starttime="20150623 08:18:05.245"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:18:05.256" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:18:05.319" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:05.322" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:18:05.321" starttime="20150623 08:18:05.252"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:18:05.331" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:18:05.435" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:05.439" level="INFO">${processes_string} = 20184 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor4.log
20199 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
20218 ?        S...</msg>
<status status="PASS" endtime="20150623 08:18:05.438" starttime="20150623 08:18:05.325"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:18:05.450" level="INFO">@{processes_list} = [ 20184 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor4.log | 20199 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 20218 ?   ...</msg>
<status status="PASS" endtime="20150623 08:18:05.449" starttime="20150623 08:18:05.443"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 20184 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor4.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:05.465" level="INFO">${pid} = 20184</msg>
<status status="PASS" endtime="20150623 08:18:05.464" starttime="20150623 08:18:05.458"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:05.473" level="INFO">Executing command 'kill -9 20184'.</msg>
<msg timestamp="20150623 08:18:05.514" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:05.516" starttime="20150623 08:18:05.468"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:05.517" starttime="20150623 08:18:05.455"></status>
</kw>
<kw type="foritem" name="${process} = 20199 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:05.529" level="INFO">${pid} = 20199</msg>
<status status="PASS" endtime="20150623 08:18:05.527" starttime="20150623 08:18:05.521"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:05.536" level="INFO">Executing command 'kill -9 20199'.</msg>
<msg timestamp="20150623 08:18:05.595" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:05.597" starttime="20150623 08:18:05.532"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:05.599" starttime="20150623 08:18:05.519"></status>
</kw>
<kw type="foritem" name="${process} = 20218 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:05.610" level="INFO">${pid} = 20218</msg>
<status status="PASS" endtime="20150623 08:18:05.609" starttime="20150623 08:18:05.602"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:05.618" level="INFO">Executing command 'kill -9 20218'.</msg>
<msg timestamp="20150623 08:18:05.681" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:18:05.685" starttime="20150623 08:18:05.613"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:05.687" starttime="20150623 08:18:05.600"></status>
</kw>
<kw type="foritem" name="${process} = 20234 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:05.698" level="INFO">${pid} = 20234</msg>
<status status="PASS" endtime="20150623 08:18:05.697" starttime="20150623 08:18:05.691"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:05.706" level="INFO">Executing command 'kill -9 20234'.</msg>
<msg timestamp="20150623 08:18:05.763" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:18:05.765" starttime="20150623 08:18:05.701"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:05.767" starttime="20150623 08:18:05.688"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:05.768" starttime="20150623 08:18:05.453"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:05.770" starttime="20150623 08:18:05.227"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:05.777" level="INFO">Starting command 'cat tmpfilemonitor4.log'.</msg>
<status status="PASS" endtime="20150623 08:18:05.807" starttime="20150623 08:18:05.772"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:18:05.813" level="INFO">Reading output of command 'cat tmpfilemonitor4.log'.</msg>
<msg timestamp="20150623 08:18:05.851" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:05.854" level="INFO">${stdout_string} = [2015-06-23 05:50:15,857][INFO ][Camel (ticket-router) thread #201 - JmsConsumer[inew-cs.provisioning]][StandardTicketRoute                               ][  96] Received ticket [ticket=1.0|321|2015-0...</msg>
<status status="PASS" endtime="20150623 08:18:05.853" starttime="20150623 08:18:05.810"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:05.862" level="INFO">Executing command 'rm tmpfilemonitor4.log'.</msg>
<msg timestamp="20150623 08:18:05.936" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:05.938" starttime="20150623 08:18:05.857"></status>
</kw>
<msg timestamp="20150623 08:18:05.943" level="INFO">${tailed_text} = [2015-06-23 05:50:15,857][INFO ][Camel (ticket-router) thread #201 - JmsConsumer[inew-cs.provisioning]][StandardTicketRoute                               ][  96] Received ticket [ticket=1.0|321|2015-0...</msg>
<status status="PASS" endtime="20150623 08:18:05.942" starttime="20150623 08:18:05.176"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:05.958" starttime="20150623 08:18:05.947"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:05.982" starttime="20150623 08:18:05.977"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:18:05.989" starttime="20150623 08:18:05.985"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:05.994" starttime="20150623 08:18:05.961"></status>
</kw>
<msg timestamp="20150623 08:18:05.998" level="INFO">${tailed_text} = [2015-06-23 05:50:15,857][INFO ][Camel (ticket-router) thread #201 - JmsConsumer[inew-cs.provisioning]][StandardTicketRoute                               ][  96] Received ticket [ticket=1.0|321|2015-0...</msg>
<status status="PASS" endtime="20150623 08:18:05.997" starttime="20150623 08:18:05.157"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:06.120" starttime="20150623 08:18:06.113"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:06.122" starttime="20150623 08:18:06.098"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:06.136" starttime="20150623 08:18:06.125"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:06.146" starttime="20150623 08:18:06.139"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:06.154" starttime="20150623 08:18:06.149"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:06.156" starttime="20150623 08:18:06.004"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:06.231" starttime="20150623 08:18:06.227"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:06.245" starttime="20150623 08:18:06.234"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:06.251" starttime="20150623 08:18:06.247"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:18:06.259" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:18:06.263" level="INFO">${queryResultSetLines} = 1004464|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:18:06.261" starttime="20150623 08:18:06.254"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:06.269" starttime="20150623 08:18:06.265"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:18:06.276" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:18:06.280" level="INFO">@{queryResultSet} = [ 1004464|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:18:06.278" starttime="20150623 08:18:06.272"></status>
</kw>
<msg timestamp="20150623 08:18:06.285" level="INFO">@{queryRows} = [ 1004464|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:18:06.283" starttime="20150623 08:18:06.211"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:18:06.293" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:18:06.296" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:18:06.295" starttime="20150623 08:18:06.288"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:18:06.301" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:18:06.303" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:18:06.302" starttime="20150623 08:18:06.299"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:18:06.311" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:18:06.312" starttime="20150623 08:18:06.309"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:06.313" starttime="20150623 08:18:06.304"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:06.319" starttime="20150623 08:18:06.314"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:06.320" starttime="20150623 08:18:06.190"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:06.321" starttime="20150623 08:18:04.456"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:06.322" starttime="20150623 08:18:04.447"></status>
</kw>
<msg timestamp="20150623 08:18:06.325" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:18:06.324" starttime="20150623 08:18:04.445"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:18:06.328" level="INFO">Index in the 2. loop: 1</msg>
<status status="PASS" endtime="20150623 08:18:06.329" starttime="20150623 08:18:06.326"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:18:06.333" level="INFO">Slept 0 seconds</msg>
<status status="PASS" endtime="20150623 08:18:06.334" starttime="20150623 08:18:06.331"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:18:06.340" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:18:06.339" starttime="20150623 08:18:06.335"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:06.341" starttime="20150623 08:18:04.444"></status>
</kw>
<kw type="foritem" name="${index} = 2">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:06.396" starttime="20150623 08:18:06.394"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:06.443" starttime="20150623 08:18:06.403"></status>
</kw>
<msg timestamp="20150623 08:18:06.445" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20150623 08:18:06.445" starttime="20150623 08:18:06.397"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:18:06.456" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:18:06.875" level="INFO">Read output: Last login: Tue Jun 23 06:18:04 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:18:06.876" starttime="20150623 08:18:06.453"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:06.877" starttime="20150623 08:18:06.447"></status>
</kw>
<msg timestamp="20150623 08:18:06.879" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20150623 08:18:06.879" starttime="20150623 08:18:06.384"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:06.892" starttime="20150623 08:18:06.889"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:06.895" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor5.log'.</msg>
<status status="PASS" endtime="20150623 08:18:06.899" starttime="20150623 08:18:06.893"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:06.900" starttime="20150623 08:18:06.882"></status>
</kw>
<msg timestamp="20150623 08:18:06.902" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20150623 08:18:06.902" starttime="20150623 08:18:06.371"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:06.931" starttime="20150623 08:18:06.924"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:06.934" starttime="20150623 08:18:06.916"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:18:06.957" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:18:06.961" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:18:06.959" starttime="20150623 08:18:06.952"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:18:06.968" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:18:06.970" starttime="20150623 08:18:06.964"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:06.977" starttime="20150623 08:18:06.972"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:06.990" starttime="20150623 08:18:06.979"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:06.992" starttime="20150623 08:18:06.938"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:07.033" starttime="20150623 08:18:07.028"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:18:07.044" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:18:07.043" starttime="20150623 08:18:07.035"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:18:07.056" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:18:07.057" starttime="20150623 08:18:07.047"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:07.080" starttime="20150623 08:18:07.075"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:18:07.086" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:18:07.128" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:07.131" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:18:07.130" starttime="20150623 08:18:07.082"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:18:07.139" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:18:07.216" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:07.219" level="INFO">${processes_string} = 20359 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor5.log
20374 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
20392 ?        S...</msg>
<status status="PASS" endtime="20150623 08:18:07.218" starttime="20150623 08:18:07.134"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:18:07.229" level="INFO">@{processes_list} = [ 20359 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor5.log | 20374 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 20392 ?   ...</msg>
<status status="PASS" endtime="20150623 08:18:07.227" starttime="20150623 08:18:07.222"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 20359 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor5.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:07.241" level="INFO">${pid} = 20359</msg>
<status status="PASS" endtime="20150623 08:18:07.240" starttime="20150623 08:18:07.235"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:07.248" level="INFO">Executing command 'kill -9 20359'.</msg>
<msg timestamp="20150623 08:18:07.291" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:07.293" starttime="20150623 08:18:07.244"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:07.294" starttime="20150623 08:18:07.233"></status>
</kw>
<kw type="foritem" name="${process} = 20374 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:07.304" level="INFO">${pid} = 20374</msg>
<status status="PASS" endtime="20150623 08:18:07.303" starttime="20150623 08:18:07.297"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:07.311" level="INFO">Executing command 'kill -9 20374'.</msg>
<msg timestamp="20150623 08:18:07.374" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:07.376" starttime="20150623 08:18:07.307"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:07.377" starttime="20150623 08:18:07.295"></status>
</kw>
<kw type="foritem" name="${process} = 20392 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:07.387" level="INFO">${pid} = 20392</msg>
<status status="PASS" endtime="20150623 08:18:07.386" starttime="20150623 08:18:07.380"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:07.394" level="INFO">Executing command 'kill -9 20392'.</msg>
<msg timestamp="20150623 08:18:07.466" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:18:07.468" starttime="20150623 08:18:07.390"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:07.469" starttime="20150623 08:18:07.378"></status>
</kw>
<kw type="foritem" name="${process} = 20408 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:07.479" level="INFO">${pid} = 20408</msg>
<status status="PASS" endtime="20150623 08:18:07.478" starttime="20150623 08:18:07.472"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:07.486" level="INFO">Executing command 'kill -9 20408'.</msg>
<msg timestamp="20150623 08:18:07.547" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:18:07.549" starttime="20150623 08:18:07.482"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:07.551" starttime="20150623 08:18:07.471"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:07.552" starttime="20150623 08:18:07.231"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:07.554" starttime="20150623 08:18:07.061"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:07.561" level="INFO">Starting command 'cat tmpfilemonitor5.log'.</msg>
<status status="PASS" endtime="20150623 08:18:07.590" starttime="20150623 08:18:07.556"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:18:07.596" level="INFO">Reading output of command 'cat tmpfilemonitor5.log'.</msg>
<msg timestamp="20150623 08:18:07.634" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:07.637" level="INFO">${stdout_string} = [2015-06-23 06:10:15,558][INFO ][Camel (ticket-router) thread #198 - JmsConsumer[inew-cs.provisioning]][StandardTicketRoute                               ][  96] Received ticket [ticket=1.0|321|2015-0...</msg>
<status status="PASS" endtime="20150623 08:18:07.636" starttime="20150623 08:18:07.593"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:07.645" level="INFO">Executing command 'rm tmpfilemonitor5.log'.</msg>
<msg timestamp="20150623 08:18:07.716" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:07.718" starttime="20150623 08:18:07.640"></status>
</kw>
<msg timestamp="20150623 08:18:07.723" level="INFO">${tailed_text} = [2015-06-23 06:10:15,558][INFO ][Camel (ticket-router) thread #198 - JmsConsumer[inew-cs.provisioning]][StandardTicketRoute                               ][  96] Received ticket [ticket=1.0|321|2015-0...</msg>
<status status="PASS" endtime="20150623 08:18:07.722" starttime="20150623 08:18:07.014"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:07.736" starttime="20150623 08:18:07.726"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:07.757" starttime="20150623 08:18:07.753"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:18:07.764" starttime="20150623 08:18:07.760"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:07.769" starttime="20150623 08:18:07.739"></status>
</kw>
<msg timestamp="20150623 08:18:07.775" level="INFO">${tailed_text} = [2015-06-23 06:10:15,558][INFO ][Camel (ticket-router) thread #198 - JmsConsumer[inew-cs.provisioning]][StandardTicketRoute                               ][  96] Received ticket [ticket=1.0|321|2015-0...</msg>
<status status="PASS" endtime="20150623 08:18:07.772" starttime="20150623 08:18:06.998"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:07.809" starttime="20150623 08:18:07.804"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:07.811" starttime="20150623 08:18:07.794"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:07.822" starttime="20150623 08:18:07.813"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:07.830" starttime="20150623 08:18:07.824"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:07.837" starttime="20150623 08:18:07.832"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:07.839" starttime="20150623 08:18:07.780"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:07.901" starttime="20150623 08:18:07.898"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:07.916" starttime="20150623 08:18:07.903"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:07.922" starttime="20150623 08:18:07.918"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:18:07.926" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:18:07.928" level="INFO">${queryResultSetLines} = 1004465|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:18:07.928" starttime="20150623 08:18:07.924"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:07.931" starttime="20150623 08:18:07.929"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:18:07.934" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:18:07.935" level="INFO">@{queryResultSet} = [ 1004465|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:18:07.935" starttime="20150623 08:18:07.932"></status>
</kw>
<msg timestamp="20150623 08:18:07.938" level="INFO">@{queryRows} = [ 1004465|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:18:07.937" starttime="20150623 08:18:07.884"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:18:07.941" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:18:07.942" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:18:07.942" starttime="20150623 08:18:07.939"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:18:07.945" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:18:07.947" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:18:07.946" starttime="20150623 08:18:07.944"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:18:07.955" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:18:07.956" starttime="20150623 08:18:07.953"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:07.956" starttime="20150623 08:18:07.948"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:07.962" starttime="20150623 08:18:07.958"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:07.963" starttime="20150623 08:18:07.867"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:07.964" starttime="20150623 08:18:06.352"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:07.965" starttime="20150623 08:18:06.345"></status>
</kw>
<msg timestamp="20150623 08:18:07.968" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:18:07.967" starttime="20150623 08:18:06.343"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:18:07.971" level="INFO">Index in the 2. loop: 2</msg>
<status status="PASS" endtime="20150623 08:18:07.972" starttime="20150623 08:18:07.969"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:18:07.975" level="INFO">Slept 0 seconds</msg>
<status status="PASS" endtime="20150623 08:18:07.976" starttime="20150623 08:18:07.973"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:18:07.981" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:18:07.980" starttime="20150623 08:18:07.977"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:07.982" starttime="20150623 08:18:06.342"></status>
</kw>
<kw type="foritem" name="${index} = 3">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:08.031" starttime="20150623 08:18:08.029"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:08.092" starttime="20150623 08:18:08.037"></status>
</kw>
<msg timestamp="20150623 08:18:08.097" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20150623 08:18:08.096" starttime="20150623 08:18:08.032"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:18:08.118" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:18:08.545" level="INFO">Read output: Last login: Tue Jun 23 06:18:06 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:18:08.548" starttime="20150623 08:18:08.113"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:08.550" starttime="20150623 08:18:08.100"></status>
</kw>
<msg timestamp="20150623 08:18:08.553" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20150623 08:18:08.553" starttime="20150623 08:18:08.020"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:08.564" starttime="20150623 08:18:08.562"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:08.568" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor6.log'.</msg>
<status status="PASS" endtime="20150623 08:18:08.572" starttime="20150623 08:18:08.565"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:08.573" starttime="20150623 08:18:08.555"></status>
</kw>
<msg timestamp="20150623 08:18:08.575" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20150623 08:18:08.574" starttime="20150623 08:18:08.008"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:08.600" starttime="20150623 08:18:08.593"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:08.603" starttime="20150623 08:18:08.587"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:18:08.625" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:18:08.628" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:18:08.627" starttime="20150623 08:18:08.620"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:18:08.635" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:18:08.637" starttime="20150623 08:18:08.631"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:08.643" starttime="20150623 08:18:08.639"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:08.656" starttime="20150623 08:18:08.645"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:08.658" starttime="20150623 08:18:08.607"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:08.694" starttime="20150623 08:18:08.690"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:18:08.705" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:18:08.704" starttime="20150623 08:18:08.696"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:18:08.715" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:18:08.716" starttime="20150623 08:18:08.708"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:08.737" starttime="20150623 08:18:08.733"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:18:08.743" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:18:08.807" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:08.811" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:18:08.809" starttime="20150623 08:18:08.739"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:18:08.819" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:18:08.898" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:08.901" level="INFO">${processes_string} = 20533 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor6.log
20548 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
20566 ?        S...</msg>
<status status="PASS" endtime="20150623 08:18:08.899" starttime="20150623 08:18:08.813"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:18:08.910" level="INFO">@{processes_list} = [ 20533 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor6.log | 20548 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 20566 ?   ...</msg>
<status status="PASS" endtime="20150623 08:18:08.909" starttime="20150623 08:18:08.903"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 20533 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor6.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:08.924" level="INFO">${pid} = 20533</msg>
<status status="PASS" endtime="20150623 08:18:08.922" starttime="20150623 08:18:08.917"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:08.931" level="INFO">Executing command 'kill -9 20533'.</msg>
<msg timestamp="20150623 08:18:08.977" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:08.979" starttime="20150623 08:18:08.927"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:08.980" starttime="20150623 08:18:08.915"></status>
</kw>
<kw type="foritem" name="${process} = 20548 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:08.990" level="INFO">${pid} = 20548</msg>
<status status="PASS" endtime="20150623 08:18:08.988" starttime="20150623 08:18:08.983"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:08.996" level="INFO">Executing command 'kill -9 20548'.</msg>
<msg timestamp="20150623 08:18:09.068" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:09.071" starttime="20150623 08:18:08.992"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:09.073" starttime="20150623 08:18:08.981"></status>
</kw>
<kw type="foritem" name="${process} = 20566 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:09.084" level="INFO">${pid} = 20566</msg>
<status status="PASS" endtime="20150623 08:18:09.083" starttime="20150623 08:18:09.077"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:09.090" level="INFO">Executing command 'kill -9 20566'.</msg>
<msg timestamp="20150623 08:18:09.148" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:18:09.150" starttime="20150623 08:18:09.086"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:09.151" starttime="20150623 08:18:09.075"></status>
</kw>
<kw type="foritem" name="${process} = 20582 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:09.161" level="INFO">${pid} = 20582</msg>
<status status="PASS" endtime="20150623 08:18:09.159" starttime="20150623 08:18:09.154"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:09.167" level="INFO">Executing command 'kill -9 20582'.</msg>
<msg timestamp="20150623 08:18:09.219" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:18:09.221" starttime="20150623 08:18:09.163"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:09.223" starttime="20150623 08:18:09.152"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:09.223" starttime="20150623 08:18:08.912"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:09.226" starttime="20150623 08:18:08.720"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:09.234" level="INFO">Starting command 'cat tmpfilemonitor6.log'.</msg>
<status status="PASS" endtime="20150623 08:18:09.262" starttime="20150623 08:18:09.229"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:18:09.267" level="INFO">Reading output of command 'cat tmpfilemonitor6.log'.</msg>
<msg timestamp="20150623 08:18:09.284" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:09.287" level="INFO">${stdout_string} = [2015-06-23 06:18:03,490][INFO ][Camel (ticket-router) thread #53 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:09.285" starttime="20150623 08:18:09.265"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:09.294" level="INFO">Executing command 'rm tmpfilemonitor6.log'.</msg>
<msg timestamp="20150623 08:18:09.364" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:09.366" starttime="20150623 08:18:09.289"></status>
</kw>
<msg timestamp="20150623 08:18:09.372" level="INFO">${tailed_text} = [2015-06-23 06:18:03,490][INFO ][Camel (ticket-router) thread #53 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:09.369" starttime="20150623 08:18:08.678"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:09.385" starttime="20150623 08:18:09.374"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:09.406" starttime="20150623 08:18:09.401"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:18:09.412" starttime="20150623 08:18:09.408"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:09.418" starttime="20150623 08:18:09.388"></status>
</kw>
<msg timestamp="20150623 08:18:09.424" level="INFO">${tailed_text} = [2015-06-23 06:18:03,490][INFO ][Camel (ticket-router) thread #53 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:09.421" starttime="20150623 08:18:08.663"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:09.456" starttime="20150623 08:18:09.452"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:09.458" starttime="20150623 08:18:09.443"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:09.469" starttime="20150623 08:18:09.460"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:09.532" starttime="20150623 08:18:09.524"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:09.541" starttime="20150623 08:18:09.535"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:09.544" starttime="20150623 08:18:09.430"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:09.613" starttime="20150623 08:18:09.610"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:09.627" starttime="20150623 08:18:09.616"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:09.632" starttime="20150623 08:18:09.629"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:18:09.639" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:18:09.643" level="INFO">${queryResultSetLines} = 1004466|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:18:09.641" starttime="20150623 08:18:09.635"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:09.649" starttime="20150623 08:18:09.645"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:18:09.655" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:18:09.658" level="INFO">@{queryResultSet} = [ 1004466|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:18:09.657" starttime="20150623 08:18:09.651"></status>
</kw>
<msg timestamp="20150623 08:18:09.663" level="INFO">@{queryRows} = [ 1004466|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:18:09.661" starttime="20150623 08:18:09.595"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:18:09.670" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:18:09.673" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:18:09.672" starttime="20150623 08:18:09.665"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:18:09.680" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:18:09.683" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:18:09.682" starttime="20150623 08:18:09.676"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:18:09.699" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:18:09.701" starttime="20150623 08:18:09.695"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:09.703" starttime="20150623 08:18:09.685"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:09.714" starttime="20150623 08:18:09.705"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:09.716" starttime="20150623 08:18:09.574"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:09.718" starttime="20150623 08:18:07.991"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:09.722" starttime="20150623 08:18:07.985"></status>
</kw>
<msg timestamp="20150623 08:18:09.727" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:18:09.725" starttime="20150623 08:18:07.984"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:18:09.734" level="INFO">Index in the 2. loop: 3</msg>
<status status="PASS" endtime="20150623 08:18:09.735" starttime="20150623 08:18:09.729"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:18:09.743" level="INFO">Slept 0 seconds</msg>
<status status="PASS" endtime="20150623 08:18:09.744" starttime="20150623 08:18:09.737"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:18:09.756" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:18:09.755" starttime="20150623 08:18:09.746"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:09.758" starttime="20150623 08:18:07.983"></status>
</kw>
<kw type="foritem" name="${index} = 4">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:09.826" starttime="20150623 08:18:09.824"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:09.888" starttime="20150623 08:18:09.832"></status>
</kw>
<msg timestamp="20150623 08:18:09.892" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20150623 08:18:09.890" starttime="20150623 08:18:09.827"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:18:09.911" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:18:10.343" level="INFO">Read output: Last login: Tue Jun 23 06:18:08 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:18:10.345" starttime="20150623 08:18:09.906"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:10.346" starttime="20150623 08:18:09.894"></status>
</kw>
<msg timestamp="20150623 08:18:10.349" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20150623 08:18:10.348" starttime="20150623 08:18:09.815"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:10.359" starttime="20150623 08:18:10.357"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:10.362" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor7.log'.</msg>
<status status="PASS" endtime="20150623 08:18:10.366" starttime="20150623 08:18:10.360"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:10.367" starttime="20150623 08:18:10.351"></status>
</kw>
<msg timestamp="20150623 08:18:10.369" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20150623 08:18:10.368" starttime="20150623 08:18:09.805"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:10.391" starttime="20150623 08:18:10.385"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:10.394" starttime="20150623 08:18:10.380"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:18:10.412" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:18:10.416" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:18:10.415" starttime="20150623 08:18:10.408"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:18:10.422" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:18:10.424" starttime="20150623 08:18:10.419"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:10.430" starttime="20150623 08:18:10.427"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:10.443" starttime="20150623 08:18:10.432"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:10.445" starttime="20150623 08:18:10.397"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:10.475" starttime="20150623 08:18:10.471"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:18:10.486" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:18:10.485" starttime="20150623 08:18:10.477"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:18:10.496" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:18:10.497" starttime="20150623 08:18:10.489"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:10.515" starttime="20150623 08:18:10.511"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:18:10.521" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:18:10.560" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:10.563" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:18:10.562" starttime="20150623 08:18:10.518"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:18:10.570" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:18:10.653" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:10.656" level="INFO">${processes_string} = 20707 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor7.log
20722 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
20740 ?        S...</msg>
<status status="PASS" endtime="20150623 08:18:10.655" starttime="20150623 08:18:10.566"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:18:10.664" level="INFO">@{processes_list} = [ 20707 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor7.log | 20722 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 20740 ?   ...</msg>
<status status="PASS" endtime="20150623 08:18:10.663" starttime="20150623 08:18:10.658"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 20707 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor7.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:10.676" level="INFO">${pid} = 20707</msg>
<status status="PASS" endtime="20150623 08:18:10.675" starttime="20150623 08:18:10.670"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:10.682" level="INFO">Executing command 'kill -9 20707'.</msg>
<msg timestamp="20150623 08:18:10.730" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:10.732" starttime="20150623 08:18:10.678"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:10.733" starttime="20150623 08:18:10.668"></status>
</kw>
<kw type="foritem" name="${process} = 20722 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:10.742" level="INFO">${pid} = 20722</msg>
<status status="PASS" endtime="20150623 08:18:10.741" starttime="20150623 08:18:10.736"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:10.748" level="INFO">Executing command 'kill -9 20722'.</msg>
<msg timestamp="20150623 08:18:10.812" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:10.813" starttime="20150623 08:18:10.744"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:10.815" starttime="20150623 08:18:10.734"></status>
</kw>
<kw type="foritem" name="${process} = 20740 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:10.823" level="INFO">${pid} = 20740</msg>
<status status="PASS" endtime="20150623 08:18:10.822" starttime="20150623 08:18:10.817"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:10.829" level="INFO">Executing command 'kill -9 20740'.</msg>
<msg timestamp="20150623 08:18:10.894" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:18:10.895" starttime="20150623 08:18:10.826"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:10.897" starttime="20150623 08:18:10.816"></status>
</kw>
<kw type="foritem" name="${process} = 20756 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:10.905" level="INFO">${pid} = 20756</msg>
<status status="PASS" endtime="20150623 08:18:10.904" starttime="20150623 08:18:10.899"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:10.912" level="INFO">Executing command 'kill -9 20756'.</msg>
<msg timestamp="20150623 08:18:10.972" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:18:10.974" starttime="20150623 08:18:10.908"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:10.975" starttime="20150623 08:18:10.898"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:10.976" starttime="20150623 08:18:10.666"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:10.978" starttime="20150623 08:18:10.501"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:10.984" level="INFO">Starting command 'cat tmpfilemonitor7.log'.</msg>
<status status="PASS" endtime="20150623 08:18:11.016" starttime="20150623 08:18:10.980"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:18:11.022" level="INFO">Reading output of command 'cat tmpfilemonitor7.log'.</msg>
<msg timestamp="20150623 08:18:11.046" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:11.048" level="INFO">${stdout_string} = [2015-06-23 06:18:05,185][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:11.047" starttime="20150623 08:18:11.019"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:11.055" level="INFO">Executing command 'rm tmpfilemonitor7.log'.</msg>
<msg timestamp="20150623 08:18:11.134" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:11.135" starttime="20150623 08:18:11.051"></status>
</kw>
<msg timestamp="20150623 08:18:11.140" level="INFO">${tailed_text} = [2015-06-23 06:18:05,185][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:11.138" starttime="20150623 08:18:10.461"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:11.152" starttime="20150623 08:18:11.142"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:11.169" starttime="20150623 08:18:11.165"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:18:11.175" starttime="20150623 08:18:11.171"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:11.179" starttime="20150623 08:18:11.155"></status>
</kw>
<msg timestamp="20150623 08:18:11.184" level="INFO">${tailed_text} = [2015-06-23 06:18:05,185][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:11.182" starttime="20150623 08:18:10.450"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:11.212" starttime="20150623 08:18:11.208"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:11.214" starttime="20150623 08:18:11.199"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:11.224" starttime="20150623 08:18:11.216"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:11.231" starttime="20150623 08:18:11.227"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:11.238" starttime="20150623 08:18:11.233"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:11.239" starttime="20150623 08:18:11.189"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:11.291" starttime="20150623 08:18:11.287"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:11.301" starttime="20150623 08:18:11.293"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:11.303" starttime="20150623 08:18:11.302"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:18:11.306" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:18:11.308" level="INFO">${queryResultSetLines} = 1004467|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:18:11.307" starttime="20150623 08:18:11.304"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:11.310" starttime="20150623 08:18:11.309"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:18:11.313" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:18:11.314" level="INFO">@{queryResultSet} = [ 1004467|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:18:11.313" starttime="20150623 08:18:11.311"></status>
</kw>
<msg timestamp="20150623 08:18:11.316" level="INFO">@{queryRows} = [ 1004467|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:18:11.315" starttime="20150623 08:18:11.277"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:18:11.319" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:18:11.320" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:18:11.319" starttime="20150623 08:18:11.317"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:18:11.322" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:18:11.324" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:18:11.323" starttime="20150623 08:18:11.321"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:18:11.331" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:18:11.331" starttime="20150623 08:18:11.329"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:11.332" starttime="20150623 08:18:11.325"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:11.337" starttime="20150623 08:18:11.333"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:11.338" starttime="20150623 08:18:11.263"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:11.339" starttime="20150623 08:18:09.777"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:11.340" starttime="20150623 08:18:09.765"></status>
</kw>
<msg timestamp="20150623 08:18:11.342" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:18:11.341" starttime="20150623 08:18:09.761"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:18:11.345" level="INFO">Index in the 2. loop: 4</msg>
<status status="PASS" endtime="20150623 08:18:11.346" starttime="20150623 08:18:11.343"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:18:11.349" level="INFO">Slept 0 seconds</msg>
<status status="PASS" endtime="20150623 08:18:11.350" starttime="20150623 08:18:11.347"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:18:11.355" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:18:11.354" starttime="20150623 08:18:11.351"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:11.356" starttime="20150623 08:18:09.760"></status>
</kw>
<kw type="foritem" name="${index} = 5">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:11.395" starttime="20150623 08:18:11.393"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:11.447" starttime="20150623 08:18:11.401"></status>
</kw>
<msg timestamp="20150623 08:18:11.449" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20150623 08:18:11.448" starttime="20150623 08:18:11.396"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:18:11.458" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:18:11.853" level="INFO">Read output: Last login: Tue Jun 23 06:18:10 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:18:11.856" starttime="20150623 08:18:11.456"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:11.859" starttime="20150623 08:18:11.450"></status>
</kw>
<msg timestamp="20150623 08:18:11.868" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20150623 08:18:11.866" starttime="20150623 08:18:11.387"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:11.891" starttime="20150623 08:18:11.887"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:11.898" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor8.log'.</msg>
<status status="PASS" endtime="20150623 08:18:11.904" starttime="20150623 08:18:11.893"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:11.906" starttime="20150623 08:18:11.875"></status>
</kw>
<msg timestamp="20150623 08:18:11.910" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20150623 08:18:11.908" starttime="20150623 08:18:11.378"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:11.952" starttime="20150623 08:18:11.944"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:11.955" starttime="20150623 08:18:11.933"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:18:11.971" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:18:11.974" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:18:11.973" starttime="20150623 08:18:11.967"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:18:11.980" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:18:11.981" starttime="20150623 08:18:11.976"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:11.986" starttime="20150623 08:18:11.983"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:11.999" starttime="20150623 08:18:11.988"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:12.001" starttime="20150623 08:18:11.958"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:12.031" starttime="20150623 08:18:12.027"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:18:12.041" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:18:12.040" starttime="20150623 08:18:12.033"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:18:12.050" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:18:12.052" starttime="20150623 08:18:12.043"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:12.069" starttime="20150623 08:18:12.065"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:18:12.074" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:18:12.115" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:12.117" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:18:12.116" starttime="20150623 08:18:12.072"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:18:12.124" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:18:12.205" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:12.208" level="INFO">${processes_string} = 20882 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor8.log
20897 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
20915 ?        S...</msg>
<status status="PASS" endtime="20150623 08:18:12.207" starttime="20150623 08:18:12.120"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:18:12.216" level="INFO">@{processes_list} = [ 20882 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor8.log | 20897 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 20915 ?   ...</msg>
<status status="PASS" endtime="20150623 08:18:12.215" starttime="20150623 08:18:12.211"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 20882 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor8.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:12.227" level="INFO">${pid} = 20882</msg>
<status status="PASS" endtime="20150623 08:18:12.225" starttime="20150623 08:18:12.221"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:12.232" level="INFO">Executing command 'kill -9 20882'.</msg>
<msg timestamp="20150623 08:18:12.283" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:12.284" starttime="20150623 08:18:12.229"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:12.286" starttime="20150623 08:18:12.220"></status>
</kw>
<kw type="foritem" name="${process} = 20897 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:12.294" level="INFO">${pid} = 20897</msg>
<status status="PASS" endtime="20150623 08:18:12.292" starttime="20150623 08:18:12.288"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:12.299" level="INFO">Executing command 'kill -9 20897'.</msg>
<msg timestamp="20150623 08:18:12.354" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:12.356" starttime="20150623 08:18:12.296"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:12.357" starttime="20150623 08:18:12.287"></status>
</kw>
<kw type="foritem" name="${process} = 20915 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:12.365" level="INFO">${pid} = 20915</msg>
<status status="PASS" endtime="20150623 08:18:12.364" starttime="20150623 08:18:12.359"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:12.370" level="INFO">Executing command 'kill -9 20915'.</msg>
<msg timestamp="20150623 08:18:12.427" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:18:12.428" starttime="20150623 08:18:12.367"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:12.430" starttime="20150623 08:18:12.358"></status>
</kw>
<kw type="foritem" name="${process} = 20931 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:12.438" level="INFO">${pid} = 20931</msg>
<status status="PASS" endtime="20150623 08:18:12.437" starttime="20150623 08:18:12.432"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:12.443" level="INFO">Executing command 'kill -9 20931'.</msg>
<msg timestamp="20150623 08:18:12.500" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:18:12.502" starttime="20150623 08:18:12.440"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:12.503" starttime="20150623 08:18:12.431"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:12.504" starttime="20150623 08:18:12.218"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:12.505" starttime="20150623 08:18:12.055"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:12.511" level="INFO">Starting command 'cat tmpfilemonitor8.log'.</msg>
<status status="PASS" endtime="20150623 08:18:12.543" starttime="20150623 08:18:12.507"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:18:12.547" level="INFO">Reading output of command 'cat tmpfilemonitor8.log'.</msg>
<msg timestamp="20150623 08:18:12.578" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:12.581" level="INFO">${stdout_string} = [2015-06-23 06:18:07,023][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:12.580" starttime="20150623 08:18:12.545"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:12.587" level="INFO">Executing command 'rm tmpfilemonitor8.log'.</msg>
<msg timestamp="20150623 08:18:12.665" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:12.667" starttime="20150623 08:18:12.583"></status>
</kw>
<msg timestamp="20150623 08:18:12.670" level="INFO">${tailed_text} = [2015-06-23 06:18:07,023][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:12.669" starttime="20150623 08:18:12.018"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:12.682" starttime="20150623 08:18:12.673"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:12.698" starttime="20150623 08:18:12.694"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:18:12.704" starttime="20150623 08:18:12.701"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:12.709" starttime="20150623 08:18:12.685"></status>
</kw>
<msg timestamp="20150623 08:18:12.713" level="INFO">${tailed_text} = [2015-06-23 06:18:07,023][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:12.712" starttime="20150623 08:18:12.007"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:12.741" starttime="20150623 08:18:12.737"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:12.742" starttime="20150623 08:18:12.728"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:12.752" starttime="20150623 08:18:12.744"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:12.758" starttime="20150623 08:18:12.754"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:12.764" starttime="20150623 08:18:12.760"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:12.766" starttime="20150623 08:18:12.718"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:12.806" starttime="20150623 08:18:12.805"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:12.813" starttime="20150623 08:18:12.807"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:12.815" starttime="20150623 08:18:12.813"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:18:12.818" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:18:12.819" level="INFO">${queryResultSetLines} = 1004468|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:18:12.818" starttime="20150623 08:18:12.816"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:12.821" starttime="20150623 08:18:12.820"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:18:12.824" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:18:12.825" level="INFO">@{queryResultSet} = [ 1004468|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:18:12.824" starttime="20150623 08:18:12.822"></status>
</kw>
<msg timestamp="20150623 08:18:12.826" level="INFO">@{queryRows} = [ 1004468|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:18:12.826" starttime="20150623 08:18:12.801"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:18:12.829" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:18:12.830" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:18:12.830" starttime="20150623 08:18:12.827"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:18:12.833" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:18:12.834" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:18:12.833" starttime="20150623 08:18:12.831"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:18:12.841" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:18:12.841" starttime="20150623 08:18:12.839"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:12.842" starttime="20150623 08:18:12.835"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:12.846" starttime="20150623 08:18:12.843"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:12.847" starttime="20150623 08:18:12.789"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:12.848" starttime="20150623 08:18:11.363"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:12.849" starttime="20150623 08:18:11.359"></status>
</kw>
<msg timestamp="20150623 08:18:12.851" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:18:12.850" starttime="20150623 08:18:11.357"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:18:12.854" level="INFO">Index in the 2. loop: 5</msg>
<status status="PASS" endtime="20150623 08:18:12.855" starttime="20150623 08:18:12.852"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:18:12.857" level="INFO">Slept 0 seconds</msg>
<status status="PASS" endtime="20150623 08:18:12.858" starttime="20150623 08:18:12.856"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:18:12.863" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:18:12.862" starttime="20150623 08:18:12.859"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:12.863" starttime="20150623 08:18:11.357"></status>
</kw>
<kw type="foritem" name="${index} = 6">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:12.899" starttime="20150623 08:18:12.898"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:12.961" starttime="20150623 08:18:12.905"></status>
</kw>
<msg timestamp="20150623 08:18:12.964" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20150623 08:18:12.963" starttime="20150623 08:18:12.900"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:18:12.982" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:18:13.384" level="INFO">Read output: Last login: Tue Jun 23 06:18:11 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:18:13.385" starttime="20150623 08:18:12.978"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:13.387" starttime="20150623 08:18:12.967"></status>
</kw>
<msg timestamp="20150623 08:18:13.389" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20150623 08:18:13.388" starttime="20150623 08:18:12.892"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:13.398" starttime="20150623 08:18:13.396"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:13.401" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor9.log'.</msg>
<status status="PASS" endtime="20150623 08:18:13.405" starttime="20150623 08:18:13.399"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:13.406" starttime="20150623 08:18:13.391"></status>
</kw>
<msg timestamp="20150623 08:18:13.408" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20150623 08:18:13.407" starttime="20150623 08:18:12.883"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:13.430" starttime="20150623 08:18:13.423"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:13.432" starttime="20150623 08:18:13.418"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:18:13.449" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:18:13.452" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:18:13.450" starttime="20150623 08:18:13.444"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:18:13.457" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:18:13.459" starttime="20150623 08:18:13.454"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:13.464" starttime="20150623 08:18:13.460"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:13.478" starttime="20150623 08:18:13.466"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:13.480" starttime="20150623 08:18:13.435"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:13.506" starttime="20150623 08:18:13.503"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:18:13.517" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:18:13.515" starttime="20150623 08:18:13.508"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:18:13.525" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:18:13.526" starttime="20150623 08:18:13.519"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:13.541" starttime="20150623 08:18:13.537"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:18:13.546" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:18:13.590" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:13.592" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:18:13.591" starttime="20150623 08:18:13.543"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:18:13.599" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:18:13.742" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:13.747" level="INFO">${processes_string} = 21056 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor9.log
21071 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
21089 ?        S...</msg>
<status status="PASS" endtime="20150623 08:18:13.745" starttime="20150623 08:18:13.595"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:18:13.759" level="INFO">@{processes_list} = [ 21056 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor9.log | 21071 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 21089 ?   ...</msg>
<status status="PASS" endtime="20150623 08:18:13.758" starttime="20150623 08:18:13.751"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 21056 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor9.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:13.771" level="INFO">${pid} = 21056</msg>
<status status="PASS" endtime="20150623 08:18:13.770" starttime="20150623 08:18:13.765"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:13.778" level="INFO">Executing command 'kill -9 21056'.</msg>
<msg timestamp="20150623 08:18:13.823" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:13.824" starttime="20150623 08:18:13.774"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:13.826" starttime="20150623 08:18:13.764"></status>
</kw>
<kw type="foritem" name="${process} = 21071 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:13.833" level="INFO">${pid} = 21071</msg>
<status status="PASS" endtime="20150623 08:18:13.832" starttime="20150623 08:18:13.828"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:13.839" level="INFO">Executing command 'kill -9 21071'.</msg>
<msg timestamp="20150623 08:18:13.901" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:13.903" starttime="20150623 08:18:13.835"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:13.904" starttime="20150623 08:18:13.827"></status>
</kw>
<kw type="foritem" name="${process} = 21089 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:13.912" level="INFO">${pid} = 21089</msg>
<status status="PASS" endtime="20150623 08:18:13.911" starttime="20150623 08:18:13.906"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:13.917" level="INFO">Executing command 'kill -9 21089'.</msg>
<msg timestamp="20150623 08:18:13.970" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:18:13.971" starttime="20150623 08:18:13.914"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:13.973" starttime="20150623 08:18:13.905"></status>
</kw>
<kw type="foritem" name="${process} = 21105 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:13.980" level="INFO">${pid} = 21105</msg>
<status status="PASS" endtime="20150623 08:18:13.979" starttime="20150623 08:18:13.975"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:13.986" level="INFO">Executing command 'kill -9 21105'.</msg>
<msg timestamp="20150623 08:18:14.039" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:18:14.041" starttime="20150623 08:18:13.983"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:14.044" starttime="20150623 08:18:13.973"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:14.045" starttime="20150623 08:18:13.762"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:14.048" starttime="20150623 08:18:13.529"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:14.055" level="INFO">Starting command 'cat tmpfilemonitor9.log'.</msg>
<status status="PASS" endtime="20150623 08:18:14.082" starttime="20150623 08:18:14.051"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:18:14.087" level="INFO">Reading output of command 'cat tmpfilemonitor9.log'.</msg>
<msg timestamp="20150623 08:18:14.123" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:14.125" level="INFO">${stdout_string} = [2015-06-23 06:18:08,687][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:14.124" starttime="20150623 08:18:14.084"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:14.131" level="INFO">Executing command 'rm tmpfilemonitor9.log'.</msg>
<msg timestamp="20150623 08:18:14.207" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:14.208" starttime="20150623 08:18:14.127"></status>
</kw>
<msg timestamp="20150623 08:18:14.213" level="INFO">${tailed_text} = [2015-06-23 06:18:08,687][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:14.211" starttime="20150623 08:18:13.494"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:14.224" starttime="20150623 08:18:14.215"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:14.238" starttime="20150623 08:18:14.234"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:18:14.244" starttime="20150623 08:18:14.240"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:14.250" starttime="20150623 08:18:14.227"></status>
</kw>
<msg timestamp="20150623 08:18:14.254" level="INFO">${tailed_text} = [2015-06-23 06:18:08,687][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:14.252" starttime="20150623 08:18:13.484"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:14.280" starttime="20150623 08:18:14.276"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:14.281" starttime="20150623 08:18:14.268"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:14.291" starttime="20150623 08:18:14.283"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:14.298" starttime="20150623 08:18:14.293"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:14.303" starttime="20150623 08:18:14.300"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:14.305" starttime="20150623 08:18:14.259"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:14.350" starttime="20150623 08:18:14.347"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:14.360" starttime="20150623 08:18:14.351"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:14.365" starttime="20150623 08:18:14.362"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:18:14.371" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:18:14.374" level="INFO">${queryResultSetLines} = 1004469|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:18:14.373" starttime="20150623 08:18:14.368"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:14.379" starttime="20150623 08:18:14.376"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:18:14.386" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:18:14.388" level="INFO">@{queryResultSet} = [ 1004469|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:18:14.387" starttime="20150623 08:18:14.382"></status>
</kw>
<msg timestamp="20150623 08:18:14.392" level="INFO">@{queryRows} = [ 1004469|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:18:14.391" starttime="20150623 08:18:14.338"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:18:14.398" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:18:14.400" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:18:14.399" starttime="20150623 08:18:14.394"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:18:14.406" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:18:14.408" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:18:14.407" starttime="20150623 08:18:14.402"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:18:14.426" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:18:14.428" starttime="20150623 08:18:14.423"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:14.429" starttime="20150623 08:18:14.414"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:14.439" starttime="20150623 08:18:14.431"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:14.441" starttime="20150623 08:18:14.327"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:14.442" starttime="20150623 08:18:12.870"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:14.445" starttime="20150623 08:18:12.866"></status>
</kw>
<msg timestamp="20150623 08:18:14.449" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:18:14.447" starttime="20150623 08:18:12.865"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:18:14.455" level="INFO">Index in the 2. loop: 6</msg>
<status status="PASS" endtime="20150623 08:18:14.456" starttime="20150623 08:18:14.451"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:18:14.464" level="INFO">Slept 0 seconds</msg>
<status status="PASS" endtime="20150623 08:18:14.465" starttime="20150623 08:18:14.458"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:18:14.476" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:18:14.475" starttime="20150623 08:18:14.468"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:14.478" starttime="20150623 08:18:12.864"></status>
</kw>
<kw type="foritem" name="${index} = 7">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:14.551" starttime="20150623 08:18:14.549"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:14.608" starttime="20150623 08:18:14.556"></status>
</kw>
<msg timestamp="20150623 08:18:14.611" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20150623 08:18:14.610" starttime="20150623 08:18:14.552"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:18:14.628" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:18:14.974" level="INFO">Read output: Last login: Tue Jun 23 06:18:13 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:18:14.976" starttime="20150623 08:18:14.624"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:14.978" starttime="20150623 08:18:14.613"></status>
</kw>
<msg timestamp="20150623 08:18:14.982" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20150623 08:18:14.981" starttime="20150623 08:18:14.537"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:14.999" starttime="20150623 08:18:14.995"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:15.006" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor10.log'.</msg>
<status status="PASS" endtime="20150623 08:18:15.010" starttime="20150623 08:18:15.001"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:15.012" starttime="20150623 08:18:14.986"></status>
</kw>
<msg timestamp="20150623 08:18:15.018" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20150623 08:18:15.016" starttime="20150623 08:18:14.520"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:15.055" starttime="20150623 08:18:15.047"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:15.057" starttime="20150623 08:18:15.039"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:18:15.072" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:18:15.075" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:18:15.074" starttime="20150623 08:18:15.068"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:18:15.081" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:18:15.082" starttime="20150623 08:18:15.077"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:15.087" starttime="20150623 08:18:15.084"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:15.105" starttime="20150623 08:18:15.089"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:15.107" starttime="20150623 08:18:15.060"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:15.131" starttime="20150623 08:18:15.127"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:18:15.141" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:18:15.140" starttime="20150623 08:18:15.133"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:18:15.149" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:18:15.151" starttime="20150623 08:18:15.143"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:15.165" starttime="20150623 08:18:15.161"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:18:15.169" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:18:15.213" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:15.214" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:18:15.214" starttime="20150623 08:18:15.167"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:18:15.217" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:18:15.312" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:15.313" level="INFO">${processes_string} = 21234 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor10.log
21249 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
21267 ?        ...</msg>
<status status="PASS" endtime="20150623 08:18:15.313" starttime="20150623 08:18:15.215"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:18:15.317" level="INFO">@{processes_list} = [ 21234 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor10.log | 21249 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 21267 ?  ...</msg>
<status status="PASS" endtime="20150623 08:18:15.316" starttime="20150623 08:18:15.314"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 21234 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor10.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:15.321" level="INFO">${pid} = 21234</msg>
<status status="PASS" endtime="20150623 08:18:15.320" starttime="20150623 08:18:15.319"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:15.323" level="INFO">Executing command 'kill -9 21234'.</msg>
<msg timestamp="20150623 08:18:15.392" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:15.393" starttime="20150623 08:18:15.322"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:15.395" starttime="20150623 08:18:15.318"></status>
</kw>
<kw type="foritem" name="${process} = 21249 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:15.403" level="INFO">${pid} = 21249</msg>
<status status="PASS" endtime="20150623 08:18:15.402" starttime="20150623 08:18:15.397"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:15.408" level="INFO">Executing command 'kill -9 21249'.</msg>
<msg timestamp="20150623 08:18:15.472" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:15.474" starttime="20150623 08:18:15.405"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:15.475" starttime="20150623 08:18:15.396"></status>
</kw>
<kw type="foritem" name="${process} = 21267 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:15.483" level="INFO">${pid} = 21267</msg>
<status status="PASS" endtime="20150623 08:18:15.482" starttime="20150623 08:18:15.478"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:15.488" level="INFO">Executing command 'kill -9 21267'.</msg>
<msg timestamp="20150623 08:18:15.544" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:18:15.545" starttime="20150623 08:18:15.485"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:15.546" starttime="20150623 08:18:15.476"></status>
</kw>
<kw type="foritem" name="${process} = 21283 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:15.554" level="INFO">${pid} = 21283</msg>
<status status="PASS" endtime="20150623 08:18:15.553" starttime="20150623 08:18:15.548"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:15.559" level="INFO">Executing command 'kill -9 21283'.</msg>
<msg timestamp="20150623 08:18:15.618" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:18:15.619" starttime="20150623 08:18:15.556"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:15.620" starttime="20150623 08:18:15.547"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:15.621" starttime="20150623 08:18:15.317"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:15.622" starttime="20150623 08:18:15.153"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:15.627" level="INFO">Starting command 'cat tmpfilemonitor10.log'.</msg>
<status status="PASS" endtime="20150623 08:18:15.660" starttime="20150623 08:18:15.624"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:18:15.664" level="INFO">Reading output of command 'cat tmpfilemonitor10.log'.</msg>
<msg timestamp="20150623 08:18:15.693" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:15.695" level="INFO">${stdout_string} = [2015-06-23 06:18:10,477][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:15.694" starttime="20150623 08:18:15.662"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:15.701" level="INFO">Executing command 'rm tmpfilemonitor10.log'.</msg>
<msg timestamp="20150623 08:18:15.764" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:15.765" starttime="20150623 08:18:15.697"></status>
</kw>
<msg timestamp="20150623 08:18:15.769" level="INFO">${tailed_text} = [2015-06-23 06:18:10,477][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:15.768" starttime="20150623 08:18:15.120"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:15.779" starttime="20150623 08:18:15.771"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:15.792" starttime="20150623 08:18:15.789"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:18:15.797" starttime="20150623 08:18:15.794"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:15.803" starttime="20150623 08:18:15.782"></status>
</kw>
<msg timestamp="20150623 08:18:15.806" level="INFO">${tailed_text} = [2015-06-23 06:18:10,477][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:15.805" starttime="20150623 08:18:15.111"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:15.829" starttime="20150623 08:18:15.825"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:15.830" starttime="20150623 08:18:15.818"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:15.839" starttime="20150623 08:18:15.832"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:15.845" starttime="20150623 08:18:15.841"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:15.850" starttime="20150623 08:18:15.847"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:15.852" starttime="20150623 08:18:15.810"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:15.892" starttime="20150623 08:18:15.890"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:15.914" starttime="20150623 08:18:15.898"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:15.924" starttime="20150623 08:18:15.920"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:18:15.930" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:18:15.933" level="INFO">${queryResultSetLines} = 1004470|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:18:15.932" starttime="20150623 08:18:15.926"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:15.938" starttime="20150623 08:18:15.935"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:18:15.943" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:18:15.945" level="INFO">@{queryResultSet} = [ 1004470|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:18:15.944" starttime="20150623 08:18:15.940"></status>
</kw>
<msg timestamp="20150623 08:18:15.949" level="INFO">@{queryRows} = [ 1004470|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:18:15.948" starttime="20150623 08:18:15.882"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:18:15.954" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:18:15.957" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:18:15.956" starttime="20150623 08:18:15.951"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:18:15.962" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:18:15.964" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:18:15.963" starttime="20150623 08:18:15.959"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:18:15.978" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:18:15.979" starttime="20150623 08:18:15.974"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:15.981" starttime="20150623 08:18:15.966"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:15.993" starttime="20150623 08:18:15.983"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:15.995" starttime="20150623 08:18:15.871"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:15.997" starttime="20150623 08:18:14.493"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:15.999" starttime="20150623 08:18:14.484"></status>
</kw>
<msg timestamp="20150623 08:18:16.004" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:18:16.002" starttime="20150623 08:18:14.481"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:18:16.009" level="INFO">Index in the 2. loop: 7</msg>
<status status="PASS" endtime="20150623 08:18:16.010" starttime="20150623 08:18:16.006"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:18:16.016" level="INFO">Slept 0 seconds</msg>
<status status="PASS" endtime="20150623 08:18:16.017" starttime="20150623 08:18:16.012"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:18:16.026" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:18:16.025" starttime="20150623 08:18:16.019"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:16.027" starttime="20150623 08:18:14.479"></status>
</kw>
<kw type="foritem" name="${index} = 8">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:16.095" starttime="20150623 08:18:16.092"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:16.165" starttime="20150623 08:18:16.105"></status>
</kw>
<msg timestamp="20150623 08:18:16.168" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20150623 08:18:16.167" starttime="20150623 08:18:16.096"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:18:16.183" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:18:16.569" level="INFO">Read output: Last login: Tue Jun 23 06:18:14 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:18:16.571" starttime="20150623 08:18:16.179"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:16.574" starttime="20150623 08:18:16.170"></status>
</kw>
<msg timestamp="20150623 08:18:16.579" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20150623 08:18:16.577" starttime="20150623 08:18:16.081"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:16.600" starttime="20150623 08:18:16.595"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:16.607" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor11.log'.</msg>
<status status="PASS" endtime="20150623 08:18:16.612" starttime="20150623 08:18:16.602"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:16.615" starttime="20150623 08:18:16.585"></status>
</kw>
<msg timestamp="20150623 08:18:16.618" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20150623 08:18:16.617" starttime="20150623 08:18:16.066"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:16.654" starttime="20150623 08:18:16.646"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:16.656" starttime="20150623 08:18:16.638"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:18:16.675" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:18:16.678" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:18:16.677" starttime="20150623 08:18:16.666"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:18:16.682" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:18:16.684" starttime="20150623 08:18:16.680"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:16.688" starttime="20150623 08:18:16.685"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:16.701" starttime="20150623 08:18:16.690"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:16.702" starttime="20150623 08:18:16.659"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:16.725" starttime="20150623 08:18:16.721"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:18:16.734" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:18:16.733" starttime="20150623 08:18:16.727"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:18:16.742" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:18:16.743" starttime="20150623 08:18:16.736"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:16.757" starttime="20150623 08:18:16.753"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:18:16.761" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:18:16.811" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:16.814" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:18:16.813" starttime="20150623 08:18:16.759"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:18:16.819" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:18:16.910" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:16.913" level="INFO">${processes_string} = 21408 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor11.log
21423 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
21441 ?        ...</msg>
<status status="PASS" endtime="20150623 08:18:16.912" starttime="20150623 08:18:16.816"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:18:16.920" level="INFO">@{processes_list} = [ 21408 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor11.log | 21423 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 21441 ?  ...</msg>
<status status="PASS" endtime="20150623 08:18:16.919" starttime="20150623 08:18:16.915"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 21408 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor11.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:16.926" level="INFO">${pid} = 21408</msg>
<status status="PASS" endtime="20150623 08:18:16.926" starttime="20150623 08:18:16.924"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:16.929" level="INFO">Executing command 'kill -9 21408'.</msg>
<msg timestamp="20150623 08:18:16.991" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:16.991" starttime="20150623 08:18:16.927"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:16.992" starttime="20150623 08:18:16.923"></status>
</kw>
<kw type="foritem" name="${process} = 21423 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:16.995" level="INFO">${pid} = 21423</msg>
<status status="PASS" endtime="20150623 08:18:16.995" starttime="20150623 08:18:16.993"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:16.998" level="INFO">Executing command 'kill -9 21423'.</msg>
<msg timestamp="20150623 08:18:17.073" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:17.077" starttime="20150623 08:18:16.996"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:17.079" starttime="20150623 08:18:16.992"></status>
</kw>
<kw type="foritem" name="${process} = 21441 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:17.090" level="INFO">${pid} = 21441</msg>
<status status="PASS" endtime="20150623 08:18:17.089" starttime="20150623 08:18:17.082"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:17.094" level="INFO">Executing command 'kill -9 21441'.</msg>
<msg timestamp="20150623 08:18:17.152" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:18:17.154" starttime="20150623 08:18:17.091"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:17.155" starttime="20150623 08:18:17.081"></status>
</kw>
<kw type="foritem" name="${process} = 21457 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:17.162" level="INFO">${pid} = 21457</msg>
<status status="PASS" endtime="20150623 08:18:17.161" starttime="20150623 08:18:17.157"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:17.166" level="INFO">Executing command 'kill -9 21457'.</msg>
<msg timestamp="20150623 08:18:17.233" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:18:17.234" starttime="20150623 08:18:17.163"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:17.235" starttime="20150623 08:18:17.156"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:17.236" starttime="20150623 08:18:16.922"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:17.238" starttime="20150623 08:18:16.745"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:17.244" level="INFO">Starting command 'cat tmpfilemonitor11.log'.</msg>
<status status="PASS" endtime="20150623 08:18:17.276" starttime="20150623 08:18:17.241"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:18:17.280" level="INFO">Reading output of command 'cat tmpfilemonitor11.log'.</msg>
<msg timestamp="20150623 08:18:17.318" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:17.321" level="INFO">${stdout_string} = [2015-06-23 06:18:12,030][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:17.319" starttime="20150623 08:18:17.278"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:17.326" level="INFO">Executing command 'rm tmpfilemonitor11.log'.</msg>
<msg timestamp="20150623 08:18:17.400" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:17.402" starttime="20150623 08:18:17.322"></status>
</kw>
<msg timestamp="20150623 08:18:17.406" level="INFO">${tailed_text} = [2015-06-23 06:18:12,030][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:17.404" starttime="20150623 08:18:16.714"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:17.416" starttime="20150623 08:18:17.408"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:17.429" starttime="20150623 08:18:17.426"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:18:17.434" starttime="20150623 08:18:17.431"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:17.439" starttime="20150623 08:18:17.418"></status>
</kw>
<msg timestamp="20150623 08:18:17.443" level="INFO">${tailed_text} = [2015-06-23 06:18:12,030][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:17.441" starttime="20150623 08:18:16.706"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:17.465" starttime="20150623 08:18:17.462"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:17.466" starttime="20150623 08:18:17.455"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:17.475" starttime="20150623 08:18:17.468"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:17.480" starttime="20150623 08:18:17.476"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:17.485" starttime="20150623 08:18:17.482"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:17.486" starttime="20150623 08:18:17.447"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:17.531" starttime="20150623 08:18:17.529"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:17.543" starttime="20150623 08:18:17.533"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:17.549" starttime="20150623 08:18:17.546"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:18:17.554" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:18:17.557" level="INFO">${queryResultSetLines} = 1004471|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:18:17.556" starttime="20150623 08:18:17.551"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:17.561" starttime="20150623 08:18:17.559"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:18:17.565" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:18:17.567" level="INFO">@{queryResultSet} = [ 1004471|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:18:17.566" starttime="20150623 08:18:17.563"></status>
</kw>
<msg timestamp="20150623 08:18:17.571" level="INFO">@{queryRows} = [ 1004471|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:18:17.570" starttime="20150623 08:18:17.521"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:18:17.576" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:18:17.578" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:18:17.577" starttime="20150623 08:18:17.572"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:18:17.582" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:18:17.585" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:18:17.584" starttime="20150623 08:18:17.580"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:18:17.597" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:18:17.598" starttime="20150623 08:18:17.594"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:17.600" starttime="20150623 08:18:17.586"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:17.608" starttime="20150623 08:18:17.601"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:17.610" starttime="20150623 08:18:17.510"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:17.611" starttime="20150623 08:18:16.041"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:17.614" starttime="20150623 08:18:16.033"></status>
</kw>
<msg timestamp="20150623 08:18:17.618" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:18:17.616" starttime="20150623 08:18:16.030"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:18:17.623" level="INFO">Index in the 2. loop: 8</msg>
<status status="PASS" endtime="20150623 08:18:17.624" starttime="20150623 08:18:17.620"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:18:17.629" level="INFO">Slept 0 seconds</msg>
<status status="PASS" endtime="20150623 08:18:17.630" starttime="20150623 08:18:17.626"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:18:17.639" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:18:17.639" starttime="20150623 08:18:17.632"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:17.641" starttime="20150623 08:18:16.029"></status>
</kw>
<kw type="foritem" name="${index} = 9">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:17.689" starttime="20150623 08:18:17.687"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:17.747" starttime="20150623 08:18:17.693"></status>
</kw>
<msg timestamp="20150623 08:18:17.750" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20150623 08:18:17.748" starttime="20150623 08:18:17.690"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:18:17.764" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:18:18.167" level="INFO">Read output: Last login: Tue Jun 23 06:18:16 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:18:18.169" starttime="20150623 08:18:17.761"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:18.171" starttime="20150623 08:18:17.753"></status>
</kw>
<msg timestamp="20150623 08:18:18.175" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20150623 08:18:18.175" starttime="20150623 08:18:17.683"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:18.182" starttime="20150623 08:18:18.181"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:18.185" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor12.log'.</msg>
<status status="PASS" endtime="20150623 08:18:18.189" starttime="20150623 08:18:18.183"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:18.190" starttime="20150623 08:18:18.177"></status>
</kw>
<msg timestamp="20150623 08:18:18.191" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20150623 08:18:18.191" starttime="20150623 08:18:17.676"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:18.209" starttime="20150623 08:18:18.204"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:18.211" starttime="20150623 08:18:18.201"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:18:18.224" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:18:18.227" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:18:18.226" starttime="20150623 08:18:18.221"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:18:18.232" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:18:18.233" starttime="20150623 08:18:18.229"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:18.237" starttime="20150623 08:18:18.234"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:18.250" starttime="20150623 08:18:18.239"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:18.251" starttime="20150623 08:18:18.214"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:18.278" starttime="20150623 08:18:18.275"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:18:18.289" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:18:18.288" starttime="20150623 08:18:18.280"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:18:18.297" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:18:18.298" starttime="20150623 08:18:18.290"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:18.311" starttime="20150623 08:18:18.308"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:18:18.315" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:18:18.362" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:18.364" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:18:18.363" starttime="20150623 08:18:18.313"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:18:18.392" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:18:18.459" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:18.462" level="INFO">${processes_string} = 21582 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor12.log
21597 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
21615 ?        ...</msg>
<status status="PASS" endtime="20150623 08:18:18.460" starttime="20150623 08:18:18.366"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:18:18.469" level="INFO">@{processes_list} = [ 21582 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor12.log | 21597 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 21615 ?  ...</msg>
<status status="PASS" endtime="20150623 08:18:18.468" starttime="20150623 08:18:18.464"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 21582 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor12.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:18.477" level="INFO">${pid} = 21582</msg>
<status status="PASS" endtime="20150623 08:18:18.476" starttime="20150623 08:18:18.473"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:18.482" level="INFO">Executing command 'kill -9 21582'.</msg>
<msg timestamp="20150623 08:18:18.547" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:18.548" starttime="20150623 08:18:18.479"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:18.550" starttime="20150623 08:18:18.472"></status>
</kw>
<kw type="foritem" name="${process} = 21597 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:18.556" level="INFO">${pid} = 21597</msg>
<status status="PASS" endtime="20150623 08:18:18.555" starttime="20150623 08:18:18.552"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:18.561" level="INFO">Executing command 'kill -9 21597'.</msg>
<msg timestamp="20150623 08:18:18.628" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:18.629" starttime="20150623 08:18:18.558"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:18.630" starttime="20150623 08:18:18.551"></status>
</kw>
<kw type="foritem" name="${process} = 21615 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:18.637" level="INFO">${pid} = 21615</msg>
<status status="PASS" endtime="20150623 08:18:18.636" starttime="20150623 08:18:18.632"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:18.642" level="INFO">Executing command 'kill -9 21615'.</msg>
<msg timestamp="20150623 08:18:18.715" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:18:18.716" starttime="20150623 08:18:18.638"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:18.717" starttime="20150623 08:18:18.631"></status>
</kw>
<kw type="foritem" name="${process} = 21631 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:18.723" level="INFO">${pid} = 21631</msg>
<status status="PASS" endtime="20150623 08:18:18.722" starttime="20150623 08:18:18.719"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:18.728" level="INFO">Executing command 'kill -9 21631'.</msg>
<msg timestamp="20150623 08:18:18.801" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:18:18.802" starttime="20150623 08:18:18.725"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:18.803" starttime="20150623 08:18:18.718"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:18.803" starttime="20150623 08:18:18.470"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:18.804" starttime="20150623 08:18:18.301"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:18.809" level="INFO">Starting command 'cat tmpfilemonitor12.log'.</msg>
<status status="PASS" endtime="20150623 08:18:18.843" starttime="20150623 08:18:18.806"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:18:18.847" level="INFO">Reading output of command 'cat tmpfilemonitor12.log'.</msg>
<msg timestamp="20150623 08:18:18.884" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:18.886" level="INFO">${stdout_string} = [2015-06-23 06:18:13,514][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:18.885" starttime="20150623 08:18:18.845"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:18.891" level="INFO">Executing command 'rm tmpfilemonitor12.log'.</msg>
<msg timestamp="20150623 08:18:18.966" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:18.967" starttime="20150623 08:18:18.888"></status>
</kw>
<msg timestamp="20150623 08:18:18.970" level="INFO">${tailed_text} = [2015-06-23 06:18:13,514][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:18.969" starttime="20150623 08:18:18.263"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:18.980" starttime="20150623 08:18:18.972"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:18.993" starttime="20150623 08:18:18.990"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:18:18.997" starttime="20150623 08:18:18.995"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:19.003" starttime="20150623 08:18:18.983"></status>
</kw>
<msg timestamp="20150623 08:18:19.008" level="INFO">${tailed_text} = [2015-06-23 06:18:13,514][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:19.007" starttime="20150623 08:18:18.255"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:19.030" starttime="20150623 08:18:19.027"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:19.031" starttime="20150623 08:18:19.020"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:19.039" starttime="20150623 08:18:19.033"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:19.045" starttime="20150623 08:18:19.041"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:19.050" starttime="20150623 08:18:19.046"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:19.051" starttime="20150623 08:18:19.012"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:19.091" starttime="20150623 08:18:19.088"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:19.100" starttime="20150623 08:18:19.092"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:19.105" starttime="20150623 08:18:19.102"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:18:19.110" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:18:19.112" level="INFO">${queryResultSetLines} = 1004472|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:18:19.111" starttime="20150623 08:18:19.107"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:19.116" starttime="20150623 08:18:19.114"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:18:19.120" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:18:19.123" level="INFO">@{queryResultSet} = [ 1004472|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:18:19.121" starttime="20150623 08:18:19.118"></status>
</kw>
<msg timestamp="20150623 08:18:19.126" level="INFO">@{queryRows} = [ 1004472|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:18:19.125" starttime="20150623 08:18:19.081"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:18:19.131" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:18:19.133" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:18:19.132" starttime="20150623 08:18:19.127"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:18:19.137" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:18:19.139" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:18:19.138" starttime="20150623 08:18:19.134"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:18:19.152" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:18:19.153" starttime="20150623 08:18:19.149"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:19.155" starttime="20150623 08:18:19.141"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:19.163" starttime="20150623 08:18:19.157"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:19.168" starttime="20150623 08:18:19.071"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:19.170" starttime="20150623 08:18:17.654"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:19.173" starttime="20150623 08:18:17.646"></status>
</kw>
<msg timestamp="20150623 08:18:19.177" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:18:19.175" starttime="20150623 08:18:17.644"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:18:19.182" level="INFO">Index in the 2. loop: 9</msg>
<status status="PASS" endtime="20150623 08:18:19.183" starttime="20150623 08:18:19.179"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:18:19.188" level="INFO">Slept 0 seconds</msg>
<status status="PASS" endtime="20150623 08:18:19.189" starttime="20150623 08:18:19.185"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:18:19.198" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:18:19.197" starttime="20150623 08:18:19.191"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:19.199" starttime="20150623 08:18:17.642"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:19.201" starttime="20150623 08:18:02.114"></status>
</kw>
<msg timestamp="20150623 08:18:19.205" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:18:19.203" starttime="20150623 08:18:02.104"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>For delay ${loopIdx} we had ${failure} failure(s)</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:18:19.210" level="INFO">For delay 0 we had None failure(s)</msg>
<status status="PASS" endtime="20150623 08:18:19.211" starttime="20150623 08:18:19.207"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:19.212" starttime="20150623 08:18:02.090"></status>
</kw>
<kw type="foritem" name="${loopIdx} = 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Sitting in first FOR, Loop No.: ${loopIdx}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:18:19.218" level="INFO">Sitting in first FOR, Loop No.: 1</msg>
<status status="PASS" endtime="20150623 08:18:19.219" starttime="20150623 08:18:19.215"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Timeout set to ${loopIdx} secs</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:18:19.224" level="INFO">Timeout set to 1 secs</msg>
<status status="PASS" endtime="20150623 08:18:19.225" starttime="20150623 08:18:19.221"></status>
</kw>
<kw type="kw" name="${failure} = Internal Loop">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${loopIdx}</arg>
</arguments>
<kw type="for" name="${index} IN RANGE [ 0 | 10 ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${index} = 0">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:19.297" starttime="20150623 08:18:19.294"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:19.361" starttime="20150623 08:18:19.303"></status>
</kw>
<msg timestamp="20150623 08:18:19.363" level="INFO">${ssh_connection} = 13</msg>
<status status="PASS" endtime="20150623 08:18:19.362" starttime="20150623 08:18:19.299"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:18:19.376" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:18:19.807" level="INFO">Read output: Last login: Tue Jun 23 06:18:17 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:18:19.808" starttime="20150623 08:18:19.373"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:19.809" starttime="20150623 08:18:19.365"></status>
</kw>
<msg timestamp="20150623 08:18:19.811" level="INFO">${ssh_connection} = 13</msg>
<status status="PASS" endtime="20150623 08:18:19.810" starttime="20150623 08:18:19.284"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:19.819" starttime="20150623 08:18:19.816"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:19.821" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor13.log'.</msg>
<status status="PASS" endtime="20150623 08:18:19.825" starttime="20150623 08:18:19.819"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:19.825" starttime="20150623 08:18:19.812"></status>
</kw>
<msg timestamp="20150623 08:18:19.827" level="INFO">${ssh_connection} = 13</msg>
<status status="PASS" endtime="20150623 08:18:19.826" starttime="20150623 08:18:19.270"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:19.844" starttime="20150623 08:18:19.839"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:19.846" starttime="20150623 08:18:19.835"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:18:19.859" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:18:19.862" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:18:19.861" starttime="20150623 08:18:19.856"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:18:19.866" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:18:19.867" starttime="20150623 08:18:19.864"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:19.872" starttime="20150623 08:18:19.869"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:19.884" starttime="20150623 08:18:19.874"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:19.886" starttime="20150623 08:18:19.848"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:19.908" starttime="20150623 08:18:19.904"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:18:19.917" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:18:19.915" starttime="20150623 08:18:19.909"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:18:19.923" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:18:19.925" starttime="20150623 08:18:19.918"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:19.938" starttime="20150623 08:18:19.935"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:18:19.942" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:18:19.986" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:19.988" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:18:19.987" starttime="20150623 08:18:19.940"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:18:19.993" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:18:20.083" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:20.087" level="INFO">${processes_string} = 21756 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor13.log
21771 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
21789 ?        ...</msg>
<status status="PASS" endtime="20150623 08:18:20.085" starttime="20150623 08:18:19.990"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:18:20.093" level="INFO">@{processes_list} = [ 21756 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor13.log | 21771 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 21789 ?  ...</msg>
<status status="PASS" endtime="20150623 08:18:20.092" starttime="20150623 08:18:20.089"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 21756 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor13.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:20.102" level="INFO">${pid} = 21756</msg>
<status status="PASS" endtime="20150623 08:18:20.100" starttime="20150623 08:18:20.097"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:20.106" level="INFO">Executing command 'kill -9 21756'.</msg>
<msg timestamp="20150623 08:18:20.163" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:20.165" starttime="20150623 08:18:20.103"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:20.166" starttime="20150623 08:18:20.096"></status>
</kw>
<kw type="foritem" name="${process} = 21771 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:20.172" level="INFO">${pid} = 21771</msg>
<status status="PASS" endtime="20150623 08:18:20.171" starttime="20150623 08:18:20.168"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:20.177" level="INFO">Executing command 'kill -9 21771'.</msg>
<msg timestamp="20150623 08:18:20.245" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:20.246" starttime="20150623 08:18:20.174"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:20.247" starttime="20150623 08:18:20.166"></status>
</kw>
<kw type="foritem" name="${process} = 21789 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:20.254" level="INFO">${pid} = 21789</msg>
<status status="PASS" endtime="20150623 08:18:20.253" starttime="20150623 08:18:20.249"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:20.258" level="INFO">Executing command 'kill -9 21789'.</msg>
<msg timestamp="20150623 08:18:20.328" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:18:20.329" starttime="20150623 08:18:20.255"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:20.330" starttime="20150623 08:18:20.248"></status>
</kw>
<kw type="foritem" name="${process} = 21805 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:20.337" level="INFO">${pid} = 21805</msg>
<status status="PASS" endtime="20150623 08:18:20.336" starttime="20150623 08:18:20.332"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:20.341" level="INFO">Executing command 'kill -9 21805'.</msg>
<msg timestamp="20150623 08:18:20.406" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:18:20.407" starttime="20150623 08:18:20.338"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:20.408" starttime="20150623 08:18:20.331"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:20.409" starttime="20150623 08:18:20.095"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:20.410" starttime="20150623 08:18:19.928"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:20.416" level="INFO">Starting command 'cat tmpfilemonitor13.log'.</msg>
<status status="PASS" endtime="20150623 08:18:20.449" starttime="20150623 08:18:20.413"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:18:20.453" level="INFO">Reading output of command 'cat tmpfilemonitor13.log'.</msg>
<msg timestamp="20150623 08:18:20.477" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:20.479" level="INFO">${stdout_string} = [2015-06-23 06:18:15,134][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:20.478" starttime="20150623 08:18:20.451"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:20.484" level="INFO">Executing command 'rm tmpfilemonitor13.log'.</msg>
<msg timestamp="20150623 08:18:20.549" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:20.550" starttime="20150623 08:18:20.481"></status>
</kw>
<msg timestamp="20150623 08:18:20.554" level="INFO">${tailed_text} = [2015-06-23 06:18:15,134][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:20.553" starttime="20150623 08:18:19.897"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:20.564" starttime="20150623 08:18:20.556"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:20.577" starttime="20150623 08:18:20.573"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:18:20.581" starttime="20150623 08:18:20.578"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:20.586" starttime="20150623 08:18:20.566"></status>
</kw>
<msg timestamp="20150623 08:18:20.590" level="INFO">${tailed_text} = [2015-06-23 06:18:15,134][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:20.588" starttime="20150623 08:18:19.890"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:20.611" starttime="20150623 08:18:20.608"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:20.613" starttime="20150623 08:18:20.601"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:20.621" starttime="20150623 08:18:20.615"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:20.626" starttime="20150623 08:18:20.623"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:20.631" starttime="20150623 08:18:20.628"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:20.632" starttime="20150623 08:18:20.594"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:20.672" starttime="20150623 08:18:20.670"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:20.679" starttime="20150623 08:18:20.674"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:20.681" starttime="20150623 08:18:20.680"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:18:20.683" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:18:20.684" level="INFO">${queryResultSetLines} = 1004473|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:18:20.684" starttime="20150623 08:18:20.681"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:20.708" starttime="20150623 08:18:20.685"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:18:20.710" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:18:20.711" level="INFO">@{queryResultSet} = [ 1004473|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:18:20.711" starttime="20150623 08:18:20.709"></status>
</kw>
<msg timestamp="20150623 08:18:20.713" level="INFO">@{queryRows} = [ 1004473|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:18:20.713" starttime="20150623 08:18:20.662"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:18:20.716" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:18:20.717" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:18:20.716" starttime="20150623 08:18:20.714"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:18:20.719" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:18:20.719" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:18:20.719" starttime="20150623 08:18:20.717"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:18:20.726" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:18:20.726" starttime="20150623 08:18:20.724"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:20.727" starttime="20150623 08:18:20.720"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:20.731" starttime="20150623 08:18:20.728"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:20.732" starttime="20150623 08:18:20.652"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:20.732" starttime="20150623 08:18:19.246"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:20.733" starttime="20150623 08:18:19.238"></status>
</kw>
<msg timestamp="20150623 08:18:20.735" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:18:20.734" starttime="20150623 08:18:19.235"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:18:20.737" level="INFO">Index in the 2. loop: 0</msg>
<status status="PASS" endtime="20150623 08:18:20.738" starttime="20150623 08:18:20.736"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:18:21.742" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20150623 08:18:21.744" starttime="20150623 08:18:20.739"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:18:21.756" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:18:21.755" starttime="20150623 08:18:21.747"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:21.757" starttime="20150623 08:18:19.234"></status>
</kw>
<kw type="foritem" name="${index} = 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:21.822" starttime="20150623 08:18:21.820"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:21.884" starttime="20150623 08:18:21.832"></status>
</kw>
<msg timestamp="20150623 08:18:21.886" level="INFO">${ssh_connection} = 14</msg>
<status status="PASS" endtime="20150623 08:18:21.885" starttime="20150623 08:18:21.824"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:18:21.901" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:18:22.305" level="INFO">Read output: Last login: Tue Jun 23 06:18:19 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:18:22.306" starttime="20150623 08:18:21.898"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:22.308" starttime="20150623 08:18:21.888"></status>
</kw>
<msg timestamp="20150623 08:18:22.310" level="INFO">${ssh_connection} = 14</msg>
<status status="PASS" endtime="20150623 08:18:22.309" starttime="20150623 08:18:21.809"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:22.317" starttime="20150623 08:18:22.315"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:22.319" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor14.log'.</msg>
<status status="PASS" endtime="20150623 08:18:22.322" starttime="20150623 08:18:22.317"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:22.323" starttime="20150623 08:18:22.312"></status>
</kw>
<msg timestamp="20150623 08:18:22.325" level="INFO">${ssh_connection} = 14</msg>
<status status="PASS" endtime="20150623 08:18:22.324" starttime="20150623 08:18:21.794"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:22.343" starttime="20150623 08:18:22.337"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:22.345" starttime="20150623 08:18:22.334"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:18:22.361" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:18:22.364" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:18:22.363" starttime="20150623 08:18:22.357"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:18:22.369" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:18:22.370" starttime="20150623 08:18:22.366"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:22.375" starttime="20150623 08:18:22.372"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:22.388" starttime="20150623 08:18:22.377"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:22.390" starttime="20150623 08:18:22.349"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:22.416" starttime="20150623 08:18:22.412"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:18:22.426" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:18:22.425" starttime="20150623 08:18:22.417"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:18:22.434" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:18:22.436" starttime="20150623 08:18:22.428"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:22.451" starttime="20150623 08:18:22.447"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:18:22.456" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:18:22.497" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:22.500" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:18:22.499" starttime="20150623 08:18:22.453"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:18:22.506" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:18:22.596" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:22.598" level="INFO">${processes_string} = 21930 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor14.log
21945 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
21963 ?        ...</msg>
<status status="PASS" endtime="20150623 08:18:22.597" starttime="20150623 08:18:22.502"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:18:22.604" level="INFO">@{processes_list} = [ 21930 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor14.log | 21945 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 21963 ?  ...</msg>
<status status="PASS" endtime="20150623 08:18:22.603" starttime="20150623 08:18:22.600"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 21930 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor14.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:22.612" level="INFO">${pid} = 21930</msg>
<status status="PASS" endtime="20150623 08:18:22.611" starttime="20150623 08:18:22.608"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:22.617" level="INFO">Executing command 'kill -9 21930'.</msg>
<msg timestamp="20150623 08:18:22.675" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:22.676" starttime="20150623 08:18:22.614"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:22.678" starttime="20150623 08:18:22.607"></status>
</kw>
<kw type="foritem" name="${process} = 21945 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:22.684" level="INFO">${pid} = 21945</msg>
<status status="PASS" endtime="20150623 08:18:22.683" starttime="20150623 08:18:22.679"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:22.688" level="INFO">Executing command 'kill -9 21945'.</msg>
<msg timestamp="20150623 08:18:22.754" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:22.755" starttime="20150623 08:18:22.686"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:22.756" starttime="20150623 08:18:22.678"></status>
</kw>
<kw type="foritem" name="${process} = 21963 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:22.763" level="INFO">${pid} = 21963</msg>
<status status="PASS" endtime="20150623 08:18:22.762" starttime="20150623 08:18:22.758"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:22.767" level="INFO">Executing command 'kill -9 21963'.</msg>
<msg timestamp="20150623 08:18:22.835" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:18:22.836" starttime="20150623 08:18:22.764"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:22.837" starttime="20150623 08:18:22.757"></status>
</kw>
<kw type="foritem" name="${process} = 21979 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:22.843" level="INFO">${pid} = 21979</msg>
<status status="PASS" endtime="20150623 08:18:22.842" starttime="20150623 08:18:22.839"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:22.848" level="INFO">Executing command 'kill -9 21979'.</msg>
<msg timestamp="20150623 08:18:22.916" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:18:22.918" starttime="20150623 08:18:22.845"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:22.919" starttime="20150623 08:18:22.838"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:22.919" starttime="20150623 08:18:22.606"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:22.920" starttime="20150623 08:18:22.439"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:22.925" level="INFO">Starting command 'cat tmpfilemonitor14.log'.</msg>
<status status="PASS" endtime="20150623 08:18:22.959" starttime="20150623 08:18:22.922"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:18:22.963" level="INFO">Reading output of command 'cat tmpfilemonitor14.log'.</msg>
<msg timestamp="20150623 08:18:22.999" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:23.003" level="INFO">${stdout_string} = [2015-06-23 06:18:16,748][INFO ][Camel (ticket-router) thread #44 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:23.001" starttime="20150623 08:18:22.961"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:23.008" level="INFO">Executing command 'rm tmpfilemonitor14.log'.</msg>
<msg timestamp="20150623 08:18:23.084" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:23.085" starttime="20150623 08:18:23.005"></status>
</kw>
<msg timestamp="20150623 08:18:23.089" level="INFO">${tailed_text} = [2015-06-23 06:18:16,748][INFO ][Camel (ticket-router) thread #44 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:23.087" starttime="20150623 08:18:22.404"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:23.098" starttime="20150623 08:18:23.090"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:23.111" starttime="20150623 08:18:23.107"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:18:23.117" starttime="20150623 08:18:23.112"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:23.119" starttime="20150623 08:18:23.101"></status>
</kw>
<msg timestamp="20150623 08:18:23.123" level="INFO">${tailed_text} = [2015-06-23 06:18:16,748][INFO ][Camel (ticket-router) thread #44 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:23.121" starttime="20150623 08:18:22.394"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:23.144" starttime="20150623 08:18:23.141"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:23.146" starttime="20150623 08:18:23.134"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:23.154" starttime="20150623 08:18:23.147"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:23.159" starttime="20150623 08:18:23.155"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:23.163" starttime="20150623 08:18:23.161"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:23.165" starttime="20150623 08:18:23.127"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:23.205" starttime="20150623 08:18:23.203"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:23.215" starttime="20150623 08:18:23.207"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:23.219" starttime="20150623 08:18:23.217"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:18:23.225" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:18:23.227" level="INFO">${queryResultSetLines} = 1004474|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:18:23.226" starttime="20150623 08:18:23.221"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:23.231" starttime="20150623 08:18:23.229"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:18:23.235" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:18:23.237" level="INFO">@{queryResultSet} = [ 1004474|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:18:23.236" starttime="20150623 08:18:23.233"></status>
</kw>
<msg timestamp="20150623 08:18:23.240" level="INFO">@{queryRows} = [ 1004474|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:18:23.239" starttime="20150623 08:18:23.196"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:18:23.246" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:18:23.248" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:18:23.247" starttime="20150623 08:18:23.242"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:18:23.252" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:18:23.254" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:18:23.253" starttime="20150623 08:18:23.249"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:18:23.266" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:18:23.267" starttime="20150623 08:18:23.263"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:23.268" starttime="20150623 08:18:23.256"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:23.276" starttime="20150623 08:18:23.270"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:23.278" starttime="20150623 08:18:23.186"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:23.279" starttime="20150623 08:18:21.770"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:23.282" starttime="20150623 08:18:21.763"></status>
</kw>
<msg timestamp="20150623 08:18:23.286" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:18:23.284" starttime="20150623 08:18:21.760"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:18:23.290" level="INFO">Index in the 2. loop: 1</msg>
<status status="PASS" endtime="20150623 08:18:23.292" starttime="20150623 08:18:23.288"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:18:24.297" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20150623 08:18:24.299" starttime="20150623 08:18:23.293"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:18:24.310" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:18:24.309" starttime="20150623 08:18:24.302"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:24.311" starttime="20150623 08:18:21.759"></status>
</kw>
<kw type="foritem" name="${index} = 2">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:24.377" starttime="20150623 08:18:24.374"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:24.444" starttime="20150623 08:18:24.386"></status>
</kw>
<msg timestamp="20150623 08:18:24.447" level="INFO">${ssh_connection} = 15</msg>
<status status="PASS" endtime="20150623 08:18:24.446" starttime="20150623 08:18:24.379"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:18:24.461" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:18:24.867" level="INFO">Read output: Last login: Tue Jun 23 06:18:22 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:18:24.869" starttime="20150623 08:18:24.457"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:24.871" starttime="20150623 08:18:24.449"></status>
</kw>
<msg timestamp="20150623 08:18:24.874" level="INFO">${ssh_connection} = 15</msg>
<status status="PASS" endtime="20150623 08:18:24.873" starttime="20150623 08:18:24.364"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:24.889" starttime="20150623 08:18:24.886"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:24.894" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor15.log'.</msg>
<status status="PASS" endtime="20150623 08:18:24.899" starttime="20150623 08:18:24.891"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:24.901" starttime="20150623 08:18:24.878"></status>
</kw>
<msg timestamp="20150623 08:18:24.904" level="INFO">${ssh_connection} = 15</msg>
<status status="PASS" endtime="20150623 08:18:24.903" starttime="20150623 08:18:24.350"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:24.956" starttime="20150623 08:18:24.930"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:24.958" starttime="20150623 08:18:24.923"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:18:24.972" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:18:24.974" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:18:24.973" starttime="20150623 08:18:24.968"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:18:24.978" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:18:24.980" starttime="20150623 08:18:24.976"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:24.984" starttime="20150623 08:18:24.981"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:24.995" starttime="20150623 08:18:24.985"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:24.997" starttime="20150623 08:18:24.961"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:25.018" starttime="20150623 08:18:25.015"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:18:25.027" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:18:25.026" starttime="20150623 08:18:25.020"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:18:25.034" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:18:25.035" starttime="20150623 08:18:25.029"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:25.048" starttime="20150623 08:18:25.045"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:18:25.052" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:18:25.096" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:25.098" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:18:25.097" starttime="20150623 08:18:25.050"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:18:25.103" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:18:25.194" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:25.196" level="INFO">${processes_string} = 22105 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor15.log
22120 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
22138 ?        ...</msg>
<status status="PASS" endtime="20150623 08:18:25.195" starttime="20150623 08:18:25.100"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:18:25.203" level="INFO">@{processes_list} = [ 22105 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor15.log | 22120 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 22138 ?  ...</msg>
<status status="PASS" endtime="20150623 08:18:25.201" starttime="20150623 08:18:25.198"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 22105 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor15.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:25.210" level="INFO">${pid} = 22105</msg>
<status status="PASS" endtime="20150623 08:18:25.209" starttime="20150623 08:18:25.206"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:25.214" level="INFO">Executing command 'kill -9 22105'.</msg>
<msg timestamp="20150623 08:18:25.274" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:25.275" starttime="20150623 08:18:25.212"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:25.276" starttime="20150623 08:18:25.205"></status>
</kw>
<kw type="foritem" name="${process} = 22120 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:25.283" level="INFO">${pid} = 22120</msg>
<status status="PASS" endtime="20150623 08:18:25.282" starttime="20150623 08:18:25.278"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:25.287" level="INFO">Executing command 'kill -9 22120'.</msg>
<msg timestamp="20150623 08:18:25.354" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:25.355" starttime="20150623 08:18:25.284"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:25.356" starttime="20150623 08:18:25.277"></status>
</kw>
<kw type="foritem" name="${process} = 22138 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:25.362" level="INFO">${pid} = 22138</msg>
<status status="PASS" endtime="20150623 08:18:25.361" starttime="20150623 08:18:25.358"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:25.367" level="INFO">Executing command 'kill -9 22138'.</msg>
<msg timestamp="20150623 08:18:25.434" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:18:25.435" starttime="20150623 08:18:25.364"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:25.437" starttime="20150623 08:18:25.357"></status>
</kw>
<kw type="foritem" name="${process} = 22154 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:25.443" level="INFO">${pid} = 22154</msg>
<status status="PASS" endtime="20150623 08:18:25.442" starttime="20150623 08:18:25.438"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:25.447" level="INFO">Executing command 'kill -9 22154'.</msg>
<msg timestamp="20150623 08:18:25.514" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:18:25.515" starttime="20150623 08:18:25.444"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:25.516" starttime="20150623 08:18:25.437"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:25.517" starttime="20150623 08:18:25.204"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:25.518" starttime="20150623 08:18:25.038"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:25.522" level="INFO">Starting command 'cat tmpfilemonitor15.log'.</msg>
<status status="PASS" endtime="20150623 08:18:25.556" starttime="20150623 08:18:25.519"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:18:25.560" level="INFO">Reading output of command 'cat tmpfilemonitor15.log'.</msg>
<msg timestamp="20150623 08:18:25.596" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:25.598" level="INFO">${stdout_string} = [2015-06-23 06:18:18,316][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:25.597" starttime="20150623 08:18:25.558"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:25.602" level="INFO">Executing command 'rm tmpfilemonitor15.log'.</msg>
<msg timestamp="20150623 08:18:25.677" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:25.677" starttime="20150623 08:18:25.599"></status>
</kw>
<msg timestamp="20150623 08:18:25.679" level="INFO">${tailed_text} = [2015-06-23 06:18:18,316][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:25.678" starttime="20150623 08:18:25.009"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:25.684" starttime="20150623 08:18:25.680"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:25.689" starttime="20150623 08:18:25.688"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:18:25.692" starttime="20150623 08:18:25.690"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:25.694" starttime="20150623 08:18:25.685"></status>
</kw>
<msg timestamp="20150623 08:18:25.696" level="INFO">${tailed_text} = [2015-06-23 06:18:18,316][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:25.695" starttime="20150623 08:18:25.000"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:25.712" starttime="20150623 08:18:25.709"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:25.713" starttime="20150623 08:18:25.702"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:25.721" starttime="20150623 08:18:25.715"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:25.726" starttime="20150623 08:18:25.723"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:25.730" starttime="20150623 08:18:25.727"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:25.732" starttime="20150623 08:18:25.698"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:25.772" starttime="20150623 08:18:25.769"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:25.781" starttime="20150623 08:18:25.773"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:25.785" starttime="20150623 08:18:25.783"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:18:25.789" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:18:25.792" level="INFO">${queryResultSetLines} = 1004475|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:18:25.791" starttime="20150623 08:18:25.787"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:25.795" starttime="20150623 08:18:25.793"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:18:25.800" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:18:25.802" level="INFO">@{queryResultSet} = [ 1004475|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:18:25.801" starttime="20150623 08:18:25.797"></status>
</kw>
<msg timestamp="20150623 08:18:25.805" level="INFO">@{queryRows} = [ 1004475|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:18:25.804" starttime="20150623 08:18:25.762"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:18:25.810" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:18:25.812" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:18:25.811" starttime="20150623 08:18:25.806"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:18:25.816" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:18:25.818" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:18:25.817" starttime="20150623 08:18:25.814"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:18:25.830" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:18:25.831" starttime="20150623 08:18:25.827"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:25.832" starttime="20150623 08:18:25.820"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:25.840" starttime="20150623 08:18:25.834"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:25.842" starttime="20150623 08:18:25.751"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:25.843" starttime="20150623 08:18:24.326"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:25.846" starttime="20150623 08:18:24.319"></status>
</kw>
<msg timestamp="20150623 08:18:25.849" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:18:25.848" starttime="20150623 08:18:24.314"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:18:25.854" level="INFO">Index in the 2. loop: 2</msg>
<status status="PASS" endtime="20150623 08:18:25.855" starttime="20150623 08:18:25.851"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:18:26.861" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20150623 08:18:26.864" starttime="20150623 08:18:25.857"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:18:26.875" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:18:26.874" starttime="20150623 08:18:26.867"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:26.876" starttime="20150623 08:18:24.313"></status>
</kw>
<kw type="foritem" name="${index} = 3">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:26.944" starttime="20150623 08:18:26.941"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:27.013" starttime="20150623 08:18:26.953"></status>
</kw>
<msg timestamp="20150623 08:18:27.020" level="INFO">${ssh_connection} = 16</msg>
<status status="PASS" endtime="20150623 08:18:27.017" starttime="20150623 08:18:26.946"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:18:27.034" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:18:27.455" level="INFO">Read output: Last login: Tue Jun 23 06:18:24 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:18:27.457" starttime="20150623 08:18:27.030"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:27.458" starttime="20150623 08:18:27.022"></status>
</kw>
<msg timestamp="20150623 08:18:27.463" level="INFO">${ssh_connection} = 16</msg>
<status status="PASS" endtime="20150623 08:18:27.461" starttime="20150623 08:18:26.931"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:27.477" starttime="20150623 08:18:27.474"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:27.482" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor16.log'.</msg>
<status status="PASS" endtime="20150623 08:18:27.487" starttime="20150623 08:18:27.479"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:27.488" starttime="20150623 08:18:27.466"></status>
</kw>
<msg timestamp="20150623 08:18:27.492" level="INFO">${ssh_connection} = 16</msg>
<status status="PASS" endtime="20150623 08:18:27.490" starttime="20150623 08:18:26.912"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:27.548" starttime="20150623 08:18:27.518"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:27.550" starttime="20150623 08:18:27.511"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:18:27.563" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:18:27.565" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:18:27.564" starttime="20150623 08:18:27.559"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:18:27.569" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:18:27.571" starttime="20150623 08:18:27.567"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:27.575" starttime="20150623 08:18:27.572"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:27.587" starttime="20150623 08:18:27.576"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:27.588" starttime="20150623 08:18:27.553"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:27.610" starttime="20150623 08:18:27.607"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:18:27.618" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:18:27.617" starttime="20150623 08:18:27.611"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:18:27.626" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:18:27.627" starttime="20150623 08:18:27.620"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:27.639" starttime="20150623 08:18:27.636"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:18:27.643" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:18:27.697" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:27.700" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:18:27.699" starttime="20150623 08:18:27.641"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:18:27.705" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:18:27.798" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:27.801" level="INFO">${processes_string} = 22279 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor16.log
22294 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
22312 ?        ...</msg>
<status status="PASS" endtime="20150623 08:18:27.800" starttime="20150623 08:18:27.701"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:18:27.807" level="INFO">@{processes_list} = [ 22279 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor16.log | 22294 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 22312 ?  ...</msg>
<status status="PASS" endtime="20150623 08:18:27.806" starttime="20150623 08:18:27.802"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 22279 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor16.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:27.814" level="INFO">${pid} = 22279</msg>
<status status="PASS" endtime="20150623 08:18:27.813" starttime="20150623 08:18:27.810"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:27.819" level="INFO">Executing command 'kill -9 22279'.</msg>
<msg timestamp="20150623 08:18:27.877" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:27.879" starttime="20150623 08:18:27.816"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:27.880" starttime="20150623 08:18:27.809"></status>
</kw>
<kw type="foritem" name="${process} = 22294 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:27.886" level="INFO">${pid} = 22294</msg>
<status status="PASS" endtime="20150623 08:18:27.885" starttime="20150623 08:18:27.881"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:27.890" level="INFO">Executing command 'kill -9 22294'.</msg>
<msg timestamp="20150623 08:18:27.956" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:27.958" starttime="20150623 08:18:27.887"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:27.959" starttime="20150623 08:18:27.880"></status>
</kw>
<kw type="foritem" name="${process} = 22312 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:27.965" level="INFO">${pid} = 22312</msg>
<status status="PASS" endtime="20150623 08:18:27.964" starttime="20150623 08:18:27.961"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:27.969" level="INFO">Executing command 'kill -9 22312'.</msg>
<msg timestamp="20150623 08:18:28.035" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:18:28.037" starttime="20150623 08:18:27.967"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:28.039" starttime="20150623 08:18:27.959"></status>
</kw>
<kw type="foritem" name="${process} = 22328 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:28.046" level="INFO">${pid} = 22328</msg>
<status status="PASS" endtime="20150623 08:18:28.045" starttime="20150623 08:18:28.042"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:28.051" level="INFO">Executing command 'kill -9 22328'.</msg>
<msg timestamp="20150623 08:18:28.115" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:18:28.116" starttime="20150623 08:18:28.047"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:28.117" starttime="20150623 08:18:28.040"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:28.117" starttime="20150623 08:18:27.808"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:28.119" starttime="20150623 08:18:27.629"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:28.125" level="INFO">Starting command 'cat tmpfilemonitor16.log'.</msg>
<status status="PASS" endtime="20150623 08:18:28.157" starttime="20150623 08:18:28.122"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:18:28.161" level="INFO">Reading output of command 'cat tmpfilemonitor16.log'.</msg>
<msg timestamp="20150623 08:18:28.197" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:28.199" level="INFO">${stdout_string} = [2015-06-23 06:18:19,917][INFO ][Camel (ticket-router) thread #53 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:28.198" starttime="20150623 08:18:28.159"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:28.204" level="INFO">Executing command 'rm tmpfilemonitor16.log'.</msg>
<msg timestamp="20150623 08:18:28.276" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:28.277" starttime="20150623 08:18:28.201"></status>
</kw>
<msg timestamp="20150623 08:18:28.281" level="INFO">${tailed_text} = [2015-06-23 06:18:19,917][INFO ][Camel (ticket-router) thread #53 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:28.279" starttime="20150623 08:18:27.600"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:28.290" starttime="20150623 08:18:28.283"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:28.303" starttime="20150623 08:18:28.300"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:18:28.307" starttime="20150623 08:18:28.305"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:28.312" starttime="20150623 08:18:28.293"></status>
</kw>
<msg timestamp="20150623 08:18:28.316" level="INFO">${tailed_text} = [2015-06-23 06:18:19,917][INFO ][Camel (ticket-router) thread #53 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:28.314" starttime="20150623 08:18:27.592"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:28.337" starttime="20150623 08:18:28.334"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:28.339" starttime="20150623 08:18:28.327"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:28.346" starttime="20150623 08:18:28.340"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:28.351" starttime="20150623 08:18:28.348"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:28.356" starttime="20150623 08:18:28.353"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:28.358" starttime="20150623 08:18:28.319"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:28.394" starttime="20150623 08:18:28.392"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:28.403" starttime="20150623 08:18:28.396"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:28.407" starttime="20150623 08:18:28.405"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:18:28.412" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:18:28.414" level="INFO">${queryResultSetLines} = 1004476|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:18:28.413" starttime="20150623 08:18:28.409"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:28.418" starttime="20150623 08:18:28.416"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:18:28.422" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:18:28.424" level="INFO">@{queryResultSet} = [ 1004476|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:18:28.424" starttime="20150623 08:18:28.420"></status>
</kw>
<msg timestamp="20150623 08:18:28.426" level="INFO">@{queryRows} = [ 1004476|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:18:28.425" starttime="20150623 08:18:28.385"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:18:28.428" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:18:28.429" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:18:28.429" starttime="20150623 08:18:28.427"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:18:28.431" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:18:28.432" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:18:28.431" starttime="20150623 08:18:28.430"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:18:28.437" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:18:28.438" starttime="20150623 08:18:28.436"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:28.439" starttime="20150623 08:18:28.433"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:28.442" starttime="20150623 08:18:28.439"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:28.443" starttime="20150623 08:18:28.375"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:28.443" starttime="20150623 08:18:26.889"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:28.445" starttime="20150623 08:18:26.881"></status>
</kw>
<msg timestamp="20150623 08:18:28.446" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:18:28.446" starttime="20150623 08:18:26.879"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:18:28.448" level="INFO">Index in the 2. loop: 3</msg>
<status status="PASS" endtime="20150623 08:18:28.449" starttime="20150623 08:18:28.447"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:18:29.453" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20150623 08:18:29.455" starttime="20150623 08:18:28.450"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:18:29.466" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:18:29.465" starttime="20150623 08:18:29.457"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:29.467" starttime="20150623 08:18:26.878"></status>
</kw>
<kw type="foritem" name="${index} = 4">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:29.528" starttime="20150623 08:18:29.526"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:29.597" starttime="20150623 08:18:29.537"></status>
</kw>
<msg timestamp="20150623 08:18:29.600" level="INFO">${ssh_connection} = 17</msg>
<status status="PASS" endtime="20150623 08:18:29.599" starttime="20150623 08:18:29.530"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:18:29.614" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:18:30.014" level="INFO">Read output: Last login: Tue Jun 23 06:18:27 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:18:30.017" starttime="20150623 08:18:29.611"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:30.019" starttime="20150623 08:18:29.602"></status>
</kw>
<msg timestamp="20150623 08:18:30.024" level="INFO">${ssh_connection} = 17</msg>
<status status="PASS" endtime="20150623 08:18:30.022" starttime="20150623 08:18:29.515"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:30.039" starttime="20150623 08:18:30.035"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:30.043" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor17.log'.</msg>
<status status="PASS" endtime="20150623 08:18:30.048" starttime="20150623 08:18:30.040"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:30.049" starttime="20150623 08:18:30.027"></status>
</kw>
<msg timestamp="20150623 08:18:30.051" level="INFO">${ssh_connection} = 17</msg>
<status status="PASS" endtime="20150623 08:18:30.050" starttime="20150623 08:18:29.501"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:30.068" starttime="20150623 08:18:30.063"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:30.071" starttime="20150623 08:18:30.059"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:18:30.084" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:18:30.086" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:18:30.085" starttime="20150623 08:18:30.080"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:18:30.091" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:18:30.092" starttime="20150623 08:18:30.088"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:30.096" starttime="20150623 08:18:30.093"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:30.107" starttime="20150623 08:18:30.097"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:30.108" starttime="20150623 08:18:30.073"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:30.129" starttime="20150623 08:18:30.126"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:18:30.138" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:18:30.137" starttime="20150623 08:18:30.131"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:18:30.145" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:18:30.146" starttime="20150623 08:18:30.139"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:30.158" starttime="20150623 08:18:30.155"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:18:30.162" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:18:30.208" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:30.210" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:18:30.209" starttime="20150623 08:18:30.160"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:18:30.215" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:18:30.311" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:30.313" level="INFO">${processes_string} = 22453 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor17.log
22468 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
22486 ?        ...</msg>
<status status="PASS" endtime="20150623 08:18:30.312" starttime="20150623 08:18:30.212"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:18:30.319" level="INFO">@{processes_list} = [ 22453 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor17.log | 22468 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 22486 ?  ...</msg>
<status status="PASS" endtime="20150623 08:18:30.318" starttime="20150623 08:18:30.315"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 22453 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor17.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:30.327" level="INFO">${pid} = 22453</msg>
<status status="PASS" endtime="20150623 08:18:30.326" starttime="20150623 08:18:30.323"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:30.331" level="INFO">Executing command 'kill -9 22453'.</msg>
<msg timestamp="20150623 08:18:30.395" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:30.397" starttime="20150623 08:18:30.329"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:30.398" starttime="20150623 08:18:30.322"></status>
</kw>
<kw type="foritem" name="${process} = 22468 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:30.404" level="INFO">${pid} = 22468</msg>
<status status="PASS" endtime="20150623 08:18:30.403" starttime="20150623 08:18:30.399"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:30.408" level="INFO">Executing command 'kill -9 22468'.</msg>
<msg timestamp="20150623 08:18:30.477" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:30.478" starttime="20150623 08:18:30.405"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:30.479" starttime="20150623 08:18:30.398"></status>
</kw>
<kw type="foritem" name="${process} = 22486 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:30.485" level="INFO">${pid} = 22486</msg>
<status status="PASS" endtime="20150623 08:18:30.484" starttime="20150623 08:18:30.481"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:30.489" level="INFO">Executing command 'kill -9 22486'.</msg>
<msg timestamp="20150623 08:18:30.565" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:18:30.567" starttime="20150623 08:18:30.487"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:30.568" starttime="20150623 08:18:30.480"></status>
</kw>
<kw type="foritem" name="${process} = 22502 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:30.573" level="INFO">${pid} = 22502</msg>
<status status="PASS" endtime="20150623 08:18:30.573" starttime="20150623 08:18:30.569"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:30.578" level="INFO">Executing command 'kill -9 22502'.</msg>
<msg timestamp="20150623 08:18:30.647" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:18:30.649" starttime="20150623 08:18:30.575"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:30.650" starttime="20150623 08:18:30.568"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:30.651" starttime="20150623 08:18:30.321"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:30.652" starttime="20150623 08:18:30.148"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:30.657" level="INFO">Starting command 'cat tmpfilemonitor17.log'.</msg>
<status status="PASS" endtime="20150623 08:18:30.691" starttime="20150623 08:18:30.654"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:18:30.695" level="INFO">Reading output of command 'cat tmpfilemonitor17.log'.</msg>
<msg timestamp="20150623 08:18:30.730" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:30.732" level="INFO">${stdout_string} = [2015-06-23 06:18:22,422][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:30.731" starttime="20150623 08:18:30.693"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:30.736" level="INFO">Executing command 'rm tmpfilemonitor17.log'.</msg>
<msg timestamp="20150623 08:18:30.811" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:30.812" starttime="20150623 08:18:30.733"></status>
</kw>
<msg timestamp="20150623 08:18:30.815" level="INFO">${tailed_text} = [2015-06-23 06:18:22,422][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:30.814" starttime="20150623 08:18:30.120"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:30.824" starttime="20150623 08:18:30.817"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:30.837" starttime="20150623 08:18:30.833"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:18:30.842" starttime="20150623 08:18:30.838"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:30.846" starttime="20150623 08:18:30.827"></status>
</kw>
<msg timestamp="20150623 08:18:30.849" level="INFO">${tailed_text} = [2015-06-23 06:18:22,422][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:30.848" starttime="20150623 08:18:30.112"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:30.869" starttime="20150623 08:18:30.866"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:30.871" starttime="20150623 08:18:30.860"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:30.878" starttime="20150623 08:18:30.872"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:30.883" starttime="20150623 08:18:30.880"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:30.888" starttime="20150623 08:18:30.885"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:30.889" starttime="20150623 08:18:30.852"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:30.925" starttime="20150623 08:18:30.922"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:30.936" starttime="20150623 08:18:30.926"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:30.939" starttime="20150623 08:18:30.937"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:18:30.944" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:18:30.947" level="INFO">${queryResultSetLines} = 1004477|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:18:30.946" starttime="20150623 08:18:30.941"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:30.950" starttime="20150623 08:18:30.948"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:18:30.955" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:18:30.957" level="INFO">@{queryResultSet} = [ 1004477|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:18:30.956" starttime="20150623 08:18:30.952"></status>
</kw>
<msg timestamp="20150623 08:18:30.960" level="INFO">@{queryRows} = [ 1004477|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:18:30.959" starttime="20150623 08:18:30.915"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:18:30.965" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:18:30.967" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:18:30.966" starttime="20150623 08:18:30.961"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:18:30.971" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:18:30.973" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:18:30.972" starttime="20150623 08:18:30.968"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:18:30.984" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:18:30.985" starttime="20150623 08:18:30.981"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:30.987" starttime="20150623 08:18:30.974"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:30.994" starttime="20150623 08:18:30.988"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:30.996" starttime="20150623 08:18:30.905"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:30.998" starttime="20150623 08:18:29.479"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:31.000" starttime="20150623 08:18:29.472"></status>
</kw>
<msg timestamp="20150623 08:18:31.004" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:18:31.003" starttime="20150623 08:18:29.469"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:18:31.009" level="INFO">Index in the 2. loop: 4</msg>
<status status="PASS" endtime="20150623 08:18:31.010" starttime="20150623 08:18:31.006"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:18:32.016" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20150623 08:18:32.020" starttime="20150623 08:18:31.011"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:18:32.032" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:18:32.031" starttime="20150623 08:18:32.022"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:32.033" starttime="20150623 08:18:29.468"></status>
</kw>
<kw type="foritem" name="${index} = 5">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:32.095" starttime="20150623 08:18:32.093"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:32.159" starttime="20150623 08:18:32.105"></status>
</kw>
<msg timestamp="20150623 08:18:32.162" level="INFO">${ssh_connection} = 18</msg>
<status status="PASS" endtime="20150623 08:18:32.161" starttime="20150623 08:18:32.097"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:18:32.176" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:18:32.597" level="INFO">Read output: Last login: Tue Jun 23 06:18:29 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:18:32.598" starttime="20150623 08:18:32.172"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:32.599" starttime="20150623 08:18:32.164"></status>
</kw>
<msg timestamp="20150623 08:18:32.601" level="INFO">${ssh_connection} = 18</msg>
<status status="PASS" endtime="20150623 08:18:32.600" starttime="20150623 08:18:32.082"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:32.607" starttime="20150623 08:18:32.606"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:32.610" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor18.log'.</msg>
<status status="PASS" endtime="20150623 08:18:32.613" starttime="20150623 08:18:32.608"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:32.614" starttime="20150623 08:18:32.602"></status>
</kw>
<msg timestamp="20150623 08:18:32.615" level="INFO">${ssh_connection} = 18</msg>
<status status="PASS" endtime="20150623 08:18:32.615" starttime="20150623 08:18:32.068"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:32.633" starttime="20150623 08:18:32.626"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:32.635" starttime="20150623 08:18:32.622"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:18:32.648" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:18:32.651" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:18:32.650" starttime="20150623 08:18:32.645"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:18:32.655" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:18:32.661" starttime="20150623 08:18:32.653"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:32.666" starttime="20150623 08:18:32.662"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:32.678" starttime="20150623 08:18:32.668"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:32.680" starttime="20150623 08:18:32.638"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:32.701" starttime="20150623 08:18:32.698"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:18:32.709" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:18:32.708" starttime="20150623 08:18:32.702"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:18:32.717" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:18:32.718" starttime="20150623 08:18:32.711"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:32.732" starttime="20150623 08:18:32.728"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:18:32.735" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:18:32.778" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:32.780" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:18:32.779" starttime="20150623 08:18:32.733"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:18:32.785" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:18:32.873" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:32.876" level="INFO">${processes_string} = 22627 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor18.log
22642 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
22660 ?        ...</msg>
<status status="PASS" endtime="20150623 08:18:32.875" starttime="20150623 08:18:32.782"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:18:32.882" level="INFO">@{processes_list} = [ 22627 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor18.log | 22642 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 22660 ?  ...</msg>
<status status="PASS" endtime="20150623 08:18:32.880" starttime="20150623 08:18:32.877"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 22627 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor18.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:32.889" level="INFO">${pid} = 22627</msg>
<status status="PASS" endtime="20150623 08:18:32.888" starttime="20150623 08:18:32.885"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:32.893" level="INFO">Executing command 'kill -9 22627'.</msg>
<msg timestamp="20150623 08:18:32.951" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:32.952" starttime="20150623 08:18:32.891"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:32.953" starttime="20150623 08:18:32.884"></status>
</kw>
<kw type="foritem" name="${process} = 22642 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:32.959" level="INFO">${pid} = 22642</msg>
<status status="PASS" endtime="20150623 08:18:32.958" starttime="20150623 08:18:32.955"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:32.964" level="INFO">Executing command 'kill -9 22642'.</msg>
<msg timestamp="20150623 08:18:33.034" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:33.036" starttime="20150623 08:18:32.961"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:33.038" starttime="20150623 08:18:32.954"></status>
</kw>
<kw type="foritem" name="${process} = 22660 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:33.045" level="INFO">${pid} = 22660</msg>
<status status="PASS" endtime="20150623 08:18:33.044" starttime="20150623 08:18:33.041"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:33.050" level="INFO">Executing command 'kill -9 22660'.</msg>
<msg timestamp="20150623 08:18:33.115" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:18:33.116" starttime="20150623 08:18:33.046"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:33.117" starttime="20150623 08:18:33.039"></status>
</kw>
<kw type="foritem" name="${process} = 22676 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:33.123" level="INFO">${pid} = 22676</msg>
<status status="PASS" endtime="20150623 08:18:33.122" starttime="20150623 08:18:33.119"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:33.128" level="INFO">Executing command 'kill -9 22676'.</msg>
<msg timestamp="20150623 08:18:33.196" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:18:33.197" starttime="20150623 08:18:33.125"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:33.199" starttime="20150623 08:18:33.118"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:33.199" starttime="20150623 08:18:32.883"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:33.201" starttime="20150623 08:18:32.721"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:33.206" level="INFO">Starting command 'cat tmpfilemonitor18.log'.</msg>
<status status="PASS" endtime="20150623 08:18:33.241" starttime="20150623 08:18:33.203"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:18:33.244" level="INFO">Reading output of command 'cat tmpfilemonitor18.log'.</msg>
<msg timestamp="20150623 08:18:33.289" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:33.291" level="INFO">${stdout_string} = [2015-06-23 06:18:25,028][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:33.290" starttime="20150623 08:18:33.242"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:33.296" level="INFO">Executing command 'rm tmpfilemonitor18.log'.</msg>
<msg timestamp="20150623 08:18:33.372" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:33.374" starttime="20150623 08:18:33.293"></status>
</kw>
<msg timestamp="20150623 08:18:33.378" level="INFO">${tailed_text} = [2015-06-23 06:18:25,028][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:33.376" starttime="20150623 08:18:32.691"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:33.387" starttime="20150623 08:18:33.379"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:33.399" starttime="20150623 08:18:33.396"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:18:33.404" starttime="20150623 08:18:33.401"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:33.409" starttime="20150623 08:18:33.389"></status>
</kw>
<msg timestamp="20150623 08:18:33.413" level="INFO">${tailed_text} = [2015-06-23 06:18:25,028][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:33.411" starttime="20150623 08:18:32.683"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:33.434" starttime="20150623 08:18:33.431"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:33.436" starttime="20150623 08:18:33.425"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:33.443" starttime="20150623 08:18:33.437"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:33.448" starttime="20150623 08:18:33.445"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:33.453" starttime="20150623 08:18:33.450"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:33.454" starttime="20150623 08:18:33.417"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:33.510" starttime="20150623 08:18:33.508"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:33.520" starttime="20150623 08:18:33.512"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:33.524" starttime="20150623 08:18:33.522"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:18:33.529" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:18:33.532" level="INFO">${queryResultSetLines} = 1004478|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:18:33.531" starttime="20150623 08:18:33.526"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:33.536" starttime="20150623 08:18:33.533"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:18:33.540" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:18:33.542" level="INFO">@{queryResultSet} = [ 1004478|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:18:33.541" starttime="20150623 08:18:33.537"></status>
</kw>
<msg timestamp="20150623 08:18:33.545" level="INFO">@{queryRows} = [ 1004478|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:18:33.544" starttime="20150623 08:18:33.501"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:18:33.550" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:18:33.552" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:18:33.551" starttime="20150623 08:18:33.546"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:18:33.556" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:18:33.558" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:18:33.557" starttime="20150623 08:18:33.554"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:18:33.570" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:18:33.571" starttime="20150623 08:18:33.567"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:33.572" starttime="20150623 08:18:33.560"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:33.580" starttime="20150623 08:18:33.573"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:33.581" starttime="20150623 08:18:33.490"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:33.583" starttime="20150623 08:18:32.046"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:33.585" starttime="20150623 08:18:32.038"></status>
</kw>
<msg timestamp="20150623 08:18:33.589" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:18:33.587" starttime="20150623 08:18:32.036"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:18:33.593" level="INFO">Index in the 2. loop: 5</msg>
<status status="PASS" endtime="20150623 08:18:33.594" starttime="20150623 08:18:33.590"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:18:34.602" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20150623 08:18:34.605" starttime="20150623 08:18:33.596"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:18:34.616" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:18:34.615" starttime="20150623 08:18:34.608"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:34.617" starttime="20150623 08:18:32.035"></status>
</kw>
<kw type="foritem" name="${index} = 6">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:34.679" starttime="20150623 08:18:34.676"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:34.736" starttime="20150623 08:18:34.688"></status>
</kw>
<msg timestamp="20150623 08:18:34.739" level="INFO">${ssh_connection} = 19</msg>
<status status="PASS" endtime="20150623 08:18:34.738" starttime="20150623 08:18:34.680"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:18:34.752" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:18:35.139" level="INFO">Read output: Last login: Tue Jun 23 06:18:32 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:18:35.142" starttime="20150623 08:18:34.749"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:35.144" starttime="20150623 08:18:34.740"></status>
</kw>
<msg timestamp="20150623 08:18:35.149" level="INFO">${ssh_connection} = 19</msg>
<status status="PASS" endtime="20150623 08:18:35.148" starttime="20150623 08:18:34.666"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:35.163" starttime="20150623 08:18:35.160"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:35.168" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor19.log'.</msg>
<status status="PASS" endtime="20150623 08:18:35.173" starttime="20150623 08:18:35.165"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:35.174" starttime="20150623 08:18:35.153"></status>
</kw>
<msg timestamp="20150623 08:18:35.176" level="INFO">${ssh_connection} = 19</msg>
<status status="PASS" endtime="20150623 08:18:35.175" starttime="20150623 08:18:34.652"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:35.191" starttime="20150623 08:18:35.186"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:35.193" starttime="20150623 08:18:35.183"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:18:35.206" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:18:35.208" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:18:35.207" starttime="20150623 08:18:35.203"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:18:35.212" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:18:35.214" starttime="20150623 08:18:35.210"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:35.218" starttime="20150623 08:18:35.215"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:35.228" starttime="20150623 08:18:35.219"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:35.230" starttime="20150623 08:18:35.196"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:35.250" starttime="20150623 08:18:35.247"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:18:35.259" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:18:35.258" starttime="20150623 08:18:35.252"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:18:35.266" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:18:35.267" starttime="20150623 08:18:35.261"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:35.280" starttime="20150623 08:18:35.277"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:18:35.283" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:18:35.329" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:35.332" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:18:35.331" starttime="20150623 08:18:35.281"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:18:35.337" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:18:35.435" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:35.437" level="INFO">${processes_string} = 22801 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor19.log
22816 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
22834 ?        ...</msg>
<status status="PASS" endtime="20150623 08:18:35.436" starttime="20150623 08:18:35.333"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:18:35.443" level="INFO">@{processes_list} = [ 22801 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor19.log | 22816 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 22834 ?  ...</msg>
<status status="PASS" endtime="20150623 08:18:35.442" starttime="20150623 08:18:35.439"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 22801 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor19.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:35.451" level="INFO">${pid} = 22801</msg>
<status status="PASS" endtime="20150623 08:18:35.450" starttime="20150623 08:18:35.447"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:35.455" level="INFO">Executing command 'kill -9 22801'.</msg>
<msg timestamp="20150623 08:18:35.517" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:35.518" starttime="20150623 08:18:35.452"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:35.519" starttime="20150623 08:18:35.445"></status>
</kw>
<kw type="foritem" name="${process} = 22816 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:35.525" level="INFO">${pid} = 22816</msg>
<status status="PASS" endtime="20150623 08:18:35.524" starttime="20150623 08:18:35.521"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:35.529" level="INFO">Executing command 'kill -9 22816'.</msg>
<msg timestamp="20150623 08:18:35.596" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:35.597" starttime="20150623 08:18:35.526"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:35.598" starttime="20150623 08:18:35.519"></status>
</kw>
<kw type="foritem" name="${process} = 22834 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:35.604" level="INFO">${pid} = 22834</msg>
<status status="PASS" endtime="20150623 08:18:35.603" starttime="20150623 08:18:35.600"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:35.609" level="INFO">Executing command 'kill -9 22834'.</msg>
<msg timestamp="20150623 08:18:35.676" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:18:35.677" starttime="20150623 08:18:35.606"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:35.678" starttime="20150623 08:18:35.599"></status>
</kw>
<kw type="foritem" name="${process} = 22850 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:35.684" level="INFO">${pid} = 22850</msg>
<status status="PASS" endtime="20150623 08:18:35.683" starttime="20150623 08:18:35.680"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:35.688" level="INFO">Executing command 'kill -9 22850'.</msg>
<msg timestamp="20150623 08:18:35.757" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:18:35.758" starttime="20150623 08:18:35.686"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:35.760" starttime="20150623 08:18:35.679"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:35.760" starttime="20150623 08:18:35.444"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:35.761" starttime="20150623 08:18:35.270"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:35.766" level="INFO">Starting command 'cat tmpfilemonitor19.log'.</msg>
<status status="PASS" endtime="20150623 08:18:35.800" starttime="20150623 08:18:35.763"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:18:35.804" level="INFO">Reading output of command 'cat tmpfilemonitor19.log'.</msg>
<msg timestamp="20150623 08:18:35.841" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:35.843" level="INFO">${stdout_string} = [2015-06-23 06:18:27,634][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:35.842" starttime="20150623 08:18:35.802"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:35.848" level="INFO">Executing command 'rm tmpfilemonitor19.log'.</msg>
<msg timestamp="20150623 08:18:35.924" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:35.925" starttime="20150623 08:18:35.845"></status>
</kw>
<msg timestamp="20150623 08:18:35.929" level="INFO">${tailed_text} = [2015-06-23 06:18:27,634][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:35.928" starttime="20150623 08:18:35.241"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:35.938" starttime="20150623 08:18:35.930"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:35.950" starttime="20150623 08:18:35.947"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:18:35.954" starttime="20150623 08:18:35.952"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:35.959" starttime="20150623 08:18:35.940"></status>
</kw>
<msg timestamp="20150623 08:18:35.962" level="INFO">${tailed_text} = [2015-06-23 06:18:27,634][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:35.961" starttime="20150623 08:18:35.233"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:35.983" starttime="20150623 08:18:35.980"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:35.984" starttime="20150623 08:18:35.973"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:35.992" starttime="20150623 08:18:35.985"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:35.996" starttime="20150623 08:18:35.993"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:36.001" starttime="20150623 08:18:35.998"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:36.004" starttime="20150623 08:18:35.965"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:36.039" starttime="20150623 08:18:36.037"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:36.049" starttime="20150623 08:18:36.041"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:36.051" starttime="20150623 08:18:36.050"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:18:36.053" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:18:36.054" level="INFO">${queryResultSetLines} = 1004479|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:18:36.054" starttime="20150623 08:18:36.052"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:36.056" starttime="20150623 08:18:36.055"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:18:36.058" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:18:36.059" level="INFO">@{queryResultSet} = [ 1004479|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:18:36.058" starttime="20150623 08:18:36.057"></status>
</kw>
<msg timestamp="20150623 08:18:36.060" level="INFO">@{queryRows} = [ 1004479|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:18:36.060" starttime="20150623 08:18:36.030"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:18:36.062" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:18:36.063" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:18:36.063" starttime="20150623 08:18:36.061"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:18:36.065" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:18:36.066" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:18:36.065" starttime="20150623 08:18:36.064"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:18:36.071" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:18:36.072" starttime="20150623 08:18:36.070"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:36.072" starttime="20150623 08:18:36.067"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:36.076" starttime="20150623 08:18:36.073"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:36.077" starttime="20150623 08:18:36.020"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:36.077" starttime="20150623 08:18:34.630"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:36.078" starttime="20150623 08:18:34.623"></status>
</kw>
<msg timestamp="20150623 08:18:36.080" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:18:36.079" starttime="20150623 08:18:34.620"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:18:36.082" level="INFO">Index in the 2. loop: 6</msg>
<status status="PASS" endtime="20150623 08:18:36.083" starttime="20150623 08:18:36.081"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:18:37.086" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20150623 08:18:37.088" starttime="20150623 08:18:36.083"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:18:37.099" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:18:37.098" starttime="20150623 08:18:37.091"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:37.100" starttime="20150623 08:18:34.619"></status>
</kw>
<kw type="foritem" name="${index} = 7">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:37.161" starttime="20150623 08:18:37.158"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:37.232" starttime="20150623 08:18:37.170"></status>
</kw>
<msg timestamp="20150623 08:18:37.234" level="INFO">${ssh_connection} = 20</msg>
<status status="PASS" endtime="20150623 08:18:37.233" starttime="20150623 08:18:37.162"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:18:37.252" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:18:37.669" level="INFO">Read output: Last login: Tue Jun 23 06:18:34 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:18:37.670" starttime="20150623 08:18:37.249"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:37.672" starttime="20150623 08:18:37.236"></status>
</kw>
<msg timestamp="20150623 08:18:37.675" level="INFO">${ssh_connection} = 20</msg>
<status status="PASS" endtime="20150623 08:18:37.674" starttime="20150623 08:18:37.148"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:37.682" starttime="20150623 08:18:37.680"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:37.684" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor20.log'.</msg>
<status status="PASS" endtime="20150623 08:18:37.688" starttime="20150623 08:18:37.682"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:37.688" starttime="20150623 08:18:37.676"></status>
</kw>
<msg timestamp="20150623 08:18:37.690" level="INFO">${ssh_connection} = 20</msg>
<status status="PASS" endtime="20150623 08:18:37.689" starttime="20150623 08:18:37.134"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:37.706" starttime="20150623 08:18:37.700"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:37.712" starttime="20150623 08:18:37.697"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:18:37.726" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:18:37.729" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:18:37.728" starttime="20150623 08:18:37.723"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:18:37.733" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:18:37.734" starttime="20150623 08:18:37.730"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:37.738" starttime="20150623 08:18:37.735"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:37.750" starttime="20150623 08:18:37.740"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:37.752" starttime="20150623 08:18:37.715"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:37.772" starttime="20150623 08:18:37.769"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:18:37.781" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:18:37.780" starttime="20150623 08:18:37.774"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:18:37.788" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:18:37.789" starttime="20150623 08:18:37.783"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:37.802" starttime="20150623 08:18:37.799"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:18:37.806" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:18:37.851" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:37.853" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:18:37.852" starttime="20150623 08:18:37.804"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:18:37.858" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:18:37.949" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:37.951" level="INFO">${processes_string} = 22975 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor20.log
22990 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
23008 ?        ...</msg>
<status status="PASS" endtime="20150623 08:18:37.950" starttime="20150623 08:18:37.855"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:18:37.958" level="INFO">@{processes_list} = [ 22975 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor20.log | 22990 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 23008 ?  ...</msg>
<status status="PASS" endtime="20150623 08:18:37.956" starttime="20150623 08:18:37.953"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 22975 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor20.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:37.966" level="INFO">${pid} = 22975</msg>
<status status="PASS" endtime="20150623 08:18:37.965" starttime="20150623 08:18:37.961"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:37.970" level="INFO">Executing command 'kill -9 22975'.</msg>
<msg timestamp="20150623 08:18:38.030" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:38.032" starttime="20150623 08:18:37.968"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:38.034" starttime="20150623 08:18:37.960"></status>
</kw>
<kw type="foritem" name="${process} = 22990 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:38.041" level="INFO">${pid} = 22990</msg>
<status status="PASS" endtime="20150623 08:18:38.040" starttime="20150623 08:18:38.037"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:38.045" level="INFO">Executing command 'kill -9 22990'.</msg>
<msg timestamp="20150623 08:18:38.109" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:38.110" starttime="20150623 08:18:38.042"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:38.111" starttime="20150623 08:18:38.036"></status>
</kw>
<kw type="foritem" name="${process} = 23008 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:38.117" level="INFO">${pid} = 23008</msg>
<status status="PASS" endtime="20150623 08:18:38.116" starttime="20150623 08:18:38.113"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:38.121" level="INFO">Executing command 'kill -9 23008'.</msg>
<msg timestamp="20150623 08:18:38.189" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:18:38.191" starttime="20150623 08:18:38.118"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:38.192" starttime="20150623 08:18:38.112"></status>
</kw>
<kw type="foritem" name="${process} = 23024 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:38.197" level="INFO">${pid} = 23024</msg>
<status status="PASS" endtime="20150623 08:18:38.197" starttime="20150623 08:18:38.193"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:38.202" level="INFO">Executing command 'kill -9 23024'.</msg>
<msg timestamp="20150623 08:18:38.268" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:18:38.269" starttime="20150623 08:18:38.199"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:38.270" starttime="20150623 08:18:38.192"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:38.271" starttime="20150623 08:18:37.959"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:38.272" starttime="20150623 08:18:37.792"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:38.278" level="INFO">Starting command 'cat tmpfilemonitor20.log'.</msg>
<status status="PASS" endtime="20150623 08:18:38.312" starttime="20150623 08:18:38.275"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:18:38.316" level="INFO">Reading output of command 'cat tmpfilemonitor20.log'.</msg>
<msg timestamp="20150623 08:18:38.363" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:38.365" level="INFO">${stdout_string} = [2015-06-23 06:18:30,139][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:38.364" starttime="20150623 08:18:38.314"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:38.369" level="INFO">Executing command 'rm tmpfilemonitor20.log'.</msg>
<msg timestamp="20150623 08:18:38.445" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:38.446" starttime="20150623 08:18:38.367"></status>
</kw>
<msg timestamp="20150623 08:18:38.450" level="INFO">${tailed_text} = [2015-06-23 06:18:30,139][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:38.448" starttime="20150623 08:18:37.763"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:38.460" starttime="20150623 08:18:38.452"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:38.473" starttime="20150623 08:18:38.470"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:18:38.479" starttime="20150623 08:18:38.475"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:38.482" starttime="20150623 08:18:38.462"></status>
</kw>
<msg timestamp="20150623 08:18:38.486" level="INFO">${tailed_text} = [2015-06-23 06:18:30,139][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:38.484" starttime="20150623 08:18:37.755"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:38.507" starttime="20150623 08:18:38.504"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:38.508" starttime="20150623 08:18:38.497"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:38.516" starttime="20150623 08:18:38.510"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:38.521" starttime="20150623 08:18:38.517"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:38.525" starttime="20150623 08:18:38.522"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:38.527" starttime="20150623 08:18:38.490"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:38.561" starttime="20150623 08:18:38.559"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:38.576" starttime="20150623 08:18:38.564"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:38.579" starttime="20150623 08:18:38.577"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:18:38.584" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:18:38.587" level="INFO">${queryResultSetLines} = 1004480|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:18:38.586" starttime="20150623 08:18:38.581"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:38.590" starttime="20150623 08:18:38.588"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:18:38.594" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:18:38.596" level="INFO">@{queryResultSet} = [ 1004480|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:18:38.595" starttime="20150623 08:18:38.592"></status>
</kw>
<msg timestamp="20150623 08:18:38.599" level="INFO">@{queryRows} = [ 1004480|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:18:38.598" starttime="20150623 08:18:38.552"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:18:38.604" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:18:38.606" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:18:38.605" starttime="20150623 08:18:38.601"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:18:38.610" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:18:38.612" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:18:38.611" starttime="20150623 08:18:38.607"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:18:38.623" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:18:38.624" starttime="20150623 08:18:38.620"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:38.626" starttime="20150623 08:18:38.613"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:38.634" starttime="20150623 08:18:38.627"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:38.635" starttime="20150623 08:18:38.542"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:38.637" starttime="20150623 08:18:37.113"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:38.639" starttime="20150623 08:18:37.106"></status>
</kw>
<msg timestamp="20150623 08:18:38.643" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:18:38.641" starttime="20150623 08:18:37.103"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:18:38.648" level="INFO">Index in the 2. loop: 7</msg>
<status status="PASS" endtime="20150623 08:18:38.649" starttime="20150623 08:18:38.644"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:18:39.654" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20150623 08:18:39.657" starttime="20150623 08:18:38.650"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:18:39.670" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:18:39.669" starttime="20150623 08:18:39.660"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:39.671" starttime="20150623 08:18:37.102"></status>
</kw>
<kw type="foritem" name="${index} = 8">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:39.732" starttime="20150623 08:18:39.730"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:39.799" starttime="20150623 08:18:39.741"></status>
</kw>
<msg timestamp="20150623 08:18:39.802" level="INFO">${ssh_connection} = 21</msg>
<status status="PASS" endtime="20150623 08:18:39.801" starttime="20150623 08:18:39.734"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:18:39.815" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:18:40.239" level="INFO">Read output: Last login: Tue Jun 23 06:18:37 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:18:40.241" starttime="20150623 08:18:39.811"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:40.243" starttime="20150623 08:18:39.803"></status>
</kw>
<msg timestamp="20150623 08:18:40.249" level="INFO">${ssh_connection} = 21</msg>
<status status="PASS" endtime="20150623 08:18:40.247" starttime="20150623 08:18:39.719"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:40.262" starttime="20150623 08:18:40.259"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:40.267" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor21.log'.</msg>
<status status="PASS" endtime="20150623 08:18:40.271" starttime="20150623 08:18:40.264"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:40.273" starttime="20150623 08:18:40.252"></status>
</kw>
<msg timestamp="20150623 08:18:40.277" level="INFO">${ssh_connection} = 21</msg>
<status status="PASS" endtime="20150623 08:18:40.275" starttime="20150623 08:18:39.705"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:40.306" starttime="20150623 08:18:40.298"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:40.308" starttime="20150623 08:18:40.292"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:18:40.320" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:18:40.323" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:18:40.322" starttime="20150623 08:18:40.317"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:18:40.326" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:18:40.328" starttime="20150623 08:18:40.324"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:40.332" starttime="20150623 08:18:40.329"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:40.344" starttime="20150623 08:18:40.333"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:40.346" starttime="20150623 08:18:40.310"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:40.365" starttime="20150623 08:18:40.362"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:18:40.374" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:18:40.373" starttime="20150623 08:18:40.366"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:18:40.381" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:18:40.382" starttime="20150623 08:18:40.375"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:40.394" starttime="20150623 08:18:40.391"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:18:40.398" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:18:40.442" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:40.445" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:18:40.443" starttime="20150623 08:18:40.396"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:18:40.449" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:18:40.539" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:40.541" level="INFO">${processes_string} = 23149 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor21.log
23164 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
23182 ?        ...</msg>
<status status="PASS" endtime="20150623 08:18:40.540" starttime="20150623 08:18:40.446"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:18:40.548" level="INFO">@{processes_list} = [ 23149 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor21.log | 23164 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 23182 ?  ...</msg>
<status status="PASS" endtime="20150623 08:18:40.547" starttime="20150623 08:18:40.543"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 23149 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor21.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:40.556" level="INFO">${pid} = 23149</msg>
<status status="PASS" endtime="20150623 08:18:40.555" starttime="20150623 08:18:40.552"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:40.560" level="INFO">Executing command 'kill -9 23149'.</msg>
<msg timestamp="20150623 08:18:40.617" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:40.618" starttime="20150623 08:18:40.557"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:40.619" starttime="20150623 08:18:40.551"></status>
</kw>
<kw type="foritem" name="${process} = 23164 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:40.625" level="INFO">${pid} = 23164</msg>
<status status="PASS" endtime="20150623 08:18:40.624" starttime="20150623 08:18:40.621"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:40.629" level="INFO">Executing command 'kill -9 23164'.</msg>
<msg timestamp="20150623 08:18:40.697" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:40.698" starttime="20150623 08:18:40.627"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:40.699" starttime="20150623 08:18:40.620"></status>
</kw>
<kw type="foritem" name="${process} = 23182 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:40.705" level="INFO">${pid} = 23182</msg>
<status status="PASS" endtime="20150623 08:18:40.704" starttime="20150623 08:18:40.701"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:40.709" level="INFO">Executing command 'kill -9 23182'.</msg>
<msg timestamp="20150623 08:18:40.777" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:18:40.778" starttime="20150623 08:18:40.707"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:40.779" starttime="20150623 08:18:40.700"></status>
</kw>
<kw type="foritem" name="${process} = 23198 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:40.785" level="INFO">${pid} = 23198</msg>
<status status="PASS" endtime="20150623 08:18:40.784" starttime="20150623 08:18:40.781"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:40.789" level="INFO">Executing command 'kill -9 23198'.</msg>
<msg timestamp="20150623 08:18:40.856" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:18:40.857" starttime="20150623 08:18:40.786"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:40.858" starttime="20150623 08:18:40.780"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:40.858" starttime="20150623 08:18:40.550"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:40.859" starttime="20150623 08:18:40.385"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:40.864" level="INFO">Starting command 'cat tmpfilemonitor21.log'.</msg>
<status status="PASS" endtime="20150623 08:18:40.899" starttime="20150623 08:18:40.861"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:18:40.903" level="INFO">Reading output of command 'cat tmpfilemonitor21.log'.</msg>
<msg timestamp="20150623 08:18:40.937" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:40.939" level="INFO">${stdout_string} = [2015-06-23 06:18:32,712][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:40.938" starttime="20150623 08:18:40.901"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:40.943" level="INFO">Executing command 'rm tmpfilemonitor21.log'.</msg>
<msg timestamp="20150623 08:18:41.018" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:41.020" starttime="20150623 08:18:40.940"></status>
</kw>
<msg timestamp="20150623 08:18:41.025" level="INFO">${tailed_text} = [2015-06-23 06:18:32,712][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:41.023" starttime="20150623 08:18:40.356"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:41.034" starttime="20150623 08:18:41.026"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:41.046" starttime="20150623 08:18:41.043"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:18:41.050" starttime="20150623 08:18:41.047"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:41.055" starttime="20150623 08:18:41.036"></status>
</kw>
<msg timestamp="20150623 08:18:41.059" level="INFO">${tailed_text} = [2015-06-23 06:18:32,712][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:41.057" starttime="20150623 08:18:40.349"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:41.079" starttime="20150623 08:18:41.076"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:41.081" starttime="20150623 08:18:41.070"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:41.088" starttime="20150623 08:18:41.082"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:41.093" starttime="20150623 08:18:41.090"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:41.097" starttime="20150623 08:18:41.095"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:41.099" starttime="20150623 08:18:41.063"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:41.133" starttime="20150623 08:18:41.131"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:41.142" starttime="20150623 08:18:41.134"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:41.145" starttime="20150623 08:18:41.143"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:18:41.150" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:18:41.152" level="INFO">${queryResultSetLines} = 1004481|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:18:41.151" starttime="20150623 08:18:41.147"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:41.156" starttime="20150623 08:18:41.154"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:18:41.160" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:18:41.162" level="INFO">@{queryResultSet} = [ 1004481|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:18:41.161" starttime="20150623 08:18:41.157"></status>
</kw>
<msg timestamp="20150623 08:18:41.165" level="INFO">@{queryRows} = [ 1004481|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:18:41.164" starttime="20150623 08:18:41.124"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:18:41.170" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:18:41.172" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:18:41.171" starttime="20150623 08:18:41.166"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:18:41.176" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:18:41.178" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:18:41.177" starttime="20150623 08:18:41.173"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:18:41.189" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:18:41.190" starttime="20150623 08:18:41.186"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:41.191" starttime="20150623 08:18:41.179"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:41.199" starttime="20150623 08:18:41.193"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:41.200" starttime="20150623 08:18:41.114"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:41.202" starttime="20150623 08:18:39.684"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:41.204" starttime="20150623 08:18:39.676"></status>
</kw>
<msg timestamp="20150623 08:18:41.208" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:18:41.206" starttime="20150623 08:18:39.673"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:18:41.212" level="INFO">Index in the 2. loop: 8</msg>
<status status="PASS" endtime="20150623 08:18:41.213" starttime="20150623 08:18:41.209"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:18:42.219" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20150623 08:18:42.221" starttime="20150623 08:18:41.215"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:18:42.232" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:18:42.231" starttime="20150623 08:18:42.224"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:42.233" starttime="20150623 08:18:39.672"></status>
</kw>
<kw type="foritem" name="${index} = 9">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:42.293" starttime="20150623 08:18:42.291"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:42.361" starttime="20150623 08:18:42.302"></status>
</kw>
<msg timestamp="20150623 08:18:42.364" level="INFO">${ssh_connection} = 22</msg>
<status status="PASS" endtime="20150623 08:18:42.363" starttime="20150623 08:18:42.295"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:18:42.376" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:18:42.797" level="INFO">Read output: Last login: Tue Jun 23 06:18:40 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:18:42.799" starttime="20150623 08:18:42.373"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:42.800" starttime="20150623 08:18:42.365"></status>
</kw>
<msg timestamp="20150623 08:18:42.804" level="INFO">${ssh_connection} = 22</msg>
<status status="PASS" endtime="20150623 08:18:42.803" starttime="20150623 08:18:42.281"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:42.818" starttime="20150623 08:18:42.815"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:42.823" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor22.log'.</msg>
<status status="PASS" endtime="20150623 08:18:42.828" starttime="20150623 08:18:42.820"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:42.829" starttime="20150623 08:18:42.808"></status>
</kw>
<msg timestamp="20150623 08:18:42.832" level="INFO">${ssh_connection} = 22</msg>
<status status="PASS" endtime="20150623 08:18:42.831" starttime="20150623 08:18:42.267"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:42.862" starttime="20150623 08:18:42.855"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:42.863" starttime="20150623 08:18:42.848"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:18:42.875" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:18:42.878" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:18:42.877" starttime="20150623 08:18:42.872"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:18:42.882" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:18:42.883" starttime="20150623 08:18:42.879"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:42.887" starttime="20150623 08:18:42.884"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:42.897" starttime="20150623 08:18:42.888"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:42.899" starttime="20150623 08:18:42.866"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:42.920" starttime="20150623 08:18:42.917"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:18:42.929" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:18:42.928" starttime="20150623 08:18:42.921"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:18:42.935" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:18:42.936" starttime="20150623 08:18:42.930"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:42.948" starttime="20150623 08:18:42.946"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:18:42.952" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:18:42.995" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:42.997" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:18:42.996" starttime="20150623 08:18:42.950"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:18:43.002" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:18:43.085" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:43.088" level="INFO">${processes_string} = 23324 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor22.log
23339 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
23357 ?        ...</msg>
<status status="PASS" endtime="20150623 08:18:43.086" starttime="20150623 08:18:42.999"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:18:43.094" level="INFO">@{processes_list} = [ 23324 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor22.log | 23339 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 23357 ?  ...</msg>
<status status="PASS" endtime="20150623 08:18:43.092" starttime="20150623 08:18:43.089"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 23324 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor22.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:43.101" level="INFO">${pid} = 23324</msg>
<status status="PASS" endtime="20150623 08:18:43.100" starttime="20150623 08:18:43.097"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:43.105" level="INFO">Executing command 'kill -9 23324'.</msg>
<msg timestamp="20150623 08:18:43.158" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:43.159" starttime="20150623 08:18:43.103"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:43.160" starttime="20150623 08:18:43.096"></status>
</kw>
<kw type="foritem" name="${process} = 23339 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:43.166" level="INFO">${pid} = 23339</msg>
<status status="PASS" endtime="20150623 08:18:43.165" starttime="20150623 08:18:43.162"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:43.170" level="INFO">Executing command 'kill -9 23339'.</msg>
<msg timestamp="20150623 08:18:43.232" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:43.233" starttime="20150623 08:18:43.167"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:43.234" starttime="20150623 08:18:43.161"></status>
</kw>
<kw type="foritem" name="${process} = 23357 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:43.240" level="INFO">${pid} = 23357</msg>
<status status="PASS" endtime="20150623 08:18:43.239" starttime="20150623 08:18:43.236"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:43.244" level="INFO">Executing command 'kill -9 23357'.</msg>
<msg timestamp="20150623 08:18:43.307" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:18:43.308" starttime="20150623 08:18:43.242"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:43.309" starttime="20150623 08:18:43.235"></status>
</kw>
<kw type="foritem" name="${process} = 23373 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:43.315" level="INFO">${pid} = 23373</msg>
<status status="PASS" endtime="20150623 08:18:43.314" starttime="20150623 08:18:43.311"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:43.319" level="INFO">Executing command 'kill -9 23373'.</msg>
<msg timestamp="20150623 08:18:43.386" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:18:43.387" starttime="20150623 08:18:43.316"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:43.388" starttime="20150623 08:18:43.310"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:43.389" starttime="20150623 08:18:43.095"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:43.390" starttime="20150623 08:18:42.939"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:43.395" level="INFO">Starting command 'cat tmpfilemonitor22.log'.</msg>
<status status="PASS" endtime="20150623 08:18:43.430" starttime="20150623 08:18:43.392"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:18:43.433" level="INFO">Reading output of command 'cat tmpfilemonitor22.log'.</msg>
<msg timestamp="20150623 08:18:43.468" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:43.470" level="INFO">${stdout_string} = [2015-06-23 06:18:35,262][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:43.469" starttime="20150623 08:18:43.431"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:43.475" level="INFO">Executing command 'rm tmpfilemonitor22.log'.</msg>
<msg timestamp="20150623 08:18:43.551" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:43.552" starttime="20150623 08:18:43.472"></status>
</kw>
<msg timestamp="20150623 08:18:43.556" level="INFO">${tailed_text} = [2015-06-23 06:18:35,262][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:43.554" starttime="20150623 08:18:42.910"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:43.565" starttime="20150623 08:18:43.557"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:43.580" starttime="20150623 08:18:43.577"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:18:43.592" starttime="20150623 08:18:43.582"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:43.595" starttime="20150623 08:18:43.568"></status>
</kw>
<msg timestamp="20150623 08:18:43.599" level="INFO">${tailed_text} = [2015-06-23 06:18:35,262][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:43.597" starttime="20150623 08:18:42.902"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:43.626" starttime="20150623 08:18:43.623"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:43.627" starttime="20150623 08:18:43.616"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:43.635" starttime="20150623 08:18:43.629"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:43.640" starttime="20150623 08:18:43.636"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:43.644" starttime="20150623 08:18:43.641"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:43.645" starttime="20150623 08:18:43.609"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:43.677" starttime="20150623 08:18:43.676"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:43.683" starttime="20150623 08:18:43.677"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:43.687" starttime="20150623 08:18:43.685"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:18:43.691" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:18:43.694" level="INFO">${queryResultSetLines} = 1004482|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:18:43.693" starttime="20150623 08:18:43.689"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:43.697" starttime="20150623 08:18:43.695"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:18:43.701" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:18:43.703" level="INFO">@{queryResultSet} = [ 1004482|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:18:43.702" starttime="20150623 08:18:43.699"></status>
</kw>
<msg timestamp="20150623 08:18:43.706" level="INFO">@{queryRows} = [ 1004482|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:18:43.705" starttime="20150623 08:18:43.670"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:18:43.711" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:18:43.713" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:18:43.712" starttime="20150623 08:18:43.708"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:18:43.717" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:18:43.719" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:18:43.718" starttime="20150623 08:18:43.714"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:18:43.730" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:18:43.731" starttime="20150623 08:18:43.727"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:43.732" starttime="20150623 08:18:43.720"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:43.740" starttime="20150623 08:18:43.734"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:43.741" starttime="20150623 08:18:43.661"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:43.743" starttime="20150623 08:18:42.245"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:43.745" starttime="20150623 08:18:42.238"></status>
</kw>
<msg timestamp="20150623 08:18:43.749" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:18:43.747" starttime="20150623 08:18:42.236"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:18:43.753" level="INFO">Index in the 2. loop: 9</msg>
<status status="PASS" endtime="20150623 08:18:43.754" starttime="20150623 08:18:43.750"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:18:44.760" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20150623 08:18:44.762" starttime="20150623 08:18:43.756"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:18:44.774" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:18:44.773" starttime="20150623 08:18:44.765"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:44.775" starttime="20150623 08:18:42.235"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:44.776" starttime="20150623 08:18:19.233"></status>
</kw>
<msg timestamp="20150623 08:18:44.780" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:18:44.778" starttime="20150623 08:18:19.227"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>For delay ${loopIdx} we had ${failure} failure(s)</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:18:44.784" level="INFO">For delay 1 we had None failure(s)</msg>
<status status="PASS" endtime="20150623 08:18:44.786" starttime="20150623 08:18:44.781"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:44.787" starttime="20150623 08:18:19.214"></status>
</kw>
<kw type="foritem" name="${loopIdx} = 2">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Sitting in first FOR, Loop No.: ${loopIdx}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:18:44.792" level="INFO">Sitting in first FOR, Loop No.: 2</msg>
<status status="PASS" endtime="20150623 08:18:44.793" starttime="20150623 08:18:44.789"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Timeout set to ${loopIdx} secs</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:18:44.797" level="INFO">Timeout set to 2 secs</msg>
<status status="PASS" endtime="20150623 08:18:44.799" starttime="20150623 08:18:44.795"></status>
</kw>
<kw type="kw" name="${failure} = Internal Loop">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${loopIdx}</arg>
</arguments>
<kw type="for" name="${index} IN RANGE [ 0 | 10 ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${index} = 0">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:44.866" starttime="20150623 08:18:44.863"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:44.932" starttime="20150623 08:18:44.875"></status>
</kw>
<msg timestamp="20150623 08:18:44.935" level="INFO">${ssh_connection} = 23</msg>
<status status="PASS" endtime="20150623 08:18:44.934" starttime="20150623 08:18:44.867"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:18:44.948" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:18:45.373" level="INFO">Read output: Last login: Tue Jun 23 06:18:42 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:18:45.375" starttime="20150623 08:18:44.945"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:45.378" starttime="20150623 08:18:44.936"></status>
</kw>
<msg timestamp="20150623 08:18:45.382" level="INFO">${ssh_connection} = 23</msg>
<status status="PASS" endtime="20150623 08:18:45.381" starttime="20150623 08:18:44.853"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:45.396" starttime="20150623 08:18:45.393"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:45.401" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor23.log'.</msg>
<status status="PASS" endtime="20150623 08:18:45.405" starttime="20150623 08:18:45.397"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:45.407" starttime="20150623 08:18:45.386"></status>
</kw>
<msg timestamp="20150623 08:18:45.410" level="INFO">${ssh_connection} = 23</msg>
<status status="PASS" endtime="20150623 08:18:45.408" starttime="20150623 08:18:44.840"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:45.440" starttime="20150623 08:18:45.433"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:45.442" starttime="20150623 08:18:45.426"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:18:45.455" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:18:45.457" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:18:45.456" starttime="20150623 08:18:45.452"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:18:45.461" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:18:45.462" starttime="20150623 08:18:45.459"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:45.466" starttime="20150623 08:18:45.464"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:45.478" starttime="20150623 08:18:45.468"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:45.479" starttime="20150623 08:18:45.445"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:45.500" starttime="20150623 08:18:45.497"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:18:45.509" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:18:45.507" starttime="20150623 08:18:45.501"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:18:45.516" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:18:45.517" starttime="20150623 08:18:45.510"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:45.529" starttime="20150623 08:18:45.526"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:18:45.532" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:18:45.583" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:45.585" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:18:45.584" starttime="20150623 08:18:45.530"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:18:45.590" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:18:45.675" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:45.677" level="INFO">${processes_string} = 23500 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor23.log
23515 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
23533 ?        ...</msg>
<status status="PASS" endtime="20150623 08:18:45.676" starttime="20150623 08:18:45.587"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:18:45.683" level="INFO">@{processes_list} = [ 23500 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor23.log | 23515 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 23533 ?  ...</msg>
<status status="PASS" endtime="20150623 08:18:45.682" starttime="20150623 08:18:45.678"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 23500 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor23.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:45.690" level="INFO">${pid} = 23500</msg>
<status status="PASS" endtime="20150623 08:18:45.689" starttime="20150623 08:18:45.686"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:45.694" level="INFO">Executing command 'kill -9 23500'.</msg>
<msg timestamp="20150623 08:18:45.744" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:45.746" starttime="20150623 08:18:45.692"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:45.747" starttime="20150623 08:18:45.685"></status>
</kw>
<kw type="foritem" name="${process} = 23515 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:45.753" level="INFO">${pid} = 23515</msg>
<status status="PASS" endtime="20150623 08:18:45.752" starttime="20150623 08:18:45.749"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:45.757" level="INFO">Executing command 'kill -9 23515'.</msg>
<msg timestamp="20150623 08:18:45.816" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:45.817" starttime="20150623 08:18:45.754"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:45.818" starttime="20150623 08:18:45.747"></status>
</kw>
<kw type="foritem" name="${process} = 23533 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:45.824" level="INFO">${pid} = 23533</msg>
<status status="PASS" endtime="20150623 08:18:45.823" starttime="20150623 08:18:45.820"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:45.828" level="INFO">Executing command 'kill -9 23533'.</msg>
<msg timestamp="20150623 08:18:45.886" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:18:45.887" starttime="20150623 08:18:45.825"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:45.888" starttime="20150623 08:18:45.819"></status>
</kw>
<kw type="foritem" name="${process} = 23549 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:45.894" level="INFO">${pid} = 23549</msg>
<status status="PASS" endtime="20150623 08:18:45.893" starttime="20150623 08:18:45.890"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:45.898" level="INFO">Executing command 'kill -9 23549'.</msg>
<msg timestamp="20150623 08:18:45.956" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:18:45.957" starttime="20150623 08:18:45.895"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:45.958" starttime="20150623 08:18:45.889"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:45.958" starttime="20150623 08:18:45.684"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:45.959" starttime="20150623 08:18:45.519"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:45.963" level="INFO">Starting command 'cat tmpfilemonitor23.log'.</msg>
<status status="PASS" endtime="20150623 08:18:45.998" starttime="20150623 08:18:45.960"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:18:46.002" level="INFO">Reading output of command 'cat tmpfilemonitor23.log'.</msg>
<msg timestamp="20150623 08:18:46.033" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:46.036" level="INFO">${stdout_string} = [2015-06-23 06:18:37,781][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:46.035" starttime="20150623 08:18:46.000"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:46.040" level="INFO">Executing command 'rm tmpfilemonitor23.log'.</msg>
<msg timestamp="20150623 08:18:46.110" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:46.111" starttime="20150623 08:18:46.037"></status>
</kw>
<msg timestamp="20150623 08:18:46.116" level="INFO">${tailed_text} = [2015-06-23 06:18:37,781][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:46.113" starttime="20150623 08:18:45.490"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:46.124" starttime="20150623 08:18:46.117"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:46.136" starttime="20150623 08:18:46.133"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:18:46.140" starttime="20150623 08:18:46.138"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:46.145" starttime="20150623 08:18:46.127"></status>
</kw>
<msg timestamp="20150623 08:18:46.149" level="INFO">${tailed_text} = [2015-06-23 06:18:37,781][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:46.147" starttime="20150623 08:18:45.482"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:46.169" starttime="20150623 08:18:46.166"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:46.170" starttime="20150623 08:18:46.159"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:46.179" starttime="20150623 08:18:46.172"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:46.185" starttime="20150623 08:18:46.181"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:46.189" starttime="20150623 08:18:46.186"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:46.190" starttime="20150623 08:18:46.152"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:46.225" starttime="20150623 08:18:46.223"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:46.236" starttime="20150623 08:18:46.227"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:46.240" starttime="20150623 08:18:46.237"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:18:46.244" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:18:46.247" level="INFO">${queryResultSetLines} = 1004483|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:18:46.246" starttime="20150623 08:18:46.241"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:46.250" starttime="20150623 08:18:46.248"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:18:46.254" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:18:46.256" level="INFO">@{queryResultSet} = [ 1004483|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:18:46.255" starttime="20150623 08:18:46.252"></status>
</kw>
<msg timestamp="20150623 08:18:46.259" level="INFO">@{queryRows} = [ 1004483|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:18:46.258" starttime="20150623 08:18:46.216"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:18:46.264" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:18:46.266" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:18:46.265" starttime="20150623 08:18:46.260"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:18:46.270" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:18:46.271" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:18:46.271" starttime="20150623 08:18:46.267"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:18:46.282" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:18:46.283" starttime="20150623 08:18:46.280"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:46.285" starttime="20150623 08:18:46.273"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:46.292" starttime="20150623 08:18:46.286"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:46.294" starttime="20150623 08:18:46.206"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:46.295" starttime="20150623 08:18:44.818"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:46.297" starttime="20150623 08:18:44.811"></status>
</kw>
<msg timestamp="20150623 08:18:46.300" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:18:46.299" starttime="20150623 08:18:44.809"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:18:46.302" level="INFO">Index in the 2. loop: 0</msg>
<status status="PASS" endtime="20150623 08:18:46.303" starttime="20150623 08:18:46.301"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:18:48.306" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20150623 08:18:48.308" starttime="20150623 08:18:46.303"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:18:48.323" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:18:48.322" starttime="20150623 08:18:48.315"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:48.324" starttime="20150623 08:18:44.808"></status>
</kw>
<kw type="foritem" name="${index} = 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:48.388" starttime="20150623 08:18:48.385"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:48.456" starttime="20150623 08:18:48.398"></status>
</kw>
<msg timestamp="20150623 08:18:48.459" level="INFO">${ssh_connection} = 24</msg>
<status status="PASS" endtime="20150623 08:18:48.458" starttime="20150623 08:18:48.389"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:18:48.472" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:18:48.877" level="INFO">Read output: Last login: Tue Jun 23 06:18:45 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:18:48.879" starttime="20150623 08:18:48.469"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:48.880" starttime="20150623 08:18:48.461"></status>
</kw>
<msg timestamp="20150623 08:18:48.884" level="INFO">${ssh_connection} = 24</msg>
<status status="PASS" endtime="20150623 08:18:48.883" starttime="20150623 08:18:48.375"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:48.897" starttime="20150623 08:18:48.894"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:48.902" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor24.log'.</msg>
<status status="PASS" endtime="20150623 08:18:48.906" starttime="20150623 08:18:48.899"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:48.908" starttime="20150623 08:18:48.887"></status>
</kw>
<msg timestamp="20150623 08:18:48.910" level="INFO">${ssh_connection} = 24</msg>
<status status="PASS" endtime="20150623 08:18:48.909" starttime="20150623 08:18:48.361"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:48.940" starttime="20150623 08:18:48.933"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:48.943" starttime="20150623 08:18:48.926"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:18:48.955" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:18:48.958" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:18:48.957" starttime="20150623 08:18:48.952"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:18:48.962" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:18:48.963" starttime="20150623 08:18:48.959"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:48.967" starttime="20150623 08:18:48.964"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:48.977" starttime="20150623 08:18:48.968"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:48.978" starttime="20150623 08:18:48.945"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:48.999" starttime="20150623 08:18:48.996"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:18:49.008" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:18:49.007" starttime="20150623 08:18:49.000"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:18:49.014" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:18:49.015" starttime="20150623 08:18:49.009"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:49.028" starttime="20150623 08:18:49.025"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:18:49.031" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:18:49.077" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:49.079" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:18:49.078" starttime="20150623 08:18:49.029"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:18:49.084" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:18:49.174" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:49.176" level="INFO">${processes_string} = 23674 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor24.log
23689 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
23707 ?        ...</msg>
<status status="PASS" endtime="20150623 08:18:49.175" starttime="20150623 08:18:49.080"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:18:49.182" level="INFO">@{processes_list} = [ 23674 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor24.log | 23689 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 23707 ?  ...</msg>
<status status="PASS" endtime="20150623 08:18:49.181" starttime="20150623 08:18:49.178"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 23674 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor24.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:49.190" level="INFO">${pid} = 23674</msg>
<status status="PASS" endtime="20150623 08:18:49.189" starttime="20150623 08:18:49.186"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:49.194" level="INFO">Executing command 'kill -9 23674'.</msg>
<msg timestamp="20150623 08:18:49.256" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:49.257" starttime="20150623 08:18:49.191"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:49.258" starttime="20150623 08:18:49.185"></status>
</kw>
<kw type="foritem" name="${process} = 23689 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:49.264" level="INFO">${pid} = 23689</msg>
<status status="PASS" endtime="20150623 08:18:49.263" starttime="20150623 08:18:49.260"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:49.268" level="INFO">Executing command 'kill -9 23689'.</msg>
<msg timestamp="20150623 08:18:49.339" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:49.340" starttime="20150623 08:18:49.265"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:49.341" starttime="20150623 08:18:49.259"></status>
</kw>
<kw type="foritem" name="${process} = 23707 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:49.347" level="INFO">${pid} = 23707</msg>
<status status="PASS" endtime="20150623 08:18:49.346" starttime="20150623 08:18:49.343"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:49.351" level="INFO">Executing command 'kill -9 23707'.</msg>
<msg timestamp="20150623 08:18:49.420" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:18:49.421" starttime="20150623 08:18:49.348"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:49.422" starttime="20150623 08:18:49.341"></status>
</kw>
<kw type="foritem" name="${process} = 23723 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:49.428" level="INFO">${pid} = 23723</msg>
<status status="PASS" endtime="20150623 08:18:49.427" starttime="20150623 08:18:49.423"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:49.432" level="INFO">Executing command 'kill -9 23723'.</msg>
<msg timestamp="20150623 08:18:49.501" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:18:49.502" starttime="20150623 08:18:49.429"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:49.504" starttime="20150623 08:18:49.422"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:49.504" starttime="20150623 08:18:49.183"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:49.505" starttime="20150623 08:18:49.018"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:49.509" level="INFO">Starting command 'cat tmpfilemonitor24.log'.</msg>
<status status="PASS" endtime="20150623 08:18:49.544" starttime="20150623 08:18:49.507"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:18:49.548" level="INFO">Reading output of command 'cat tmpfilemonitor24.log'.</msg>
<msg timestamp="20150623 08:18:49.581" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:49.583" level="INFO">${stdout_string} = [2015-06-23 06:18:40,374][INFO ][Camel (ticket-router) thread #44 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:49.582" starttime="20150623 08:18:49.546"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:49.587" level="INFO">Executing command 'rm tmpfilemonitor24.log'.</msg>
<msg timestamp="20150623 08:18:49.651" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:49.652" starttime="20150623 08:18:49.585"></status>
</kw>
<msg timestamp="20150623 08:18:49.656" level="INFO">${tailed_text} = [2015-06-23 06:18:40,374][INFO ][Camel (ticket-router) thread #44 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:49.654" starttime="20150623 08:18:48.989"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:49.665" starttime="20150623 08:18:49.657"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:49.677" starttime="20150623 08:18:49.674"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:18:49.681" starttime="20150623 08:18:49.679"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:49.686" starttime="20150623 08:18:49.667"></status>
</kw>
<msg timestamp="20150623 08:18:49.690" level="INFO">${tailed_text} = [2015-06-23 06:18:40,374][INFO ][Camel (ticket-router) thread #44 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:49.688" starttime="20150623 08:18:48.982"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:49.710" starttime="20150623 08:18:49.707"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:49.711" starttime="20150623 08:18:49.700"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:49.719" starttime="20150623 08:18:49.713"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:49.723" starttime="20150623 08:18:49.720"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:49.728" starttime="20150623 08:18:49.725"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:49.729" starttime="20150623 08:18:49.693"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:49.763" starttime="20150623 08:18:49.761"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:49.772" starttime="20150623 08:18:49.765"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:49.776" starttime="20150623 08:18:49.774"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:18:49.780" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:18:49.783" level="INFO">${queryResultSetLines} = 1004484|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:18:49.782" starttime="20150623 08:18:49.778"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:49.786" starttime="20150623 08:18:49.784"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:18:49.791" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:18:49.793" level="INFO">@{queryResultSet} = [ 1004484|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:18:49.792" starttime="20150623 08:18:49.788"></status>
</kw>
<msg timestamp="20150623 08:18:49.796" level="INFO">@{queryRows} = [ 1004484|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:18:49.795" starttime="20150623 08:18:49.754"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:18:49.801" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:18:49.803" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:18:49.802" starttime="20150623 08:18:49.797"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:18:49.807" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:18:49.808" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:18:49.808" starttime="20150623 08:18:49.804"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:18:49.819" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:18:49.820" starttime="20150623 08:18:49.817"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:49.822" starttime="20150623 08:18:49.810"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:49.829" starttime="20150623 08:18:49.823"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:49.831" starttime="20150623 08:18:49.745"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:49.832" starttime="20150623 08:18:48.339"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:49.834" starttime="20150623 08:18:48.332"></status>
</kw>
<msg timestamp="20150623 08:18:49.838" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:18:49.836" starttime="20150623 08:18:48.327"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:18:49.842" level="INFO">Index in the 2. loop: 1</msg>
<status status="PASS" endtime="20150623 08:18:49.843" starttime="20150623 08:18:49.839"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:18:51.849" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20150623 08:18:51.851" starttime="20150623 08:18:49.845"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:18:51.862" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:18:51.861" starttime="20150623 08:18:51.854"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:51.863" starttime="20150623 08:18:48.325"></status>
</kw>
<kw type="foritem" name="${index} = 2">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:51.923" starttime="20150623 08:18:51.921"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:51.993" starttime="20150623 08:18:51.932"></status>
</kw>
<msg timestamp="20150623 08:18:51.996" level="INFO">${ssh_connection} = 25</msg>
<status status="PASS" endtime="20150623 08:18:51.995" starttime="20150623 08:18:51.925"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:18:52.009" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:18:52.379" level="INFO">Read output: Last login: Tue Jun 23 06:18:48 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:18:52.380" starttime="20150623 08:18:52.006"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:52.382" starttime="20150623 08:18:51.997"></status>
</kw>
<msg timestamp="20150623 08:18:52.387" level="INFO">${ssh_connection} = 25</msg>
<status status="PASS" endtime="20150623 08:18:52.385" starttime="20150623 08:18:51.911"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:52.400" starttime="20150623 08:18:52.397"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:52.405" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor25.log'.</msg>
<status status="PASS" endtime="20150623 08:18:52.409" starttime="20150623 08:18:52.402"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:52.411" starttime="20150623 08:18:52.390"></status>
</kw>
<msg timestamp="20150623 08:18:52.414" level="INFO">${ssh_connection} = 25</msg>
<status status="PASS" endtime="20150623 08:18:52.413" starttime="20150623 08:18:51.897"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:52.435" starttime="20150623 08:18:52.430"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:52.438" starttime="20150623 08:18:52.427"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:18:52.453" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:18:52.456" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:18:52.454" starttime="20150623 08:18:52.449"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:18:52.460" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:18:52.461" starttime="20150623 08:18:52.457"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:52.466" starttime="20150623 08:18:52.463"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:52.480" starttime="20150623 08:18:52.468"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:52.481" starttime="20150623 08:18:52.441"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:52.502" starttime="20150623 08:18:52.499"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:18:52.510" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:18:52.509" starttime="20150623 08:18:52.503"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:18:52.516" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:18:52.517" starttime="20150623 08:18:52.511"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:52.529" starttime="20150623 08:18:52.526"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:18:52.533" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:18:52.569" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:52.572" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:18:52.571" starttime="20150623 08:18:52.531"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:18:52.577" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:18:52.664" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:52.666" level="INFO">${processes_string} = 23848 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor25.log
23863 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
23881 ?        ...</msg>
<status status="PASS" endtime="20150623 08:18:52.665" starttime="20150623 08:18:52.573"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:18:52.672" level="INFO">@{processes_list} = [ 23848 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor25.log | 23863 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 23881 ?  ...</msg>
<status status="PASS" endtime="20150623 08:18:52.671" starttime="20150623 08:18:52.667"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 23848 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor25.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:52.679" level="INFO">${pid} = 23848</msg>
<status status="PASS" endtime="20150623 08:18:52.678" starttime="20150623 08:18:52.675"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:52.683" level="INFO">Executing command 'kill -9 23848'.</msg>
<msg timestamp="20150623 08:18:52.738" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:52.739" starttime="20150623 08:18:52.681"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:52.740" starttime="20150623 08:18:52.674"></status>
</kw>
<kw type="foritem" name="${process} = 23863 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:52.746" level="INFO">${pid} = 23863</msg>
<status status="PASS" endtime="20150623 08:18:52.745" starttime="20150623 08:18:52.742"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:52.750" level="INFO">Executing command 'kill -9 23863'.</msg>
<msg timestamp="20150623 08:18:52.813" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:52.814" starttime="20150623 08:18:52.748"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:52.816" starttime="20150623 08:18:52.741"></status>
</kw>
<kw type="foritem" name="${process} = 23881 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:52.821" level="INFO">${pid} = 23881</msg>
<status status="PASS" endtime="20150623 08:18:52.820" starttime="20150623 08:18:52.817"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:52.825" level="INFO">Executing command 'kill -9 23881'.</msg>
<msg timestamp="20150623 08:18:52.881" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:18:52.882" starttime="20150623 08:18:52.823"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:52.883" starttime="20150623 08:18:52.816"></status>
</kw>
<kw type="foritem" name="${process} = 23897 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:52.889" level="INFO">${pid} = 23897</msg>
<status status="PASS" endtime="20150623 08:18:52.888" starttime="20150623 08:18:52.885"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:52.893" level="INFO">Executing command 'kill -9 23897'.</msg>
<msg timestamp="20150623 08:18:52.949" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:18:52.950" starttime="20150623 08:18:52.890"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:52.951" starttime="20150623 08:18:52.884"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:52.952" starttime="20150623 08:18:52.673"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:52.953" starttime="20150623 08:18:52.520"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:52.957" level="INFO">Starting command 'cat tmpfilemonitor25.log'.</msg>
<status status="PASS" endtime="20150623 08:18:52.991" starttime="20150623 08:18:52.954"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:18:52.995" level="INFO">Reading output of command 'cat tmpfilemonitor25.log'.</msg>
<msg timestamp="20150623 08:18:53.020" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:53.024" level="INFO">${stdout_string} = [2015-06-23 06:18:42,930][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:53.022" starttime="20150623 08:18:52.993"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:53.028" level="INFO">Executing command 'rm tmpfilemonitor25.log'.</msg>
<msg timestamp="20150623 08:18:53.108" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:53.109" starttime="20150623 08:18:53.025"></status>
</kw>
<msg timestamp="20150623 08:18:53.113" level="INFO">${tailed_text} = [2015-06-23 06:18:42,930][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:53.111" starttime="20150623 08:18:52.492"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:53.122" starttime="20150623 08:18:53.115"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:53.134" starttime="20150623 08:18:53.131"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:18:53.138" starttime="20150623 08:18:53.136"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:53.143" starttime="20150623 08:18:53.124"></status>
</kw>
<msg timestamp="20150623 08:18:53.147" level="INFO">${tailed_text} = [2015-06-23 06:18:42,930][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:53.145" starttime="20150623 08:18:52.485"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:53.167" starttime="20150623 08:18:53.164"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:53.168" starttime="20150623 08:18:53.158"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:53.176" starttime="20150623 08:18:53.170"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:53.181" starttime="20150623 08:18:53.178"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:53.185" starttime="20150623 08:18:53.182"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:53.186" starttime="20150623 08:18:53.151"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:53.222" starttime="20150623 08:18:53.220"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:53.231" starttime="20150623 08:18:53.224"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:53.235" starttime="20150623 08:18:53.232"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:18:53.239" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:18:53.242" level="INFO">${queryResultSetLines} = 1004485|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:18:53.241" starttime="20150623 08:18:53.236"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:53.245" starttime="20150623 08:18:53.243"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:18:53.249" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:18:53.251" level="INFO">@{queryResultSet} = [ 1004485|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:18:53.250" starttime="20150623 08:18:53.247"></status>
</kw>
<msg timestamp="20150623 08:18:53.254" level="INFO">@{queryRows} = [ 1004485|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:18:53.253" starttime="20150623 08:18:53.212"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:18:53.259" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:18:53.260" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:18:53.260" starttime="20150623 08:18:53.255"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:18:53.264" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:18:53.266" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:18:53.265" starttime="20150623 08:18:53.262"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:18:53.277" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:18:53.278" starttime="20150623 08:18:53.274"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:53.279" starttime="20150623 08:18:53.268"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:53.287" starttime="20150623 08:18:53.281"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:53.288" starttime="20150623 08:18:53.202"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:53.289" starttime="20150623 08:18:51.876"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:53.292" starttime="20150623 08:18:51.868"></status>
</kw>
<msg timestamp="20150623 08:18:53.296" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:18:53.294" starttime="20150623 08:18:51.865"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:18:53.300" level="INFO">Index in the 2. loop: 2</msg>
<status status="PASS" endtime="20150623 08:18:53.300" starttime="20150623 08:18:53.297"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:18:55.303" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20150623 08:18:55.306" starttime="20150623 08:18:53.301"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:18:55.316" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:18:55.315" starttime="20150623 08:18:55.308"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:55.317" starttime="20150623 08:18:51.864"></status>
</kw>
<kw type="foritem" name="${index} = 3">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:55.376" starttime="20150623 08:18:55.374"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:55.444" starttime="20150623 08:18:55.385"></status>
</kw>
<msg timestamp="20150623 08:18:55.447" level="INFO">${ssh_connection} = 26</msg>
<status status="PASS" endtime="20150623 08:18:55.446" starttime="20150623 08:18:55.378"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:18:55.460" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:18:55.855" level="INFO">Read output: Last login: Tue Jun 23 06:18:52 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:18:55.858" starttime="20150623 08:18:55.457"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:55.859" starttime="20150623 08:18:55.449"></status>
</kw>
<msg timestamp="20150623 08:18:55.862" level="INFO">${ssh_connection} = 26</msg>
<status status="PASS" endtime="20150623 08:18:55.861" starttime="20150623 08:18:55.364"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:55.876" starttime="20150623 08:18:55.873"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:55.880" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor26.log'.</msg>
<status status="PASS" endtime="20150623 08:18:55.885" starttime="20150623 08:18:55.877"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:55.886" starttime="20150623 08:18:55.866"></status>
</kw>
<msg timestamp="20150623 08:18:55.889" level="INFO">${ssh_connection} = 26</msg>
<status status="PASS" endtime="20150623 08:18:55.888" starttime="20150623 08:18:55.350"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:55.918" starttime="20150623 08:18:55.911"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:55.920" starttime="20150623 08:18:55.904"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:18:55.933" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:18:55.936" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:18:55.935" starttime="20150623 08:18:55.930"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:18:55.940" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:18:55.941" starttime="20150623 08:18:55.937"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:55.945" starttime="20150623 08:18:55.942"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:55.956" starttime="20150623 08:18:55.946"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:55.957" starttime="20150623 08:18:55.923"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:55.978" starttime="20150623 08:18:55.975"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:18:55.986" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:18:55.985" starttime="20150623 08:18:55.979"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:18:55.995" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:18:55.996" starttime="20150623 08:18:55.988"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:56.008" starttime="20150623 08:18:56.005"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:18:56.011" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:18:56.056" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:56.058" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:18:56.057" starttime="20150623 08:18:56.009"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:18:56.062" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:18:56.155" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:56.158" level="INFO">${processes_string} = 24028 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor26.log
24043 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
24061 ?        ...</msg>
<status status="PASS" endtime="20150623 08:18:56.156" starttime="20150623 08:18:56.059"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:18:56.163" level="INFO">@{processes_list} = [ 24028 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor26.log | 24043 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 24061 ?  ...</msg>
<status status="PASS" endtime="20150623 08:18:56.162" starttime="20150623 08:18:56.159"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 24028 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor26.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:56.171" level="INFO">${pid} = 24028</msg>
<status status="PASS" endtime="20150623 08:18:56.170" starttime="20150623 08:18:56.167"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:56.175" level="INFO">Executing command 'kill -9 24028'.</msg>
<msg timestamp="20150623 08:18:56.236" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:56.237" starttime="20150623 08:18:56.172"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:56.238" starttime="20150623 08:18:56.166"></status>
</kw>
<kw type="foritem" name="${process} = 24043 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:56.243" level="INFO">${pid} = 24043</msg>
<status status="PASS" endtime="20150623 08:18:56.242" starttime="20150623 08:18:56.239"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:56.247" level="INFO">Executing command 'kill -9 24043'.</msg>
<msg timestamp="20150623 08:18:56.317" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:56.318" starttime="20150623 08:18:56.245"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:56.319" starttime="20150623 08:18:56.238"></status>
</kw>
<kw type="foritem" name="${process} = 24061 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:56.324" level="INFO">${pid} = 24061</msg>
<status status="PASS" endtime="20150623 08:18:56.323" starttime="20150623 08:18:56.320"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:56.329" level="INFO">Executing command 'kill -9 24061'.</msg>
<msg timestamp="20150623 08:18:56.398" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:18:56.399" starttime="20150623 08:18:56.326"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:56.400" starttime="20150623 08:18:56.319"></status>
</kw>
<kw type="foritem" name="${process} = 24077 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:56.407" level="INFO">${pid} = 24077</msg>
<status status="PASS" endtime="20150623 08:18:56.406" starttime="20150623 08:18:56.402"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:56.411" level="INFO">Executing command 'kill -9 24077'.</msg>
<msg timestamp="20150623 08:18:56.482" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:18:56.483" starttime="20150623 08:18:56.408"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:56.484" starttime="20150623 08:18:56.401"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:56.485" starttime="20150623 08:18:56.165"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:56.486" starttime="20150623 08:18:55.998"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:56.491" level="INFO">Starting command 'cat tmpfilemonitor26.log'.</msg>
<status status="PASS" endtime="20150623 08:18:56.526" starttime="20150623 08:18:56.488"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:18:56.529" level="INFO">Reading output of command 'cat tmpfilemonitor26.log'.</msg>
<msg timestamp="20150623 08:18:56.571" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:56.573" level="INFO">${stdout_string} = [2015-06-23 06:18:45,512][INFO ][Camel (ticket-router) thread #53 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:56.572" starttime="20150623 08:18:56.527"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:56.577" level="INFO">Executing command 'rm tmpfilemonitor26.log'.</msg>
<msg timestamp="20150623 08:18:56.653" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:56.654" starttime="20150623 08:18:56.574"></status>
</kw>
<msg timestamp="20150623 08:18:56.658" level="INFO">${tailed_text} = [2015-06-23 06:18:45,512][INFO ][Camel (ticket-router) thread #53 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:56.656" starttime="20150623 08:18:55.969"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:56.667" starttime="20150623 08:18:56.660"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:56.676" starttime="20150623 08:18:56.675"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:18:56.678" starttime="20150623 08:18:56.677"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:56.681" starttime="20150623 08:18:56.669"></status>
</kw>
<msg timestamp="20150623 08:18:56.682" level="INFO">${tailed_text} = [2015-06-23 06:18:45,512][INFO ][Camel (ticket-router) thread #53 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:18:56.682" starttime="20150623 08:18:55.961"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:56.691" starttime="20150623 08:18:56.690"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:56.692" starttime="20150623 08:18:56.687"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:56.695" starttime="20150623 08:18:56.693"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:56.698" starttime="20150623 08:18:56.696"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:56.699" starttime="20150623 08:18:56.698"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:56.700" starttime="20150623 08:18:56.684"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:56.716" starttime="20150623 08:18:56.715"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:56.721" starttime="20150623 08:18:56.716"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:56.723" starttime="20150623 08:18:56.722"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:18:56.725" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:18:56.726" level="INFO">${queryResultSetLines} = 1004486|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:18:56.725" starttime="20150623 08:18:56.723"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:56.727" starttime="20150623 08:18:56.726"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:18:56.729" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:18:56.730" level="INFO">@{queryResultSet} = [ 1004486|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:18:56.730" starttime="20150623 08:18:56.728"></status>
</kw>
<msg timestamp="20150623 08:18:56.731" level="INFO">@{queryRows} = [ 1004486|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:18:56.731" starttime="20150623 08:18:56.712"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:18:56.734" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:18:56.734" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:18:56.734" starttime="20150623 08:18:56.732"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:18:56.736" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:18:56.737" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:18:56.737" starttime="20150623 08:18:56.735"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:18:56.742" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:18:56.743" starttime="20150623 08:18:56.741"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:56.743" starttime="20150623 08:18:56.738"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:56.747" starttime="20150623 08:18:56.744"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:56.747" starttime="20150623 08:18:56.707"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:56.748" starttime="20150623 08:18:55.329"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:56.749" starttime="20150623 08:18:55.322"></status>
</kw>
<msg timestamp="20150623 08:18:56.751" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:18:56.750" starttime="20150623 08:18:55.319"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:18:56.753" level="INFO">Index in the 2. loop: 3</msg>
<status status="PASS" endtime="20150623 08:18:56.753" starttime="20150623 08:18:56.751"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:18:58.756" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20150623 08:18:58.759" starttime="20150623 08:18:56.754"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:18:58.769" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:18:58.768" starttime="20150623 08:18:58.761"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:58.770" starttime="20150623 08:18:55.318"></status>
</kw>
<kw type="foritem" name="${index} = 4">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:58.829" starttime="20150623 08:18:58.827"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:58.900" starttime="20150623 08:18:58.839"></status>
</kw>
<msg timestamp="20150623 08:18:58.903" level="INFO">${ssh_connection} = 27</msg>
<status status="PASS" endtime="20150623 08:18:58.902" starttime="20150623 08:18:58.831"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:18:58.915" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:18:59.432" level="INFO">Read output: Last login: Tue Jun 23 06:18:55 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:18:59.433" starttime="20150623 08:18:58.912"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:59.434" starttime="20150623 08:18:58.904"></status>
</kw>
<msg timestamp="20150623 08:18:59.437" level="INFO">${ssh_connection} = 27</msg>
<status status="PASS" endtime="20150623 08:18:59.436" starttime="20150623 08:18:58.817"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:59.443" starttime="20150623 08:18:59.442"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:18:59.445" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor27.log'.</msg>
<status status="PASS" endtime="20150623 08:18:59.449" starttime="20150623 08:18:59.444"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:59.449" starttime="20150623 08:18:59.438"></status>
</kw>
<msg timestamp="20150623 08:18:59.451" level="INFO">${ssh_connection} = 27</msg>
<status status="PASS" endtime="20150623 08:18:59.450" starttime="20150623 08:18:58.804"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:59.466" starttime="20150623 08:18:59.461"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:59.468" starttime="20150623 08:18:59.458"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:18:59.480" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:18:59.483" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:18:59.482" starttime="20150623 08:18:59.477"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:18:59.486" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:18:59.487" starttime="20150623 08:18:59.484"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:59.491" starttime="20150623 08:18:59.489"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:59.502" starttime="20150623 08:18:59.493"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:59.504" starttime="20150623 08:18:59.470"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:59.524" starttime="20150623 08:18:59.521"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:18:59.532" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:18:59.531" starttime="20150623 08:18:59.525"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:18:59.538" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:18:59.539" starttime="20150623 08:18:59.534"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:18:59.552" starttime="20150623 08:18:59.548"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:18:59.555" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:18:59.602" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:59.604" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:18:59.603" starttime="20150623 08:18:59.553"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:18:59.609" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:18:59.698" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:18:59.700" level="INFO">${processes_string} = 24202 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor27.log
24217 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
24235 ?        ...</msg>
<status status="PASS" endtime="20150623 08:18:59.699" starttime="20150623 08:18:59.605"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:18:59.706" level="INFO">@{processes_list} = [ 24202 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor27.log | 24217 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 24235 ?  ...</msg>
<status status="PASS" endtime="20150623 08:18:59.705" starttime="20150623 08:18:59.702"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 24202 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor27.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:59.713" level="INFO">${pid} = 24202</msg>
<status status="PASS" endtime="20150623 08:18:59.712" starttime="20150623 08:18:59.709"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:59.717" level="INFO">Executing command 'kill -9 24202'.</msg>
<msg timestamp="20150623 08:18:59.777" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:59.778" starttime="20150623 08:18:59.715"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:59.779" starttime="20150623 08:18:59.708"></status>
</kw>
<kw type="foritem" name="${process} = 24217 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:59.785" level="INFO">${pid} = 24217</msg>
<status status="PASS" endtime="20150623 08:18:59.784" starttime="20150623 08:18:59.781"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:59.789" level="INFO">Executing command 'kill -9 24217'.</msg>
<msg timestamp="20150623 08:18:59.858" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:18:59.859" starttime="20150623 08:18:59.787"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:59.860" starttime="20150623 08:18:59.780"></status>
</kw>
<kw type="foritem" name="${process} = 24235 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:59.866" level="INFO">${pid} = 24235</msg>
<status status="PASS" endtime="20150623 08:18:59.865" starttime="20150623 08:18:59.862"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:59.870" level="INFO">Executing command 'kill -9 24235'.</msg>
<msg timestamp="20150623 08:18:59.938" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:18:59.939" starttime="20150623 08:18:59.867"></status>
</kw>
<status status="PASS" endtime="20150623 08:18:59.940" starttime="20150623 08:18:59.861"></status>
</kw>
<kw type="foritem" name="${process} = 24251 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:18:59.946" level="INFO">${pid} = 24251</msg>
<status status="PASS" endtime="20150623 08:18:59.945" starttime="20150623 08:18:59.942"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:18:59.950" level="INFO">Executing command 'kill -9 24251'.</msg>
<msg timestamp="20150623 08:19:00.019" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:19:00.020" starttime="20150623 08:18:59.948"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:00.022" starttime="20150623 08:18:59.941"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:00.024" starttime="20150623 08:18:59.707"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:00.025" starttime="20150623 08:18:59.542"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:19:00.030" level="INFO">Starting command 'cat tmpfilemonitor27.log'.</msg>
<status status="PASS" endtime="20150623 08:19:00.062" starttime="20150623 08:19:00.028"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:19:00.066" level="INFO">Reading output of command 'cat tmpfilemonitor27.log'.</msg>
<msg timestamp="20150623 08:19:00.102" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:19:00.104" level="INFO">${stdout_string} = [2015-06-23 06:18:49,011][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:19:00.103" starttime="20150623 08:19:00.064"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:19:00.108" level="INFO">Executing command 'rm tmpfilemonitor27.log'.</msg>
<msg timestamp="20150623 08:19:00.183" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:19:00.184" starttime="20150623 08:19:00.106"></status>
</kw>
<msg timestamp="20150623 08:19:00.188" level="INFO">${tailed_text} = [2015-06-23 06:18:49,011][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:19:00.186" starttime="20150623 08:18:59.514"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:00.196" starttime="20150623 08:19:00.189"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:00.208" starttime="20150623 08:19:00.205"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:19:00.212" starttime="20150623 08:19:00.210"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:00.217" starttime="20150623 08:19:00.199"></status>
</kw>
<msg timestamp="20150623 08:19:00.220" level="INFO">${tailed_text} = [2015-06-23 06:18:49,011][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:19:00.219" starttime="20150623 08:18:59.507"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:00.240" starttime="20150623 08:19:00.237"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:00.241" starttime="20150623 08:19:00.231"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:00.248" starttime="20150623 08:19:00.242"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:00.253" starttime="20150623 08:19:00.250"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:00.257" starttime="20150623 08:19:00.254"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:00.258" starttime="20150623 08:19:00.224"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:00.292" starttime="20150623 08:19:00.290"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:00.301" starttime="20150623 08:19:00.293"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:00.304" starttime="20150623 08:19:00.302"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:19:00.309" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:19:00.311" level="INFO">${queryResultSetLines} = 1004487|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:19:00.310" starttime="20150623 08:19:00.306"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:00.314" starttime="20150623 08:19:00.313"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:19:00.318" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:19:00.320" level="INFO">@{queryResultSet} = [ 1004487|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:19:00.319" starttime="20150623 08:19:00.316"></status>
</kw>
<msg timestamp="20150623 08:19:00.323" level="INFO">@{queryRows} = [ 1004487|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:19:00.322" starttime="20150623 08:19:00.283"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:19:00.328" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:19:00.330" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:19:00.329" starttime="20150623 08:19:00.325"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:19:00.334" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:19:00.336" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:19:00.335" starttime="20150623 08:19:00.331"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:19:00.346" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:19:00.347" starttime="20150623 08:19:00.344"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:00.348" starttime="20150623 08:19:00.337"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:00.356" starttime="20150623 08:19:00.350"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:00.357" starttime="20150623 08:19:00.273"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:00.359" starttime="20150623 08:18:58.782"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:00.361" starttime="20150623 08:18:58.775"></status>
</kw>
<msg timestamp="20150623 08:19:00.365" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:19:00.363" starttime="20150623 08:18:58.772"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:19:00.369" level="INFO">Index in the 2. loop: 4</msg>
<status status="PASS" endtime="20150623 08:19:00.370" starttime="20150623 08:19:00.366"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:19:02.375" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20150623 08:19:02.377" starttime="20150623 08:19:00.371"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:19:02.388" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:19:02.387" starttime="20150623 08:19:02.380"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:02.389" starttime="20150623 08:18:58.771"></status>
</kw>
<kw type="foritem" name="${index} = 5">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:02.448" starttime="20150623 08:19:02.446"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:02.515" starttime="20150623 08:19:02.457"></status>
</kw>
<msg timestamp="20150623 08:19:02.519" level="INFO">${ssh_connection} = 28</msg>
<status status="PASS" endtime="20150623 08:19:02.518" starttime="20150623 08:19:02.450"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:19:02.531" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:19:02.941" level="INFO">Read output: Last login: Tue Jun 23 06:18:59 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:19:02.943" starttime="20150623 08:19:02.528"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:02.944" starttime="20150623 08:19:02.520"></status>
</kw>
<msg timestamp="20150623 08:19:02.947" level="INFO">${ssh_connection} = 28</msg>
<status status="PASS" endtime="20150623 08:19:02.947" starttime="20150623 08:19:02.436"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:02.961" starttime="20150623 08:19:02.958"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:19:02.966" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor28.log'.</msg>
<status status="PASS" endtime="20150623 08:19:02.971" starttime="20150623 08:19:02.962"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:02.972" starttime="20150623 08:19:02.951"></status>
</kw>
<msg timestamp="20150623 08:19:02.975" level="INFO">${ssh_connection} = 28</msg>
<status status="PASS" endtime="20150623 08:19:02.974" starttime="20150623 08:19:02.422"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:03.004" starttime="20150623 08:19:02.997"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:03.007" starttime="20150623 08:19:02.990"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:19:03.020" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:19:03.023" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:19:03.022" starttime="20150623 08:19:03.017"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:19:03.026" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:19:03.027" starttime="20150623 08:19:03.024"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:03.031" starttime="20150623 08:19:03.029"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:03.047" starttime="20150623 08:19:03.033"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:03.048" starttime="20150623 08:19:03.010"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:03.069" starttime="20150623 08:19:03.066"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:19:03.077" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:19:03.076" starttime="20150623 08:19:03.070"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:19:03.085" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:19:03.086" starttime="20150623 08:19:03.079"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:03.098" starttime="20150623 08:19:03.095"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:19:03.101" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:19:03.146" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:19:03.148" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:19:03.147" starttime="20150623 08:19:03.099"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:19:03.153" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:19:03.244" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:19:03.246" level="INFO">${processes_string} = 24379 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor28.log
24394 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
24412 ?        ...</msg>
<status status="PASS" endtime="20150623 08:19:03.245" starttime="20150623 08:19:03.150"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:19:03.252" level="INFO">@{processes_list} = [ 24379 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor28.log | 24394 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 24412 ?  ...</msg>
<status status="PASS" endtime="20150623 08:19:03.251" starttime="20150623 08:19:03.248"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 24379 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor28.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:03.259" level="INFO">${pid} = 24379</msg>
<status status="PASS" endtime="20150623 08:19:03.258" starttime="20150623 08:19:03.255"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:03.263" level="INFO">Executing command 'kill -9 24379'.</msg>
<msg timestamp="20150623 08:19:03.326" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:19:03.327" starttime="20150623 08:19:03.260"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:03.328" starttime="20150623 08:19:03.254"></status>
</kw>
<kw type="foritem" name="${process} = 24394 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:03.333" level="INFO">${pid} = 24394</msg>
<status status="PASS" endtime="20150623 08:19:03.332" starttime="20150623 08:19:03.329"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:03.337" level="INFO">Executing command 'kill -9 24394'.</msg>
<msg timestamp="20150623 08:19:03.409" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:19:03.410" starttime="20150623 08:19:03.335"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:03.411" starttime="20150623 08:19:03.328"></status>
</kw>
<kw type="foritem" name="${process} = 24412 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:03.417" level="INFO">${pid} = 24412</msg>
<status status="PASS" endtime="20150623 08:19:03.416" starttime="20150623 08:19:03.413"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:03.421" level="INFO">Executing command 'kill -9 24412'.</msg>
<msg timestamp="20150623 08:19:03.492" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:19:03.493" starttime="20150623 08:19:03.419"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:03.494" starttime="20150623 08:19:03.412"></status>
</kw>
<kw type="foritem" name="${process} = 24428 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:03.500" level="INFO">${pid} = 24428</msg>
<status status="PASS" endtime="20150623 08:19:03.499" starttime="20150623 08:19:03.496"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:03.504" level="INFO">Executing command 'kill -9 24428'.</msg>
<msg timestamp="20150623 08:19:03.575" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:19:03.576" starttime="20150623 08:19:03.502"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:03.577" starttime="20150623 08:19:03.495"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:03.578" starttime="20150623 08:19:03.253"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:03.579" starttime="20150623 08:19:03.088"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:19:03.583" level="INFO">Starting command 'cat tmpfilemonitor28.log'.</msg>
<status status="PASS" endtime="20150623 08:19:03.618" starttime="20150623 08:19:03.580"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:19:03.621" level="INFO">Reading output of command 'cat tmpfilemonitor28.log'.</msg>
<msg timestamp="20150623 08:19:03.657" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:19:03.659" level="INFO">${stdout_string} = [2015-06-23 06:18:52,509][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:19:03.658" starttime="20150623 08:19:03.620"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:19:03.663" level="INFO">Executing command 'rm tmpfilemonitor28.log'.</msg>
<msg timestamp="20150623 08:19:03.718" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:19:03.719" starttime="20150623 08:19:03.660"></status>
</kw>
<msg timestamp="20150623 08:19:03.722" level="INFO">${tailed_text} = [2015-06-23 06:18:52,509][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:19:03.721" starttime="20150623 08:19:03.059"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:03.731" starttime="20150623 08:19:03.724"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:03.743" starttime="20150623 08:19:03.740"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:19:03.747" starttime="20150623 08:19:03.744"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:03.752" starttime="20150623 08:19:03.733"></status>
</kw>
<msg timestamp="20150623 08:19:03.755" level="INFO">${tailed_text} = [2015-06-23 06:18:52,509][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:19:03.754" starttime="20150623 08:19:03.052"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:03.774" starttime="20150623 08:19:03.771"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:03.775" starttime="20150623 08:19:03.765"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:03.783" starttime="20150623 08:19:03.777"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:03.787" starttime="20150623 08:19:03.784"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:03.791" starttime="20150623 08:19:03.789"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:03.793" starttime="20150623 08:19:03.758"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:03.827" starttime="20150623 08:19:03.825"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:03.835" starttime="20150623 08:19:03.829"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:03.839" starttime="20150623 08:19:03.837"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:19:03.843" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:19:03.846" level="INFO">${queryResultSetLines} = 1004488|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:19:03.845" starttime="20150623 08:19:03.841"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:03.849" starttime="20150623 08:19:03.847"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:19:03.853" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:19:03.855" level="INFO">@{queryResultSet} = [ 1004488|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:19:03.854" starttime="20150623 08:19:03.850"></status>
</kw>
<msg timestamp="20150623 08:19:03.858" level="INFO">@{queryRows} = [ 1004488|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:19:03.857" starttime="20150623 08:19:03.818"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:19:03.862" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:19:03.864" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:19:03.863" starttime="20150623 08:19:03.859"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:19:03.868" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:19:03.870" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:19:03.869" starttime="20150623 08:19:03.866"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:19:03.881" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:19:03.882" starttime="20150623 08:19:03.878"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:03.883" starttime="20150623 08:19:03.871"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:03.890" starttime="20150623 08:19:03.884"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:03.892" starttime="20150623 08:19:03.809"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:03.893" starttime="20150623 08:19:02.401"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:03.896" starttime="20150623 08:19:02.394"></status>
</kw>
<msg timestamp="20150623 08:19:03.899" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:19:03.897" starttime="20150623 08:19:02.391"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:19:03.903" level="INFO">Index in the 2. loop: 5</msg>
<status status="PASS" endtime="20150623 08:19:03.904" starttime="20150623 08:19:03.900"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:19:05.909" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20150623 08:19:05.911" starttime="20150623 08:19:03.906"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:19:05.922" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:19:05.921" starttime="20150623 08:19:05.914"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:05.923" starttime="20150623 08:19:02.390"></status>
</kw>
<kw type="foritem" name="${index} = 6">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:05.983" starttime="20150623 08:19:05.981"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:06.052" starttime="20150623 08:19:05.992"></status>
</kw>
<msg timestamp="20150623 08:19:06.057" level="INFO">${ssh_connection} = 29</msg>
<status status="PASS" endtime="20150623 08:19:06.055" starttime="20150623 08:19:05.985"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:19:06.069" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:19:06.490" level="INFO">Read output: Last login: Tue Jun 23 06:19:02 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:19:06.492" starttime="20150623 08:19:06.066"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:06.493" starttime="20150623 08:19:06.058"></status>
</kw>
<msg timestamp="20150623 08:19:06.497" level="INFO">${ssh_connection} = 29</msg>
<status status="PASS" endtime="20150623 08:19:06.495" starttime="20150623 08:19:05.971"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:06.511" starttime="20150623 08:19:06.508"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:19:06.516" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor29.log'.</msg>
<status status="PASS" endtime="20150623 08:19:06.521" starttime="20150623 08:19:06.513"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:06.522" starttime="20150623 08:19:06.501"></status>
</kw>
<msg timestamp="20150623 08:19:06.526" level="INFO">${ssh_connection} = 29</msg>
<status status="PASS" endtime="20150623 08:19:06.524" starttime="20150623 08:19:05.957"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:06.554" starttime="20150623 08:19:06.548"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:06.556" starttime="20150623 08:19:06.541"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:19:06.568" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:19:06.570" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:19:06.569" starttime="20150623 08:19:06.565"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:19:06.574" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:19:06.575" starttime="20150623 08:19:06.572"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:06.579" starttime="20150623 08:19:06.576"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:06.590" starttime="20150623 08:19:06.580"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:06.591" starttime="20150623 08:19:06.558"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:06.612" starttime="20150623 08:19:06.609"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:19:06.620" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:19:06.619" starttime="20150623 08:19:06.613"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:19:06.627" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:19:06.628" starttime="20150623 08:19:06.621"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:06.641" starttime="20150623 08:19:06.637"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:19:06.644" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:19:06.686" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:19:06.688" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:19:06.687" starttime="20150623 08:19:06.642"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:19:06.692" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:19:06.786" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:19:06.788" level="INFO">${processes_string} = 24554 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor29.log
24569 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
24587 ?        ...</msg>
<status status="PASS" endtime="20150623 08:19:06.787" starttime="20150623 08:19:06.689"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:19:06.793" level="INFO">@{processes_list} = [ 24554 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor29.log | 24569 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 24587 ?  ...</msg>
<status status="PASS" endtime="20150623 08:19:06.792" starttime="20150623 08:19:06.789"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 24554 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor29.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:06.801" level="INFO">${pid} = 24554</msg>
<status status="PASS" endtime="20150623 08:19:06.800" starttime="20150623 08:19:06.797"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:06.805" level="INFO">Executing command 'kill -9 24554'.</msg>
<msg timestamp="20150623 08:19:06.866" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:19:06.867" starttime="20150623 08:19:06.802"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:06.868" starttime="20150623 08:19:06.796"></status>
</kw>
<kw type="foritem" name="${process} = 24569 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:06.873" level="INFO">${pid} = 24569</msg>
<status status="PASS" endtime="20150623 08:19:06.872" starttime="20150623 08:19:06.869"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:06.877" level="INFO">Executing command 'kill -9 24569'.</msg>
<msg timestamp="20150623 08:19:06.946" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:19:06.947" starttime="20150623 08:19:06.875"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:06.948" starttime="20150623 08:19:06.868"></status>
</kw>
<kw type="foritem" name="${process} = 24587 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:06.953" level="INFO">${pid} = 24587</msg>
<status status="PASS" endtime="20150623 08:19:06.953" starttime="20150623 08:19:06.950"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:06.957" level="INFO">Executing command 'kill -9 24587'.</msg>
<msg timestamp="20150623 08:19:07.028" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:19:07.029" starttime="20150623 08:19:06.955"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:07.031" starttime="20150623 08:19:06.949"></status>
</kw>
<kw type="foritem" name="${process} = 24603 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:07.037" level="INFO">${pid} = 24603</msg>
<status status="PASS" endtime="20150623 08:19:07.036" starttime="20150623 08:19:07.033"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:07.041" level="INFO">Executing command 'kill -9 24603'.</msg>
<msg timestamp="20150623 08:19:07.107" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:19:07.111" starttime="20150623 08:19:07.039"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:07.112" starttime="20150623 08:19:07.032"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:07.112" starttime="20150623 08:19:06.795"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:07.114" starttime="20150623 08:19:06.630"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:19:07.119" level="INFO">Starting command 'cat tmpfilemonitor29.log'.</msg>
<status status="PASS" endtime="20150623 08:19:07.149" starttime="20150623 08:19:07.117"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:19:07.152" level="INFO">Reading output of command 'cat tmpfilemonitor29.log'.</msg>
<msg timestamp="20150623 08:19:07.189" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:19:07.191" level="INFO">${stdout_string} = [2015-06-23 06:18:55,987][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:19:07.190" starttime="20150623 08:19:07.151"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:19:07.195" level="INFO">Executing command 'rm tmpfilemonitor29.log'.</msg>
<msg timestamp="20150623 08:19:07.270" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:19:07.271" starttime="20150623 08:19:07.193"></status>
</kw>
<msg timestamp="20150623 08:19:07.275" level="INFO">${tailed_text} = [2015-06-23 06:18:55,987][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:19:07.273" starttime="20150623 08:19:06.602"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:07.283" starttime="20150623 08:19:07.276"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:07.295" starttime="20150623 08:19:07.292"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:19:07.299" starttime="20150623 08:19:07.296"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:07.304" starttime="20150623 08:19:07.285"></status>
</kw>
<msg timestamp="20150623 08:19:07.308" level="INFO">${tailed_text} = [2015-06-23 06:18:55,987][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:19:07.306" starttime="20150623 08:19:06.595"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:07.327" starttime="20150623 08:19:07.325"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:07.329" starttime="20150623 08:19:07.319"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:07.337" starttime="20150623 08:19:07.330"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:07.341" starttime="20150623 08:19:07.338"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:07.345" starttime="20150623 08:19:07.342"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:07.346" starttime="20150623 08:19:07.311"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:07.380" starttime="20150623 08:19:07.378"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:07.390" starttime="20150623 08:19:07.381"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:07.393" starttime="20150623 08:19:07.391"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:19:07.397" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:19:07.400" level="INFO">${queryResultSetLines} = 1004489|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:19:07.399" starttime="20150623 08:19:07.395"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:07.403" starttime="20150623 08:19:07.401"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:19:07.407" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:19:07.409" level="INFO">@{queryResultSet} = [ 1004489|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:19:07.408" starttime="20150623 08:19:07.405"></status>
</kw>
<msg timestamp="20150623 08:19:07.412" level="INFO">@{queryRows} = [ 1004489|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:19:07.411" starttime="20150623 08:19:07.371"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:19:07.417" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:19:07.418" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:19:07.417" starttime="20150623 08:19:07.413"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:19:07.422" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:19:07.424" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:19:07.423" starttime="20150623 08:19:07.420"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:19:07.429" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:19:07.430" starttime="20150623 08:19:07.428"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:07.430" starttime="20150623 08:19:07.425"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:07.434" starttime="20150623 08:19:07.431"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:07.434" starttime="20150623 08:19:07.362"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:07.435" starttime="20150623 08:19:05.936"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:07.436" starttime="20150623 08:19:05.929"></status>
</kw>
<msg timestamp="20150623 08:19:07.437" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:19:07.437" starttime="20150623 08:19:05.926"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:19:07.439" level="INFO">Index in the 2. loop: 6</msg>
<status status="PASS" endtime="20150623 08:19:07.440" starttime="20150623 08:19:07.438"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:19:09.442" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20150623 08:19:09.444" starttime="20150623 08:19:07.440"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:19:09.455" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:19:09.454" starttime="20150623 08:19:09.447"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:09.456" starttime="20150623 08:19:05.925"></status>
</kw>
<kw type="foritem" name="${index} = 7">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:09.515" starttime="20150623 08:19:09.513"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:09.569" starttime="20150623 08:19:09.524"></status>
</kw>
<msg timestamp="20150623 08:19:09.571" level="INFO">${ssh_connection} = 30</msg>
<status status="PASS" endtime="20150623 08:19:09.570" starttime="20150623 08:19:09.517"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:19:09.583" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:19:09.959" level="INFO">Read output: Last login: Tue Jun 23 06:19:06 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:19:09.961" starttime="20150623 08:19:09.580"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:09.963" starttime="20150623 08:19:09.573"></status>
</kw>
<msg timestamp="20150623 08:19:09.966" level="INFO">${ssh_connection} = 30</msg>
<status status="PASS" endtime="20150623 08:19:09.965" starttime="20150623 08:19:09.503"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:09.980" starttime="20150623 08:19:09.977"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:19:09.984" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor30.log'.</msg>
<status status="PASS" endtime="20150623 08:19:09.989" starttime="20150623 08:19:09.981"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:09.991" starttime="20150623 08:19:09.969"></status>
</kw>
<msg timestamp="20150623 08:19:09.993" level="INFO">${ssh_connection} = 30</msg>
<status status="PASS" endtime="20150623 08:19:09.992" starttime="20150623 08:19:09.489"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:10.022" starttime="20150623 08:19:10.015"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:10.023" starttime="20150623 08:19:10.008"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:19:10.035" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:19:10.038" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:19:10.037" starttime="20150623 08:19:10.032"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:19:10.041" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:19:10.042" starttime="20150623 08:19:10.039"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:10.046" starttime="20150623 08:19:10.044"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:10.057" starttime="20150623 08:19:10.048"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:10.059" starttime="20150623 08:19:10.026"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:10.079" starttime="20150623 08:19:10.076"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:19:10.087" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:19:10.087" starttime="20150623 08:19:10.081"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:19:10.094" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:19:10.095" starttime="20150623 08:19:10.089"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:10.107" starttime="20150623 08:19:10.104"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:19:10.111" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:19:10.157" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:19:10.159" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:19:10.158" starttime="20150623 08:19:10.109"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:19:10.164" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:19:10.255" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:19:10.257" level="INFO">${processes_string} = 24728 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor30.log
24743 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
24761 ?        ...</msg>
<status status="PASS" endtime="20150623 08:19:10.256" starttime="20150623 08:19:10.161"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:19:10.262" level="INFO">@{processes_list} = [ 24728 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor30.log | 24743 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 24761 ?  ...</msg>
<status status="PASS" endtime="20150623 08:19:10.261" starttime="20150623 08:19:10.258"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 24728 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor30.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:10.269" level="INFO">${pid} = 24728</msg>
<status status="PASS" endtime="20150623 08:19:10.268" starttime="20150623 08:19:10.265"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:10.273" level="INFO">Executing command 'kill -9 24728'.</msg>
<msg timestamp="20150623 08:19:10.336" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:19:10.337" starttime="20150623 08:19:10.271"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:10.338" starttime="20150623 08:19:10.264"></status>
</kw>
<kw type="foritem" name="${process} = 24743 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:10.344" level="INFO">${pid} = 24743</msg>
<status status="PASS" endtime="20150623 08:19:10.343" starttime="20150623 08:19:10.340"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:10.348" level="INFO">Executing command 'kill -9 24743'.</msg>
<msg timestamp="20150623 08:19:10.388" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:19:10.389" starttime="20150623 08:19:10.345"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:10.390" starttime="20150623 08:19:10.339"></status>
</kw>
<kw type="foritem" name="${process} = 24761 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:10.396" level="INFO">${pid} = 24761</msg>
<status status="PASS" endtime="20150623 08:19:10.395" starttime="20150623 08:19:10.392"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:10.400" level="INFO">Executing command 'kill -9 24761'.</msg>
<msg timestamp="20150623 08:19:10.460" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:19:10.461" starttime="20150623 08:19:10.397"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:10.462" starttime="20150623 08:19:10.391"></status>
</kw>
<kw type="foritem" name="${process} = 24777 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:10.467" level="INFO">${pid} = 24777</msg>
<status status="PASS" endtime="20150623 08:19:10.466" starttime="20150623 08:19:10.464"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:10.471" level="INFO">Executing command 'kill -9 24777'.</msg>
<msg timestamp="20150623 08:19:10.538" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:19:10.539" starttime="20150623 08:19:10.469"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:10.540" starttime="20150623 08:19:10.463"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:10.541" starttime="20150623 08:19:10.264"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:10.542" starttime="20150623 08:19:10.098"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:19:10.546" level="INFO">Starting command 'cat tmpfilemonitor30.log'.</msg>
<status status="PASS" endtime="20150623 08:19:10.581" starttime="20150623 08:19:10.543"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:19:10.584" level="INFO">Reading output of command 'cat tmpfilemonitor30.log'.</msg>
<msg timestamp="20150623 08:19:10.624" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:19:10.626" level="INFO">${stdout_string} = [2015-06-23 06:18:59,536][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:19:10.626" starttime="20150623 08:19:10.583"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:19:10.631" level="INFO">Executing command 'rm tmpfilemonitor30.log'.</msg>
<msg timestamp="20150623 08:19:10.705" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:19:10.706" starttime="20150623 08:19:10.628"></status>
</kw>
<msg timestamp="20150623 08:19:10.709" level="INFO">${tailed_text} = [2015-06-23 06:18:59,536][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:19:10.708" starttime="20150623 08:19:10.070"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:10.718" starttime="20150623 08:19:10.711"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:10.730" starttime="20150623 08:19:10.727"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:19:10.733" starttime="20150623 08:19:10.731"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:10.739" starttime="20150623 08:19:10.720"></status>
</kw>
<msg timestamp="20150623 08:19:10.741" level="INFO">${tailed_text} = [2015-06-23 06:18:59,536][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:19:10.741" starttime="20150623 08:19:10.062"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:10.761" starttime="20150623 08:19:10.758"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:10.762" starttime="20150623 08:19:10.752"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:10.771" starttime="20150623 08:19:10.763"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:10.776" starttime="20150623 08:19:10.772"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:10.780" starttime="20150623 08:19:10.777"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:10.781" starttime="20150623 08:19:10.745"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:10.815" starttime="20150623 08:19:10.813"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:10.824" starttime="20150623 08:19:10.817"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:10.828" starttime="20150623 08:19:10.826"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:19:10.832" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:19:10.835" level="INFO">${queryResultSetLines} = 1004490|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:19:10.834" starttime="20150623 08:19:10.830"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:10.838" starttime="20150623 08:19:10.836"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:19:10.842" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:19:10.844" level="INFO">@{queryResultSet} = [ 1004490|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:19:10.843" starttime="20150623 08:19:10.840"></status>
</kw>
<msg timestamp="20150623 08:19:10.847" level="INFO">@{queryRows} = [ 1004490|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:19:10.846" starttime="20150623 08:19:10.806"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:19:10.851" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:19:10.853" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:19:10.852" starttime="20150623 08:19:10.848"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:19:10.857" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:19:10.859" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:19:10.858" starttime="20150623 08:19:10.855"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:19:10.869" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:19:10.870" starttime="20150623 08:19:10.867"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:10.872" starttime="20150623 08:19:10.860"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:10.879" starttime="20150623 08:19:10.873"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:10.881" starttime="20150623 08:19:10.797"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:10.882" starttime="20150623 08:19:09.468"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:10.884" starttime="20150623 08:19:09.461"></status>
</kw>
<msg timestamp="20150623 08:19:10.888" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:19:10.886" starttime="20150623 08:19:09.458"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:19:10.892" level="INFO">Index in the 2. loop: 7</msg>
<status status="PASS" endtime="20150623 08:19:10.893" starttime="20150623 08:19:10.889"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:19:12.898" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20150623 08:19:12.900" starttime="20150623 08:19:10.894"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:19:12.911" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:19:12.910" starttime="20150623 08:19:12.903"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:12.912" starttime="20150623 08:19:09.457"></status>
</kw>
<kw type="foritem" name="${index} = 8">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:12.973" starttime="20150623 08:19:12.970"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:13.046" starttime="20150623 08:19:12.982"></status>
</kw>
<msg timestamp="20150623 08:19:13.051" level="INFO">${ssh_connection} = 31</msg>
<status status="PASS" endtime="20150623 08:19:13.049" starttime="20150623 08:19:12.974"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:19:13.064" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:19:13.476" level="INFO">Read output: Last login: Tue Jun 23 06:19:09 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:19:13.477" starttime="20150623 08:19:13.061"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:13.479" starttime="20150623 08:19:13.053"></status>
</kw>
<msg timestamp="20150623 08:19:13.483" level="INFO">${ssh_connection} = 31</msg>
<status status="PASS" endtime="20150623 08:19:13.481" starttime="20150623 08:19:12.960"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:13.497" starttime="20150623 08:19:13.494"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:19:13.501" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor31.log'.</msg>
<status status="PASS" endtime="20150623 08:19:13.506" starttime="20150623 08:19:13.498"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:13.507" starttime="20150623 08:19:13.486"></status>
</kw>
<msg timestamp="20150623 08:19:13.511" level="INFO">${ssh_connection} = 31</msg>
<status status="PASS" endtime="20150623 08:19:13.509" starttime="20150623 08:19:12.946"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:13.540" starttime="20150623 08:19:13.533"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:13.542" starttime="20150623 08:19:13.526"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:19:13.555" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:19:13.558" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:19:13.557" starttime="20150623 08:19:13.552"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:19:13.561" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:19:13.562" starttime="20150623 08:19:13.559"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:13.567" starttime="20150623 08:19:13.564"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:13.581" starttime="20150623 08:19:13.568"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:13.583" starttime="20150623 08:19:13.544"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:13.603" starttime="20150623 08:19:13.600"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:19:13.612" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:19:13.611" starttime="20150623 08:19:13.604"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:19:13.619" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:19:13.620" starttime="20150623 08:19:13.613"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:13.633" starttime="20150623 08:19:13.630"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:19:13.636" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:19:13.683" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:19:13.685" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:19:13.684" starttime="20150623 08:19:13.634"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:19:13.689" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:19:13.781" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:19:13.784" level="INFO">${processes_string} = 24902 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor31.log
24917 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
24935 ?        ...</msg>
<status status="PASS" endtime="20150623 08:19:13.782" starttime="20150623 08:19:13.686"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:19:13.789" level="INFO">@{processes_list} = [ 24902 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor31.log | 24917 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 24935 ?  ...</msg>
<status status="PASS" endtime="20150623 08:19:13.788" starttime="20150623 08:19:13.785"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 24902 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor31.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:13.796" level="INFO">${pid} = 24902</msg>
<status status="PASS" endtime="20150623 08:19:13.795" starttime="20150623 08:19:13.792"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:13.801" level="INFO">Executing command 'kill -9 24902'.</msg>
<msg timestamp="20150623 08:19:13.864" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:19:13.865" starttime="20150623 08:19:13.798"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:13.866" starttime="20150623 08:19:13.791"></status>
</kw>
<kw type="foritem" name="${process} = 24917 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:13.871" level="INFO">${pid} = 24917</msg>
<status status="PASS" endtime="20150623 08:19:13.870" starttime="20150623 08:19:13.867"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:13.876" level="INFO">Executing command 'kill -9 24917'.</msg>
<msg timestamp="20150623 08:19:13.951" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:19:13.952" starttime="20150623 08:19:13.873"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:13.953" starttime="20150623 08:19:13.866"></status>
</kw>
<kw type="foritem" name="${process} = 24935 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:13.959" level="INFO">${pid} = 24935</msg>
<status status="PASS" endtime="20150623 08:19:13.958" starttime="20150623 08:19:13.955"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:13.963" level="INFO">Executing command 'kill -9 24935'.</msg>
<msg timestamp="20150623 08:19:14.033" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:19:14.035" starttime="20150623 08:19:13.960"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:14.037" starttime="20150623 08:19:13.954"></status>
</kw>
<kw type="foritem" name="${process} = 24951 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:14.043" level="INFO">${pid} = 24951</msg>
<status status="PASS" endtime="20150623 08:19:14.042" starttime="20150623 08:19:14.039"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:14.047" level="INFO">Executing command 'kill -9 24951'.</msg>
<msg timestamp="20150623 08:19:14.115" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:19:14.117" starttime="20150623 08:19:14.045"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:14.118" starttime="20150623 08:19:14.038"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:14.118" starttime="20150623 08:19:13.790"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:14.120" starttime="20150623 08:19:13.622"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:19:14.125" level="INFO">Starting command 'cat tmpfilemonitor31.log'.</msg>
<status status="PASS" endtime="20150623 08:19:14.159" starttime="20150623 08:19:14.122"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:19:14.162" level="INFO">Reading output of command 'cat tmpfilemonitor31.log'.</msg>
<msg timestamp="20150623 08:19:14.199" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:19:14.201" level="INFO">${stdout_string} = [2015-06-23 06:19:03,073][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:19:14.200" starttime="20150623 08:19:14.160"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:19:14.205" level="INFO">Executing command 'rm tmpfilemonitor31.log'.</msg>
<msg timestamp="20150623 08:19:14.280" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:19:14.281" starttime="20150623 08:19:14.202"></status>
</kw>
<msg timestamp="20150623 08:19:14.285" level="INFO">${tailed_text} = [2015-06-23 06:19:03,073][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:19:14.283" starttime="20150623 08:19:13.594"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:14.293" starttime="20150623 08:19:14.286"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:14.305" starttime="20150623 08:19:14.302"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:19:14.309" starttime="20150623 08:19:14.307"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:14.314" starttime="20150623 08:19:14.296"></status>
</kw>
<msg timestamp="20150623 08:19:14.318" level="INFO">${tailed_text} = [2015-06-23 06:19:03,073][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:19:14.316" starttime="20150623 08:19:13.586"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:14.337" starttime="20150623 08:19:14.334"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:14.338" starttime="20150623 08:19:14.328"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:14.345" starttime="20150623 08:19:14.339"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:14.350" starttime="20150623 08:19:14.347"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:14.354" starttime="20150623 08:19:14.351"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:14.355" starttime="20150623 08:19:14.321"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:14.388" starttime="20150623 08:19:14.385"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:14.395" starttime="20150623 08:19:14.389"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:14.399" starttime="20150623 08:19:14.397"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:19:14.403" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:19:14.405" level="INFO">${queryResultSetLines} = 1004491|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:19:14.405" starttime="20150623 08:19:14.400"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:14.409" starttime="20150623 08:19:14.407"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:19:14.413" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:19:14.414" level="INFO">@{queryResultSet} = [ 1004491|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:19:14.413" starttime="20150623 08:19:14.410"></status>
</kw>
<msg timestamp="20150623 08:19:14.417" level="INFO">@{queryRows} = [ 1004491|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:19:14.416" starttime="20150623 08:19:14.378"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:19:14.422" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:19:14.424" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:19:14.423" starttime="20150623 08:19:14.419"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:19:14.426" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:19:14.427" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:19:14.426" starttime="20150623 08:19:14.425"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:19:14.432" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:19:14.432" starttime="20150623 08:19:14.430"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:14.433" starttime="20150623 08:19:14.427"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:14.436" starttime="20150623 08:19:14.433"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:14.436" starttime="20150623 08:19:14.369"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:14.437" starttime="20150623 08:19:12.924"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:14.438" starttime="20150623 08:19:12.917"></status>
</kw>
<msg timestamp="20150623 08:19:14.440" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:19:14.439" starttime="20150623 08:19:12.914"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:19:14.442" level="INFO">Index in the 2. loop: 8</msg>
<status status="PASS" endtime="20150623 08:19:14.442" starttime="20150623 08:19:14.440"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:19:16.445" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20150623 08:19:16.448" starttime="20150623 08:19:14.443"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:19:16.458" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:19:16.457" starttime="20150623 08:19:16.450"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:16.459" starttime="20150623 08:19:12.913"></status>
</kw>
<kw type="foritem" name="${index} = 9">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:16.518" starttime="20150623 08:19:16.516"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:16.585" starttime="20150623 08:19:16.527"></status>
</kw>
<msg timestamp="20150623 08:19:16.588" level="INFO">${ssh_connection} = 32</msg>
<status status="PASS" endtime="20150623 08:19:16.586" starttime="20150623 08:19:16.519"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:19:16.600" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:19:16.984" level="INFO">Read output: Last login: Tue Jun 23 06:19:13 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:19:16.986" starttime="20150623 08:19:16.597"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:16.988" starttime="20150623 08:19:16.589"></status>
</kw>
<msg timestamp="20150623 08:19:16.991" level="INFO">${ssh_connection} = 32</msg>
<status status="PASS" endtime="20150623 08:19:16.990" starttime="20150623 08:19:16.506"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:17.005" starttime="20150623 08:19:17.002"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:19:17.009" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor32.log'.</msg>
<status status="PASS" endtime="20150623 08:19:17.014" starttime="20150623 08:19:17.006"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:17.016" starttime="20150623 08:19:16.994"></status>
</kw>
<msg timestamp="20150623 08:19:17.020" level="INFO">${ssh_connection} = 32</msg>
<status status="PASS" endtime="20150623 08:19:17.018" starttime="20150623 08:19:16.492"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:17.048" starttime="20150623 08:19:17.040"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:17.050" starttime="20150623 08:19:17.034"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:19:17.063" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:19:17.065" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:19:17.064" starttime="20150623 08:19:17.060"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:19:17.069" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:19:17.070" starttime="20150623 08:19:17.067"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:17.074" starttime="20150623 08:19:17.072"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:17.084" starttime="20150623 08:19:17.075"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:17.086" starttime="20150623 08:19:17.053"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:17.106" starttime="20150623 08:19:17.103"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:19:17.114" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:19:17.113" starttime="20150623 08:19:17.107"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:19:17.121" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:19:17.122" starttime="20150623 08:19:17.116"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:17.135" starttime="20150623 08:19:17.132"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:19:17.138" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:19:17.178" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:19:17.180" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:19:17.179" starttime="20150623 08:19:17.136"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:19:17.184" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:19:17.264" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:19:17.266" level="INFO">${processes_string} = 25076 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor32.log
25091 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
25109 ?        ...</msg>
<status status="PASS" endtime="20150623 08:19:17.265" starttime="20150623 08:19:17.181"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:19:17.271" level="INFO">@{processes_list} = [ 25076 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor32.log | 25091 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 25109 ?  ...</msg>
<status status="PASS" endtime="20150623 08:19:17.270" starttime="20150623 08:19:17.267"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 25076 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor32.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:17.278" level="INFO">${pid} = 25076</msg>
<status status="PASS" endtime="20150623 08:19:17.277" starttime="20150623 08:19:17.274"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:17.282" level="INFO">Executing command 'kill -9 25076'.</msg>
<msg timestamp="20150623 08:19:17.344" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:19:17.345" starttime="20150623 08:19:17.279"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:17.347" starttime="20150623 08:19:17.273"></status>
</kw>
<kw type="foritem" name="${process} = 25091 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:17.353" level="INFO">${pid} = 25091</msg>
<status status="PASS" endtime="20150623 08:19:17.352" starttime="20150623 08:19:17.348"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:17.358" level="INFO">Executing command 'kill -9 25091'.</msg>
<msg timestamp="20150623 08:19:17.422" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:19:17.423" starttime="20150623 08:19:17.355"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:17.424" starttime="20150623 08:19:17.347"></status>
</kw>
<kw type="foritem" name="${process} = 25109 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:17.430" level="INFO">${pid} = 25109</msg>
<status status="PASS" endtime="20150623 08:19:17.429" starttime="20150623 08:19:17.426"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:17.434" level="INFO">Executing command 'kill -9 25109'.</msg>
<msg timestamp="20150623 08:19:17.502" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:19:17.503" starttime="20150623 08:19:17.431"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:17.504" starttime="20150623 08:19:17.425"></status>
</kw>
<kw type="foritem" name="${process} = 25125 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:17.510" level="INFO">${pid} = 25125</msg>
<status status="PASS" endtime="20150623 08:19:17.509" starttime="20150623 08:19:17.506"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:17.513" level="INFO">Executing command 'kill -9 25125'.</msg>
<msg timestamp="20150623 08:19:17.582" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:19:17.583" starttime="20150623 08:19:17.511"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:17.584" starttime="20150623 08:19:17.505"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:17.584" starttime="20150623 08:19:17.272"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:17.585" starttime="20150623 08:19:17.125"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:19:17.589" level="INFO">Starting command 'cat tmpfilemonitor32.log'.</msg>
<status status="PASS" endtime="20150623 08:19:17.627" starttime="20150623 08:19:17.587"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:19:17.630" level="INFO">Reading output of command 'cat tmpfilemonitor32.log'.</msg>
<msg timestamp="20150623 08:19:17.667" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:19:17.669" level="INFO">${stdout_string} = [2015-06-23 06:19:06,648][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:19:17.668" starttime="20150623 08:19:17.628"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:19:17.674" level="INFO">Executing command 'rm tmpfilemonitor32.log'.</msg>
<msg timestamp="20150623 08:19:17.751" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:19:17.752" starttime="20150623 08:19:17.671"></status>
</kw>
<msg timestamp="20150623 08:19:17.755" level="INFO">${tailed_text} = [2015-06-23 06:19:06,648][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:19:17.754" starttime="20150623 08:19:17.097"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:17.763" starttime="20150623 08:19:17.756"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:17.775" starttime="20150623 08:19:17.772"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:19:17.779" starttime="20150623 08:19:17.776"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:17.783" starttime="20150623 08:19:17.766"></status>
</kw>
<msg timestamp="20150623 08:19:17.786" level="INFO">${tailed_text} = [2015-06-23 06:19:06,648][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:19:17.785" starttime="20150623 08:19:17.089"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:17.806" starttime="20150623 08:19:17.803"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:17.807" starttime="20150623 08:19:17.796"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:17.814" starttime="20150623 08:19:17.808"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:17.819" starttime="20150623 08:19:17.816"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:17.823" starttime="20150623 08:19:17.820"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:17.824" starttime="20150623 08:19:17.790"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:17.856" starttime="20150623 08:19:17.854"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:17.864" starttime="20150623 08:19:17.857"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:17.868" starttime="20150623 08:19:17.866"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:19:17.872" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:19:17.874" level="INFO">${queryResultSetLines} = 1004492|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:19:17.873" starttime="20150623 08:19:17.869"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:17.878" starttime="20150623 08:19:17.876"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:19:17.881" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:19:17.883" level="INFO">@{queryResultSet} = [ 1004492|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:19:17.882" starttime="20150623 08:19:17.879"></status>
</kw>
<msg timestamp="20150623 08:19:17.886" level="INFO">@{queryRows} = [ 1004492|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:19:17.885" starttime="20150623 08:19:17.847"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:19:17.891" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:19:17.893" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:19:17.892" starttime="20150623 08:19:17.888"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:19:17.896" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:19:17.898" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:19:17.897" starttime="20150623 08:19:17.894"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:19:17.909" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:19:17.910" starttime="20150623 08:19:17.906"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:17.911" starttime="20150623 08:19:17.900"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:17.919" starttime="20150623 08:19:17.913"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:17.920" starttime="20150623 08:19:17.838"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:17.921" starttime="20150623 08:19:16.471"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:17.924" starttime="20150623 08:19:16.464"></status>
</kw>
<msg timestamp="20150623 08:19:17.926" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:19:17.925" starttime="20150623 08:19:16.461"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:19:17.927" level="INFO">Index in the 2. loop: 9</msg>
<status status="PASS" endtime="20150623 08:19:17.928" starttime="20150623 08:19:17.926"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:19:19.931" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20150623 08:19:19.934" starttime="20150623 08:19:17.929"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:19:19.944" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:19:19.943" starttime="20150623 08:19:19.936"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:19.945" starttime="20150623 08:19:16.460"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:19.946" starttime="20150623 08:18:44.807"></status>
</kw>
<msg timestamp="20150623 08:19:19.950" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:19:19.948" starttime="20150623 08:18:44.801"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>For delay ${loopIdx} we had ${failure} failure(s)</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:19:19.954" level="INFO">For delay 2 we had None failure(s)</msg>
<status status="PASS" endtime="20150623 08:19:19.955" starttime="20150623 08:19:19.951"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:19.956" starttime="20150623 08:18:44.788"></status>
</kw>
<kw type="foritem" name="${loopIdx} = 3">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Sitting in first FOR, Loop No.: ${loopIdx}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:19:19.961" level="INFO">Sitting in first FOR, Loop No.: 3</msg>
<status status="PASS" endtime="20150623 08:19:19.962" starttime="20150623 08:19:19.959"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Timeout set to ${loopIdx} secs</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:19:19.966" level="INFO">Timeout set to 3 secs</msg>
<status status="PASS" endtime="20150623 08:19:19.967" starttime="20150623 08:19:19.964"></status>
</kw>
<kw type="kw" name="${failure} = Internal Loop">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${loopIdx}</arg>
</arguments>
<kw type="for" name="${index} IN RANGE [ 0 | 10 ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${index} = 0">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:20.031" starttime="20150623 08:19:20.029"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:20.098" starttime="20150623 08:19:20.040"></status>
</kw>
<msg timestamp="20150623 08:19:20.100" level="INFO">${ssh_connection} = 33</msg>
<status status="PASS" endtime="20150623 08:19:20.099" starttime="20150623 08:19:20.033"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:19:20.113" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:19:20.534" level="INFO">Read output: Last login: Tue Jun 23 06:19:16 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:19:20.535" starttime="20150623 08:19:20.110"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:20.537" starttime="20150623 08:19:20.102"></status>
</kw>
<msg timestamp="20150623 08:19:20.540" level="INFO">${ssh_connection} = 33</msg>
<status status="PASS" endtime="20150623 08:19:20.539" starttime="20150623 08:19:20.019"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:20.551" starttime="20150623 08:19:20.550"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:19:20.553" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor33.log'.</msg>
<status status="PASS" endtime="20150623 08:19:20.557" starttime="20150623 08:19:20.552"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:20.558" starttime="20150623 08:19:20.543"></status>
</kw>
<msg timestamp="20150623 08:19:20.559" level="INFO">${ssh_connection} = 33</msg>
<status status="PASS" endtime="20150623 08:19:20.559" starttime="20150623 08:19:20.006"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:20.575" starttime="20150623 08:19:20.568"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:20.577" starttime="20150623 08:19:20.565"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:19:20.590" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:19:20.593" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:19:20.592" starttime="20150623 08:19:20.587"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:19:20.596" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:19:20.597" starttime="20150623 08:19:20.594"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:20.601" starttime="20150623 08:19:20.599"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:20.612" starttime="20150623 08:19:20.602"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:20.614" starttime="20150623 08:19:20.580"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:20.633" starttime="20150623 08:19:20.631"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:19:20.642" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:19:20.641" starttime="20150623 08:19:20.635"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:19:20.649" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:19:20.649" starttime="20150623 08:19:20.643"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:20.661" starttime="20150623 08:19:20.658"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:19:20.664" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:19:20.711" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:19:20.713" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:19:20.712" starttime="20150623 08:19:20.663"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:19:20.718" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:19:20.811" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:19:20.813" level="INFO">${processes_string} = 25250 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor33.log
25265 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
25283 ?        ...</msg>
<status status="PASS" endtime="20150623 08:19:20.812" starttime="20150623 08:19:20.715"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:19:20.819" level="INFO">@{processes_list} = [ 25250 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor33.log | 25265 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 25283 ?  ...</msg>
<status status="PASS" endtime="20150623 08:19:20.818" starttime="20150623 08:19:20.815"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 25250 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor33.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:20.826" level="INFO">${pid} = 25250</msg>
<status status="PASS" endtime="20150623 08:19:20.825" starttime="20150623 08:19:20.822"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:20.830" level="INFO">Executing command 'kill -9 25250'.</msg>
<msg timestamp="20150623 08:19:20.892" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:19:20.893" starttime="20150623 08:19:20.827"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:20.894" starttime="20150623 08:19:20.821"></status>
</kw>
<kw type="foritem" name="${process} = 25265 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:20.899" level="INFO">${pid} = 25265</msg>
<status status="PASS" endtime="20150623 08:19:20.898" starttime="20150623 08:19:20.895"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:20.903" level="INFO">Executing command 'kill -9 25265'.</msg>
<msg timestamp="20150623 08:19:20.972" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:19:20.973" starttime="20150623 08:19:20.901"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:20.974" starttime="20150623 08:19:20.894"></status>
</kw>
<kw type="foritem" name="${process} = 25283 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:20.980" level="INFO">${pid} = 25283</msg>
<status status="PASS" endtime="20150623 08:19:20.979" starttime="20150623 08:19:20.976"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:20.984" level="INFO">Executing command 'kill -9 25283'.</msg>
<msg timestamp="20150623 08:19:21.052" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:19:21.054" starttime="20150623 08:19:20.981"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:21.056" starttime="20150623 08:19:20.975"></status>
</kw>
<kw type="foritem" name="${process} = 25299 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:21.062" level="INFO">${pid} = 25299</msg>
<status status="PASS" endtime="20150623 08:19:21.061" starttime="20150623 08:19:21.058"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:21.067" level="INFO">Executing command 'kill -9 25299'.</msg>
<msg timestamp="20150623 08:19:21.130" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:19:21.131" starttime="20150623 08:19:21.064"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:21.132" starttime="20150623 08:19:21.057"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:21.133" starttime="20150623 08:19:20.820"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:21.135" starttime="20150623 08:19:20.652"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:19:21.140" level="INFO">Starting command 'cat tmpfilemonitor33.log'.</msg>
<status status="PASS" endtime="20150623 08:19:21.172" starttime="20150623 08:19:21.137"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:19:21.176" level="INFO">Reading output of command 'cat tmpfilemonitor33.log'.</msg>
<msg timestamp="20150623 08:19:21.211" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:19:21.213" level="INFO">${stdout_string} = [2015-06-23 06:19:10,091][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:19:21.212" starttime="20150623 08:19:21.174"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:19:21.218" level="INFO">Executing command 'rm tmpfilemonitor33.log'.</msg>
<msg timestamp="20150623 08:19:21.291" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:19:21.292" starttime="20150623 08:19:21.215"></status>
</kw>
<msg timestamp="20150623 08:19:21.296" level="INFO">${tailed_text} = [2015-06-23 06:19:10,091][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:19:21.294" starttime="20150623 08:19:20.624"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:21.305" starttime="20150623 08:19:21.298"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:21.317" starttime="20150623 08:19:21.314"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:19:21.321" starttime="20150623 08:19:21.318"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:21.326" starttime="20150623 08:19:21.307"></status>
</kw>
<msg timestamp="20150623 08:19:21.329" level="INFO">${tailed_text} = [2015-06-23 06:19:10,091][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:19:21.328" starttime="20150623 08:19:20.617"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:21.348" starttime="20150623 08:19:21.346"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:21.350" starttime="20150623 08:19:21.340"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:21.357" starttime="20150623 08:19:21.351"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:21.361" starttime="20150623 08:19:21.358"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:21.365" starttime="20150623 08:19:21.363"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:21.367" starttime="20150623 08:19:21.333"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:21.398" starttime="20150623 08:19:21.396"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:21.407" starttime="20150623 08:19:21.400"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:21.411" starttime="20150623 08:19:21.409"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:19:21.416" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:19:21.418" level="INFO">${queryResultSetLines} = 1004493|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:19:21.417" starttime="20150623 08:19:21.413"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:21.421" starttime="20150623 08:19:21.419"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:19:21.425" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:19:21.427" level="INFO">@{queryResultSet} = [ 1004493|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:19:21.426" starttime="20150623 08:19:21.423"></status>
</kw>
<msg timestamp="20150623 08:19:21.430" level="INFO">@{queryRows} = [ 1004493|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:19:21.429" starttime="20150623 08:19:21.389"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:19:21.435" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:19:21.436" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:19:21.436" starttime="20150623 08:19:21.432"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:19:21.440" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:19:21.442" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:19:21.441" starttime="20150623 08:19:21.438"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:19:21.453" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:19:21.454" starttime="20150623 08:19:21.450"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:21.455" starttime="20150623 08:19:21.443"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:21.462" starttime="20150623 08:19:21.457"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:21.464" starttime="20150623 08:19:21.380"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:21.465" starttime="20150623 08:19:19.986"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:21.468" starttime="20150623 08:19:19.979"></status>
</kw>
<msg timestamp="20150623 08:19:21.471" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:19:21.469" starttime="20150623 08:19:19.977"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:19:21.475" level="INFO">Index in the 2. loop: 0</msg>
<status status="PASS" endtime="20150623 08:19:21.476" starttime="20150623 08:19:21.472"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:19:24.480" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20150623 08:19:24.483" starttime="20150623 08:19:21.477"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:19:24.493" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:19:24.492" starttime="20150623 08:19:24.485"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:24.494" starttime="20150623 08:19:19.976"></status>
</kw>
<kw type="foritem" name="${index} = 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:24.552" starttime="20150623 08:19:24.549"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:24.618" starttime="20150623 08:19:24.561"></status>
</kw>
<msg timestamp="20150623 08:19:24.620" level="INFO">${ssh_connection} = 34</msg>
<status status="PASS" endtime="20150623 08:19:24.619" starttime="20150623 08:19:24.553"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:19:24.633" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:19:25.061" level="INFO">Read output: Last login: Tue Jun 23 06:19:20 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:19:25.062" starttime="20150623 08:19:24.630"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:25.063" starttime="20150623 08:19:24.622"></status>
</kw>
<msg timestamp="20150623 08:19:25.065" level="INFO">${ssh_connection} = 34</msg>
<status status="PASS" endtime="20150623 08:19:25.065" starttime="20150623 08:19:24.539"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:25.072" starttime="20150623 08:19:25.070"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:19:25.074" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor34.log'.</msg>
<status status="PASS" endtime="20150623 08:19:25.078" starttime="20150623 08:19:25.072"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:25.078" starttime="20150623 08:19:25.067"></status>
</kw>
<msg timestamp="20150623 08:19:25.080" level="INFO">${ssh_connection} = 34</msg>
<status status="PASS" endtime="20150623 08:19:25.079" starttime="20150623 08:19:24.526"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:25.095" starttime="20150623 08:19:25.089"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:25.097" starttime="20150623 08:19:25.086"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:19:25.113" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:19:25.115" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:19:25.114" starttime="20150623 08:19:25.106"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:19:25.119" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:19:25.120" starttime="20150623 08:19:25.117"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:25.124" starttime="20150623 08:19:25.122"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:25.135" starttime="20150623 08:19:25.126"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:25.137" starttime="20150623 08:19:25.099"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:25.156" starttime="20150623 08:19:25.154"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:19:25.165" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:19:25.164" starttime="20150623 08:19:25.158"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:19:25.172" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:19:25.173" starttime="20150623 08:19:25.166"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:25.185" starttime="20150623 08:19:25.182"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:19:25.188" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:19:25.231" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:19:25.233" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:19:25.232" starttime="20150623 08:19:25.186"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:19:25.238" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:19:25.330" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:19:25.332" level="INFO">${processes_string} = 25424 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor34.log
25439 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
25457 ?        ...</msg>
<status status="PASS" endtime="20150623 08:19:25.331" starttime="20150623 08:19:25.235"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:19:25.338" level="INFO">@{processes_list} = [ 25424 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor34.log | 25439 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 25457 ?  ...</msg>
<status status="PASS" endtime="20150623 08:19:25.337" starttime="20150623 08:19:25.334"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 25424 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor34.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:25.344" level="INFO">${pid} = 25424</msg>
<status status="PASS" endtime="20150623 08:19:25.343" starttime="20150623 08:19:25.341"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:25.348" level="INFO">Executing command 'kill -9 25424'.</msg>
<msg timestamp="20150623 08:19:25.408" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:19:25.409" starttime="20150623 08:19:25.346"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:25.410" starttime="20150623 08:19:25.340"></status>
</kw>
<kw type="foritem" name="${process} = 25439 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:25.415" level="INFO">${pid} = 25439</msg>
<status status="PASS" endtime="20150623 08:19:25.414" starttime="20150623 08:19:25.412"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:25.419" level="INFO">Executing command 'kill -9 25439'.</msg>
<msg timestamp="20150623 08:19:25.484" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:19:25.485" starttime="20150623 08:19:25.417"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:25.486" starttime="20150623 08:19:25.411"></status>
</kw>
<kw type="foritem" name="${process} = 25457 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:25.492" level="INFO">${pid} = 25457</msg>
<status status="PASS" endtime="20150623 08:19:25.491" starttime="20150623 08:19:25.488"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:25.495" level="INFO">Executing command 'kill -9 25457'.</msg>
<msg timestamp="20150623 08:19:25.561" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:19:25.562" starttime="20150623 08:19:25.493"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:25.563" starttime="20150623 08:19:25.487"></status>
</kw>
<kw type="foritem" name="${process} = 25473 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:25.568" level="INFO">${pid} = 25473</msg>
<status status="PASS" endtime="20150623 08:19:25.567" starttime="20150623 08:19:25.564"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:25.572" level="INFO">Executing command 'kill -9 25473'.</msg>
<msg timestamp="20150623 08:19:25.643" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:19:25.644" starttime="20150623 08:19:25.570"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:25.645" starttime="20150623 08:19:25.563"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:25.645" starttime="20150623 08:19:25.339"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:25.646" starttime="20150623 08:19:25.175"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:19:25.650" level="INFO">Starting command 'cat tmpfilemonitor34.log'.</msg>
<status status="PASS" endtime="20150623 08:19:25.685" starttime="20150623 08:19:25.648"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:19:25.688" level="INFO">Reading output of command 'cat tmpfilemonitor34.log'.</msg>
<msg timestamp="20150623 08:19:25.723" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:19:25.725" level="INFO">${stdout_string} = [2015-06-23 06:19:13,623][INFO ][Camel (ticket-router) thread #44 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:19:25.724" starttime="20150623 08:19:25.687"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:19:25.729" level="INFO">Executing command 'rm tmpfilemonitor34.log'.</msg>
<msg timestamp="20150623 08:19:25.802" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:19:25.803" starttime="20150623 08:19:25.726"></status>
</kw>
<msg timestamp="20150623 08:19:25.806" level="INFO">${tailed_text} = [2015-06-23 06:19:13,623][INFO ][Camel (ticket-router) thread #44 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:19:25.805" starttime="20150623 08:19:25.147"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:25.815" starttime="20150623 08:19:25.807"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:25.826" starttime="20150623 08:19:25.823"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:19:25.830" starttime="20150623 08:19:25.827"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:25.835" starttime="20150623 08:19:25.817"></status>
</kw>
<msg timestamp="20150623 08:19:25.838" level="INFO">${tailed_text} = [2015-06-23 06:19:13,623][INFO ][Camel (ticket-router) thread #44 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:19:25.837" starttime="20150623 08:19:25.140"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:25.857" starttime="20150623 08:19:25.854"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:25.858" starttime="20150623 08:19:25.848"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:25.866" starttime="20150623 08:19:25.860"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:25.870" starttime="20150623 08:19:25.867"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:25.874" starttime="20150623 08:19:25.872"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:25.876" starttime="20150623 08:19:25.841"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:25.908" starttime="20150623 08:19:25.907"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:25.917" starttime="20150623 08:19:25.910"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:25.920" starttime="20150623 08:19:25.918"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:19:25.925" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:19:25.927" level="INFO">${queryResultSetLines} = 1004494|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:19:25.926" starttime="20150623 08:19:25.922"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:25.931" starttime="20150623 08:19:25.929"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:19:25.934" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:19:25.936" level="INFO">@{queryResultSet} = [ 1004494|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:19:25.935" starttime="20150623 08:19:25.932"></status>
</kw>
<msg timestamp="20150623 08:19:25.939" level="INFO">@{queryRows} = [ 1004494|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:19:25.938" starttime="20150623 08:19:25.899"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:19:25.944" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:19:25.946" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:19:25.945" starttime="20150623 08:19:25.941"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:19:25.949" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:19:25.951" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:19:25.950" starttime="20150623 08:19:25.947"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:19:25.962" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:19:25.963" starttime="20150623 08:19:25.959"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:25.964" starttime="20150623 08:19:25.953"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:25.971" starttime="20150623 08:19:25.966"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:25.973" starttime="20150623 08:19:25.890"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:25.974" starttime="20150623 08:19:24.506"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:25.977" starttime="20150623 08:19:24.499"></status>
</kw>
<msg timestamp="20150623 08:19:25.981" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:19:25.979" starttime="20150623 08:19:24.496"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:19:25.984" level="INFO">Index in the 2. loop: 1</msg>
<status status="PASS" endtime="20150623 08:19:25.985" starttime="20150623 08:19:25.982"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:19:29.004" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20150623 08:19:29.007" starttime="20150623 08:19:25.987"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:19:29.019" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:19:29.018" starttime="20150623 08:19:29.010"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:29.021" starttime="20150623 08:19:24.495"></status>
</kw>
<kw type="foritem" name="${index} = 2">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:29.089" starttime="20150623 08:19:29.087"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:29.158" starttime="20150623 08:19:29.100"></status>
</kw>
<msg timestamp="20150623 08:19:29.160" level="INFO">${ssh_connection} = 35</msg>
<status status="PASS" endtime="20150623 08:19:29.160" starttime="20150623 08:19:29.091"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:19:29.172" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:19:29.579" level="INFO">Read output: Last login: Tue Jun 23 06:19:24 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:19:29.580" starttime="20150623 08:19:29.169"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:29.580" starttime="20150623 08:19:29.162"></status>
</kw>
<msg timestamp="20150623 08:19:29.582" level="INFO">${ssh_connection} = 35</msg>
<status status="PASS" endtime="20150623 08:19:29.581" starttime="20150623 08:19:29.075"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:29.588" starttime="20150623 08:19:29.587"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:19:29.590" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor35.log'.</msg>
<status status="PASS" endtime="20150623 08:19:29.594" starttime="20150623 08:19:29.589"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:29.594" starttime="20150623 08:19:29.583"></status>
</kw>
<msg timestamp="20150623 08:19:29.595" level="INFO">${ssh_connection} = 35</msg>
<status status="PASS" endtime="20150623 08:19:29.595" starttime="20150623 08:19:29.058"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:29.609" starttime="20150623 08:19:29.605"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:29.611" starttime="20150623 08:19:29.601"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:19:29.623" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:19:29.625" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:19:29.624" starttime="20150623 08:19:29.620"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:19:29.629" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:19:29.630" starttime="20150623 08:19:29.626"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:29.633" starttime="20150623 08:19:29.631"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:29.644" starttime="20150623 08:19:29.635"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:29.646" starttime="20150623 08:19:29.613"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:29.665" starttime="20150623 08:19:29.662"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:19:29.673" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:19:29.672" starttime="20150623 08:19:29.666"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:19:29.680" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:19:29.681" starttime="20150623 08:19:29.675"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:29.693" starttime="20150623 08:19:29.690"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:19:29.696" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:19:29.742" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:19:29.744" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:19:29.743" starttime="20150623 08:19:29.694"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:19:29.748" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:19:29.839" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:19:29.841" level="INFO">${processes_string} = 25598 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor35.log
25613 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
25631 ?        ...</msg>
<status status="PASS" endtime="20150623 08:19:29.840" starttime="20150623 08:19:29.745"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:19:29.846" level="INFO">@{processes_list} = [ 25598 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor35.log | 25613 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 25631 ?  ...</msg>
<status status="PASS" endtime="20150623 08:19:29.845" starttime="20150623 08:19:29.842"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 25598 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor35.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:29.853" level="INFO">${pid} = 25598</msg>
<status status="PASS" endtime="20150623 08:19:29.852" starttime="20150623 08:19:29.849"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:29.857" level="INFO">Executing command 'kill -9 25598'.</msg>
<msg timestamp="20150623 08:19:29.918" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:19:29.919" starttime="20150623 08:19:29.855"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:29.920" starttime="20150623 08:19:29.848"></status>
</kw>
<kw type="foritem" name="${process} = 25613 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:29.926" level="INFO">${pid} = 25613</msg>
<status status="PASS" endtime="20150623 08:19:29.925" starttime="20150623 08:19:29.922"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:29.930" level="INFO">Executing command 'kill -9 25613'.</msg>
<msg timestamp="20150623 08:19:29.998" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:19:29.999" starttime="20150623 08:19:29.927"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:30.000" starttime="20150623 08:19:29.921"></status>
</kw>
<kw type="foritem" name="${process} = 25631 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:30.007" level="INFO">${pid} = 25631</msg>
<status status="PASS" endtime="20150623 08:19:30.006" starttime="20150623 08:19:30.003"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:30.011" level="INFO">Executing command 'kill -9 25631'.</msg>
<msg timestamp="20150623 08:19:30.079" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:19:30.080" starttime="20150623 08:19:30.008"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:30.081" starttime="20150623 08:19:30.002"></status>
</kw>
<kw type="foritem" name="${process} = 25647 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:30.086" level="INFO">${pid} = 25647</msg>
<status status="PASS" endtime="20150623 08:19:30.085" starttime="20150623 08:19:30.082"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:30.090" level="INFO">Executing command 'kill -9 25647'.</msg>
<msg timestamp="20150623 08:19:30.159" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:19:30.160" starttime="20150623 08:19:30.088"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:30.161" starttime="20150623 08:19:30.081"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:30.162" starttime="20150623 08:19:29.847"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:30.164" starttime="20150623 08:19:29.683"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:19:30.169" level="INFO">Starting command 'cat tmpfilemonitor35.log'.</msg>
<status status="PASS" endtime="20150623 08:19:30.201" starttime="20150623 08:19:30.166"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:19:30.204" level="INFO">Reading output of command 'cat tmpfilemonitor35.log'.</msg>
<msg timestamp="20150623 08:19:30.241" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:19:30.243" level="INFO">${stdout_string} = [2015-06-23 06:19:17,114][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:19:30.242" starttime="20150623 08:19:30.202"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:19:30.247" level="INFO">Executing command 'rm tmpfilemonitor35.log'.</msg>
<msg timestamp="20150623 08:19:30.320" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:19:30.321" starttime="20150623 08:19:30.244"></status>
</kw>
<msg timestamp="20150623 08:19:30.325" level="INFO">${tailed_text} = [2015-06-23 06:19:17,114][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:19:30.323" starttime="20150623 08:19:29.656"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:30.334" starttime="20150623 08:19:30.327"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:30.345" starttime="20150623 08:19:30.343"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:19:30.349" starttime="20150623 08:19:30.347"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:30.353" starttime="20150623 08:19:30.336"></status>
</kw>
<msg timestamp="20150623 08:19:30.357" level="INFO">${tailed_text} = [2015-06-23 06:19:17,114][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:19:30.355" starttime="20150623 08:19:29.649"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:30.376" starttime="20150623 08:19:30.373"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:30.377" starttime="20150623 08:19:30.367"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:30.385" starttime="20150623 08:19:30.379"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:30.389" starttime="20150623 08:19:30.386"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:30.393" starttime="20150623 08:19:30.390"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:30.394" starttime="20150623 08:19:30.360"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:30.426" starttime="20150623 08:19:30.424"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:30.437" starttime="20150623 08:19:30.428"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:30.440" starttime="20150623 08:19:30.438"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:19:30.444" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:19:30.447" level="INFO">${queryResultSetLines} = 1004495|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:19:30.446" starttime="20150623 08:19:30.442"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:30.450" starttime="20150623 08:19:30.448"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:19:30.454" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:19:30.456" level="INFO">@{queryResultSet} = [ 1004495|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:19:30.455" starttime="20150623 08:19:30.452"></status>
</kw>
<msg timestamp="20150623 08:19:30.459" level="INFO">@{queryRows} = [ 1004495|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:19:30.458" starttime="20150623 08:19:30.417"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:19:30.463" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:19:30.465" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:19:30.464" starttime="20150623 08:19:30.460"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:19:30.469" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:19:30.471" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:19:30.470" starttime="20150623 08:19:30.466"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:19:30.481" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:19:30.482" starttime="20150623 08:19:30.479"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:30.483" starttime="20150623 08:19:30.472"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:30.491" starttime="20150623 08:19:30.485"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:30.492" starttime="20150623 08:19:30.408"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:30.493" starttime="20150623 08:19:29.034"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:30.496" starttime="20150623 08:19:29.026"></status>
</kw>
<msg timestamp="20150623 08:19:30.499" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:19:30.498" starttime="20150623 08:19:29.023"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:19:30.503" level="INFO">Index in the 2. loop: 2</msg>
<status status="PASS" endtime="20150623 08:19:30.504" starttime="20150623 08:19:30.501"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:19:33.508" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20150623 08:19:33.512" starttime="20150623 08:19:30.506"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:19:33.523" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:19:33.522" starttime="20150623 08:19:33.514"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:33.524" starttime="20150623 08:19:29.022"></status>
</kw>
<kw type="foritem" name="${index} = 3">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:33.581" starttime="20150623 08:19:33.579"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:33.647" starttime="20150623 08:19:33.590"></status>
</kw>
<msg timestamp="20150623 08:19:33.649" level="INFO">${ssh_connection} = 36</msg>
<status status="PASS" endtime="20150623 08:19:33.648" starttime="20150623 08:19:33.583"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:19:33.661" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:19:34.083" level="INFO">Read output: Last login: Tue Jun 23 06:19:29 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:19:34.100" starttime="20150623 08:19:33.658"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:34.101" starttime="20150623 08:19:33.651"></status>
</kw>
<msg timestamp="20150623 08:19:34.103" level="INFO">${ssh_connection} = 36</msg>
<status status="PASS" endtime="20150623 08:19:34.103" starttime="20150623 08:19:33.569"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:34.110" starttime="20150623 08:19:34.108"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:19:34.112" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor36.log'.</msg>
<status status="PASS" endtime="20150623 08:19:34.115" starttime="20150623 08:19:34.110"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:34.116" starttime="20150623 08:19:34.105"></status>
</kw>
<msg timestamp="20150623 08:19:34.117" level="INFO">${ssh_connection} = 36</msg>
<status status="PASS" endtime="20150623 08:19:34.117" starttime="20150623 08:19:33.556"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:34.131" starttime="20150623 08:19:34.127"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:34.132" starttime="20150623 08:19:34.123"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:19:34.137" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:19:34.138" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:19:34.138" starttime="20150623 08:19:34.136"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:19:34.140" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:19:34.140" starttime="20150623 08:19:34.139"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:34.142" starttime="20150623 08:19:34.141"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:34.151" starttime="20150623 08:19:34.143"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:34.152" starttime="20150623 08:19:34.133"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:34.161" starttime="20150623 08:19:34.159"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:19:34.165" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:19:34.164" starttime="20150623 08:19:34.161"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:19:34.169" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:19:34.169" starttime="20150623 08:19:34.165"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:34.175" starttime="20150623 08:19:34.173"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:19:34.177" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:19:34.226" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:19:34.228" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:19:34.227" starttime="20150623 08:19:34.176"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:19:34.233" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:19:34.324" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:19:34.326" level="INFO">${processes_string} = 25772 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor36.log
25787 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
25805 ?        ...</msg>
<status status="PASS" endtime="20150623 08:19:34.325" starttime="20150623 08:19:34.230"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:19:34.331" level="INFO">@{processes_list} = [ 25772 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor36.log | 25787 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 25805 ?  ...</msg>
<status status="PASS" endtime="20150623 08:19:34.330" starttime="20150623 08:19:34.327"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 25772 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor36.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:34.338" level="INFO">${pid} = 25772</msg>
<status status="PASS" endtime="20150623 08:19:34.337" starttime="20150623 08:19:34.334"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:34.342" level="INFO">Executing command 'kill -9 25772'.</msg>
<msg timestamp="20150623 08:19:34.405" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:19:34.406" starttime="20150623 08:19:34.340"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:34.407" starttime="20150623 08:19:34.333"></status>
</kw>
<kw type="foritem" name="${process} = 25787 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:34.414" level="INFO">${pid} = 25787</msg>
<status status="PASS" endtime="20150623 08:19:34.413" starttime="20150623 08:19:34.408"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:34.418" level="INFO">Executing command 'kill -9 25787'.</msg>
<msg timestamp="20150623 08:19:34.488" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:19:34.490" starttime="20150623 08:19:34.415"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:34.491" starttime="20150623 08:19:34.407"></status>
</kw>
<kw type="foritem" name="${process} = 25805 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:34.496" level="INFO">${pid} = 25805</msg>
<status status="PASS" endtime="20150623 08:19:34.495" starttime="20150623 08:19:34.492"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:34.500" level="INFO">Executing command 'kill -9 25805'.</msg>
<msg timestamp="20150623 08:19:34.573" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:19:34.574" starttime="20150623 08:19:34.497"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:34.575" starttime="20150623 08:19:34.491"></status>
</kw>
<kw type="foritem" name="${process} = 25821 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:34.581" level="INFO">${pid} = 25821</msg>
<status status="PASS" endtime="20150623 08:19:34.580" starttime="20150623 08:19:34.577"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:34.584" level="INFO">Executing command 'kill -9 25821'.</msg>
<msg timestamp="20150623 08:19:34.651" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:19:34.652" starttime="20150623 08:19:34.582"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:34.653" starttime="20150623 08:19:34.576"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:34.653" starttime="20150623 08:19:34.332"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:34.654" starttime="20150623 08:19:34.170"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:19:34.658" level="INFO">Starting command 'cat tmpfilemonitor36.log'.</msg>
<status status="PASS" endtime="20150623 08:19:34.694" starttime="20150623 08:19:34.656"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:19:34.697" level="INFO">Reading output of command 'cat tmpfilemonitor36.log'.</msg>
<msg timestamp="20150623 08:19:34.721" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:19:34.723" level="INFO">${stdout_string} = [2015-06-23 06:19:25,132][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150623 08:19:34.722" starttime="20150623 08:19:34.695"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:19:34.727" level="INFO">Executing command 'rm tmpfilemonitor36.log'.</msg>
<msg timestamp="20150623 08:19:34.792" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:19:34.793" starttime="20150623 08:19:34.725"></status>
</kw>
<msg timestamp="20150623 08:19:34.796" level="INFO">${tailed_text} = [2015-06-23 06:19:25,132][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150623 08:19:34.795" starttime="20150623 08:19:34.157"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:34.805" starttime="20150623 08:19:34.797"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:34.816" starttime="20150623 08:19:34.814"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:19:34.828" starttime="20150623 08:19:34.818"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:34.829" starttime="20150623 08:19:34.807"></status>
</kw>
<msg timestamp="20150623 08:19:34.832" level="INFO">${tailed_text} = [2015-06-23 06:19:25,132][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150623 08:19:34.831" starttime="20150623 08:19:34.153"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:34.851" starttime="20150623 08:19:34.849"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:34.853" starttime="20150623 08:19:34.842"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:34.860" starttime="20150623 08:19:34.854"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:34.864" starttime="20150623 08:19:34.861"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:34.868" starttime="20150623 08:19:34.866"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:34.869" starttime="20150623 08:19:34.835"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:34.901" starttime="20150623 08:19:34.900"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:34.910" starttime="20150623 08:19:34.903"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:34.914" starttime="20150623 08:19:34.911"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:19:34.918" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:19:34.920" level="INFO">${queryResultSetLines} = 1004496|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:19:34.919" starttime="20150623 08:19:34.915"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:34.923" starttime="20150623 08:19:34.922"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:19:34.928" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:19:34.929" level="INFO">@{queryResultSet} = [ 1004496|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:19:34.928" starttime="20150623 08:19:34.925"></status>
</kw>
<msg timestamp="20150623 08:19:34.932" level="INFO">@{queryRows} = [ 1004496|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:19:34.931" starttime="20150623 08:19:34.892"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:19:34.937" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:19:34.938" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:19:34.937" starttime="20150623 08:19:34.933"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:19:34.942" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:19:34.944" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:19:34.943" starttime="20150623 08:19:34.940"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:19:34.954" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:19:34.955" starttime="20150623 08:19:34.952"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:34.956" starttime="20150623 08:19:34.945"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:34.964" starttime="20150623 08:19:34.958"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:34.965" starttime="20150623 08:19:34.883"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:34.967" starttime="20150623 08:19:33.536"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:34.969" starttime="20150623 08:19:33.529"></status>
</kw>
<msg timestamp="20150623 08:19:34.972" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:19:34.971" starttime="20150623 08:19:33.526"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:19:34.976" level="INFO">Index in the 2. loop: 3</msg>
<status status="PASS" endtime="20150623 08:19:34.977" starttime="20150623 08:19:34.974"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:19:37.981" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20150623 08:19:37.984" starttime="20150623 08:19:34.979"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:19:37.994" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:19:37.993" starttime="20150623 08:19:37.986"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:37.995" starttime="20150623 08:19:33.525"></status>
</kw>
<kw type="foritem" name="${index} = 4">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:38.052" starttime="20150623 08:19:38.050"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:38.116" starttime="20150623 08:19:38.060"></status>
</kw>
<msg timestamp="20150623 08:19:38.119" level="INFO">${ssh_connection} = 37</msg>
<status status="PASS" endtime="20150623 08:19:38.118" starttime="20150623 08:19:38.053"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:19:38.131" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:19:38.539" level="INFO">Read output: Last login: Tue Jun 23 06:19:33 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:19:38.540" starttime="20150623 08:19:38.128"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:38.542" starttime="20150623 08:19:38.120"></status>
</kw>
<msg timestamp="20150623 08:19:38.545" level="INFO">${ssh_connection} = 37</msg>
<status status="PASS" endtime="20150623 08:19:38.544" starttime="20150623 08:19:38.040"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:38.559" starttime="20150623 08:19:38.556"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:19:38.563" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor37.log'.</msg>
<status status="PASS" endtime="20150623 08:19:38.568" starttime="20150623 08:19:38.560"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:38.569" starttime="20150623 08:19:38.548"></status>
</kw>
<msg timestamp="20150623 08:19:38.572" level="INFO">${ssh_connection} = 37</msg>
<status status="PASS" endtime="20150623 08:19:38.571" starttime="20150623 08:19:38.027"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:38.599" starttime="20150623 08:19:38.592"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:38.601" starttime="20150623 08:19:38.585"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:19:38.612" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:19:38.615" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:19:38.614" starttime="20150623 08:19:38.609"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:19:38.618" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:19:38.620" starttime="20150623 08:19:38.616"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:38.623" starttime="20150623 08:19:38.621"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:38.634" starttime="20150623 08:19:38.625"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:38.635" starttime="20150623 08:19:38.603"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:38.654" starttime="20150623 08:19:38.652"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:19:38.662" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:19:38.662" starttime="20150623 08:19:38.656"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:19:38.670" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:19:38.671" starttime="20150623 08:19:38.664"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:38.682" starttime="20150623 08:19:38.679"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:19:38.685" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:19:38.731" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:19:38.733" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:19:38.732" starttime="20150623 08:19:38.684"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:19:38.737" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:19:38.831" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:19:38.833" level="INFO">${processes_string} = 25946 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor37.log
25961 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
25979 ?        ...</msg>
<status status="PASS" endtime="20150623 08:19:38.832" starttime="20150623 08:19:38.734"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:19:38.839" level="INFO">@{processes_list} = [ 25946 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor37.log | 25961 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 25979 ?  ...</msg>
<status status="PASS" endtime="20150623 08:19:38.838" starttime="20150623 08:19:38.835"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 25946 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor37.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:38.846" level="INFO">${pid} = 25946</msg>
<status status="PASS" endtime="20150623 08:19:38.845" starttime="20150623 08:19:38.842"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:38.850" level="INFO">Executing command 'kill -9 25946'.</msg>
<msg timestamp="20150623 08:19:38.911" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:19:38.912" starttime="20150623 08:19:38.847"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:38.913" starttime="20150623 08:19:38.841"></status>
</kw>
<kw type="foritem" name="${process} = 25961 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:38.918" level="INFO">${pid} = 25961</msg>
<status status="PASS" endtime="20150623 08:19:38.917" starttime="20150623 08:19:38.914"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:38.922" level="INFO">Executing command 'kill -9 25961'.</msg>
<msg timestamp="20150623 08:19:38.988" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:19:38.989" starttime="20150623 08:19:38.919"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:38.990" starttime="20150623 08:19:38.913"></status>
</kw>
<kw type="foritem" name="${process} = 25979 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:38.996" level="INFO">${pid} = 25979</msg>
<status status="PASS" endtime="20150623 08:19:38.995" starttime="20150623 08:19:38.992"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:39.000" level="INFO">Executing command 'kill -9 25979'.</msg>
<msg timestamp="20150623 08:19:39.067" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:19:39.068" starttime="20150623 08:19:38.997"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:39.070" starttime="20150623 08:19:38.991"></status>
</kw>
<kw type="foritem" name="${process} = 25995 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:39.076" level="INFO">${pid} = 25995</msg>
<status status="PASS" endtime="20150623 08:19:39.075" starttime="20150623 08:19:39.072"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:39.080" level="INFO">Executing command 'kill -9 25995'.</msg>
<msg timestamp="20150623 08:19:39.144" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:19:39.145" starttime="20150623 08:19:39.078"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:39.146" starttime="20150623 08:19:39.071"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:39.147" starttime="20150623 08:19:38.840"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:39.149" starttime="20150623 08:19:38.673"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:19:39.153" level="INFO">Starting command 'cat tmpfilemonitor37.log'.</msg>
<status status="PASS" endtime="20150623 08:19:39.187" starttime="20150623 08:19:39.151"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:19:39.190" level="INFO">Reading output of command 'cat tmpfilemonitor37.log'.</msg>
<msg timestamp="20150623 08:19:39.224" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:19:39.226" level="INFO">${stdout_string} = [2015-06-23 06:19:25,168][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:19:39.226" starttime="20150623 08:19:39.189"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:19:39.230" level="INFO">Executing command 'rm tmpfilemonitor37.log'.</msg>
<msg timestamp="20150623 08:19:39.304" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:19:39.305" starttime="20150623 08:19:39.228"></status>
</kw>
<msg timestamp="20150623 08:19:39.309" level="INFO">${tailed_text} = [2015-06-23 06:19:25,168][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:19:39.307" starttime="20150623 08:19:38.646"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:39.318" starttime="20150623 08:19:39.310"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:39.329" starttime="20150623 08:19:39.326"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:19:39.333" starttime="20150623 08:19:39.330"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:39.338" starttime="20150623 08:19:39.319"></status>
</kw>
<msg timestamp="20150623 08:19:39.341" level="INFO">${tailed_text} = [2015-06-23 06:19:25,168][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:19:39.340" starttime="20150623 08:19:38.638"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:39.360" starttime="20150623 08:19:39.358"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:39.362" starttime="20150623 08:19:39.351"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:39.369" starttime="20150623 08:19:39.363"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:39.373" starttime="20150623 08:19:39.370"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:39.377" starttime="20150623 08:19:39.374"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:39.378" starttime="20150623 08:19:39.345"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:39.409" starttime="20150623 08:19:39.407"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:39.417" starttime="20150623 08:19:39.411"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:39.421" starttime="20150623 08:19:39.419"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:19:39.425" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:19:39.428" level="INFO">${queryResultSetLines} = 1004497|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:19:39.427" starttime="20150623 08:19:39.422"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:39.431" starttime="20150623 08:19:39.429"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:19:39.435" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:19:39.437" level="INFO">@{queryResultSet} = [ 1004497|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:19:39.436" starttime="20150623 08:19:39.433"></status>
</kw>
<msg timestamp="20150623 08:19:39.439" level="INFO">@{queryRows} = [ 1004497|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:19:39.439" starttime="20150623 08:19:39.401"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:19:39.444" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:19:39.446" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:19:39.445" starttime="20150623 08:19:39.441"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:19:39.449" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:19:39.451" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:19:39.450" starttime="20150623 08:19:39.447"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:19:39.462" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:19:39.463" starttime="20150623 08:19:39.459"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:39.464" starttime="20150623 08:19:39.453"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:39.471" starttime="20150623 08:19:39.465"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:39.472" starttime="20150623 08:19:39.392"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:39.474" starttime="20150623 08:19:38.007"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:39.476" starttime="20150623 08:19:38.000"></status>
</kw>
<msg timestamp="20150623 08:19:39.479" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:19:39.478" starttime="20150623 08:19:37.998"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:19:39.483" level="INFO">Index in the 2. loop: 4</msg>
<status status="PASS" endtime="20150623 08:19:39.484" starttime="20150623 08:19:39.481"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:19:42.490" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20150623 08:19:42.492" starttime="20150623 08:19:39.486"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:19:42.503" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:19:42.502" starttime="20150623 08:19:42.495"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:42.504" starttime="20150623 08:19:37.997"></status>
</kw>
<kw type="foritem" name="${index} = 5">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:42.560" starttime="20150623 08:19:42.558"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:42.626" starttime="20150623 08:19:42.569"></status>
</kw>
<msg timestamp="20150623 08:19:42.628" level="INFO">${ssh_connection} = 38</msg>
<status status="PASS" endtime="20150623 08:19:42.627" starttime="20150623 08:19:42.562"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:19:42.641" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:19:43.055" level="INFO">Read output: Last login: Tue Jun 23 06:19:38 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:19:43.056" starttime="20150623 08:19:42.639"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:43.057" starttime="20150623 08:19:42.630"></status>
</kw>
<msg timestamp="20150623 08:19:43.060" level="INFO">${ssh_connection} = 38</msg>
<status status="PASS" endtime="20150623 08:19:43.059" starttime="20150623 08:19:42.548"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:43.066" starttime="20150623 08:19:43.064"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:19:43.068" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor38.log'.</msg>
<status status="PASS" endtime="20150623 08:19:43.072" starttime="20150623 08:19:43.066"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:43.072" starttime="20150623 08:19:43.061"></status>
</kw>
<msg timestamp="20150623 08:19:43.074" level="INFO">${ssh_connection} = 38</msg>
<status status="PASS" endtime="20150623 08:19:43.073" starttime="20150623 08:19:42.535"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:43.088" starttime="20150623 08:19:43.083"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:43.090" starttime="20150623 08:19:43.080"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:19:43.101" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:19:43.104" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:19:43.103" starttime="20150623 08:19:43.098"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:19:43.107" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:19:43.108" starttime="20150623 08:19:43.105"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:43.112" starttime="20150623 08:19:43.110"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:43.122" starttime="20150623 08:19:43.113"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:43.123" starttime="20150623 08:19:43.092"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:43.142" starttime="20150623 08:19:43.140"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:19:43.151" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:19:43.150" starttime="20150623 08:19:43.144"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:19:43.157" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:19:43.158" starttime="20150623 08:19:43.152"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:43.169" starttime="20150623 08:19:43.167"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:19:43.172" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:19:43.216" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:19:43.218" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:19:43.217" starttime="20150623 08:19:43.171"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:19:43.222" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:19:43.309" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:19:43.312" level="INFO">${processes_string} = 26120 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor38.log
26135 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
26153 ?        ...</msg>
<status status="PASS" endtime="20150623 08:19:43.311" starttime="20150623 08:19:43.219"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:19:43.317" level="INFO">@{processes_list} = [ 26120 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor38.log | 26135 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 26153 ?  ...</msg>
<status status="PASS" endtime="20150623 08:19:43.316" starttime="20150623 08:19:43.313"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 26120 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor38.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:43.324" level="INFO">${pid} = 26120</msg>
<status status="PASS" endtime="20150623 08:19:43.323" starttime="20150623 08:19:43.320"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:43.328" level="INFO">Executing command 'kill -9 26120'.</msg>
<msg timestamp="20150623 08:19:43.389" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:19:43.390" starttime="20150623 08:19:43.326"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:43.391" starttime="20150623 08:19:43.319"></status>
</kw>
<kw type="foritem" name="${process} = 26135 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:43.397" level="INFO">${pid} = 26135</msg>
<status status="PASS" endtime="20150623 08:19:43.396" starttime="20150623 08:19:43.393"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:43.401" level="INFO">Executing command 'kill -9 26135'.</msg>
<msg timestamp="20150623 08:19:43.469" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:19:43.470" starttime="20150623 08:19:43.399"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:43.471" starttime="20150623 08:19:43.392"></status>
</kw>
<kw type="foritem" name="${process} = 26153 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:43.476" level="INFO">${pid} = 26153</msg>
<status status="PASS" endtime="20150623 08:19:43.475" starttime="20150623 08:19:43.472"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:43.480" level="INFO">Executing command 'kill -9 26153'.</msg>
<msg timestamp="20150623 08:19:43.548" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:19:43.550" starttime="20150623 08:19:43.478"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:43.551" starttime="20150623 08:19:43.471"></status>
</kw>
<kw type="foritem" name="${process} = 26169 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:43.556" level="INFO">${pid} = 26169</msg>
<status status="PASS" endtime="20150623 08:19:43.555" starttime="20150623 08:19:43.552"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:43.560" level="INFO">Executing command 'kill -9 26169'.</msg>
<msg timestamp="20150623 08:19:43.628" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:19:43.629" starttime="20150623 08:19:43.558"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:43.630" starttime="20150623 08:19:43.551"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:43.630" starttime="20150623 08:19:43.318"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:43.631" starttime="20150623 08:19:43.160"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:19:43.635" level="INFO">Starting command 'cat tmpfilemonitor38.log'.</msg>
<status status="PASS" endtime="20150623 08:19:43.671" starttime="20150623 08:19:43.633"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:19:43.674" level="INFO">Reading output of command 'cat tmpfilemonitor38.log'.</msg>
<msg timestamp="20150623 08:19:43.711" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:19:43.713" level="INFO">${stdout_string} = [2015-06-23 06:19:29,695][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:19:43.712" starttime="20150623 08:19:43.672"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:19:43.717" level="INFO">Executing command 'rm tmpfilemonitor38.log'.</msg>
<msg timestamp="20150623 08:19:43.791" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:19:43.792" starttime="20150623 08:19:43.715"></status>
</kw>
<msg timestamp="20150623 08:19:43.795" level="INFO">${tailed_text} = [2015-06-23 06:19:29,695][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:19:43.794" starttime="20150623 08:19:43.134"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:43.804" starttime="20150623 08:19:43.797"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:43.815" starttime="20150623 08:19:43.813"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:19:43.819" starttime="20150623 08:19:43.817"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:43.824" starttime="20150623 08:19:43.806"></status>
</kw>
<msg timestamp="20150623 08:19:43.827" level="INFO">${tailed_text} = [2015-06-23 06:19:29,695][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:19:43.826" starttime="20150623 08:19:43.126"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:43.846" starttime="20150623 08:19:43.843"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:43.847" starttime="20150623 08:19:43.837"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:43.854" starttime="20150623 08:19:43.849"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:43.859" starttime="20150623 08:19:43.856"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:43.863" starttime="20150623 08:19:43.860"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:43.864" starttime="20150623 08:19:43.830"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:43.896" starttime="20150623 08:19:43.894"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:43.903" starttime="20150623 08:19:43.897"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:43.907" starttime="20150623 08:19:43.905"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:19:43.911" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:19:43.913" level="INFO">${queryResultSetLines} = 1004498|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:19:43.912" starttime="20150623 08:19:43.908"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:43.917" starttime="20150623 08:19:43.915"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:19:43.920" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:19:43.922" level="INFO">@{queryResultSet} = [ 1004498|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:19:43.921" starttime="20150623 08:19:43.918"></status>
</kw>
<msg timestamp="20150623 08:19:43.925" level="INFO">@{queryRows} = [ 1004498|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:19:43.924" starttime="20150623 08:19:43.887"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:19:43.927" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:19:43.927" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:19:43.927" starttime="20150623 08:19:43.925"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:19:43.929" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:19:43.930" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:19:43.930" starttime="20150623 08:19:43.928"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:19:43.935" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:19:43.936" starttime="20150623 08:19:43.934"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:43.936" starttime="20150623 08:19:43.931"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:43.939" starttime="20150623 08:19:43.937"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:43.940" starttime="20150623 08:19:43.878"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:43.941" starttime="20150623 08:19:42.515"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:43.942" starttime="20150623 08:19:42.508"></status>
</kw>
<msg timestamp="20150623 08:19:43.943" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:19:43.942" starttime="20150623 08:19:42.506"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:19:43.945" level="INFO">Index in the 2. loop: 5</msg>
<status status="PASS" endtime="20150623 08:19:43.945" starttime="20150623 08:19:43.944"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:19:46.948" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20150623 08:19:46.968" starttime="20150623 08:19:43.946"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:19:46.979" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:19:46.978" starttime="20150623 08:19:46.971"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:46.980" starttime="20150623 08:19:42.505"></status>
</kw>
<kw type="foritem" name="${index} = 6">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:47.037" starttime="20150623 08:19:47.035"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:47.101" starttime="20150623 08:19:47.046"></status>
</kw>
<msg timestamp="20150623 08:19:47.104" level="INFO">${ssh_connection} = 39</msg>
<status status="PASS" endtime="20150623 08:19:47.103" starttime="20150623 08:19:47.038"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:19:47.117" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:19:47.530" level="INFO">Read output: Last login: Tue Jun 23 06:19:42 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:19:47.532" starttime="20150623 08:19:47.114"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:47.534" starttime="20150623 08:19:47.105"></status>
</kw>
<msg timestamp="20150623 08:19:47.548" level="INFO">${ssh_connection} = 39</msg>
<status status="PASS" endtime="20150623 08:19:47.536" starttime="20150623 08:19:47.025"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:47.555" starttime="20150623 08:19:47.554"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:19:47.568" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor39.log'.</msg>
<status status="PASS" endtime="20150623 08:19:47.571" starttime="20150623 08:19:47.556"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:47.572" starttime="20150623 08:19:47.550"></status>
</kw>
<msg timestamp="20150623 08:19:47.573" level="INFO">${ssh_connection} = 39</msg>
<status status="PASS" endtime="20150623 08:19:47.573" starttime="20150623 08:19:47.011"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:47.599" starttime="20150623 08:19:47.594"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:47.599" starttime="20150623 08:19:47.579"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:19:47.605" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:19:47.606" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:19:47.606" starttime="20150623 08:19:47.603"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:19:47.608" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:19:47.608" starttime="20150623 08:19:47.607"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:47.610" starttime="20150623 08:19:47.609"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:47.618" starttime="20150623 08:19:47.610"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:47.619" starttime="20150623 08:19:47.600"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:47.628" starttime="20150623 08:19:47.626"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:19:47.632" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:19:47.631" starttime="20150623 08:19:47.628"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:19:47.636" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:19:47.636" starttime="20150623 08:19:47.632"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:47.642" starttime="20150623 08:19:47.640"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:19:47.643" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:19:47.694" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:19:47.696" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:19:47.695" starttime="20150623 08:19:47.642"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:19:47.698" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:19:47.788" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:19:47.789" level="INFO">${processes_string} = 26295 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor39.log
26310 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
26328 ?        ...</msg>
<status status="PASS" endtime="20150623 08:19:47.789" starttime="20150623 08:19:47.696"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:19:47.792" level="INFO">@{processes_list} = [ 26295 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor39.log | 26310 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 26328 ?  ...</msg>
<status status="PASS" endtime="20150623 08:19:47.792" starttime="20150623 08:19:47.790"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 26295 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor39.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:47.795" level="INFO">${pid} = 26295</msg>
<status status="PASS" endtime="20150623 08:19:47.795" starttime="20150623 08:19:47.793"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:47.797" level="INFO">Executing command 'kill -9 26295'.</msg>
<msg timestamp="20150623 08:19:47.867" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:19:47.869" starttime="20150623 08:19:47.796"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:47.871" starttime="20150623 08:19:47.793"></status>
</kw>
<kw type="foritem" name="${process} = 26310 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:47.879" level="INFO">${pid} = 26310</msg>
<status status="PASS" endtime="20150623 08:19:47.875" starttime="20150623 08:19:47.872"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:47.883" level="INFO">Executing command 'kill -9 26310'.</msg>
<msg timestamp="20150623 08:19:47.946" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:19:47.947" starttime="20150623 08:19:47.880"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:47.948" starttime="20150623 08:19:47.871"></status>
</kw>
<kw type="foritem" name="${process} = 26328 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:47.954" level="INFO">${pid} = 26328</msg>
<status status="PASS" endtime="20150623 08:19:47.953" starttime="20150623 08:19:47.950"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:47.957" level="INFO">Executing command 'kill -9 26328'.</msg>
<msg timestamp="20150623 08:19:48.026" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:19:48.027" starttime="20150623 08:19:47.955"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:48.029" starttime="20150623 08:19:47.949"></status>
</kw>
<kw type="foritem" name="${process} = 26344 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:48.035" level="INFO">${pid} = 26344</msg>
<status status="PASS" endtime="20150623 08:19:48.034" starttime="20150623 08:19:48.031"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:48.039" level="INFO">Executing command 'kill -9 26344'.</msg>
<msg timestamp="20150623 08:19:48.120" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:19:48.121" starttime="20150623 08:19:48.036"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:48.122" starttime="20150623 08:19:48.030"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:48.123" starttime="20150623 08:19:47.793"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:48.125" starttime="20150623 08:19:47.637"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:19:48.129" level="INFO">Starting command 'cat tmpfilemonitor39.log'.</msg>
<status status="PASS" endtime="20150623 08:19:48.163" starttime="20150623 08:19:48.127"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:19:48.166" level="INFO">Reading output of command 'cat tmpfilemonitor39.log'.</msg>
<msg timestamp="20150623 08:19:48.202" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:19:48.203" level="INFO">${stdout_string} = [2015-06-23 06:19:34,183][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:19:48.202" starttime="20150623 08:19:48.164"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:19:48.207" level="INFO">Executing command 'rm tmpfilemonitor39.log'.</msg>
<msg timestamp="20150623 08:19:48.284" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:19:48.285" starttime="20150623 08:19:48.205"></status>
</kw>
<msg timestamp="20150623 08:19:48.288" level="INFO">${tailed_text} = [2015-06-23 06:19:34,183][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:19:48.286" starttime="20150623 08:19:47.623"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:48.297" starttime="20150623 08:19:48.290"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:48.308" starttime="20150623 08:19:48.305"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:19:48.312" starttime="20150623 08:19:48.310"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:48.316" starttime="20150623 08:19:48.298"></status>
</kw>
<msg timestamp="20150623 08:19:48.320" level="INFO">${tailed_text} = [2015-06-23 06:19:34,183][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:19:48.318" starttime="20150623 08:19:47.620"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:48.338" starttime="20150623 08:19:48.336"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:48.340" starttime="20150623 08:19:48.330"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:48.347" starttime="20150623 08:19:48.341"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:48.351" starttime="20150623 08:19:48.348"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:48.355" starttime="20150623 08:19:48.352"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:48.356" starttime="20150623 08:19:48.323"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:48.388" starttime="20150623 08:19:48.386"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:48.396" starttime="20150623 08:19:48.389"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:48.399" starttime="20150623 08:19:48.397"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:19:48.403" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:19:48.406" level="INFO">${queryResultSetLines} = 1004499|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:19:48.405" starttime="20150623 08:19:48.401"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:48.409" starttime="20150623 08:19:48.407"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:19:48.413" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:19:48.415" level="INFO">@{queryResultSet} = [ 1004499|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:19:48.414" starttime="20150623 08:19:48.410"></status>
</kw>
<msg timestamp="20150623 08:19:48.418" level="INFO">@{queryRows} = [ 1004499|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:19:48.417" starttime="20150623 08:19:48.379"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:19:48.422" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:19:48.424" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:19:48.423" starttime="20150623 08:19:48.419"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:19:48.426" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:19:48.427" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:19:48.426" starttime="20150623 08:19:48.425"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:19:48.432" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:19:48.432" starttime="20150623 08:19:48.430"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:48.432" starttime="20150623 08:19:48.427"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:48.436" starttime="20150623 08:19:48.433"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:48.436" starttime="20150623 08:19:48.370"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:48.437" starttime="20150623 08:19:46.991"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:48.438" starttime="20150623 08:19:46.985"></status>
</kw>
<msg timestamp="20150623 08:19:48.440" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:19:48.439" starttime="20150623 08:19:46.982"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:19:48.441" level="INFO">Index in the 2. loop: 6</msg>
<status status="PASS" endtime="20150623 08:19:48.442" starttime="20150623 08:19:48.440"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:19:51.445" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20150623 08:19:51.448" starttime="20150623 08:19:48.442"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:19:51.459" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:19:51.458" starttime="20150623 08:19:51.450"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:51.459" starttime="20150623 08:19:46.981"></status>
</kw>
<kw type="foritem" name="${index} = 7">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:51.515" starttime="20150623 08:19:51.513"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:51.571" starttime="20150623 08:19:51.524"></status>
</kw>
<msg timestamp="20150623 08:19:51.574" level="INFO">${ssh_connection} = 40</msg>
<status status="PASS" endtime="20150623 08:19:51.573" starttime="20150623 08:19:51.517"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:19:51.585" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:19:51.971" level="INFO">Read output: Last login: Tue Jun 23 06:19:47 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:19:51.972" starttime="20150623 08:19:51.582"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:51.974" starttime="20150623 08:19:51.575"></status>
</kw>
<msg timestamp="20150623 08:19:51.977" level="INFO">${ssh_connection} = 40</msg>
<status status="PASS" endtime="20150623 08:19:51.976" starttime="20150623 08:19:51.504"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:51.989" starttime="20150623 08:19:51.987"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:19:51.994" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor40.log'.</msg>
<status status="PASS" endtime="20150623 08:19:51.998" starttime="20150623 08:19:51.991"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:51.999" starttime="20150623 08:19:51.979"></status>
</kw>
<msg timestamp="20150623 08:19:52.004" level="INFO">${ssh_connection} = 40</msg>
<status status="PASS" endtime="20150623 08:19:52.002" starttime="20150623 08:19:51.490"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:52.030" starttime="20150623 08:19:52.023"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:52.032" starttime="20150623 08:19:52.016"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:19:52.043" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:19:52.046" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:19:52.045" starttime="20150623 08:19:52.040"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:19:52.050" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:19:52.051" starttime="20150623 08:19:52.047"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:52.054" starttime="20150623 08:19:52.052"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:52.066" starttime="20150623 08:19:52.056"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:52.067" starttime="20150623 08:19:52.034"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:52.087" starttime="20150623 08:19:52.084"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:19:52.095" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:19:52.094" starttime="20150623 08:19:52.088"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:19:52.101" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:19:52.102" starttime="20150623 08:19:52.096"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:52.113" starttime="20150623 08:19:52.111"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:19:52.117" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:19:52.161" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:19:52.162" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:19:52.162" starttime="20150623 08:19:52.115"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:19:52.167" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:19:52.258" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:19:52.260" level="INFO">${processes_string} = 26469 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor40.log
26484 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
26502 ?        ...</msg>
<status status="PASS" endtime="20150623 08:19:52.259" starttime="20150623 08:19:52.164"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:19:52.265" level="INFO">@{processes_list} = [ 26469 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor40.log | 26484 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 26502 ?  ...</msg>
<status status="PASS" endtime="20150623 08:19:52.264" starttime="20150623 08:19:52.262"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 26469 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor40.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:52.272" level="INFO">${pid} = 26469</msg>
<status status="PASS" endtime="20150623 08:19:52.271" starttime="20150623 08:19:52.268"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:52.276" level="INFO">Executing command 'kill -9 26469'.</msg>
<msg timestamp="20150623 08:19:52.342" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:19:52.343" starttime="20150623 08:19:52.274"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:52.344" starttime="20150623 08:19:52.267"></status>
</kw>
<kw type="foritem" name="${process} = 26484 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:52.349" level="INFO">${pid} = 26484</msg>
<status status="PASS" endtime="20150623 08:19:52.348" starttime="20150623 08:19:52.345"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:52.353" level="INFO">Executing command 'kill -9 26484'.</msg>
<msg timestamp="20150623 08:19:52.422" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:19:52.423" starttime="20150623 08:19:52.351"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:52.424" starttime="20150623 08:19:52.344"></status>
</kw>
<kw type="foritem" name="${process} = 26502 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:52.429" level="INFO">${pid} = 26502</msg>
<status status="PASS" endtime="20150623 08:19:52.428" starttime="20150623 08:19:52.426"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:52.433" level="INFO">Executing command 'kill -9 26502'.</msg>
<msg timestamp="20150623 08:19:52.503" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:19:52.504" starttime="20150623 08:19:52.431"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:52.505" starttime="20150623 08:19:52.425"></status>
</kw>
<kw type="foritem" name="${process} = 26518 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:52.510" level="INFO">${pid} = 26518</msg>
<status status="PASS" endtime="20150623 08:19:52.510" starttime="20150623 08:19:52.507"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:52.514" level="INFO">Executing command 'kill -9 26518'.</msg>
<msg timestamp="20150623 08:19:52.583" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:19:52.584" starttime="20150623 08:19:52.512"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:52.584" starttime="20150623 08:19:52.506"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:52.585" starttime="20150623 08:19:52.266"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:52.586" starttime="20150623 08:19:52.104"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:19:52.590" level="INFO">Starting command 'cat tmpfilemonitor40.log'.</msg>
<status status="PASS" endtime="20150623 08:19:52.625" starttime="20150623 08:19:52.587"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:19:52.628" level="INFO">Reading output of command 'cat tmpfilemonitor40.log'.</msg>
<msg timestamp="20150623 08:19:52.663" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:19:52.665" level="INFO">${stdout_string} = [2015-06-23 06:19:38,665][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:19:52.664" starttime="20150623 08:19:52.627"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:19:52.669" level="INFO">Executing command 'rm tmpfilemonitor40.log'.</msg>
<msg timestamp="20150623 08:19:52.746" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:19:52.747" starttime="20150623 08:19:52.666"></status>
</kw>
<msg timestamp="20150623 08:19:52.750" level="INFO">${tailed_text} = [2015-06-23 06:19:38,665][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:19:52.749" starttime="20150623 08:19:52.078"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:52.758" starttime="20150623 08:19:52.751"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:52.769" starttime="20150623 08:19:52.767"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:19:52.773" starttime="20150623 08:19:52.771"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:52.778" starttime="20150623 08:19:52.760"></status>
</kw>
<msg timestamp="20150623 08:19:52.781" level="INFO">${tailed_text} = [2015-06-23 06:19:38,665][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:19:52.780" starttime="20150623 08:19:52.070"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:52.799" starttime="20150623 08:19:52.797"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:52.801" starttime="20150623 08:19:52.790"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:52.808" starttime="20150623 08:19:52.802"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:52.812" starttime="20150623 08:19:52.809"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:52.816" starttime="20150623 08:19:52.813"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:52.817" starttime="20150623 08:19:52.784"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:52.848" starttime="20150623 08:19:52.846"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:52.856" starttime="20150623 08:19:52.850"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:52.859" starttime="20150623 08:19:52.857"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:19:52.864" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:19:52.866" level="INFO">${queryResultSetLines} = 1004500|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:19:52.865" starttime="20150623 08:19:52.861"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:52.869" starttime="20150623 08:19:52.867"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:19:52.873" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:19:52.874" level="INFO">@{queryResultSet} = [ 1004500|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:19:52.874" starttime="20150623 08:19:52.870"></status>
</kw>
<msg timestamp="20150623 08:19:52.877" level="INFO">@{queryRows} = [ 1004500|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:19:52.876" starttime="20150623 08:19:52.839"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:19:52.882" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:19:52.883" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:19:52.882" starttime="20150623 08:19:52.879"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:19:52.887" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:19:52.889" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:19:52.888" starttime="20150623 08:19:52.885"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:19:52.899" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:19:52.900" starttime="20150623 08:19:52.896"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:52.901" starttime="20150623 08:19:52.890"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:52.908" starttime="20150623 08:19:52.902"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:52.909" starttime="20150623 08:19:52.831"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:52.911" starttime="20150623 08:19:51.471"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:52.913" starttime="20150623 08:19:51.464"></status>
</kw>
<msg timestamp="20150623 08:19:52.916" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:19:52.915" starttime="20150623 08:19:51.462"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:19:52.920" level="INFO">Index in the 2. loop: 7</msg>
<status status="PASS" endtime="20150623 08:19:52.921" starttime="20150623 08:19:52.918"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:19:55.925" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20150623 08:19:55.928" starttime="20150623 08:19:52.922"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:19:55.938" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:19:55.937" starttime="20150623 08:19:55.930"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:55.939" starttime="20150623 08:19:51.461"></status>
</kw>
<kw type="foritem" name="${index} = 8">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:55.995" starttime="20150623 08:19:55.993"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:56.061" starttime="20150623 08:19:56.003"></status>
</kw>
<msg timestamp="20150623 08:19:56.064" level="INFO">${ssh_connection} = 41</msg>
<status status="PASS" endtime="20150623 08:19:56.062" starttime="20150623 08:19:55.996"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:19:56.076" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:19:56.473" level="INFO">Read output: Last login: Tue Jun 23 06:19:51 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:19:56.474" starttime="20150623 08:19:56.073"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:56.476" starttime="20150623 08:19:56.066"></status>
</kw>
<msg timestamp="20150623 08:19:56.480" level="INFO">${ssh_connection} = 41</msg>
<status status="PASS" endtime="20150623 08:19:56.478" starttime="20150623 08:19:55.983"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:56.497" starttime="20150623 08:19:56.494"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:19:56.501" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor41.log'.</msg>
<status status="PASS" endtime="20150623 08:19:56.506" starttime="20150623 08:19:56.498"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:56.507" starttime="20150623 08:19:56.483"></status>
</kw>
<msg timestamp="20150623 08:19:56.511" level="INFO">${ssh_connection} = 41</msg>
<status status="PASS" endtime="20150623 08:19:56.509" starttime="20150623 08:19:55.970"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:56.538" starttime="20150623 08:19:56.531"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:56.539" starttime="20150623 08:19:56.524"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:19:56.551" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:19:56.553" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:19:56.552" starttime="20150623 08:19:56.548"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:19:56.557" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:19:56.558" starttime="20150623 08:19:56.554"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:56.561" starttime="20150623 08:19:56.559"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:56.572" starttime="20150623 08:19:56.563"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:56.574" starttime="20150623 08:19:56.541"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:56.593" starttime="20150623 08:19:56.590"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:19:56.601" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:19:56.600" starttime="20150623 08:19:56.594"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:19:56.607" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:19:56.608" starttime="20150623 08:19:56.602"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:56.620" starttime="20150623 08:19:56.617"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:19:56.623" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:19:56.673" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:19:56.675" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:19:56.674" starttime="20150623 08:19:56.621"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:19:56.679" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:19:56.773" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:19:56.775" level="INFO">${processes_string} = 26643 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor41.log
26658 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
26676 ?        ...</msg>
<status status="PASS" endtime="20150623 08:19:56.774" starttime="20150623 08:19:56.676"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:19:56.780" level="INFO">@{processes_list} = [ 26643 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor41.log | 26658 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 26676 ?  ...</msg>
<status status="PASS" endtime="20150623 08:19:56.779" starttime="20150623 08:19:56.776"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 26643 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor41.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:56.787" level="INFO">${pid} = 26643</msg>
<status status="PASS" endtime="20150623 08:19:56.786" starttime="20150623 08:19:56.783"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:56.791" level="INFO">Executing command 'kill -9 26643'.</msg>
<msg timestamp="20150623 08:19:56.855" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:19:56.856" starttime="20150623 08:19:56.788"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:56.857" starttime="20150623 08:19:56.782"></status>
</kw>
<kw type="foritem" name="${process} = 26658 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:56.863" level="INFO">${pid} = 26658</msg>
<status status="PASS" endtime="20150623 08:19:56.862" starttime="20150623 08:19:56.859"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:56.867" level="INFO">Executing command 'kill -9 26658'.</msg>
<msg timestamp="20150623 08:19:56.935" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:19:56.936" starttime="20150623 08:19:56.864"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:56.937" starttime="20150623 08:19:56.858"></status>
</kw>
<kw type="foritem" name="${process} = 26676 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:56.943" level="INFO">${pid} = 26676</msg>
<status status="PASS" endtime="20150623 08:19:56.942" starttime="20150623 08:19:56.939"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:56.946" level="INFO">Executing command 'kill -9 26676'.</msg>
<msg timestamp="20150623 08:19:57.013" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:19:57.015" starttime="20150623 08:19:56.944"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:57.017" starttime="20150623 08:19:56.938"></status>
</kw>
<kw type="foritem" name="${process} = 26693 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:19:57.023" level="INFO">${pid} = 26693</msg>
<status status="PASS" endtime="20150623 08:19:57.022" starttime="20150623 08:19:57.019"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:19:57.026" level="INFO">Executing command 'kill -9 26693'.</msg>
<msg timestamp="20150623 08:19:57.092" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:19:57.093" starttime="20150623 08:19:57.024"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:57.094" starttime="20150623 08:19:57.018"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:57.095" starttime="20150623 08:19:56.781"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:57.097" starttime="20150623 08:19:56.610"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:19:57.101" level="INFO">Starting command 'cat tmpfilemonitor41.log'.</msg>
<status status="PASS" endtime="20150623 08:19:57.135" starttime="20150623 08:19:57.099"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:19:57.138" level="INFO">Reading output of command 'cat tmpfilemonitor41.log'.</msg>
<msg timestamp="20150623 08:19:57.171" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:19:57.173" level="INFO">${stdout_string} = [2015-06-23 06:19:43,152][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:19:57.172" starttime="20150623 08:19:57.136"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:19:57.178" level="INFO">Executing command 'rm tmpfilemonitor41.log'.</msg>
<msg timestamp="20150623 08:19:57.249" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:19:57.250" starttime="20150623 08:19:57.175"></status>
</kw>
<msg timestamp="20150623 08:19:57.254" level="INFO">${tailed_text} = [2015-06-23 06:19:43,152][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:19:57.252" starttime="20150623 08:19:56.584"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:57.262" starttime="20150623 08:19:57.255"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:57.273" starttime="20150623 08:19:57.271"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:19:57.284" starttime="20150623 08:19:57.275"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:57.287" starttime="20150623 08:19:57.264"></status>
</kw>
<msg timestamp="20150623 08:19:57.291" level="INFO">${tailed_text} = [2015-06-23 06:19:43,152][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:19:57.289" starttime="20150623 08:19:56.577"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:57.310" starttime="20150623 08:19:57.308"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:57.311" starttime="20150623 08:19:57.301"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:57.319" starttime="20150623 08:19:57.313"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:57.323" starttime="20150623 08:19:57.320"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:57.327" starttime="20150623 08:19:57.324"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:57.328" starttime="20150623 08:19:57.294"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:57.359" starttime="20150623 08:19:57.357"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:57.369" starttime="20150623 08:19:57.361"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:57.373" starttime="20150623 08:19:57.371"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:19:57.377" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:19:57.379" level="INFO">${queryResultSetLines} = 1004501|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:19:57.378" starttime="20150623 08:19:57.374"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:57.383" starttime="20150623 08:19:57.381"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:19:57.386" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:19:57.388" level="INFO">@{queryResultSet} = [ 1004501|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:19:57.387" starttime="20150623 08:19:57.384"></status>
</kw>
<msg timestamp="20150623 08:19:57.391" level="INFO">@{queryRows} = [ 1004501|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:19:57.390" starttime="20150623 08:19:57.350"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:19:57.395" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:19:57.397" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:19:57.396" starttime="20150623 08:19:57.392"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:19:57.401" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:19:57.402" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:19:57.402" starttime="20150623 08:19:57.398"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:19:57.413" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:19:57.414" starttime="20150623 08:19:57.410"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:57.415" starttime="20150623 08:19:57.404"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:19:57.422" starttime="20150623 08:19:57.416"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:57.423" starttime="20150623 08:19:57.342"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:57.425" starttime="20150623 08:19:55.951"></status>
</kw>
<status status="PASS" endtime="20150623 08:19:57.427" starttime="20150623 08:19:55.944"></status>
</kw>
<msg timestamp="20150623 08:19:57.431" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:19:57.429" starttime="20150623 08:19:55.941"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:19:57.434" level="INFO">Index in the 2. loop: 8</msg>
<status status="PASS" endtime="20150623 08:19:57.436" starttime="20150623 08:19:57.432"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:20:00.442" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20150623 08:20:00.444" starttime="20150623 08:19:57.437"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:20:00.455" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:20:00.453" starttime="20150623 08:20:00.446"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:00.455" starttime="20150623 08:19:55.940"></status>
</kw>
<kw type="foritem" name="${index} = 9">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:00.529" starttime="20150623 08:20:00.527"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:00.593" starttime="20150623 08:20:00.538"></status>
</kw>
<msg timestamp="20150623 08:20:00.595" level="INFO">${ssh_connection} = 42</msg>
<status status="PASS" endtime="20150623 08:20:00.594" starttime="20150623 08:20:00.530"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:20:00.609" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:20:01.055" level="INFO">Read output: Last login: Tue Jun 23 06:19:56 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:20:01.056" starttime="20150623 08:20:00.606"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:01.057" starttime="20150623 08:20:00.597"></status>
</kw>
<msg timestamp="20150623 08:20:01.059" level="INFO">${ssh_connection} = 42</msg>
<status status="PASS" endtime="20150623 08:20:01.059" starttime="20150623 08:20:00.499"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:01.065" starttime="20150623 08:20:01.064"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:20:01.068" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor42.log'.</msg>
<status status="PASS" endtime="20150623 08:20:01.071" starttime="20150623 08:20:01.066"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:01.072" starttime="20150623 08:20:01.061"></status>
</kw>
<msg timestamp="20150623 08:20:01.074" level="INFO">${ssh_connection} = 42</msg>
<status status="PASS" endtime="20150623 08:20:01.073" starttime="20150623 08:20:00.486"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:01.088" starttime="20150623 08:20:01.083"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:01.089" starttime="20150623 08:20:01.080"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:20:01.101" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:20:01.103" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:20:01.102" starttime="20150623 08:20:01.098"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:20:01.107" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:20:01.108" starttime="20150623 08:20:01.105"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:01.112" starttime="20150623 08:20:01.109"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:01.123" starttime="20150623 08:20:01.113"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:01.125" starttime="20150623 08:20:01.092"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:01.143" starttime="20150623 08:20:01.140"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:20:01.151" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:20:01.150" starttime="20150623 08:20:01.145"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:20:01.158" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:20:01.159" starttime="20150623 08:20:01.153"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:01.170" starttime="20150623 08:20:01.167"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:20:01.172" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:20:01.226" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:20:01.228" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:20:01.227" starttime="20150623 08:20:01.171"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:20:01.232" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:20:01.331" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:20:01.333" level="INFO">${processes_string} = 26820 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor42.log
26835 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
26853 ?        ...</msg>
<status status="PASS" endtime="20150623 08:20:01.332" starttime="20150623 08:20:01.229"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:20:01.339" level="INFO">@{processes_list} = [ 26820 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor42.log | 26835 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 26853 ?  ...</msg>
<status status="PASS" endtime="20150623 08:20:01.338" starttime="20150623 08:20:01.335"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 26820 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor42.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:20:01.347" level="INFO">${pid} = 26820</msg>
<status status="PASS" endtime="20150623 08:20:01.346" starttime="20150623 08:20:01.342"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:20:01.350" level="INFO">Executing command 'kill -9 26820'.</msg>
<msg timestamp="20150623 08:20:01.414" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:20:01.416" starttime="20150623 08:20:01.348"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:01.417" starttime="20150623 08:20:01.342"></status>
</kw>
<kw type="foritem" name="${process} = 26835 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:20:01.423" level="INFO">${pid} = 26835</msg>
<status status="PASS" endtime="20150623 08:20:01.422" starttime="20150623 08:20:01.419"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:20:01.427" level="INFO">Executing command 'kill -9 26835'.</msg>
<msg timestamp="20150623 08:20:01.510" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:20:01.512" starttime="20150623 08:20:01.425"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:01.513" starttime="20150623 08:20:01.418"></status>
</kw>
<kw type="foritem" name="${process} = 26853 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:20:01.519" level="INFO">${pid} = 26853</msg>
<status status="PASS" endtime="20150623 08:20:01.518" starttime="20150623 08:20:01.515"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:20:01.523" level="INFO">Executing command 'kill -9 26853'.</msg>
<msg timestamp="20150623 08:20:01.885" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:20:01.887" starttime="20150623 08:20:01.520"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:01.888" starttime="20150623 08:20:01.514"></status>
</kw>
<kw type="foritem" name="${process} = 26869 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:20:01.894" level="INFO">${pid} = 26869</msg>
<status status="PASS" endtime="20150623 08:20:01.893" starttime="20150623 08:20:01.890"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:20:01.915" level="INFO">Executing command 'kill -9 26869'.</msg>
<msg timestamp="20150623 08:20:02.017" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:20:02.019" starttime="20150623 08:20:01.895"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:02.021" starttime="20150623 08:20:01.888"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:02.022" starttime="20150623 08:20:01.340"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:02.024" starttime="20150623 08:20:01.161"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:20:02.029" level="INFO">Starting command 'cat tmpfilemonitor42.log'.</msg>
<status status="PASS" endtime="20150623 08:20:02.061" starttime="20150623 08:20:02.026"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:20:02.064" level="INFO">Reading output of command 'cat tmpfilemonitor42.log'.</msg>
<msg timestamp="20150623 08:20:02.148" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:20:02.150" level="INFO">${stdout_string} = [2015-06-23 06:19:47,685][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:20:02.149" starttime="20150623 08:20:02.062"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:20:02.154" level="INFO">Executing command 'rm tmpfilemonitor42.log'.</msg>
<msg timestamp="20150623 08:20:02.269" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:20:02.270" starttime="20150623 08:20:02.151"></status>
</kw>
<msg timestamp="20150623 08:20:02.274" level="INFO">${tailed_text} = [2015-06-23 06:19:47,685][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:20:02.272" starttime="20150623 08:20:01.134"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:02.283" starttime="20150623 08:20:02.276"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:02.294" starttime="20150623 08:20:02.291"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:20:02.298" starttime="20150623 08:20:02.296"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:02.303" starttime="20150623 08:20:02.285"></status>
</kw>
<msg timestamp="20150623 08:20:02.307" level="INFO">${tailed_text} = [2015-06-23 06:19:47,685][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:20:02.305" starttime="20150623 08:20:01.127"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:02.326" starttime="20150623 08:20:02.323"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:02.327" starttime="20150623 08:20:02.317"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:02.334" starttime="20150623 08:20:02.328"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:02.338" starttime="20150623 08:20:02.335"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:02.342" starttime="20150623 08:20:02.340"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:02.343" starttime="20150623 08:20:02.310"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:02.375" starttime="20150623 08:20:02.373"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:02.384" starttime="20150623 08:20:02.376"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:02.388" starttime="20150623 08:20:02.386"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:20:02.392" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:20:02.395" level="INFO">${queryResultSetLines} = 1004502|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:20:02.394" starttime="20150623 08:20:02.390"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:02.398" starttime="20150623 08:20:02.396"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:20:02.401" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:20:02.403" level="INFO">@{queryResultSet} = [ 1004502|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:20:02.402" starttime="20150623 08:20:02.399"></status>
</kw>
<msg timestamp="20150623 08:20:02.406" level="INFO">@{queryRows} = [ 1004502|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:20:02.405" starttime="20150623 08:20:02.366"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:20:02.410" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:20:02.412" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:20:02.411" starttime="20150623 08:20:02.407"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:20:02.416" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:20:02.418" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:20:02.417" starttime="20150623 08:20:02.414"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:20:02.426" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:20:02.427" starttime="20150623 08:20:02.425"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:02.427" starttime="20150623 08:20:02.419"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:02.430" starttime="20150623 08:20:02.428"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:02.431" starttime="20150623 08:20:02.357"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:02.432" starttime="20150623 08:20:00.467"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:02.433" starttime="20150623 08:20:00.460"></status>
</kw>
<msg timestamp="20150623 08:20:02.434" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:20:02.434" starttime="20150623 08:20:00.458"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:20:02.436" level="INFO">Index in the 2. loop: 9</msg>
<status status="PASS" endtime="20150623 08:20:02.436" starttime="20150623 08:20:02.435"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:20:05.438" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20150623 08:20:05.440" starttime="20150623 08:20:02.437"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:20:05.451" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:20:05.450" starttime="20150623 08:20:05.443"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:05.452" starttime="20150623 08:20:00.457"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:05.453" starttime="20150623 08:19:19.975"></status>
</kw>
<msg timestamp="20150623 08:20:05.457" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:20:05.455" starttime="20150623 08:19:19.969"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>For delay ${loopIdx} we had ${failure} failure(s)</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:20:05.461" level="INFO">For delay 3 we had None failure(s)</msg>
<status status="PASS" endtime="20150623 08:20:05.462" starttime="20150623 08:20:05.458"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:05.463" starttime="20150623 08:19:19.958"></status>
</kw>
<kw type="foritem" name="${loopIdx} = 4">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Sitting in first FOR, Loop No.: ${loopIdx}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:20:05.467" level="INFO">Sitting in first FOR, Loop No.: 4</msg>
<status status="PASS" endtime="20150623 08:20:05.469" starttime="20150623 08:20:05.465"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Timeout set to ${loopIdx} secs</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:20:05.472" level="INFO">Timeout set to 4 secs</msg>
<status status="PASS" endtime="20150623 08:20:05.473" starttime="20150623 08:20:05.470"></status>
</kw>
<kw type="kw" name="${failure} = Internal Loop">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${loopIdx}</arg>
</arguments>
<kw type="for" name="${index} IN RANGE [ 0 | 10 ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${index} = 0">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:05.536" starttime="20150623 08:20:05.534"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:05.598" starttime="20150623 08:20:05.545"></status>
</kw>
<msg timestamp="20150623 08:20:05.601" level="INFO">${ssh_connection} = 43</msg>
<status status="PASS" endtime="20150623 08:20:05.600" starttime="20150623 08:20:05.537"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:20:05.613" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:20:06.068" level="INFO">Read output: Last login: Tue Jun 23 06:20:00 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:20:06.070" starttime="20150623 08:20:05.610"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:06.072" starttime="20150623 08:20:05.603"></status>
</kw>
<msg timestamp="20150623 08:20:06.077" level="INFO">${ssh_connection} = 43</msg>
<status status="PASS" endtime="20150623 08:20:06.075" starttime="20150623 08:20:05.524"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:06.089" starttime="20150623 08:20:06.086"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:20:06.094" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor43.log'.</msg>
<status status="PASS" endtime="20150623 08:20:06.098" starttime="20150623 08:20:06.091"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:06.100" starttime="20150623 08:20:06.079"></status>
</kw>
<msg timestamp="20150623 08:20:06.103" level="INFO">${ssh_connection} = 43</msg>
<status status="PASS" endtime="20150623 08:20:06.101" starttime="20150623 08:20:05.511"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:06.129" starttime="20150623 08:20:06.122"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:06.131" starttime="20150623 08:20:06.116"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:20:06.142" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:20:06.145" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:20:06.144" starttime="20150623 08:20:06.140"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:20:06.149" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:20:06.150" starttime="20150623 08:20:06.146"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:06.153" starttime="20150623 08:20:06.151"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:06.163" starttime="20150623 08:20:06.155"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:06.164" starttime="20150623 08:20:06.133"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:06.184" starttime="20150623 08:20:06.182"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:20:06.192" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:20:06.192" starttime="20150623 08:20:06.186"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:20:06.201" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:20:06.202" starttime="20150623 08:20:06.194"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:06.213" starttime="20150623 08:20:06.210"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:20:06.216" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:20:06.263" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:20:06.265" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:20:06.264" starttime="20150623 08:20:06.214"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:20:06.269" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:20:06.365" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:20:06.367" level="INFO">${processes_string} = 27023 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor43.log
27038 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
27056 ?        ...</msg>
<status status="PASS" endtime="20150623 08:20:06.367" starttime="20150623 08:20:06.267"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:20:06.373" level="INFO">@{processes_list} = [ 27023 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor43.log | 27038 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 27056 ?  ...</msg>
<status status="PASS" endtime="20150623 08:20:06.372" starttime="20150623 08:20:06.369"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 27023 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor43.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:20:06.380" level="INFO">${pid} = 27023</msg>
<status status="PASS" endtime="20150623 08:20:06.379" starttime="20150623 08:20:06.376"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:20:06.384" level="INFO">Executing command 'kill -9 27023'.</msg>
<msg timestamp="20150623 08:20:06.447" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:20:06.448" starttime="20150623 08:20:06.381"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:06.449" starttime="20150623 08:20:06.375"></status>
</kw>
<kw type="foritem" name="${process} = 27038 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:20:06.455" level="INFO">${pid} = 27038</msg>
<status status="PASS" endtime="20150623 08:20:06.454" starttime="20150623 08:20:06.451"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:20:06.458" level="INFO">Executing command 'kill -9 27038'.</msg>
<msg timestamp="20150623 08:20:06.526" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:20:06.527" starttime="20150623 08:20:06.456"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:06.528" starttime="20150623 08:20:06.450"></status>
</kw>
<kw type="foritem" name="${process} = 27056 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:20:06.534" level="INFO">${pid} = 27056</msg>
<status status="PASS" endtime="20150623 08:20:06.533" starttime="20150623 08:20:06.530"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:20:06.538" level="INFO">Executing command 'kill -9 27056'.</msg>
<msg timestamp="20150623 08:20:06.601" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:20:06.602" starttime="20150623 08:20:06.535"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:06.603" starttime="20150623 08:20:06.529"></status>
</kw>
<kw type="foritem" name="${process} = 27072 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:20:06.609" level="INFO">${pid} = 27072</msg>
<status status="PASS" endtime="20150623 08:20:06.608" starttime="20150623 08:20:06.605"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:20:06.613" level="INFO">Executing command 'kill -9 27072'.</msg>
<msg timestamp="20150623 08:20:06.676" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:20:06.677" starttime="20150623 08:20:06.610"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:06.678" starttime="20150623 08:20:06.604"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:06.678" starttime="20150623 08:20:06.374"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:06.679" starttime="20150623 08:20:06.204"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:20:06.683" level="INFO">Starting command 'cat tmpfilemonitor43.log'.</msg>
<status status="PASS" endtime="20150623 08:20:06.719" starttime="20150623 08:20:06.681"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:20:06.722" level="INFO">Reading output of command 'cat tmpfilemonitor43.log'.</msg>
<msg timestamp="20150623 08:20:06.766" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:20:06.768" level="INFO">${stdout_string} = [2015-06-23 06:19:52,097][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:20:06.767" starttime="20150623 08:20:06.720"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:20:06.772" level="INFO">Executing command 'rm tmpfilemonitor43.log'.</msg>
<msg timestamp="20150623 08:20:06.849" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:20:06.850" starttime="20150623 08:20:06.769"></status>
</kw>
<msg timestamp="20150623 08:20:06.853" level="INFO">${tailed_text} = [2015-06-23 06:19:52,097][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:20:06.852" starttime="20150623 08:20:06.175"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:06.861" starttime="20150623 08:20:06.854"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:06.873" starttime="20150623 08:20:06.870"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:20:06.876" starttime="20150623 08:20:06.874"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:06.881" starttime="20150623 08:20:06.863"></status>
</kw>
<msg timestamp="20150623 08:20:06.884" level="INFO">${tailed_text} = [2015-06-23 06:19:52,097][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:20:06.883" starttime="20150623 08:20:06.168"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:06.902" starttime="20150623 08:20:06.899"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:06.903" starttime="20150623 08:20:06.893"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:06.910" starttime="20150623 08:20:06.905"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:06.915" starttime="20150623 08:20:06.912"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:06.918" starttime="20150623 08:20:06.916"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:06.920" starttime="20150623 08:20:06.887"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:06.951" starttime="20150623 08:20:06.949"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:06.963" starttime="20150623 08:20:06.952"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:06.967" starttime="20150623 08:20:06.965"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:20:06.971" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:20:06.973" level="INFO">${queryResultSetLines} = 1004503|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:20:06.973" starttime="20150623 08:20:06.968"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:06.977" starttime="20150623 08:20:06.975"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:20:06.981" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:20:06.982" level="INFO">@{queryResultSet} = [ 1004503|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:20:06.981" starttime="20150623 08:20:06.978"></status>
</kw>
<msg timestamp="20150623 08:20:06.985" level="INFO">@{queryRows} = [ 1004503|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:20:06.984" starttime="20150623 08:20:06.942"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:20:06.989" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:20:06.991" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:20:06.990" starttime="20150623 08:20:06.986"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:20:06.995" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:20:06.996" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:20:06.996" starttime="20150623 08:20:06.992"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:20:07.007" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:20:07.008" starttime="20150623 08:20:07.005"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:07.009" starttime="20150623 08:20:06.998"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:07.032" starttime="20150623 08:20:07.011"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:07.034" starttime="20150623 08:20:06.933"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:07.036" starttime="20150623 08:20:05.492"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:07.038" starttime="20150623 08:20:05.485"></status>
</kw>
<msg timestamp="20150623 08:20:07.042" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:20:07.040" starttime="20150623 08:20:05.483"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:20:07.046" level="INFO">Index in the 2. loop: 0</msg>
<status status="PASS" endtime="20150623 08:20:07.047" starttime="20150623 08:20:07.043"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:20:11.051" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20150623 08:20:11.054" starttime="20150623 08:20:07.048"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:20:11.064" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:20:11.063" starttime="20150623 08:20:11.057"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:11.065" starttime="20150623 08:20:05.482"></status>
</kw>
<kw type="foritem" name="${index} = 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:11.121" starttime="20150623 08:20:11.119"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:11.189" starttime="20150623 08:20:11.130"></status>
</kw>
<msg timestamp="20150623 08:20:11.192" level="INFO">${ssh_connection} = 44</msg>
<status status="PASS" endtime="20150623 08:20:11.191" starttime="20150623 08:20:11.122"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:20:11.204" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:20:11.619" level="INFO">Read output: Last login: Tue Jun 23 06:20:05 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:20:11.621" starttime="20150623 08:20:11.201"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:11.622" starttime="20150623 08:20:11.193"></status>
</kw>
<msg timestamp="20150623 08:20:11.625" level="INFO">${ssh_connection} = 44</msg>
<status status="PASS" endtime="20150623 08:20:11.624" starttime="20150623 08:20:11.109"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:11.638" starttime="20150623 08:20:11.635"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:20:11.642" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor44.log'.</msg>
<status status="PASS" endtime="20150623 08:20:11.647" starttime="20150623 08:20:11.639"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:11.648" starttime="20150623 08:20:11.628"></status>
</kw>
<msg timestamp="20150623 08:20:11.650" level="INFO">${ssh_connection} = 44</msg>
<status status="PASS" endtime="20150623 08:20:11.650" starttime="20150623 08:20:11.096"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:11.677" starttime="20150623 08:20:11.670"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:11.679" starttime="20150623 08:20:11.664"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:20:11.690" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:20:11.692" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:20:11.691" starttime="20150623 08:20:11.687"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:20:11.696" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:20:11.697" starttime="20150623 08:20:11.694"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:11.700" starttime="20150623 08:20:11.698"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:11.711" starttime="20150623 08:20:11.702"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:11.712" starttime="20150623 08:20:11.681"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:11.731" starttime="20150623 08:20:11.729"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:20:11.739" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:20:11.738" starttime="20150623 08:20:11.733"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:20:11.748" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:20:11.748" starttime="20150623 08:20:11.741"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:11.760" starttime="20150623 08:20:11.757"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:20:11.763" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:20:11.815" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:20:11.817" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:20:11.816" starttime="20150623 08:20:11.761"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:20:11.821" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:20:11.922" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:20:11.924" level="INFO">${processes_string} = 27197 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor44.log
27212 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
27230 ?        ...</msg>
<status status="PASS" endtime="20150623 08:20:11.923" starttime="20150623 08:20:11.818"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:20:11.929" level="INFO">@{processes_list} = [ 27197 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor44.log | 27212 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 27230 ?  ...</msg>
<status status="PASS" endtime="20150623 08:20:11.928" starttime="20150623 08:20:11.925"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 27197 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor44.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:20:11.936" level="INFO">${pid} = 27197</msg>
<status status="PASS" endtime="20150623 08:20:11.935" starttime="20150623 08:20:11.933"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:20:11.940" level="INFO">Executing command 'kill -9 27197'.</msg>
<msg timestamp="20150623 08:20:12.006" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:20:12.008" starttime="20150623 08:20:11.938"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:12.010" starttime="20150623 08:20:11.932"></status>
</kw>
<kw type="foritem" name="${process} = 27212 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:20:12.016" level="INFO">${pid} = 27212</msg>
<status status="PASS" endtime="20150623 08:20:12.015" starttime="20150623 08:20:12.012"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:20:12.019" level="INFO">Executing command 'kill -9 27212'.</msg>
<msg timestamp="20150623 08:20:12.081" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:20:12.082" starttime="20150623 08:20:12.017"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:12.083" starttime="20150623 08:20:12.011"></status>
</kw>
<kw type="foritem" name="${process} = 27230 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:20:12.088" level="INFO">${pid} = 27230</msg>
<status status="PASS" endtime="20150623 08:20:12.088" starttime="20150623 08:20:12.085"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:20:12.092" level="INFO">Executing command 'kill -9 27230'.</msg>
<msg timestamp="20150623 08:20:12.154" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:20:12.155" starttime="20150623 08:20:12.090"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:12.156" starttime="20150623 08:20:12.084"></status>
</kw>
<kw type="foritem" name="${process} = 27246 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:20:12.161" level="INFO">${pid} = 27246</msg>
<status status="PASS" endtime="20150623 08:20:12.161" starttime="20150623 08:20:12.158"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:20:12.165" level="INFO">Executing command 'kill -9 27246'.</msg>
<msg timestamp="20150623 08:20:12.227" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:20:12.229" starttime="20150623 08:20:12.163"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:12.229" starttime="20150623 08:20:12.157"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:12.230" starttime="20150623 08:20:11.931"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:12.232" starttime="20150623 08:20:11.750"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:20:12.236" level="INFO">Starting command 'cat tmpfilemonitor44.log'.</msg>
<status status="PASS" endtime="20150623 08:20:12.270" starttime="20150623 08:20:12.234"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:20:12.273" level="INFO">Reading output of command 'cat tmpfilemonitor44.log'.</msg>
<msg timestamp="20150623 08:20:12.308" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:20:12.310" level="INFO">${stdout_string} = [2015-06-23 06:19:56,606][INFO ][Camel (ticket-router) thread #44 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:20:12.309" starttime="20150623 08:20:12.272"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:20:12.314" level="INFO">Executing command 'rm tmpfilemonitor44.log'.</msg>
<msg timestamp="20150623 08:20:12.389" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:20:12.390" starttime="20150623 08:20:12.311"></status>
</kw>
<msg timestamp="20150623 08:20:12.394" level="INFO">${tailed_text} = [2015-06-23 06:19:56,606][INFO ][Camel (ticket-router) thread #44 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:20:12.392" starttime="20150623 08:20:11.722"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:12.403" starttime="20150623 08:20:12.395"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:12.414" starttime="20150623 08:20:12.411"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:20:12.417" starttime="20150623 08:20:12.415"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:12.426" starttime="20150623 08:20:12.404"></status>
</kw>
<msg timestamp="20150623 08:20:12.434" level="INFO">${tailed_text} = [2015-06-23 06:19:56,606][INFO ][Camel (ticket-router) thread #44 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:20:12.432" starttime="20150623 08:20:11.715"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:12.453" starttime="20150623 08:20:12.450"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:12.454" starttime="20150623 08:20:12.444"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:12.461" starttime="20150623 08:20:12.455"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:12.465" starttime="20150623 08:20:12.462"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:12.468" starttime="20150623 08:20:12.466"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:12.470" starttime="20150623 08:20:12.437"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:12.501" starttime="20150623 08:20:12.499"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:12.509" starttime="20150623 08:20:12.502"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:12.512" starttime="20150623 08:20:12.510"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:20:12.516" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:20:12.518" level="INFO">${queryResultSetLines} = 1004504|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:20:12.517" starttime="20150623 08:20:12.514"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:12.521" starttime="20150623 08:20:12.520"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:20:12.525" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:20:12.527" level="INFO">@{queryResultSet} = [ 1004504|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:20:12.526" starttime="20150623 08:20:12.523"></status>
</kw>
<msg timestamp="20150623 08:20:12.529" level="INFO">@{queryRows} = [ 1004504|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:20:12.528" starttime="20150623 08:20:12.492"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:20:12.534" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:20:12.535" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:20:12.535" starttime="20150623 08:20:12.531"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:20:12.539" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:20:12.541" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:20:12.540" starttime="20150623 08:20:12.537"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:20:12.550" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:20:12.550" starttime="20150623 08:20:12.548"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:12.551" starttime="20150623 08:20:12.542"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:12.554" starttime="20150623 08:20:12.552"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:12.555" starttime="20150623 08:20:12.483"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:12.555" starttime="20150623 08:20:11.077"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:12.556" starttime="20150623 08:20:11.070"></status>
</kw>
<msg timestamp="20150623 08:20:12.558" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:20:12.557" starttime="20150623 08:20:11.068"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:20:12.560" level="INFO">Index in the 2. loop: 1</msg>
<status status="PASS" endtime="20150623 08:20:12.560" starttime="20150623 08:20:12.559"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:20:16.563" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20150623 08:20:16.566" starttime="20150623 08:20:12.561"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:20:16.576" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:20:16.575" starttime="20150623 08:20:16.568"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:16.577" starttime="20150623 08:20:11.067"></status>
</kw>
<kw type="foritem" name="${index} = 2">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:16.633" starttime="20150623 08:20:16.630"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:16.700" starttime="20150623 08:20:16.641"></status>
</kw>
<msg timestamp="20150623 08:20:16.702" level="INFO">${ssh_connection} = 45</msg>
<status status="PASS" endtime="20150623 08:20:16.701" starttime="20150623 08:20:16.634"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:20:16.715" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:20:17.064" level="INFO">Read output: Last login: Tue Jun 23 06:20:11 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:20:17.066" starttime="20150623 08:20:16.712"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:17.068" starttime="20150623 08:20:16.704"></status>
</kw>
<msg timestamp="20150623 08:20:17.073" level="INFO">${ssh_connection} = 45</msg>
<status status="PASS" endtime="20150623 08:20:17.071" starttime="20150623 08:20:16.621"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:17.086" starttime="20150623 08:20:17.083"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:20:17.090" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor45.log'.</msg>
<status status="PASS" endtime="20150623 08:20:17.095" starttime="20150623 08:20:17.087"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:17.097" starttime="20150623 08:20:17.076"></status>
</kw>
<msg timestamp="20150623 08:20:17.100" level="INFO">${ssh_connection} = 45</msg>
<status status="PASS" endtime="20150623 08:20:17.098" starttime="20150623 08:20:16.608"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:17.127" starttime="20150623 08:20:17.120"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:17.128" starttime="20150623 08:20:17.113"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:20:17.139" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:20:17.142" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:20:17.141" starttime="20150623 08:20:17.136"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:20:17.145" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:20:17.146" starttime="20150623 08:20:17.143"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:17.150" starttime="20150623 08:20:17.148"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:17.161" starttime="20150623 08:20:17.151"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:17.162" starttime="20150623 08:20:17.130"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:17.182" starttime="20150623 08:20:17.179"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:20:17.190" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:20:17.189" starttime="20150623 08:20:17.183"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:20:17.196" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:20:17.197" starttime="20150623 08:20:17.191"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:17.208" starttime="20150623 08:20:17.206"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:20:17.212" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:20:17.256" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:20:17.258" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:20:17.257" starttime="20150623 08:20:17.210"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:20:17.262" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:20:17.356" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:20:17.357" level="INFO">${processes_string} = 27372 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor45.log
27387 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
27405 ?        ...</msg>
<status status="PASS" endtime="20150623 08:20:17.357" starttime="20150623 08:20:17.259"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:20:17.363" level="INFO">@{processes_list} = [ 27372 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor45.log | 27387 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 27405 ?  ...</msg>
<status status="PASS" endtime="20150623 08:20:17.362" starttime="20150623 08:20:17.359"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 27372 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor45.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:20:17.369" level="INFO">${pid} = 27372</msg>
<status status="PASS" endtime="20150623 08:20:17.368" starttime="20150623 08:20:17.366"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:20:17.373" level="INFO">Executing command 'kill -9 27372'.</msg>
<msg timestamp="20150623 08:20:17.435" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:20:17.436" starttime="20150623 08:20:17.370"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:17.437" starttime="20150623 08:20:17.364"></status>
</kw>
<kw type="foritem" name="${process} = 27387 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:20:17.442" level="INFO">${pid} = 27387</msg>
<status status="PASS" endtime="20150623 08:20:17.441" starttime="20150623 08:20:17.438"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:20:17.445" level="INFO">Executing command 'kill -9 27387'.</msg>
<msg timestamp="20150623 08:20:17.514" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:20:17.515" starttime="20150623 08:20:17.443"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:17.515" starttime="20150623 08:20:17.437"></status>
</kw>
<kw type="foritem" name="${process} = 27405 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:20:17.521" level="INFO">${pid} = 27405</msg>
<status status="PASS" endtime="20150623 08:20:17.520" starttime="20150623 08:20:17.517"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:20:17.528" level="INFO">Executing command 'kill -9 27405'.</msg>
<msg timestamp="20150623 08:20:17.591" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:20:17.592" starttime="20150623 08:20:17.526"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:17.593" starttime="20150623 08:20:17.516"></status>
</kw>
<kw type="foritem" name="${process} = 27421 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:20:17.598" level="INFO">${pid} = 27421</msg>
<status status="PASS" endtime="20150623 08:20:17.597" starttime="20150623 08:20:17.594"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:20:17.602" level="INFO">Executing command 'kill -9 27421'.</msg>
<msg timestamp="20150623 08:20:17.669" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:20:17.670" starttime="20150623 08:20:17.599"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:17.671" starttime="20150623 08:20:17.593"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:17.671" starttime="20150623 08:20:17.364"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:17.672" starttime="20150623 08:20:17.199"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:20:17.677" level="INFO">Starting command 'cat tmpfilemonitor45.log'.</msg>
<status status="PASS" endtime="20150623 08:20:17.712" starttime="20150623 08:20:17.674"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:20:17.715" level="INFO">Reading output of command 'cat tmpfilemonitor45.log'.</msg>
<msg timestamp="20150623 08:20:17.749" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:20:17.751" level="INFO">${stdout_string} = [2015-06-23 06:20:06,161][INFO ][Camel (ticket-router) thread #53 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150623 08:20:17.750" starttime="20150623 08:20:17.713"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:20:17.755" level="INFO">Executing command 'rm tmpfilemonitor45.log'.</msg>
<msg timestamp="20150623 08:20:17.830" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:20:17.831" starttime="20150623 08:20:17.753"></status>
</kw>
<msg timestamp="20150623 08:20:17.834" level="INFO">${tailed_text} = [2015-06-23 06:20:06,161][INFO ][Camel (ticket-router) thread #53 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150623 08:20:17.833" starttime="20150623 08:20:17.173"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:17.842" starttime="20150623 08:20:17.836"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:17.853" starttime="20150623 08:20:17.851"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:20:17.857" starttime="20150623 08:20:17.855"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:17.862" starttime="20150623 08:20:17.844"></status>
</kw>
<msg timestamp="20150623 08:20:17.865" level="INFO">${tailed_text} = [2015-06-23 06:20:06,161][INFO ][Camel (ticket-router) thread #53 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150623 08:20:17.864" starttime="20150623 08:20:17.165"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:17.883" starttime="20150623 08:20:17.880"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:17.884" starttime="20150623 08:20:17.874"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:17.891" starttime="20150623 08:20:17.885"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:17.895" starttime="20150623 08:20:17.892"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:17.899" starttime="20150623 08:20:17.897"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:17.900" starttime="20150623 08:20:17.868"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:17.931" starttime="20150623 08:20:17.930"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:17.940" starttime="20150623 08:20:17.933"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:17.943" starttime="20150623 08:20:17.941"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:20:17.947" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:20:17.949" level="INFO">${queryResultSetLines} = 1004505|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:20:17.949" starttime="20150623 08:20:17.945"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:17.953" starttime="20150623 08:20:17.951"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:20:17.956" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:20:17.958" level="INFO">@{queryResultSet} = [ 1004505|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:20:17.957" starttime="20150623 08:20:17.954"></status>
</kw>
<msg timestamp="20150623 08:20:17.960" level="INFO">@{queryRows} = [ 1004505|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:20:17.960" starttime="20150623 08:20:17.923"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:20:17.965" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:20:17.967" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:20:17.966" starttime="20150623 08:20:17.962"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:20:17.970" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:20:17.972" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:20:17.971" starttime="20150623 08:20:17.968"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:20:17.982" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:20:17.983" starttime="20150623 08:20:17.980"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:17.984" starttime="20150623 08:20:17.973"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:17.991" starttime="20150623 08:20:17.985"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:17.992" starttime="20150623 08:20:17.914"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:17.994" starttime="20150623 08:20:16.588"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:17.996" starttime="20150623 08:20:16.582"></status>
</kw>
<msg timestamp="20150623 08:20:17.999" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:20:17.998" starttime="20150623 08:20:16.579"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:20:18.003" level="INFO">Index in the 2. loop: 2</msg>
<status status="PASS" endtime="20150623 08:20:18.004" starttime="20150623 08:20:18.000"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:20:22.008" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20150623 08:20:22.011" starttime="20150623 08:20:18.006"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:20:22.021" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:20:22.020" starttime="20150623 08:20:22.013"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:22.022" starttime="20150623 08:20:16.578"></status>
</kw>
<kw type="foritem" name="${index} = 3">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:22.095" starttime="20150623 08:20:22.093"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:22.162" starttime="20150623 08:20:22.104"></status>
</kw>
<msg timestamp="20150623 08:20:22.164" level="INFO">${ssh_connection} = 46</msg>
<status status="PASS" endtime="20150623 08:20:22.163" starttime="20150623 08:20:22.097"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:20:22.177" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:20:22.615" level="INFO">Read output: Last login: Tue Jun 23 06:20:16 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:20:22.617" starttime="20150623 08:20:22.174"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:22.618" starttime="20150623 08:20:22.166"></status>
</kw>
<msg timestamp="20150623 08:20:22.621" level="INFO">${ssh_connection} = 46</msg>
<status status="PASS" endtime="20150623 08:20:22.620" starttime="20150623 08:20:22.083"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:22.634" starttime="20150623 08:20:22.631"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:20:22.638" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor46.log'.</msg>
<status status="PASS" endtime="20150623 08:20:22.643" starttime="20150623 08:20:22.635"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:22.644" starttime="20150623 08:20:22.624"></status>
</kw>
<msg timestamp="20150623 08:20:22.647" level="INFO">${ssh_connection} = 46</msg>
<status status="PASS" endtime="20150623 08:20:22.646" starttime="20150623 08:20:22.070"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:22.674" starttime="20150623 08:20:22.666"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:22.675" starttime="20150623 08:20:22.660"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:20:22.687" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:20:22.689" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:20:22.688" starttime="20150623 08:20:22.684"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:20:22.693" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:20:22.694" starttime="20150623 08:20:22.691"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:22.698" starttime="20150623 08:20:22.695"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:22.708" starttime="20150623 08:20:22.699"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:22.710" starttime="20150623 08:20:22.677"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:22.730" starttime="20150623 08:20:22.727"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:20:22.738" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:20:22.737" starttime="20150623 08:20:22.731"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:20:22.745" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:20:22.746" starttime="20150623 08:20:22.739"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:22.757" starttime="20150623 08:20:22.754"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:20:22.760" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:20:22.807" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:20:22.809" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:20:22.808" starttime="20150623 08:20:22.758"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:20:22.814" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:20:22.900" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:20:22.901" level="INFO">${processes_string} = 27546 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor46.log
27561 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
27579 ?        ...</msg>
<status status="PASS" endtime="20150623 08:20:22.901" starttime="20150623 08:20:22.811"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:20:22.907" level="INFO">@{processes_list} = [ 27546 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor46.log | 27561 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 27579 ?  ...</msg>
<status status="PASS" endtime="20150623 08:20:22.906" starttime="20150623 08:20:22.903"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 27546 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor46.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:20:22.913" level="INFO">${pid} = 27546</msg>
<status status="PASS" endtime="20150623 08:20:22.913" starttime="20150623 08:20:22.910"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:20:22.917" level="INFO">Executing command 'kill -9 27546'.</msg>
<msg timestamp="20150623 08:20:22.968" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:20:22.970" starttime="20150623 08:20:22.915"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:22.970" starttime="20150623 08:20:22.909"></status>
</kw>
<kw type="foritem" name="${process} = 27561 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:20:22.976" level="INFO">${pid} = 27561</msg>
<status status="PASS" endtime="20150623 08:20:22.975" starttime="20150623 08:20:22.972"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:20:22.979" level="INFO">Executing command 'kill -9 27561'.</msg>
<msg timestamp="20150623 08:20:23.036" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:20:23.037" starttime="20150623 08:20:22.977"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:23.039" starttime="20150623 08:20:22.971"></status>
</kw>
<kw type="foritem" name="${process} = 27579 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:20:23.045" level="INFO">${pid} = 27579</msg>
<status status="PASS" endtime="20150623 08:20:23.044" starttime="20150623 08:20:23.041"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:20:23.049" level="INFO">Executing command 'kill -9 27579'.</msg>
<msg timestamp="20150623 08:20:23.116" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:20:23.117" starttime="20150623 08:20:23.046"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:23.118" starttime="20150623 08:20:23.040"></status>
</kw>
<kw type="foritem" name="${process} = 27595 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:20:23.123" level="INFO">${pid} = 27595</msg>
<status status="PASS" endtime="20150623 08:20:23.123" starttime="20150623 08:20:23.120"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:20:23.127" level="INFO">Executing command 'kill -9 27595'.</msg>
<msg timestamp="20150623 08:20:23.196" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:20:23.197" starttime="20150623 08:20:23.125"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:23.198" starttime="20150623 08:20:23.119"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:23.199" starttime="20150623 08:20:22.908"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:23.200" starttime="20150623 08:20:22.748"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:20:23.205" level="INFO">Starting command 'cat tmpfilemonitor46.log'.</msg>
<status status="PASS" endtime="20150623 08:20:23.239" starttime="20150623 08:20:23.203"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:20:23.242" level="INFO">Reading output of command 'cat tmpfilemonitor46.log'.</msg>
<msg timestamp="20150623 08:20:23.278" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:20:23.280" level="INFO">${stdout_string} = [2015-06-23 06:20:11,708][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150623 08:20:23.279" starttime="20150623 08:20:23.241"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:20:23.284" level="INFO">Executing command 'rm tmpfilemonitor46.log'.</msg>
<msg timestamp="20150623 08:20:23.360" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:20:23.361" starttime="20150623 08:20:23.281"></status>
</kw>
<msg timestamp="20150623 08:20:23.365" level="INFO">${tailed_text} = [2015-06-23 06:20:11,708][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150623 08:20:23.363" starttime="20150623 08:20:22.720"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:23.373" starttime="20150623 08:20:23.366"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:23.384" starttime="20150623 08:20:23.382"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:20:23.388" starttime="20150623 08:20:23.386"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:23.393" starttime="20150623 08:20:23.375"></status>
</kw>
<msg timestamp="20150623 08:20:23.396" level="INFO">${tailed_text} = [2015-06-23 06:20:11,708][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150623 08:20:23.395" starttime="20150623 08:20:22.713"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:23.415" starttime="20150623 08:20:23.412"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:23.416" starttime="20150623 08:20:23.406"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:23.423" starttime="20150623 08:20:23.417"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:23.428" starttime="20150623 08:20:23.425"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:23.431" starttime="20150623 08:20:23.429"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:23.433" starttime="20150623 08:20:23.399"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:23.464" starttime="20150623 08:20:23.462"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:23.472" starttime="20150623 08:20:23.465"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:23.475" starttime="20150623 08:20:23.473"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:20:23.479" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:20:23.481" level="INFO">${queryResultSetLines} = 1004506|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:20:23.481" starttime="20150623 08:20:23.477"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:23.485" starttime="20150623 08:20:23.483"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:20:23.488" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:20:23.490" level="INFO">@{queryResultSet} = [ 1004506|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:20:23.489" starttime="20150623 08:20:23.486"></status>
</kw>
<msg timestamp="20150623 08:20:23.492" level="INFO">@{queryRows} = [ 1004506|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:20:23.492" starttime="20150623 08:20:23.455"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:20:23.497" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:20:23.498" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:20:23.498" starttime="20150623 08:20:23.494"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:20:23.502" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:20:23.504" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:20:23.503" starttime="20150623 08:20:23.500"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:20:23.514" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:20:23.515" starttime="20150623 08:20:23.512"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:23.516" starttime="20150623 08:20:23.505"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:23.523" starttime="20150623 08:20:23.517"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:23.525" starttime="20150623 08:20:23.446"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:23.526" starttime="20150623 08:20:22.051"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:23.528" starttime="20150623 08:20:22.043"></status>
</kw>
<msg timestamp="20150623 08:20:23.531" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:20:23.530" starttime="20150623 08:20:22.024"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:20:23.535" level="INFO">Index in the 2. loop: 3</msg>
<status status="PASS" endtime="20150623 08:20:23.536" starttime="20150623 08:20:23.533"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:20:27.540" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20150623 08:20:27.542" starttime="20150623 08:20:23.537"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:20:27.553" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:20:27.552" starttime="20150623 08:20:27.545"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:27.554" starttime="20150623 08:20:22.023"></status>
</kw>
<kw type="foritem" name="${index} = 4">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:27.609" starttime="20150623 08:20:27.606"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:27.674" starttime="20150623 08:20:27.617"></status>
</kw>
<msg timestamp="20150623 08:20:27.677" level="INFO">${ssh_connection} = 47</msg>
<status status="PASS" endtime="20150623 08:20:27.676" starttime="20150623 08:20:27.610"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:20:27.688" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:20:28.125" level="INFO">Read output: Last login: Tue Jun 23 06:20:22 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:20:28.127" starttime="20150623 08:20:27.685"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:28.129" starttime="20150623 08:20:27.678"></status>
</kw>
<msg timestamp="20150623 08:20:28.133" level="INFO">${ssh_connection} = 47</msg>
<status status="PASS" endtime="20150623 08:20:28.132" starttime="20150623 08:20:27.597"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:28.146" starttime="20150623 08:20:28.143"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:20:28.150" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor47.log'.</msg>
<status status="PASS" endtime="20150623 08:20:28.155" starttime="20150623 08:20:28.147"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:28.156" starttime="20150623 08:20:28.136"></status>
</kw>
<msg timestamp="20150623 08:20:28.160" level="INFO">${ssh_connection} = 47</msg>
<status status="PASS" endtime="20150623 08:20:28.158" starttime="20150623 08:20:27.584"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:28.183" starttime="20150623 08:20:28.177"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:28.183" starttime="20150623 08:20:28.173"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:20:28.188" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:20:28.189" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:20:28.189" starttime="20150623 08:20:28.187"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:20:28.191" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:20:28.191" starttime="20150623 08:20:28.190"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:28.193" starttime="20150623 08:20:28.192"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:28.201" starttime="20150623 08:20:28.193"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:28.202" starttime="20150623 08:20:28.184"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:28.210" starttime="20150623 08:20:28.209"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:20:28.214" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:20:28.214" starttime="20150623 08:20:28.211"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:20:28.218" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:20:28.219" starttime="20150623 08:20:28.215"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:28.224" starttime="20150623 08:20:28.222"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:20:28.225" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:20:28.271" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:20:28.272" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:20:28.272" starttime="20150623 08:20:28.224"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:20:28.275" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:20:28.373" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:20:28.375" level="INFO">${processes_string} = 27720 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor47.log
27735 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
27753 ?        ...</msg>
<status status="PASS" endtime="20150623 08:20:28.374" starttime="20150623 08:20:28.273"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:20:28.380" level="INFO">@{processes_list} = [ 27720 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor47.log | 27735 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 27753 ?  ...</msg>
<status status="PASS" endtime="20150623 08:20:28.380" starttime="20150623 08:20:28.377"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 27720 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor47.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:20:28.387" level="INFO">${pid} = 27720</msg>
<status status="PASS" endtime="20150623 08:20:28.386" starttime="20150623 08:20:28.383"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:20:28.391" level="INFO">Executing command 'kill -9 27720'.</msg>
<msg timestamp="20150623 08:20:28.439" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:20:28.440" starttime="20150623 08:20:28.388"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:28.441" starttime="20150623 08:20:28.382"></status>
</kw>
<kw type="foritem" name="${process} = 27735 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:20:28.446" level="INFO">${pid} = 27735</msg>
<status status="PASS" endtime="20150623 08:20:28.446" starttime="20150623 08:20:28.443"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:20:28.450" level="INFO">Executing command 'kill -9 27735'.</msg>
<msg timestamp="20150623 08:20:28.508" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:20:28.509" starttime="20150623 08:20:28.448"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:28.510" starttime="20150623 08:20:28.442"></status>
</kw>
<kw type="foritem" name="${process} = 27753 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:20:28.515" level="INFO">${pid} = 27753</msg>
<status status="PASS" endtime="20150623 08:20:28.514" starttime="20150623 08:20:28.512"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:20:28.519" level="INFO">Executing command 'kill -9 27753'.</msg>
<msg timestamp="20150623 08:20:28.586" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:20:28.587" starttime="20150623 08:20:28.517"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:28.588" starttime="20150623 08:20:28.511"></status>
</kw>
<kw type="foritem" name="${process} = 27769 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:20:28.593" level="INFO">${pid} = 27769</msg>
<status status="PASS" endtime="20150623 08:20:28.593" starttime="20150623 08:20:28.590"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:20:28.597" level="INFO">Executing command 'kill -9 27769'.</msg>
<msg timestamp="20150623 08:20:28.667" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:20:28.668" starttime="20150623 08:20:28.595"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:28.668" starttime="20150623 08:20:28.589"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:28.669" starttime="20150623 08:20:28.381"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:28.670" starttime="20150623 08:20:28.219"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:20:28.673" level="INFO">Starting command 'cat tmpfilemonitor47.log'.</msg>
<status status="PASS" endtime="20150623 08:20:28.709" starttime="20150623 08:20:28.671"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:20:28.712" level="INFO">Reading output of command 'cat tmpfilemonitor47.log'.</msg>
<msg timestamp="20150623 08:20:28.749" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:20:28.750" level="INFO">${stdout_string} = [2015-06-23 06:20:15,883][INFO ][Camel (ticket-router) thread #197 - JmsConsumer[inew-cs.provisioning]][StandardTicketRoute                               ][  96] Received ticket [ticket=1.0|321|2015-0...</msg>
<status status="PASS" endtime="20150623 08:20:28.750" starttime="20150623 08:20:28.710"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:20:28.754" level="INFO">Executing command 'rm tmpfilemonitor47.log'.</msg>
<msg timestamp="20150623 08:20:28.831" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:20:28.832" starttime="20150623 08:20:28.752"></status>
</kw>
<msg timestamp="20150623 08:20:28.835" level="INFO">${tailed_text} = [2015-06-23 06:20:15,883][INFO ][Camel (ticket-router) thread #197 - JmsConsumer[inew-cs.provisioning]][StandardTicketRoute                               ][  96] Received ticket [ticket=1.0|321|2015-0...</msg>
<status status="PASS" endtime="20150623 08:20:28.834" starttime="20150623 08:20:28.206"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:28.862" starttime="20150623 08:20:28.836"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:28.874" starttime="20150623 08:20:28.871"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:20:28.877" starttime="20150623 08:20:28.875"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:28.882" starttime="20150623 08:20:28.865"></status>
</kw>
<msg timestamp="20150623 08:20:28.884" level="INFO">${tailed_text} = [2015-06-23 06:20:15,883][INFO ][Camel (ticket-router) thread #197 - JmsConsumer[inew-cs.provisioning]][StandardTicketRoute                               ][  96] Received ticket [ticket=1.0|321|2015-0...</msg>
<status status="PASS" endtime="20150623 08:20:28.883" starttime="20150623 08:20:28.203"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:28.902" starttime="20150623 08:20:28.900"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:28.903" starttime="20150623 08:20:28.894"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:28.910" starttime="20150623 08:20:28.905"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:28.914" starttime="20150623 08:20:28.912"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:28.918" starttime="20150623 08:20:28.916"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:28.919" starttime="20150623 08:20:28.887"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:28.950" starttime="20150623 08:20:28.948"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:28.960" starttime="20150623 08:20:28.951"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:28.963" starttime="20150623 08:20:28.961"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:20:28.967" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:20:28.969" level="INFO">${queryResultSetLines} = 1004507|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:20:28.969" starttime="20150623 08:20:28.965"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:28.973" starttime="20150623 08:20:28.971"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:20:28.976" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:20:28.978" level="INFO">@{queryResultSet} = [ 1004507|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:20:28.977" starttime="20150623 08:20:28.974"></status>
</kw>
<msg timestamp="20150623 08:20:28.980" level="INFO">@{queryRows} = [ 1004507|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:20:28.980" starttime="20150623 08:20:28.942"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:20:28.985" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:20:28.986" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:20:28.986" starttime="20150623 08:20:28.982"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:20:28.990" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:20:28.992" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:20:28.991" starttime="20150623 08:20:28.988"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:20:29.002" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:20:29.003" starttime="20150623 08:20:29.000"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:29.004" starttime="20150623 08:20:28.993"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:29.012" starttime="20150623 08:20:29.007"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:29.014" starttime="20150623 08:20:28.933"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:29.016" starttime="20150623 08:20:27.565"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:29.018" starttime="20150623 08:20:27.558"></status>
</kw>
<msg timestamp="20150623 08:20:29.021" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:20:29.020" starttime="20150623 08:20:27.556"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:20:29.025" level="INFO">Index in the 2. loop: 4</msg>
<status status="PASS" endtime="20150623 08:20:29.026" starttime="20150623 08:20:29.022"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:20:33.030" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20150623 08:20:33.034" starttime="20150623 08:20:29.027"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:20:33.044" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:20:33.043" starttime="20150623 08:20:33.036"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:33.045" starttime="20150623 08:20:27.555"></status>
</kw>
<kw type="foritem" name="${index} = 5">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:33.106" starttime="20150623 08:20:33.104"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:33.173" starttime="20150623 08:20:33.115"></status>
</kw>
<msg timestamp="20150623 08:20:33.176" level="INFO">${ssh_connection} = 48</msg>
<status status="PASS" endtime="20150623 08:20:33.175" starttime="20150623 08:20:33.107"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:20:33.187" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:20:33.609" level="INFO">Read output: Last login: Tue Jun 23 06:20:27 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:20:33.610" starttime="20150623 08:20:33.185"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:33.610" starttime="20150623 08:20:33.177"></status>
</kw>
<msg timestamp="20150623 08:20:33.612" level="INFO">${ssh_connection} = 48</msg>
<status status="PASS" endtime="20150623 08:20:33.612" starttime="20150623 08:20:33.094"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:33.618" starttime="20150623 08:20:33.617"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:20:33.620" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor48.log'.</msg>
<status status="PASS" endtime="20150623 08:20:33.623" starttime="20150623 08:20:33.618"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:33.624" starttime="20150623 08:20:33.613"></status>
</kw>
<msg timestamp="20150623 08:20:33.625" level="INFO">${ssh_connection} = 48</msg>
<status status="PASS" endtime="20150623 08:20:33.625" starttime="20150623 08:20:33.081"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:33.639" starttime="20150623 08:20:33.634"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:33.641" starttime="20150623 08:20:33.631"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:20:33.652" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:20:33.655" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:20:33.654" starttime="20150623 08:20:33.649"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:20:33.658" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:20:33.659" starttime="20150623 08:20:33.656"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:33.663" starttime="20150623 08:20:33.660"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:33.675" starttime="20150623 08:20:33.664"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:33.677" starttime="20150623 08:20:33.643"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:33.696" starttime="20150623 08:20:33.693"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:20:33.703" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:20:33.703" starttime="20150623 08:20:33.697"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:20:33.709" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:20:33.710" starttime="20150623 08:20:33.705"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:33.721" starttime="20150623 08:20:33.719"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:20:33.724" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:20:33.773" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:20:33.774" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:20:33.774" starttime="20150623 08:20:33.723"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:20:33.779" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:20:33.872" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:20:33.874" level="INFO">${processes_string} = 27894 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor48.log
27909 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
27927 ?        ...</msg>
<status status="PASS" endtime="20150623 08:20:33.873" starttime="20150623 08:20:33.776"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:20:33.879" level="INFO">@{processes_list} = [ 27894 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor48.log | 27909 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 27927 ?  ...</msg>
<status status="PASS" endtime="20150623 08:20:33.878" starttime="20150623 08:20:33.875"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 27894 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor48.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:20:33.886" level="INFO">${pid} = 27894</msg>
<status status="PASS" endtime="20150623 08:20:33.885" starttime="20150623 08:20:33.882"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:20:33.890" level="INFO">Executing command 'kill -9 27894'.</msg>
<msg timestamp="20150623 08:20:33.954" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:20:33.955" starttime="20150623 08:20:33.887"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:33.956" starttime="20150623 08:20:33.881"></status>
</kw>
<kw type="foritem" name="${process} = 27909 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:20:33.962" level="INFO">${pid} = 27909</msg>
<status status="PASS" endtime="20150623 08:20:33.961" starttime="20150623 08:20:33.958"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:20:33.966" level="INFO">Executing command 'kill -9 27909'.</msg>
<msg timestamp="20150623 08:20:34.032" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:20:34.033" starttime="20150623 08:20:33.964"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:34.035" starttime="20150623 08:20:33.957"></status>
</kw>
<kw type="foritem" name="${process} = 27927 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:20:34.042" level="INFO">${pid} = 27927</msg>
<status status="PASS" endtime="20150623 08:20:34.041" starttime="20150623 08:20:34.038"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:20:34.047" level="INFO">Executing command 'kill -9 27927'.</msg>
<msg timestamp="20150623 08:20:34.113" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:20:34.114" starttime="20150623 08:20:34.044"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:34.116" starttime="20150623 08:20:34.037"></status>
</kw>
<kw type="foritem" name="${process} = 27943 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:20:34.121" level="INFO">${pid} = 27943</msg>
<status status="PASS" endtime="20150623 08:20:34.121" starttime="20150623 08:20:34.117"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:20:34.126" level="INFO">Executing command 'kill -9 27943'.</msg>
<msg timestamp="20150623 08:20:34.195" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:20:34.196" starttime="20150623 08:20:34.123"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:34.197" starttime="20150623 08:20:34.116"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:34.198" starttime="20150623 08:20:33.880"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:34.200" starttime="20150623 08:20:33.712"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:20:34.205" level="INFO">Starting command 'cat tmpfilemonitor48.log'.</msg>
<status status="PASS" endtime="20150623 08:20:34.238" starttime="20150623 08:20:34.202"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:20:34.242" level="INFO">Reading output of command 'cat tmpfilemonitor48.log'.</msg>
<msg timestamp="20150623 08:20:34.277" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:20:34.279" level="INFO">${stdout_string} = [2015-06-23 06:20:17,193][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:20:34.278" starttime="20150623 08:20:34.240"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:20:34.283" level="INFO">Executing command 'rm tmpfilemonitor48.log'.</msg>
<msg timestamp="20150623 08:20:34.360" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:20:34.361" starttime="20150623 08:20:34.280"></status>
</kw>
<msg timestamp="20150623 08:20:34.365" level="INFO">${tailed_text} = [2015-06-23 06:20:17,193][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:20:34.363" starttime="20150623 08:20:33.687"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:34.373" starttime="20150623 08:20:34.366"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:34.384" starttime="20150623 08:20:34.381"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:20:34.387" starttime="20150623 08:20:34.385"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:34.393" starttime="20150623 08:20:34.375"></status>
</kw>
<msg timestamp="20150623 08:20:34.397" level="INFO">${tailed_text} = [2015-06-23 06:20:17,193][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:20:34.395" starttime="20150623 08:20:33.680"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:34.415" starttime="20150623 08:20:34.412"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:34.416" starttime="20150623 08:20:34.406"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:34.423" starttime="20150623 08:20:34.417"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:34.427" starttime="20150623 08:20:34.424"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:34.431" starttime="20150623 08:20:34.428"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:34.432" starttime="20150623 08:20:34.400"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:34.463" starttime="20150623 08:20:34.461"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:34.471" starttime="20150623 08:20:34.464"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:34.474" starttime="20150623 08:20:34.472"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:20:34.478" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:20:34.480" level="INFO">${queryResultSetLines} = 1004508|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:20:34.479" starttime="20150623 08:20:34.475"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:34.483" starttime="20150623 08:20:34.481"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:20:34.487" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:20:34.489" level="INFO">@{queryResultSet} = [ 1004508|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:20:34.488" starttime="20150623 08:20:34.485"></status>
</kw>
<msg timestamp="20150623 08:20:34.491" level="INFO">@{queryRows} = [ 1004508|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:20:34.490" starttime="20150623 08:20:34.454"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:20:34.495" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:20:34.497" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:20:34.496" starttime="20150623 08:20:34.492"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:20:34.500" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:20:34.502" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:20:34.501" starttime="20150623 08:20:34.498"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:20:34.512" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:20:34.513" starttime="20150623 08:20:34.510"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:34.515" starttime="20150623 08:20:34.503"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:34.521" starttime="20150623 08:20:34.516"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:34.539" starttime="20150623 08:20:34.446"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:34.540" starttime="20150623 08:20:33.062"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:34.543" starttime="20150623 08:20:33.055"></status>
</kw>
<msg timestamp="20150623 08:20:34.546" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:20:34.545" starttime="20150623 08:20:33.053"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:20:34.550" level="INFO">Index in the 2. loop: 5</msg>
<status status="PASS" endtime="20150623 08:20:34.551" starttime="20150623 08:20:34.547"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:20:38.555" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20150623 08:20:38.557" starttime="20150623 08:20:34.552"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:20:38.568" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:20:38.567" starttime="20150623 08:20:38.560"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:38.569" starttime="20150623 08:20:33.046"></status>
</kw>
<kw type="foritem" name="${index} = 6">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:38.623" starttime="20150623 08:20:38.621"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:38.687" starttime="20150623 08:20:38.632"></status>
</kw>
<msg timestamp="20150623 08:20:38.690" level="INFO">${ssh_connection} = 49</msg>
<status status="PASS" endtime="20150623 08:20:38.689" starttime="20150623 08:20:38.625"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:20:38.702" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:20:39.142" level="INFO">Read output: Last login: Tue Jun 23 06:20:33 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:20:39.144" starttime="20150623 08:20:38.700"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:39.146" starttime="20150623 08:20:38.691"></status>
</kw>
<msg timestamp="20150623 08:20:39.150" level="INFO">${ssh_connection} = 49</msg>
<status status="PASS" endtime="20150623 08:20:39.149" starttime="20150623 08:20:38.612"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:39.163" starttime="20150623 08:20:39.160"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:20:39.167" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor49.log'.</msg>
<status status="PASS" endtime="20150623 08:20:39.171" starttime="20150623 08:20:39.164"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:39.173" starttime="20150623 08:20:39.153"></status>
</kw>
<msg timestamp="20150623 08:20:39.175" level="INFO">${ssh_connection} = 49</msg>
<status status="PASS" endtime="20150623 08:20:39.174" starttime="20150623 08:20:38.599"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:39.189" starttime="20150623 08:20:39.184"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:39.191" starttime="20150623 08:20:39.181"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:20:39.202" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:20:39.205" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:20:39.204" starttime="20150623 08:20:39.199"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:20:39.222" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:20:39.223" starttime="20150623 08:20:39.219"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:39.226" starttime="20150623 08:20:39.224"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:39.238" starttime="20150623 08:20:39.227"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:39.239" starttime="20150623 08:20:39.193"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:39.258" starttime="20150623 08:20:39.256"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:20:39.266" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:20:39.265" starttime="20150623 08:20:39.260"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:20:39.272" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:20:39.273" starttime="20150623 08:20:39.267"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:39.284" starttime="20150623 08:20:39.282"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:20:39.287" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:20:39.334" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:20:39.336" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:20:39.335" starttime="20150623 08:20:39.285"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:20:39.340" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:20:39.433" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:20:39.435" level="INFO">${processes_string} = 28068 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor49.log
28083 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
28101 ?        ...</msg>
<status status="PASS" endtime="20150623 08:20:39.434" starttime="20150623 08:20:39.337"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:20:39.440" level="INFO">@{processes_list} = [ 28068 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor49.log | 28083 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 28101 ?  ...</msg>
<status status="PASS" endtime="20150623 08:20:39.439" starttime="20150623 08:20:39.436"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 28068 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor49.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:20:39.447" level="INFO">${pid} = 28068</msg>
<status status="PASS" endtime="20150623 08:20:39.446" starttime="20150623 08:20:39.443"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:20:39.450" level="INFO">Executing command 'kill -9 28068'.</msg>
<msg timestamp="20150623 08:20:39.512" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:20:39.513" starttime="20150623 08:20:39.448"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:39.514" starttime="20150623 08:20:39.442"></status>
</kw>
<kw type="foritem" name="${process} = 28083 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:20:39.519" level="INFO">${pid} = 28083</msg>
<status status="PASS" endtime="20150623 08:20:39.518" starttime="20150623 08:20:39.516"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:20:39.523" level="INFO">Executing command 'kill -9 28083'.</msg>
<msg timestamp="20150623 08:20:39.599" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:20:39.600" starttime="20150623 08:20:39.521"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:39.601" starttime="20150623 08:20:39.515"></status>
</kw>
<kw type="foritem" name="${process} = 28101 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:20:39.606" level="INFO">${pid} = 28101</msg>
<status status="PASS" endtime="20150623 08:20:39.606" starttime="20150623 08:20:39.603"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:20:39.610" level="INFO">Executing command 'kill -9 28101'.</msg>
<msg timestamp="20150623 08:20:39.682" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:20:39.683" starttime="20150623 08:20:39.608"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:39.684" starttime="20150623 08:20:39.602"></status>
</kw>
<kw type="foritem" name="${process} = 28117 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:20:39.689" level="INFO">${pid} = 28117</msg>
<status status="PASS" endtime="20150623 08:20:39.689" starttime="20150623 08:20:39.686"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:20:39.693" level="INFO">Executing command 'kill -9 28117'.</msg>
<msg timestamp="20150623 08:20:39.763" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:20:39.764" starttime="20150623 08:20:39.691"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:39.765" starttime="20150623 08:20:39.685"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:39.766" starttime="20150623 08:20:39.441"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:39.767" starttime="20150623 08:20:39.275"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:20:39.770" level="INFO">Starting command 'cat tmpfilemonitor49.log'.</msg>
<status status="PASS" endtime="20150623 08:20:39.806" starttime="20150623 08:20:39.768"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:20:39.809" level="INFO">Reading output of command 'cat tmpfilemonitor49.log'.</msg>
<msg timestamp="20150623 08:20:39.847" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:20:39.848" level="INFO">${stdout_string} = [2015-06-23 06:20:22,745][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:20:39.848" starttime="20150623 08:20:39.807"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:20:39.852" level="INFO">Executing command 'rm tmpfilemonitor49.log'.</msg>
<msg timestamp="20150623 08:20:39.927" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:20:39.928" starttime="20150623 08:20:39.850"></status>
</kw>
<msg timestamp="20150623 08:20:39.931" level="INFO">${tailed_text} = [2015-06-23 06:20:22,745][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:20:39.930" starttime="20150623 08:20:39.250"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:39.939" starttime="20150623 08:20:39.932"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:39.950" starttime="20150623 08:20:39.948"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:20:39.954" starttime="20150623 08:20:39.952"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:39.960" starttime="20150623 08:20:39.941"></status>
</kw>
<msg timestamp="20150623 08:20:39.962" level="INFO">${tailed_text} = [2015-06-23 06:20:22,745][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:20:39.962" starttime="20150623 08:20:39.242"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:39.981" starttime="20150623 08:20:39.978"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:39.982" starttime="20150623 08:20:39.972"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:39.989" starttime="20150623 08:20:39.983"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:39.993" starttime="20150623 08:20:39.990"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:39.997" starttime="20150623 08:20:39.994"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:39.998" starttime="20150623 08:20:39.965"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:40.029" starttime="20150623 08:20:40.027"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:40.040" starttime="20150623 08:20:40.030"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:40.043" starttime="20150623 08:20:40.041"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:20:40.047" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:20:40.050" level="INFO">${queryResultSetLines} = 1004509|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:20:40.049" starttime="20150623 08:20:40.045"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:40.053" starttime="20150623 08:20:40.051"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:20:40.057" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:20:40.059" level="INFO">@{queryResultSet} = [ 1004509|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:20:40.058" starttime="20150623 08:20:40.054"></status>
</kw>
<msg timestamp="20150623 08:20:40.061" level="INFO">@{queryRows} = [ 1004509|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:20:40.060" starttime="20150623 08:20:40.020"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:20:40.065" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:20:40.067" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:20:40.066" starttime="20150623 08:20:40.063"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:20:40.071" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:20:40.072" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:20:40.072" starttime="20150623 08:20:40.069"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:20:40.083" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:20:40.084" starttime="20150623 08:20:40.080"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:40.085" starttime="20150623 08:20:40.074"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:40.092" starttime="20150623 08:20:40.086"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:40.093" starttime="20150623 08:20:40.011"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:40.095" starttime="20150623 08:20:38.580"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:40.097" starttime="20150623 08:20:38.573"></status>
</kw>
<msg timestamp="20150623 08:20:40.100" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:20:40.099" starttime="20150623 08:20:38.571"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:20:40.104" level="INFO">Index in the 2. loop: 6</msg>
<status status="PASS" endtime="20150623 08:20:40.105" starttime="20150623 08:20:40.101"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:20:44.110" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20150623 08:20:44.112" starttime="20150623 08:20:40.106"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:20:44.122" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:20:44.121" starttime="20150623 08:20:44.114"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:44.123" starttime="20150623 08:20:38.570"></status>
</kw>
<kw type="foritem" name="${index} = 7">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:44.178" starttime="20150623 08:20:44.176"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:44.243" starttime="20150623 08:20:44.187"></status>
</kw>
<msg timestamp="20150623 08:20:44.245" level="INFO">${ssh_connection} = 50</msg>
<status status="PASS" endtime="20150623 08:20:44.244" starttime="20150623 08:20:44.180"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:20:44.256" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:20:44.681" level="INFO">Read output: Last login: Tue Jun 23 06:20:38 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:20:44.682" starttime="20150623 08:20:44.253"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:44.682" starttime="20150623 08:20:44.246"></status>
</kw>
<msg timestamp="20150623 08:20:44.684" level="INFO">${ssh_connection} = 50</msg>
<status status="PASS" endtime="20150623 08:20:44.683" starttime="20150623 08:20:44.166"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:44.690" starttime="20150623 08:20:44.688"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:20:44.692" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor50.log'.</msg>
<status status="PASS" endtime="20150623 08:20:44.695" starttime="20150623 08:20:44.690"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:44.696" starttime="20150623 08:20:44.685"></status>
</kw>
<msg timestamp="20150623 08:20:44.697" level="INFO">${ssh_connection} = 50</msg>
<status status="PASS" endtime="20150623 08:20:44.697" starttime="20150623 08:20:44.153"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:44.711" starttime="20150623 08:20:44.706"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:44.712" starttime="20150623 08:20:44.703"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:20:44.724" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:20:44.730" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:20:44.729" starttime="20150623 08:20:44.721"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:20:44.734" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:20:44.735" starttime="20150623 08:20:44.732"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:44.738" starttime="20150623 08:20:44.736"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:44.750" starttime="20150623 08:20:44.740"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:44.751" starttime="20150623 08:20:44.714"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:44.770" starttime="20150623 08:20:44.767"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:20:44.778" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:20:44.777" starttime="20150623 08:20:44.771"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:20:44.783" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:20:44.784" starttime="20150623 08:20:44.779"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:44.795" starttime="20150623 08:20:44.792"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:20:44.798" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:20:44.845" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:20:44.847" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:20:44.846" starttime="20150623 08:20:44.796"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:20:44.852" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:20:44.960" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:20:44.962" level="INFO">${processes_string} = 28243 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor50.log
28258 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
28276 ?        ...</msg>
<status status="PASS" endtime="20150623 08:20:44.961" starttime="20150623 08:20:44.849"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:20:44.967" level="INFO">@{processes_list} = [ 28243 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor50.log | 28258 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 28276 ?  ...</msg>
<status status="PASS" endtime="20150623 08:20:44.966" starttime="20150623 08:20:44.963"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 28243 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor50.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:20:44.974" level="INFO">${pid} = 28243</msg>
<status status="PASS" endtime="20150623 08:20:44.973" starttime="20150623 08:20:44.970"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:20:44.977" level="INFO">Executing command 'kill -9 28243'.</msg>
<msg timestamp="20150623 08:20:45.048" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:20:45.050" starttime="20150623 08:20:44.975"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:45.052" starttime="20150623 08:20:44.969"></status>
</kw>
<kw type="foritem" name="${process} = 28258 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:20:45.058" level="INFO">${pid} = 28258</msg>
<status status="PASS" endtime="20150623 08:20:45.057" starttime="20150623 08:20:45.054"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:20:45.062" level="INFO">Executing command 'kill -9 28258'.</msg>
<msg timestamp="20150623 08:20:45.138" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:20:45.139" starttime="20150623 08:20:45.059"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:45.140" starttime="20150623 08:20:45.053"></status>
</kw>
<kw type="foritem" name="${process} = 28276 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:20:45.145" level="INFO">${pid} = 28276</msg>
<status status="PASS" endtime="20150623 08:20:45.145" starttime="20150623 08:20:45.142"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:20:45.149" level="INFO">Executing command 'kill -9 28276'.</msg>
<msg timestamp="20150623 08:20:45.227" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:20:45.228" starttime="20150623 08:20:45.147"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:45.229" starttime="20150623 08:20:45.141"></status>
</kw>
<kw type="foritem" name="${process} = 28292 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:20:45.234" level="INFO">${pid} = 28292</msg>
<status status="PASS" endtime="20150623 08:20:45.233" starttime="20150623 08:20:45.230"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:20:45.238" level="INFO">Executing command 'kill -9 28292'.</msg>
<msg timestamp="20150623 08:20:45.315" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:20:45.316" starttime="20150623 08:20:45.235"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:45.317" starttime="20150623 08:20:45.229"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:45.318" starttime="20150623 08:20:44.968"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:45.320" starttime="20150623 08:20:44.786"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:20:45.324" level="INFO">Starting command 'cat tmpfilemonitor50.log'.</msg>
<status status="PASS" endtime="20150623 08:20:45.358" starttime="20150623 08:20:45.322"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:20:45.361" level="INFO">Reading output of command 'cat tmpfilemonitor50.log'.</msg>
<msg timestamp="20150623 08:20:45.398" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:20:45.400" level="INFO">${stdout_string} = [2015-06-23 06:20:28,234][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:20:45.399" starttime="20150623 08:20:45.359"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:20:45.404" level="INFO">Executing command 'rm tmpfilemonitor50.log'.</msg>
<msg timestamp="20150623 08:20:45.480" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:20:45.481" starttime="20150623 08:20:45.401"></status>
</kw>
<msg timestamp="20150623 08:20:45.485" level="INFO">${tailed_text} = [2015-06-23 06:20:28,234][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:20:45.483" starttime="20150623 08:20:44.761"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:45.493" starttime="20150623 08:20:45.486"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:45.504" starttime="20150623 08:20:45.501"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:20:45.507" starttime="20150623 08:20:45.505"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:45.512" starttime="20150623 08:20:45.495"></status>
</kw>
<msg timestamp="20150623 08:20:45.516" level="INFO">${tailed_text} = [2015-06-23 06:20:28,234][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:20:45.514" starttime="20150623 08:20:44.754"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:45.554" starttime="20150623 08:20:45.551"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:45.555" starttime="20150623 08:20:45.526"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:45.562" starttime="20150623 08:20:45.556"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:45.566" starttime="20150623 08:20:45.563"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:45.569" starttime="20150623 08:20:45.567"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:45.571" starttime="20150623 08:20:45.519"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:45.602" starttime="20150623 08:20:45.600"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:45.610" starttime="20150623 08:20:45.603"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:45.613" starttime="20150623 08:20:45.611"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:20:45.618" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:20:45.620" level="INFO">${queryResultSetLines} = 1004510|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:20:45.619" starttime="20150623 08:20:45.615"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:45.623" starttime="20150623 08:20:45.621"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:20:45.627" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:20:45.628" level="INFO">@{queryResultSet} = [ 1004510|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:20:45.627" starttime="20150623 08:20:45.624"></status>
</kw>
<msg timestamp="20150623 08:20:45.631" level="INFO">@{queryRows} = [ 1004510|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:20:45.630" starttime="20150623 08:20:45.593"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:20:45.635" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:20:45.637" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:20:45.636" starttime="20150623 08:20:45.632"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:20:45.640" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:20:45.642" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:20:45.641" starttime="20150623 08:20:45.638"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:20:45.652" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:20:45.653" starttime="20150623 08:20:45.650"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:45.654" starttime="20150623 08:20:45.643"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:45.661" starttime="20150623 08:20:45.655"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:45.662" starttime="20150623 08:20:45.584"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:45.664" starttime="20150623 08:20:44.134"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:45.666" starttime="20150623 08:20:44.127"></status>
</kw>
<msg timestamp="20150623 08:20:45.669" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:20:45.668" starttime="20150623 08:20:44.125"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:20:45.673" level="INFO">Index in the 2. loop: 7</msg>
<status status="PASS" endtime="20150623 08:20:45.674" starttime="20150623 08:20:45.670"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:20:49.677" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20150623 08:20:49.679" starttime="20150623 08:20:45.675"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:20:49.689" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:20:49.688" starttime="20150623 08:20:49.681"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:49.690" starttime="20150623 08:20:44.124"></status>
</kw>
<kw type="foritem" name="${index} = 8">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:49.746" starttime="20150623 08:20:49.743"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:49.808" starttime="20150623 08:20:49.754"></status>
</kw>
<msg timestamp="20150623 08:20:49.811" level="INFO">${ssh_connection} = 51</msg>
<status status="PASS" endtime="20150623 08:20:49.810" starttime="20150623 08:20:49.747"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:20:49.823" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:20:50.235" level="INFO">Read output: Last login: Tue Jun 23 06:20:44 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:20:50.236" starttime="20150623 08:20:49.820"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:50.237" starttime="20150623 08:20:49.812"></status>
</kw>
<msg timestamp="20150623 08:20:50.239" level="INFO">${ssh_connection} = 51</msg>
<status status="PASS" endtime="20150623 08:20:50.238" starttime="20150623 08:20:49.734"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:50.245" starttime="20150623 08:20:50.244"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:20:50.247" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor51.log'.</msg>
<status status="PASS" endtime="20150623 08:20:50.250" starttime="20150623 08:20:50.246"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:50.251" starttime="20150623 08:20:50.240"></status>
</kw>
<msg timestamp="20150623 08:20:50.253" level="INFO">${ssh_connection} = 51</msg>
<status status="PASS" endtime="20150623 08:20:50.252" starttime="20150623 08:20:49.720"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:50.268" starttime="20150623 08:20:50.262"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:50.270" starttime="20150623 08:20:50.258"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:20:50.281" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:20:50.284" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:20:50.283" starttime="20150623 08:20:50.278"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:20:50.287" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:20:50.288" starttime="20150623 08:20:50.285"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:50.292" starttime="20150623 08:20:50.289"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:50.302" starttime="20150623 08:20:50.293"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:50.304" starttime="20150623 08:20:50.272"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:50.323" starttime="20150623 08:20:50.320"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:20:50.330" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:20:50.330" starttime="20150623 08:20:50.324"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:20:50.338" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:20:50.339" starttime="20150623 08:20:50.332"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:50.350" starttime="20150623 08:20:50.348"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:20:50.353" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:20:50.398" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:20:50.400" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:20:50.399" starttime="20150623 08:20:50.352"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:20:50.404" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:20:50.499" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:20:50.501" level="INFO">${processes_string} = 28458 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor51.log
28473 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
28491 ?        ...</msg>
<status status="PASS" endtime="20150623 08:20:50.500" starttime="20150623 08:20:50.401"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:20:50.506" level="INFO">@{processes_list} = [ 28458 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor51.log | 28473 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 28491 ?  ...</msg>
<status status="PASS" endtime="20150623 08:20:50.505" starttime="20150623 08:20:50.502"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 28458 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor51.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:20:50.512" level="INFO">${pid} = 28458</msg>
<status status="PASS" endtime="20150623 08:20:50.512" starttime="20150623 08:20:50.509"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:20:50.516" level="INFO">Executing command 'kill -9 28458'.</msg>
<msg timestamp="20150623 08:20:50.581" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:20:50.582" starttime="20150623 08:20:50.514"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:50.583" starttime="20150623 08:20:50.508"></status>
</kw>
<kw type="foritem" name="${process} = 28473 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:20:50.588" level="INFO">${pid} = 28473</msg>
<status status="PASS" endtime="20150623 08:20:50.587" starttime="20150623 08:20:50.584"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:20:50.592" level="INFO">Executing command 'kill -9 28473'.</msg>
<msg timestamp="20150623 08:20:50.663" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:20:50.664" starttime="20150623 08:20:50.589"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:50.666" starttime="20150623 08:20:50.584"></status>
</kw>
<kw type="foritem" name="${process} = 28491 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:20:50.671" level="INFO">${pid} = 28491</msg>
<status status="PASS" endtime="20150623 08:20:50.670" starttime="20150623 08:20:50.667"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:20:50.675" level="INFO">Executing command 'kill -9 28491'.</msg>
<msg timestamp="20150623 08:20:50.745" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:20:50.746" starttime="20150623 08:20:50.672"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:50.747" starttime="20150623 08:20:50.666"></status>
</kw>
<kw type="foritem" name="${process} = 28507 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:20:50.752" level="INFO">${pid} = 28507</msg>
<status status="PASS" endtime="20150623 08:20:50.751" starttime="20150623 08:20:50.748"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:20:50.756" level="INFO">Executing command 'kill -9 28507'.</msg>
<msg timestamp="20150623 08:20:50.836" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:20:50.837" starttime="20150623 08:20:50.753"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:50.838" starttime="20150623 08:20:50.748"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:50.838" starttime="20150623 08:20:50.507"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:50.839" starttime="20150623 08:20:50.341"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:20:50.843" level="INFO">Starting command 'cat tmpfilemonitor51.log'.</msg>
<status status="PASS" endtime="20150623 08:20:50.881" starttime="20150623 08:20:50.840"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:20:50.884" level="INFO">Reading output of command 'cat tmpfilemonitor51.log'.</msg>
<msg timestamp="20150623 08:20:50.922" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:20:50.924" level="INFO">${stdout_string} = [2015-06-23 06:20:33,707][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:20:50.923" starttime="20150623 08:20:50.883"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:20:50.928" level="INFO">Executing command 'rm tmpfilemonitor51.log'.</msg>
<msg timestamp="20150623 08:20:51.004" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:20:51.005" starttime="20150623 08:20:50.926"></status>
</kw>
<msg timestamp="20150623 08:20:51.010" level="INFO">${tailed_text} = [2015-06-23 06:20:33,707][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:20:51.008" starttime="20150623 08:20:50.314"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:51.018" starttime="20150623 08:20:51.011"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:51.029" starttime="20150623 08:20:51.026"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:20:51.033" starttime="20150623 08:20:51.031"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:51.038" starttime="20150623 08:20:51.020"></status>
</kw>
<msg timestamp="20150623 08:20:51.041" level="INFO">${tailed_text} = [2015-06-23 06:20:33,707][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:20:51.039" starttime="20150623 08:20:50.307"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:51.060" starttime="20150623 08:20:51.057"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:51.061" starttime="20150623 08:20:51.051"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:51.068" starttime="20150623 08:20:51.062"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:51.072" starttime="20150623 08:20:51.069"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:51.076" starttime="20150623 08:20:51.073"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:51.077" starttime="20150623 08:20:51.044"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:51.108" starttime="20150623 08:20:51.106"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:51.116" starttime="20150623 08:20:51.109"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:51.119" starttime="20150623 08:20:51.117"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:20:51.123" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:20:51.125" level="INFO">${queryResultSetLines} = 1004511|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:20:51.124" starttime="20150623 08:20:51.120"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:51.128" starttime="20150623 08:20:51.126"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:20:51.132" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:20:51.133" level="INFO">@{queryResultSet} = [ 1004511|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:20:51.132" starttime="20150623 08:20:51.129"></status>
</kw>
<msg timestamp="20150623 08:20:51.136" level="INFO">@{queryRows} = [ 1004511|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:20:51.135" starttime="20150623 08:20:51.099"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:20:51.140" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:20:51.142" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:20:51.141" starttime="20150623 08:20:51.137"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:20:51.146" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:20:51.147" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:20:51.147" starttime="20150623 08:20:51.143"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:20:51.176" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:20:51.177" starttime="20150623 08:20:51.173"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:51.178" starttime="20150623 08:20:51.149"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:51.185" starttime="20150623 08:20:51.179"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:51.186" starttime="20150623 08:20:51.091"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:51.188" starttime="20150623 08:20:49.701"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:51.190" starttime="20150623 08:20:49.695"></status>
</kw>
<msg timestamp="20150623 08:20:51.193" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:20:51.192" starttime="20150623 08:20:49.692"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:20:51.197" level="INFO">Index in the 2. loop: 8</msg>
<status status="PASS" endtime="20150623 08:20:51.198" starttime="20150623 08:20:51.194"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:20:55.202" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20150623 08:20:55.204" starttime="20150623 08:20:51.199"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:20:55.214" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:20:55.213" starttime="20150623 08:20:55.207"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:55.215" starttime="20150623 08:20:49.691"></status>
</kw>
<kw type="foritem" name="${index} = 9">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:55.269" starttime="20150623 08:20:55.267"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:55.337" starttime="20150623 08:20:55.278"></status>
</kw>
<msg timestamp="20150623 08:20:55.339" level="INFO">${ssh_connection} = 52</msg>
<status status="PASS" endtime="20150623 08:20:55.338" starttime="20150623 08:20:55.271"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:20:55.352" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:20:55.778" level="INFO">Read output: Last login: Tue Jun 23 06:20:50 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:20:55.780" starttime="20150623 08:20:55.349"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:55.781" starttime="20150623 08:20:55.341"></status>
</kw>
<msg timestamp="20150623 08:20:55.783" level="INFO">${ssh_connection} = 52</msg>
<status status="PASS" endtime="20150623 08:20:55.783" starttime="20150623 08:20:55.258"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:55.796" starttime="20150623 08:20:55.793"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:20:55.800" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor52.log'.</msg>
<status status="PASS" endtime="20150623 08:20:55.804" starttime="20150623 08:20:55.797"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:55.806" starttime="20150623 08:20:55.786"></status>
</kw>
<msg timestamp="20150623 08:20:55.808" level="INFO">${ssh_connection} = 52</msg>
<status status="PASS" endtime="20150623 08:20:55.807" starttime="20150623 08:20:55.245"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:55.838" starttime="20150623 08:20:55.826"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:55.840" starttime="20150623 08:20:55.820"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:20:55.852" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:20:55.855" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:20:55.854" starttime="20150623 08:20:55.849"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:20:55.858" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:20:55.859" starttime="20150623 08:20:55.856"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:55.863" starttime="20150623 08:20:55.861"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:55.873" starttime="20150623 08:20:55.864"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:55.875" starttime="20150623 08:20:55.843"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:55.894" starttime="20150623 08:20:55.891"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:20:55.902" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:20:55.901" starttime="20150623 08:20:55.895"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:20:55.908" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:20:55.909" starttime="20150623 08:20:55.903"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:55.921" starttime="20150623 08:20:55.919"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:20:55.925" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:20:55.972" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:20:55.974" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:20:55.973" starttime="20150623 08:20:55.923"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:20:55.978" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:20:56.071" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:20:56.075" level="INFO">${processes_string} = 28632 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor52.log
28647 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
28665 ?        ...</msg>
<status status="PASS" endtime="20150623 08:20:56.073" starttime="20150623 08:20:55.975"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:20:56.081" level="INFO">@{processes_list} = [ 28632 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor52.log | 28647 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 28665 ?  ...</msg>
<status status="PASS" endtime="20150623 08:20:56.080" starttime="20150623 08:20:56.077"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 28632 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor52.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:20:56.087" level="INFO">${pid} = 28632</msg>
<status status="PASS" endtime="20150623 08:20:56.086" starttime="20150623 08:20:56.084"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:20:56.091" level="INFO">Executing command 'kill -9 28632'.</msg>
<msg timestamp="20150623 08:20:56.151" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:20:56.152" starttime="20150623 08:20:56.089"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:56.154" starttime="20150623 08:20:56.083"></status>
</kw>
<kw type="foritem" name="${process} = 28647 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:20:56.159" level="INFO">${pid} = 28647</msg>
<status status="PASS" endtime="20150623 08:20:56.158" starttime="20150623 08:20:56.155"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:20:56.163" level="INFO">Executing command 'kill -9 28647'.</msg>
<msg timestamp="20150623 08:20:56.231" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:20:56.232" starttime="20150623 08:20:56.160"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:56.233" starttime="20150623 08:20:56.154"></status>
</kw>
<kw type="foritem" name="${process} = 28665 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:20:56.238" level="INFO">${pid} = 28665</msg>
<status status="PASS" endtime="20150623 08:20:56.237" starttime="20150623 08:20:56.234"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:20:56.242" level="INFO">Executing command 'kill -9 28665'.</msg>
<msg timestamp="20150623 08:20:56.315" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:20:56.316" starttime="20150623 08:20:56.239"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:56.317" starttime="20150623 08:20:56.233"></status>
</kw>
<kw type="foritem" name="${process} = 28681 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:20:56.322" level="INFO">${pid} = 28681</msg>
<status status="PASS" endtime="20150623 08:20:56.321" starttime="20150623 08:20:56.318"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:20:56.326" level="INFO">Executing command 'kill -9 28681'.</msg>
<msg timestamp="20150623 08:20:56.394" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:20:56.395" starttime="20150623 08:20:56.323"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:56.396" starttime="20150623 08:20:56.317"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:56.397" starttime="20150623 08:20:56.082"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:56.398" starttime="20150623 08:20:55.912"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:20:56.403" level="INFO">Starting command 'cat tmpfilemonitor52.log'.</msg>
<status status="PASS" endtime="20150623 08:20:56.437" starttime="20150623 08:20:56.400"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:20:56.440" level="INFO">Reading output of command 'cat tmpfilemonitor52.log'.</msg>
<msg timestamp="20150623 08:20:56.481" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:20:56.483" level="INFO">${stdout_string} = [2015-06-23 06:20:39,272][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:20:56.482" starttime="20150623 08:20:56.439"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:20:56.487" level="INFO">Executing command 'rm tmpfilemonitor52.log'.</msg>
<msg timestamp="20150623 08:20:56.566" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:20:56.567" starttime="20150623 08:20:56.484"></status>
</kw>
<msg timestamp="20150623 08:20:56.571" level="INFO">${tailed_text} = [2015-06-23 06:20:39,272][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:20:56.569" starttime="20150623 08:20:55.885"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:56.579" starttime="20150623 08:20:56.572"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:56.590" starttime="20150623 08:20:56.587"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:20:56.593" starttime="20150623 08:20:56.591"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:56.599" starttime="20150623 08:20:56.581"></status>
</kw>
<msg timestamp="20150623 08:20:56.602" level="INFO">${tailed_text} = [2015-06-23 06:20:39,272][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:20:56.601" starttime="20150623 08:20:55.878"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:56.621" starttime="20150623 08:20:56.618"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:56.622" starttime="20150623 08:20:56.612"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:56.629" starttime="20150623 08:20:56.623"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:56.633" starttime="20150623 08:20:56.630"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:56.637" starttime="20150623 08:20:56.634"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:56.638" starttime="20150623 08:20:56.605"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:56.684" starttime="20150623 08:20:56.682"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:56.692" starttime="20150623 08:20:56.686"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:56.695" starttime="20150623 08:20:56.693"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:20:56.699" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:20:56.702" level="INFO">${queryResultSetLines} = 1004512|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:20:56.701" starttime="20150623 08:20:56.697"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:56.705" starttime="20150623 08:20:56.703"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:20:56.708" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:20:56.710" level="INFO">@{queryResultSet} = [ 1004512|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:20:56.709" starttime="20150623 08:20:56.706"></status>
</kw>
<msg timestamp="20150623 08:20:56.713" level="INFO">@{queryRows} = [ 1004512|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:20:56.712" starttime="20150623 08:20:56.676"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:20:56.717" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:20:56.718" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:20:56.718" starttime="20150623 08:20:56.714"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:20:56.722" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:20:56.724" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:20:56.723" starttime="20150623 08:20:56.720"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:20:56.734" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:20:56.735" starttime="20150623 08:20:56.732"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:56.736" starttime="20150623 08:20:56.725"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:20:56.743" starttime="20150623 08:20:56.737"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:56.744" starttime="20150623 08:20:56.666"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:56.745" starttime="20150623 08:20:55.226"></status>
</kw>
<status status="PASS" endtime="20150623 08:20:56.748" starttime="20150623 08:20:55.220"></status>
</kw>
<msg timestamp="20150623 08:20:56.751" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:20:56.749" starttime="20150623 08:20:55.217"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:20:56.755" level="INFO">Index in the 2. loop: 9</msg>
<status status="PASS" endtime="20150623 08:20:56.756" starttime="20150623 08:20:56.752"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:21:00.759" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20150623 08:21:00.761" starttime="20150623 08:20:56.757"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:21:00.771" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:21:00.771" starttime="20150623 08:21:00.764"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:00.772" starttime="20150623 08:20:55.216"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:00.774" starttime="20150623 08:20:05.481"></status>
</kw>
<msg timestamp="20150623 08:21:00.777" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:21:00.776" starttime="20150623 08:20:05.475"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>For delay ${loopIdx} we had ${failure} failure(s)</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:21:00.781" level="INFO">For delay 4 we had None failure(s)</msg>
<status status="PASS" endtime="20150623 08:21:00.782" starttime="20150623 08:21:00.778"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:00.783" starttime="20150623 08:20:05.464"></status>
</kw>
<kw type="foritem" name="${loopIdx} = 5">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Sitting in first FOR, Loop No.: ${loopIdx}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:21:00.788" level="INFO">Sitting in first FOR, Loop No.: 5</msg>
<status status="PASS" endtime="20150623 08:21:00.788" starttime="20150623 08:21:00.785"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Timeout set to ${loopIdx} secs</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:21:00.792" level="INFO">Timeout set to 5 secs</msg>
<status status="PASS" endtime="20150623 08:21:00.793" starttime="20150623 08:21:00.790"></status>
</kw>
<kw type="kw" name="${failure} = Internal Loop">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${loopIdx}</arg>
</arguments>
<kw type="for" name="${index} IN RANGE [ 0 | 10 ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${index} = 0">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:00.854" starttime="20150623 08:21:00.852"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:00.918" starttime="20150623 08:21:00.863"></status>
</kw>
<msg timestamp="20150623 08:21:00.921" level="INFO">${ssh_connection} = 53</msg>
<status status="PASS" endtime="20150623 08:21:00.920" starttime="20150623 08:21:00.855"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:21:00.933" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:21:01.372" level="INFO">Read output: Last login: Tue Jun 23 06:20:55 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:21:01.374" starttime="20150623 08:21:00.930"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:01.376" starttime="20150623 08:21:00.922"></status>
</kw>
<msg timestamp="20150623 08:21:01.380" level="INFO">${ssh_connection} = 53</msg>
<status status="PASS" endtime="20150623 08:21:01.379" starttime="20150623 08:21:00.842"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:01.393" starttime="20150623 08:21:01.390"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:21:01.397" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor53.log'.</msg>
<status status="PASS" endtime="20150623 08:21:01.402" starttime="20150623 08:21:01.394"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:01.403" starttime="20150623 08:21:01.383"></status>
</kw>
<msg timestamp="20150623 08:21:01.406" level="INFO">${ssh_connection} = 53</msg>
<status status="PASS" endtime="20150623 08:21:01.405" starttime="20150623 08:21:00.830"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:01.434" starttime="20150623 08:21:01.426"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:01.436" starttime="20150623 08:21:01.419"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:21:01.452" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:21:01.454" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:21:01.453" starttime="20150623 08:21:01.445"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:21:01.458" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:21:01.459" starttime="20150623 08:21:01.456"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:01.462" starttime="20150623 08:21:01.460"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:01.475" starttime="20150623 08:21:01.463"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:01.476" starttime="20150623 08:21:01.438"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:01.495" starttime="20150623 08:21:01.492"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:21:01.503" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:21:01.502" starttime="20150623 08:21:01.496"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:21:01.509" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:21:01.510" starttime="20150623 08:21:01.505"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:01.521" starttime="20150623 08:21:01.519"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:21:01.525" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:21:01.566" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:21:01.568" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:21:01.568" starttime="20150623 08:21:01.523"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:21:01.573" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:21:01.695" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:21:01.698" level="INFO">${processes_string} = 28806 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor53.log
28821 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
28839 ?        ...</msg>
<status status="PASS" endtime="20150623 08:21:01.697" starttime="20150623 08:21:01.570"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:21:01.703" level="INFO">@{processes_list} = [ 28806 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor53.log | 28821 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 28839 ?  ...</msg>
<status status="PASS" endtime="20150623 08:21:01.702" starttime="20150623 08:21:01.699"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 28806 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor53.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:21:01.711" level="INFO">${pid} = 28806</msg>
<status status="PASS" endtime="20150623 08:21:01.710" starttime="20150623 08:21:01.707"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:21:01.714" level="INFO">Executing command 'kill -9 28806'.</msg>
<msg timestamp="20150623 08:21:01.805" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:21:01.806" starttime="20150623 08:21:01.712"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:01.807" starttime="20150623 08:21:01.706"></status>
</kw>
<kw type="foritem" name="${process} = 28821 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:21:01.813" level="INFO">${pid} = 28821</msg>
<status status="PASS" endtime="20150623 08:21:01.812" starttime="20150623 08:21:01.809"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:21:01.816" level="INFO">Executing command 'kill -9 28821'.</msg>
<msg timestamp="20150623 08:21:01.889" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:21:01.890" starttime="20150623 08:21:01.814"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:01.891" starttime="20150623 08:21:01.808"></status>
</kw>
<kw type="foritem" name="${process} = 28839 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:21:01.897" level="INFO">${pid} = 28839</msg>
<status status="PASS" endtime="20150623 08:21:01.896" starttime="20150623 08:21:01.893"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:21:01.901" level="INFO">Executing command 'kill -9 28839'.</msg>
<msg timestamp="20150623 08:21:01.974" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:21:01.975" starttime="20150623 08:21:01.898"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:01.976" starttime="20150623 08:21:01.892"></status>
</kw>
<kw type="foritem" name="${process} = 28855 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:21:01.982" level="INFO">${pid} = 28855</msg>
<status status="PASS" endtime="20150623 08:21:01.981" starttime="20150623 08:21:01.978"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:21:01.986" level="INFO">Executing command 'kill -9 28855'.</msg>
<msg timestamp="20150623 08:21:02.118" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:21:02.120" starttime="20150623 08:21:01.983"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:02.121" starttime="20150623 08:21:01.977"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:02.123" starttime="20150623 08:21:01.704"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:02.124" starttime="20150623 08:21:01.512"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:21:02.129" level="INFO">Starting command 'cat tmpfilemonitor53.log'.</msg>
<status status="PASS" endtime="20150623 08:21:02.161" starttime="20150623 08:21:02.126"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:21:02.164" level="INFO">Reading output of command 'cat tmpfilemonitor53.log'.</msg>
<msg timestamp="20150623 08:21:02.204" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:21:02.205" level="INFO">${stdout_string} = [2015-06-23 06:20:44,781][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:21:02.205" starttime="20150623 08:21:02.163"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:21:02.209" level="INFO">Executing command 'rm tmpfilemonitor53.log'.</msg>
<msg timestamp="20150623 08:21:02.287" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:21:02.288" starttime="20150623 08:21:02.207"></status>
</kw>
<msg timestamp="20150623 08:21:02.292" level="INFO">${tailed_text} = [2015-06-23 06:20:44,781][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:21:02.291" starttime="20150623 08:21:01.486"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:02.303" starttime="20150623 08:21:02.294"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:02.315" starttime="20150623 08:21:02.312"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:21:02.320" starttime="20150623 08:21:02.317"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:02.325" starttime="20150623 08:21:02.305"></status>
</kw>
<msg timestamp="20150623 08:21:02.328" level="INFO">${tailed_text} = [2015-06-23 06:20:44,781][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:21:02.327" starttime="20150623 08:21:01.479"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:02.347" starttime="20150623 08:21:02.344"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:02.348" starttime="20150623 08:21:02.338"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:02.355" starttime="20150623 08:21:02.349"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:02.360" starttime="20150623 08:21:02.357"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:02.364" starttime="20150623 08:21:02.361"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:02.365" starttime="20150623 08:21:02.331"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:02.397" starttime="20150623 08:21:02.395"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:02.405" starttime="20150623 08:21:02.398"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:02.409" starttime="20150623 08:21:02.407"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:21:02.413" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:21:02.415" level="INFO">${queryResultSetLines} = 1004513|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:21:02.415" starttime="20150623 08:21:02.411"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:02.418" starttime="20150623 08:21:02.417"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:21:02.422" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:21:02.424" level="INFO">@{queryResultSet} = [ 1004513|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:21:02.423" starttime="20150623 08:21:02.420"></status>
</kw>
<msg timestamp="20150623 08:21:02.427" level="INFO">@{queryRows} = [ 1004513|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:21:02.426" starttime="20150623 08:21:02.388"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:21:02.431" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:21:02.433" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:21:02.432" starttime="20150623 08:21:02.428"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:21:02.436" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:21:02.438" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:21:02.437" starttime="20150623 08:21:02.434"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:21:02.448" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:21:02.449" starttime="20150623 08:21:02.446"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:02.450" starttime="20150623 08:21:02.439"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:02.457" starttime="20150623 08:21:02.452"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:02.459" starttime="20150623 08:21:02.379"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:02.460" starttime="20150623 08:21:00.811"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:02.462" starttime="20150623 08:21:00.804"></status>
</kw>
<msg timestamp="20150623 08:21:02.465" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:21:02.464" starttime="20150623 08:21:00.802"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:21:02.469" level="INFO">Index in the 2. loop: 0</msg>
<status status="PASS" endtime="20150623 08:21:02.470" starttime="20150623 08:21:02.467"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:21:07.475" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20150623 08:21:07.477" starttime="20150623 08:21:02.472"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:21:07.507" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:21:07.506" starttime="20150623 08:21:07.480"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:07.508" starttime="20150623 08:21:00.801"></status>
</kw>
<kw type="foritem" name="${index} = 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:07.563" starttime="20150623 08:21:07.561"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:07.623" starttime="20150623 08:21:07.572"></status>
</kw>
<msg timestamp="20150623 08:21:07.626" level="INFO">${ssh_connection} = 54</msg>
<status status="PASS" endtime="20150623 08:21:07.625" starttime="20150623 08:21:07.565"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:21:07.638" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:21:08.004" level="INFO">Read output: Last login: Tue Jun 23 06:21:01 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:21:08.006" starttime="20150623 08:21:07.635"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:08.008" starttime="20150623 08:21:07.627"></status>
</kw>
<msg timestamp="20150623 08:21:08.013" level="INFO">${ssh_connection} = 54</msg>
<status status="PASS" endtime="20150623 08:21:08.011" starttime="20150623 08:21:07.552"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:08.025" starttime="20150623 08:21:08.023"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:21:08.030" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor54.log'.</msg>
<status status="PASS" endtime="20150623 08:21:08.034" starttime="20150623 08:21:08.027"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:08.035" starttime="20150623 08:21:08.015"></status>
</kw>
<msg timestamp="20150623 08:21:08.039" level="INFO">${ssh_connection} = 54</msg>
<status status="PASS" endtime="20150623 08:21:08.037" starttime="20150623 08:21:07.538"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:08.058" starttime="20150623 08:21:08.053"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:08.060" starttime="20150623 08:21:08.050"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:21:08.072" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:21:08.074" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:21:08.074" starttime="20150623 08:21:08.069"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:21:08.078" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:21:08.079" starttime="20150623 08:21:08.076"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:08.082" starttime="20150623 08:21:08.080"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:08.093" starttime="20150623 08:21:08.084"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:08.095" starttime="20150623 08:21:08.063"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:08.113" starttime="20150623 08:21:08.111"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:21:08.121" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:21:08.120" starttime="20150623 08:21:08.115"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:21:08.128" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:21:08.129" starttime="20150623 08:21:08.122"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:08.140" starttime="20150623 08:21:08.138"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:21:08.169" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:21:08.211" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:21:08.213" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:21:08.212" starttime="20150623 08:21:08.142"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:21:08.217" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:21:08.305" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:21:08.307" level="INFO">${processes_string} = 28983 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor54.log
28998 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
29016 ?        ...</msg>
<status status="PASS" endtime="20150623 08:21:08.306" starttime="20150623 08:21:08.215"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:21:08.312" level="INFO">@{processes_list} = [ 28983 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor54.log | 28998 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 29016 ?  ...</msg>
<status status="PASS" endtime="20150623 08:21:08.311" starttime="20150623 08:21:08.308"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 28983 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor54.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:21:08.318" level="INFO">${pid} = 28983</msg>
<status status="PASS" endtime="20150623 08:21:08.317" starttime="20150623 08:21:08.314"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:21:08.322" level="INFO">Executing command 'kill -9 28983'.</msg>
<msg timestamp="20150623 08:21:08.388" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:21:08.389" starttime="20150623 08:21:08.319"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:08.390" starttime="20150623 08:21:08.314"></status>
</kw>
<kw type="foritem" name="${process} = 28998 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:21:08.396" level="INFO">${pid} = 28998</msg>
<status status="PASS" endtime="20150623 08:21:08.395" starttime="20150623 08:21:08.392"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:21:08.399" level="INFO">Executing command 'kill -9 28998'.</msg>
<msg timestamp="20150623 08:21:08.471" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:21:08.472" starttime="20150623 08:21:08.397"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:08.473" starttime="20150623 08:21:08.391"></status>
</kw>
<kw type="foritem" name="${process} = 29016 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:21:08.478" level="INFO">${pid} = 29016</msg>
<status status="PASS" endtime="20150623 08:21:08.477" starttime="20150623 08:21:08.475"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:21:08.482" level="INFO">Executing command 'kill -9 29016'.</msg>
<msg timestamp="20150623 08:21:08.554" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:21:08.555" starttime="20150623 08:21:08.480"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:08.556" starttime="20150623 08:21:08.474"></status>
</kw>
<kw type="foritem" name="${process} = 29032 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:21:08.561" level="INFO">${pid} = 29032</msg>
<status status="PASS" endtime="20150623 08:21:08.561" starttime="20150623 08:21:08.558"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:21:08.565" level="INFO">Executing command 'kill -9 29032'.</msg>
<msg timestamp="20150623 08:21:08.637" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:21:08.638" starttime="20150623 08:21:08.563"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:08.639" starttime="20150623 08:21:08.557"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:08.639" starttime="20150623 08:21:08.313"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:08.640" starttime="20150623 08:21:08.131"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:21:08.644" level="INFO">Starting command 'cat tmpfilemonitor54.log'.</msg>
<status status="PASS" endtime="20150623 08:21:08.680" starttime="20150623 08:21:08.641"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:21:08.683" level="INFO">Reading output of command 'cat tmpfilemonitor54.log'.</msg>
<msg timestamp="20150623 08:21:08.723" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:21:08.725" level="INFO">${stdout_string} = [2015-06-23 06:20:50,339][INFO ][Camel (ticket-router) thread #44 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:21:08.724" starttime="20150623 08:21:08.682"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:21:08.729" level="INFO">Executing command 'rm tmpfilemonitor54.log'.</msg>
<msg timestamp="20150623 08:21:08.808" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:21:08.809" starttime="20150623 08:21:08.726"></status>
</kw>
<msg timestamp="20150623 08:21:08.811" level="INFO">${tailed_text} = [2015-06-23 06:20:50,339][INFO ][Camel (ticket-router) thread #44 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:21:08.811" starttime="20150623 08:21:08.105"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:08.820" starttime="20150623 08:21:08.813"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:08.831" starttime="20150623 08:21:08.828"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:21:08.834" starttime="20150623 08:21:08.832"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:08.839" starttime="20150623 08:21:08.822"></status>
</kw>
<msg timestamp="20150623 08:21:08.842" level="INFO">${tailed_text} = [2015-06-23 06:20:50,339][INFO ][Camel (ticket-router) thread #44 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:21:08.841" starttime="20150623 08:21:08.098"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:08.860" starttime="20150623 08:21:08.858"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:08.861" starttime="20150623 08:21:08.852"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:08.868" starttime="20150623 08:21:08.862"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:08.872" starttime="20150623 08:21:08.869"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:08.876" starttime="20150623 08:21:08.874"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:08.878" starttime="20150623 08:21:08.845"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:08.908" starttime="20150623 08:21:08.907"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:08.918" starttime="20150623 08:21:08.910"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:08.921" starttime="20150623 08:21:08.919"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:21:08.926" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:21:08.928" level="INFO">${queryResultSetLines} = 1004514|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:21:08.927" starttime="20150623 08:21:08.923"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:08.931" starttime="20150623 08:21:08.929"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:21:08.934" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:21:08.936" level="INFO">@{queryResultSet} = [ 1004514|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:21:08.935" starttime="20150623 08:21:08.932"></status>
</kw>
<msg timestamp="20150623 08:21:08.939" level="INFO">@{queryRows} = [ 1004514|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:21:08.938" starttime="20150623 08:21:08.900"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:21:08.943" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:21:08.945" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:21:08.944" starttime="20150623 08:21:08.940"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:21:08.948" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:21:08.950" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:21:08.949" starttime="20150623 08:21:08.946"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:21:08.960" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:21:08.961" starttime="20150623 08:21:08.958"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:08.962" starttime="20150623 08:21:08.951"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:08.969" starttime="20150623 08:21:08.963"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:08.970" starttime="20150623 08:21:08.891"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:08.972" starttime="20150623 08:21:07.519"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:08.974" starttime="20150623 08:21:07.513"></status>
</kw>
<msg timestamp="20150623 08:21:08.977" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:21:08.976" starttime="20150623 08:21:07.510"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:21:08.981" level="INFO">Index in the 2. loop: 1</msg>
<status status="PASS" endtime="20150623 08:21:08.982" starttime="20150623 08:21:08.979"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:21:13.987" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20150623 08:21:13.989" starttime="20150623 08:21:08.983"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:21:13.999" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:21:13.998" starttime="20150623 08:21:13.991"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:14.000" starttime="20150623 08:21:07.509"></status>
</kw>
<kw type="foritem" name="${index} = 2">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:14.055" starttime="20150623 08:21:14.053"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:14.114" starttime="20150623 08:21:14.063"></status>
</kw>
<msg timestamp="20150623 08:21:14.117" level="INFO">${ssh_connection} = 55</msg>
<status status="PASS" endtime="20150623 08:21:14.116" starttime="20150623 08:21:14.056"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:21:14.129" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:21:14.566" level="INFO">Read output: Last login: Tue Jun 23 06:21:07 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:21:14.567" starttime="20150623 08:21:14.126"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:14.568" starttime="20150623 08:21:14.118"></status>
</kw>
<msg timestamp="20150623 08:21:14.572" level="INFO">${ssh_connection} = 55</msg>
<status status="PASS" endtime="20150623 08:21:14.571" starttime="20150623 08:21:14.043"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:14.584" starttime="20150623 08:21:14.582"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:21:14.589" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor55.log'.</msg>
<status status="PASS" endtime="20150623 08:21:14.593" starttime="20150623 08:21:14.586"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:14.594" starttime="20150623 08:21:14.574"></status>
</kw>
<msg timestamp="20150623 08:21:14.597" level="INFO">${ssh_connection} = 55</msg>
<status status="PASS" endtime="20150623 08:21:14.596" starttime="20150623 08:21:14.030"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:14.624" starttime="20150623 08:21:14.617"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:14.626" starttime="20150623 08:21:14.610"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:21:14.638" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:21:14.640" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:21:14.640" starttime="20150623 08:21:14.635"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:21:14.644" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:21:14.645" starttime="20150623 08:21:14.642"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:14.648" starttime="20150623 08:21:14.646"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:14.659" starttime="20150623 08:21:14.650"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:14.661" starttime="20150623 08:21:14.629"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:14.680" starttime="20150623 08:21:14.677"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:21:14.688" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:21:14.687" starttime="20150623 08:21:14.681"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:21:14.694" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:21:14.695" starttime="20150623 08:21:14.689"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:14.706" starttime="20150623 08:21:14.704"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:21:14.709" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:21:14.756" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:21:14.758" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:21:14.757" starttime="20150623 08:21:14.708"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:21:14.762" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:21:14.859" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:21:14.861" level="INFO">${processes_string} = 29159 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor55.log
29174 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
29192 ?        ...</msg>
<status status="PASS" endtime="20150623 08:21:14.860" starttime="20150623 08:21:14.759"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:21:14.866" level="INFO">@{processes_list} = [ 29159 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor55.log | 29174 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 29192 ?  ...</msg>
<status status="PASS" endtime="20150623 08:21:14.866" starttime="20150623 08:21:14.863"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 29159 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor55.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:21:14.873" level="INFO">${pid} = 29159</msg>
<status status="PASS" endtime="20150623 08:21:14.872" starttime="20150623 08:21:14.869"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:21:14.877" level="INFO">Executing command 'kill -9 29159'.</msg>
<msg timestamp="20150623 08:21:14.941" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:21:14.942" starttime="20150623 08:21:14.874"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:14.942" starttime="20150623 08:21:14.868"></status>
</kw>
<kw type="foritem" name="${process} = 29174 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:21:14.948" level="INFO">${pid} = 29174</msg>
<status status="PASS" endtime="20150623 08:21:14.947" starttime="20150623 08:21:14.944"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:21:14.952" level="INFO">Executing command 'kill -9 29174'.</msg>
<msg timestamp="20150623 08:21:15.021" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:21:15.023" starttime="20150623 08:21:14.949"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:15.024" starttime="20150623 08:21:14.943"></status>
</kw>
<kw type="foritem" name="${process} = 29192 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:21:15.030" level="INFO">${pid} = 29192</msg>
<status status="PASS" endtime="20150623 08:21:15.030" starttime="20150623 08:21:15.027"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:21:15.034" level="INFO">Executing command 'kill -9 29192'.</msg>
<msg timestamp="20150623 08:21:15.103" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:21:15.104" starttime="20150623 08:21:15.032"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:15.105" starttime="20150623 08:21:15.026"></status>
</kw>
<kw type="foritem" name="${process} = 29208 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:21:15.110" level="INFO">${pid} = 29208</msg>
<status status="PASS" endtime="20150623 08:21:15.109" starttime="20150623 08:21:15.106"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:21:15.114" level="INFO">Executing command 'kill -9 29208'.</msg>
<msg timestamp="20150623 08:21:15.183" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:21:15.184" starttime="20150623 08:21:15.111"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:15.185" starttime="20150623 08:21:15.105"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:15.185" starttime="20150623 08:21:14.867"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:15.187" starttime="20150623 08:21:14.697"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:21:15.192" level="INFO">Starting command 'cat tmpfilemonitor55.log'.</msg>
<status status="PASS" endtime="20150623 08:21:15.227" starttime="20150623 08:21:15.189"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:21:15.230" level="INFO">Reading output of command 'cat tmpfilemonitor55.log'.</msg>
<msg timestamp="20150623 08:21:15.265" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:21:15.267" level="INFO">${stdout_string} = [2015-06-23 06:20:55,905][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:21:15.266" starttime="20150623 08:21:15.228"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:21:15.271" level="INFO">Executing command 'rm tmpfilemonitor55.log'.</msg>
<msg timestamp="20150623 08:21:15.348" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:21:15.349" starttime="20150623 08:21:15.268"></status>
</kw>
<msg timestamp="20150623 08:21:15.353" level="INFO">${tailed_text} = [2015-06-23 06:20:55,905][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:21:15.351" starttime="20150623 08:21:14.671"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:15.361" starttime="20150623 08:21:15.354"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:15.372" starttime="20150623 08:21:15.370"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:21:15.376" starttime="20150623 08:21:15.374"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:15.381" starttime="20150623 08:21:15.363"></status>
</kw>
<msg timestamp="20150623 08:21:15.384" level="INFO">${tailed_text} = [2015-06-23 06:20:55,905][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:21:15.383" starttime="20150623 08:21:14.664"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:15.420" starttime="20150623 08:21:15.417"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:15.421" starttime="20150623 08:21:15.410"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:15.428" starttime="20150623 08:21:15.422"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:15.433" starttime="20150623 08:21:15.430"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:15.436" starttime="20150623 08:21:15.434"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:15.438" starttime="20150623 08:21:15.387"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:15.468" starttime="20150623 08:21:15.466"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:15.476" starttime="20150623 08:21:15.470"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:15.479" starttime="20150623 08:21:15.477"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:21:15.483" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:21:15.486" level="INFO">${queryResultSetLines} = 1004515|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:21:15.485" starttime="20150623 08:21:15.481"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:15.489" starttime="20150623 08:21:15.487"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:21:15.492" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:21:15.494" level="INFO">@{queryResultSet} = [ 1004515|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:21:15.493" starttime="20150623 08:21:15.490"></status>
</kw>
<msg timestamp="20150623 08:21:15.497" level="INFO">@{queryRows} = [ 1004515|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:21:15.496" starttime="20150623 08:21:15.460"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:21:15.501" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:21:15.502" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:21:15.502" starttime="20150623 08:21:15.498"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:21:15.506" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:21:15.508" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:21:15.507" starttime="20150623 08:21:15.504"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:21:15.518" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:21:15.519" starttime="20150623 08:21:15.515"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:15.520" starttime="20150623 08:21:15.509"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:15.527" starttime="20150623 08:21:15.521"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:15.528" starttime="20150623 08:21:15.451"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:15.529" starttime="20150623 08:21:14.011"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:15.531" starttime="20150623 08:21:14.004"></status>
</kw>
<msg timestamp="20150623 08:21:15.535" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:21:15.533" starttime="20150623 08:21:14.002"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:21:15.538" level="INFO">Index in the 2. loop: 2</msg>
<status status="PASS" endtime="20150623 08:21:15.539" starttime="20150623 08:21:15.536"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:21:20.544" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20150623 08:21:20.546" starttime="20150623 08:21:15.541"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:21:20.557" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:21:20.556" starttime="20150623 08:21:20.549"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:20.557" starttime="20150623 08:21:14.001"></status>
</kw>
<kw type="foritem" name="${index} = 3">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:20.612" starttime="20150623 08:21:20.610"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:20.680" starttime="20150623 08:21:20.620"></status>
</kw>
<msg timestamp="20150623 08:21:20.683" level="INFO">${ssh_connection} = 56</msg>
<status status="PASS" endtime="20150623 08:21:20.682" starttime="20150623 08:21:20.613"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:21:20.695" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:21:21.168" level="INFO">Read output: Last login: Tue Jun 23 06:21:14 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:21:21.170" starttime="20150623 08:21:20.692"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:21.172" starttime="20150623 08:21:20.684"></status>
</kw>
<msg timestamp="20150623 08:21:21.177" level="INFO">${ssh_connection} = 56</msg>
<status status="PASS" endtime="20150623 08:21:21.176" starttime="20150623 08:21:20.600"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:21.190" starttime="20150623 08:21:21.187"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:21:21.194" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor56.log'.</msg>
<status status="PASS" endtime="20150623 08:21:21.199" starttime="20150623 08:21:21.191"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:21.200" starttime="20150623 08:21:21.180"></status>
</kw>
<msg timestamp="20150623 08:21:21.204" level="INFO">${ssh_connection} = 56</msg>
<status status="PASS" endtime="20150623 08:21:21.202" starttime="20150623 08:21:20.587"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:21.231" starttime="20150623 08:21:21.224"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:21.232" starttime="20150623 08:21:21.217"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:21:21.243" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:21:21.245" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:21:21.245" starttime="20150623 08:21:21.240"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:21:21.249" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:21:21.250" starttime="20150623 08:21:21.247"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:21.254" starttime="20150623 08:21:21.251"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:21.264" starttime="20150623 08:21:21.255"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:21.265" starttime="20150623 08:21:21.234"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:21.284" starttime="20150623 08:21:21.282"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:21:21.292" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:21:21.292" starttime="20150623 08:21:21.286"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:21:21.298" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:21:21.300" starttime="20150623 08:21:21.294"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:21.311" starttime="20150623 08:21:21.308"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:21:21.314" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:21:21.350" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:21:21.352" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:21:21.351" starttime="20150623 08:21:21.312"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:21:21.356" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:21:21.430" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:21:21.432" level="INFO">${processes_string} = 29333 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor56.log
29348 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
29366 ?        ...</msg>
<status status="PASS" endtime="20150623 08:21:21.431" starttime="20150623 08:21:21.354"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:21:21.437" level="INFO">@{processes_list} = [ 29333 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor56.log | 29348 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 29366 ?  ...</msg>
<status status="PASS" endtime="20150623 08:21:21.437" starttime="20150623 08:21:21.434"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 29333 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor56.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:21:21.444" level="INFO">${pid} = 29333</msg>
<status status="PASS" endtime="20150623 08:21:21.443" starttime="20150623 08:21:21.440"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:21:21.448" level="INFO">Executing command 'kill -9 29333'.</msg>
<msg timestamp="20150623 08:21:21.499" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:21:21.500" starttime="20150623 08:21:21.445"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:21.501" starttime="20150623 08:21:21.439"></status>
</kw>
<kw type="foritem" name="${process} = 29348 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:21:21.506" level="INFO">${pid} = 29348</msg>
<status status="PASS" endtime="20150623 08:21:21.505" starttime="20150623 08:21:21.502"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:21:21.509" level="INFO">Executing command 'kill -9 29348'.</msg>
<msg timestamp="20150623 08:21:21.571" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:21:21.572" starttime="20150623 08:21:21.507"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:21.573" starttime="20150623 08:21:21.501"></status>
</kw>
<kw type="foritem" name="${process} = 29366 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:21:21.578" level="INFO">${pid} = 29366</msg>
<status status="PASS" endtime="20150623 08:21:21.577" starttime="20150623 08:21:21.575"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:21:21.582" level="INFO">Executing command 'kill -9 29366'.</msg>
<msg timestamp="20150623 08:21:21.655" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:21:21.656" starttime="20150623 08:21:21.580"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:21.657" starttime="20150623 08:21:21.574"></status>
</kw>
<kw type="foritem" name="${process} = 29382 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:21:21.662" level="INFO">${pid} = 29382</msg>
<status status="PASS" endtime="20150623 08:21:21.661" starttime="20150623 08:21:21.658"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:21:21.666" level="INFO">Executing command 'kill -9 29382'.</msg>
<msg timestamp="20150623 08:21:21.735" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:21:21.736" starttime="20150623 08:21:21.663"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:21.737" starttime="20150623 08:21:21.657"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:21.737" starttime="20150623 08:21:21.438"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:21.738" starttime="20150623 08:21:21.302"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:21:21.742" level="INFO">Starting command 'cat tmpfilemonitor56.log'.</msg>
<status status="PASS" endtime="20150623 08:21:21.778" starttime="20150623 08:21:21.740"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:21:21.781" level="INFO">Reading output of command 'cat tmpfilemonitor56.log'.</msg>
<msg timestamp="20150623 08:21:21.817" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:21:21.819" level="INFO">${stdout_string} = [2015-06-23 06:21:01,509][INFO ][Camel (ticket-router) thread #53 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:21:21.818" starttime="20150623 08:21:21.779"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:21:21.823" level="INFO">Executing command 'rm tmpfilemonitor56.log'.</msg>
<msg timestamp="20150623 08:21:21.904" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:21:21.905" starttime="20150623 08:21:21.820"></status>
</kw>
<msg timestamp="20150623 08:21:21.907" level="INFO">${tailed_text} = [2015-06-23 06:21:01,509][INFO ][Camel (ticket-router) thread #53 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:21:21.906" starttime="20150623 08:21:21.276"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:21.915" starttime="20150623 08:21:21.909"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:21.927" starttime="20150623 08:21:21.925"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:21:21.931" starttime="20150623 08:21:21.929"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:21.936" starttime="20150623 08:21:21.918"></status>
</kw>
<msg timestamp="20150623 08:21:21.939" level="INFO">${tailed_text} = [2015-06-23 06:21:01,509][INFO ][Camel (ticket-router) thread #53 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:21:21.938" starttime="20150623 08:21:21.268"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:21.957" starttime="20150623 08:21:21.955"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:21.958" starttime="20150623 08:21:21.949"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:21.965" starttime="20150623 08:21:21.960"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:21.969" starttime="20150623 08:21:21.967"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:21.973" starttime="20150623 08:21:21.971"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:21.974" starttime="20150623 08:21:21.942"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:22.005" starttime="20150623 08:21:22.003"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:22.013" starttime="20150623 08:21:22.007"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:22.016" starttime="20150623 08:21:22.014"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:21:22.021" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:21:22.023" level="INFO">${queryResultSetLines} = 1004516|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:21:22.022" starttime="20150623 08:21:22.018"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:22.026" starttime="20150623 08:21:22.024"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:21:22.030" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:21:22.031" level="INFO">@{queryResultSet} = [ 1004516|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:21:22.031" starttime="20150623 08:21:22.027"></status>
</kw>
<msg timestamp="20150623 08:21:22.035" level="INFO">@{queryRows} = [ 1004516|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:21:22.033" starttime="20150623 08:21:21.996"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:21:22.039" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:21:22.041" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:21:22.040" starttime="20150623 08:21:22.036"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:21:22.044" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:21:22.046" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:21:22.045" starttime="20150623 08:21:22.042"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:21:22.053" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:21:22.053" starttime="20150623 08:21:22.052"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:22.054" starttime="20150623 08:21:22.047"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:22.057" starttime="20150623 08:21:22.054"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:22.057" starttime="20150623 08:21:21.988"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:22.058" starttime="20150623 08:21:20.569"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:22.059" starttime="20150623 08:21:20.562"></status>
</kw>
<msg timestamp="20150623 08:21:22.061" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:21:22.060" starttime="20150623 08:21:20.560"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:21:22.062" level="INFO">Index in the 2. loop: 3</msg>
<status status="PASS" endtime="20150623 08:21:22.063" starttime="20150623 08:21:22.061"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:21:27.065" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20150623 08:21:27.067" starttime="20150623 08:21:22.063"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:21:27.077" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:21:27.077" starttime="20150623 08:21:27.070"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:27.078" starttime="20150623 08:21:20.559"></status>
</kw>
<kw type="foritem" name="${index} = 4">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:27.134" starttime="20150623 08:21:27.132"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:27.200" starttime="20150623 08:21:27.143"></status>
</kw>
<msg timestamp="20150623 08:21:27.203" level="INFO">${ssh_connection} = 57</msg>
<status status="PASS" endtime="20150623 08:21:27.202" starttime="20150623 08:21:27.136"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:21:27.215" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:21:27.647" level="INFO">Read output: Last login: Tue Jun 23 06:21:20 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:21:27.649" starttime="20150623 08:21:27.212"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:27.650" starttime="20150623 08:21:27.205"></status>
</kw>
<msg timestamp="20150623 08:21:27.653" level="INFO">${ssh_connection} = 57</msg>
<status status="PASS" endtime="20150623 08:21:27.653" starttime="20150623 08:21:27.122"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:27.666" starttime="20150623 08:21:27.663"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:21:27.670" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor57.log'.</msg>
<status status="PASS" endtime="20150623 08:21:27.675" starttime="20150623 08:21:27.668"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:27.675" starttime="20150623 08:21:27.656"></status>
</kw>
<msg timestamp="20150623 08:21:27.676" level="INFO">${ssh_connection} = 57</msg>
<status status="PASS" endtime="20150623 08:21:27.676" starttime="20150623 08:21:27.109"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:27.692" starttime="20150623 08:21:27.686"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:27.694" starttime="20150623 08:21:27.682"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:21:27.705" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:21:27.708" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:21:27.707" starttime="20150623 08:21:27.703"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:21:27.711" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:21:27.712" starttime="20150623 08:21:27.709"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:27.716" starttime="20150623 08:21:27.713"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:27.726" starttime="20150623 08:21:27.717"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:27.728" starttime="20150623 08:21:27.696"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:27.746" starttime="20150623 08:21:27.744"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:21:27.754" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:21:27.754" starttime="20150623 08:21:27.748"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:21:27.760" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:21:27.761" starttime="20150623 08:21:27.756"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:27.772" starttime="20150623 08:21:27.770"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:21:27.775" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:21:27.824" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:21:27.826" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:21:27.825" starttime="20150623 08:21:27.774"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:21:27.831" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:21:27.930" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:21:27.932" level="INFO">${processes_string} = 29507 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor57.log
29522 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
29540 ?        ...</msg>
<status status="PASS" endtime="20150623 08:21:27.931" starttime="20150623 08:21:27.828"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:21:27.937" level="INFO">@{processes_list} = [ 29507 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor57.log | 29522 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 29540 ?  ...</msg>
<status status="PASS" endtime="20150623 08:21:27.936" starttime="20150623 08:21:27.933"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 29507 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor57.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:21:27.944" level="INFO">${pid} = 29507</msg>
<status status="PASS" endtime="20150623 08:21:27.943" starttime="20150623 08:21:27.940"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:21:27.947" level="INFO">Executing command 'kill -9 29507'.</msg>
<msg timestamp="20150623 08:21:28.012" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:21:28.014" starttime="20150623 08:21:27.945"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:28.015" starttime="20150623 08:21:27.939"></status>
</kw>
<kw type="foritem" name="${process} = 29522 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:21:28.022" level="INFO">${pid} = 29522</msg>
<status status="PASS" endtime="20150623 08:21:28.021" starttime="20150623 08:21:28.018"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:21:28.025" level="INFO">Executing command 'kill -9 29522'.</msg>
<msg timestamp="20150623 08:21:28.095" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:21:28.096" starttime="20150623 08:21:28.023"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:28.097" starttime="20150623 08:21:28.017"></status>
</kw>
<kw type="foritem" name="${process} = 29540 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:21:28.102" level="INFO">${pid} = 29540</msg>
<status status="PASS" endtime="20150623 08:21:28.101" starttime="20150623 08:21:28.098"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:21:28.106" level="INFO">Executing command 'kill -9 29540'.</msg>
<msg timestamp="20150623 08:21:28.174" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:21:28.175" starttime="20150623 08:21:28.103"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:28.176" starttime="20150623 08:21:28.097"></status>
</kw>
<kw type="foritem" name="${process} = 29556 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:21:28.181" level="INFO">${pid} = 29556</msg>
<status status="PASS" endtime="20150623 08:21:28.181" starttime="20150623 08:21:28.178"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:21:28.185" level="INFO">Executing command 'kill -9 29556'.</msg>
<msg timestamp="20150623 08:21:28.246" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:21:28.247" starttime="20150623 08:21:28.183"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:28.248" starttime="20150623 08:21:28.177"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:28.248" starttime="20150623 08:21:27.938"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:28.250" starttime="20150623 08:21:27.763"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:21:28.254" level="INFO">Starting command 'cat tmpfilemonitor57.log'.</msg>
<status status="PASS" endtime="20150623 08:21:28.288" starttime="20150623 08:21:28.252"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:21:28.291" level="INFO">Reading output of command 'cat tmpfilemonitor57.log'.</msg>
<msg timestamp="20150623 08:21:28.324" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:21:28.326" level="INFO">${stdout_string} = [2015-06-23 06:21:08,120][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:21:28.325" starttime="20150623 08:21:28.289"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:21:28.330" level="INFO">Executing command 'rm tmpfilemonitor57.log'.</msg>
<msg timestamp="20150623 08:21:28.406" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:21:28.407" starttime="20150623 08:21:28.327"></status>
</kw>
<msg timestamp="20150623 08:21:28.410" level="INFO">${tailed_text} = [2015-06-23 06:21:08,120][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:21:28.408" starttime="20150623 08:21:27.738"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:28.419" starttime="20150623 08:21:28.412"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:28.430" starttime="20150623 08:21:28.427"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:21:28.434" starttime="20150623 08:21:28.431"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:28.438" starttime="20150623 08:21:28.421"></status>
</kw>
<msg timestamp="20150623 08:21:28.442" level="INFO">${tailed_text} = [2015-06-23 06:21:08,120][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:21:28.440" starttime="20150623 08:21:27.731"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:28.460" starttime="20150623 08:21:28.457"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:28.461" starttime="20150623 08:21:28.451"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:28.468" starttime="20150623 08:21:28.462"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:28.472" starttime="20150623 08:21:28.469"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:28.491" starttime="20150623 08:21:28.489"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:28.493" starttime="20150623 08:21:28.445"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:28.524" starttime="20150623 08:21:28.522"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:28.532" starttime="20150623 08:21:28.525"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:28.535" starttime="20150623 08:21:28.533"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:21:28.539" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:21:28.542" level="INFO">${queryResultSetLines} = 1004517|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:21:28.541" starttime="20150623 08:21:28.537"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:28.545" starttime="20150623 08:21:28.543"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:21:28.548" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:21:28.550" level="INFO">@{queryResultSet} = [ 1004517|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:21:28.549" starttime="20150623 08:21:28.546"></status>
</kw>
<msg timestamp="20150623 08:21:28.553" level="INFO">@{queryRows} = [ 1004517|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:21:28.552" starttime="20150623 08:21:28.515"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:21:28.557" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:21:28.559" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:21:28.558" starttime="20150623 08:21:28.554"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:21:28.562" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:21:28.564" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:21:28.563" starttime="20150623 08:21:28.560"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:21:28.574" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:21:28.575" starttime="20150623 08:21:28.572"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:28.576" starttime="20150623 08:21:28.565"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:28.583" starttime="20150623 08:21:28.578"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:28.585" starttime="20150623 08:21:28.507"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:28.586" starttime="20150623 08:21:27.090"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:28.588" starttime="20150623 08:21:27.083"></status>
</kw>
<msg timestamp="20150623 08:21:28.591" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:21:28.590" starttime="20150623 08:21:27.081"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:21:28.595" level="INFO">Index in the 2. loop: 4</msg>
<status status="PASS" endtime="20150623 08:21:28.596" starttime="20150623 08:21:28.593"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:21:33.601" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20150623 08:21:33.604" starttime="20150623 08:21:28.597"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:21:33.615" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:21:33.614" starttime="20150623 08:21:33.606"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:33.616" starttime="20150623 08:21:27.080"></status>
</kw>
<kw type="foritem" name="${index} = 5">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:33.673" starttime="20150623 08:21:33.671"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:33.742" starttime="20150623 08:21:33.682"></status>
</kw>
<msg timestamp="20150623 08:21:33.745" level="INFO">${ssh_connection} = 58</msg>
<status status="PASS" endtime="20150623 08:21:33.744" starttime="20150623 08:21:33.675"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:21:33.757" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:21:34.195" level="INFO">Read output: Last login: Tue Jun 23 06:21:27 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:21:34.197" starttime="20150623 08:21:33.754"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:34.200" starttime="20150623 08:21:33.746"></status>
</kw>
<msg timestamp="20150623 08:21:34.204" level="INFO">${ssh_connection} = 58</msg>
<status status="PASS" endtime="20150623 08:21:34.203" starttime="20150623 08:21:33.661"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:34.217" starttime="20150623 08:21:34.214"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:21:34.221" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor58.log'.</msg>
<status status="PASS" endtime="20150623 08:21:34.227" starttime="20150623 08:21:34.218"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:34.228" starttime="20150623 08:21:34.207"></status>
</kw>
<msg timestamp="20150623 08:21:34.232" level="INFO">${ssh_connection} = 58</msg>
<status status="PASS" endtime="20150623 08:21:34.231" starttime="20150623 08:21:33.648"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:34.264" starttime="20150623 08:21:34.256"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:34.265" starttime="20150623 08:21:34.248"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:21:34.277" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:21:34.279" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:21:34.278" starttime="20150623 08:21:34.274"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:21:34.283" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:21:34.284" starttime="20150623 08:21:34.281"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:34.287" starttime="20150623 08:21:34.285"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:34.297" starttime="20150623 08:21:34.289"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:34.299" starttime="20150623 08:21:34.267"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:34.318" starttime="20150623 08:21:34.315"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:21:34.326" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:21:34.325" starttime="20150623 08:21:34.319"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:21:34.333" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:21:34.334" starttime="20150623 08:21:34.327"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:34.345" starttime="20150623 08:21:34.343"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:21:34.348" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:21:34.392" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:21:34.394" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:21:34.393" starttime="20150623 08:21:34.347"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:21:34.398" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:21:34.490" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:21:34.492" level="INFO">${processes_string} = 29681 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor58.log
29696 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
29714 ?        ...</msg>
<status status="PASS" endtime="20150623 08:21:34.491" starttime="20150623 08:21:34.395"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:21:34.497" level="INFO">@{processes_list} = [ 29681 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor58.log | 29696 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 29714 ?  ...</msg>
<status status="PASS" endtime="20150623 08:21:34.496" starttime="20150623 08:21:34.493"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 29681 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor58.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:21:34.503" level="INFO">${pid} = 29681</msg>
<status status="PASS" endtime="20150623 08:21:34.503" starttime="20150623 08:21:34.500"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:21:34.507" level="INFO">Executing command 'kill -9 29681'.</msg>
<msg timestamp="20150623 08:21:34.572" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:21:34.573" starttime="20150623 08:21:34.505"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:34.574" starttime="20150623 08:21:34.499"></status>
</kw>
<kw type="foritem" name="${process} = 29696 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:21:34.579" level="INFO">${pid} = 29696</msg>
<status status="PASS" endtime="20150623 08:21:34.578" starttime="20150623 08:21:34.575"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:21:34.583" level="INFO">Executing command 'kill -9 29696'.</msg>
<msg timestamp="20150623 08:21:34.652" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:21:34.653" starttime="20150623 08:21:34.581"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:34.654" starttime="20150623 08:21:34.574"></status>
</kw>
<kw type="foritem" name="${process} = 29714 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:21:34.659" level="INFO">${pid} = 29714</msg>
<status status="PASS" endtime="20150623 08:21:34.658" starttime="20150623 08:21:34.656"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:21:34.663" level="INFO">Executing command 'kill -9 29714'.</msg>
<msg timestamp="20150623 08:21:34.732" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:21:34.733" starttime="20150623 08:21:34.661"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:34.734" starttime="20150623 08:21:34.655"></status>
</kw>
<kw type="foritem" name="${process} = 29730 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:21:34.739" level="INFO">${pid} = 29730</msg>
<status status="PASS" endtime="20150623 08:21:34.738" starttime="20150623 08:21:34.735"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:21:34.743" level="INFO">Executing command 'kill -9 29730'.</msg>
<msg timestamp="20150623 08:21:34.812" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:21:34.813" starttime="20150623 08:21:34.740"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:34.814" starttime="20150623 08:21:34.734"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:34.815" starttime="20150623 08:21:34.498"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:34.816" starttime="20150623 08:21:34.336"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:21:34.819" level="INFO">Starting command 'cat tmpfilemonitor58.log'.</msg>
<status status="PASS" endtime="20150623 08:21:34.855" starttime="20150623 08:21:34.817"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:21:34.858" level="INFO">Reading output of command 'cat tmpfilemonitor58.log'.</msg>
<msg timestamp="20150623 08:21:34.895" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:21:34.897" level="INFO">${stdout_string} = [2015-06-23 06:21:14,689][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:21:34.896" starttime="20150623 08:21:34.857"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:21:34.901" level="INFO">Executing command 'rm tmpfilemonitor58.log'.</msg>
<msg timestamp="20150623 08:21:34.985" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:21:34.986" starttime="20150623 08:21:34.899"></status>
</kw>
<msg timestamp="20150623 08:21:34.989" level="INFO">${tailed_text} = [2015-06-23 06:21:14,689][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:21:34.988" starttime="20150623 08:21:34.309"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:34.997" starttime="20150623 08:21:34.990"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:35.008" starttime="20150623 08:21:35.006"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:21:35.012" starttime="20150623 08:21:35.010"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:35.017" starttime="20150623 08:21:34.999"></status>
</kw>
<msg timestamp="20150623 08:21:35.022" level="INFO">${tailed_text} = [2015-06-23 06:21:14,689][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:21:35.020" starttime="20150623 08:21:34.302"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:35.040" starttime="20150623 08:21:35.037"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:35.041" starttime="20150623 08:21:35.031"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:35.048" starttime="20150623 08:21:35.042"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:35.052" starttime="20150623 08:21:35.049"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:35.056" starttime="20150623 08:21:35.053"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:35.057" starttime="20150623 08:21:35.025"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:35.088" starttime="20150623 08:21:35.086"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:35.096" starttime="20150623 08:21:35.090"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:35.100" starttime="20150623 08:21:35.098"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:21:35.104" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:21:35.106" level="INFO">${queryResultSetLines} = 1004518|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:21:35.105" starttime="20150623 08:21:35.101"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:35.109" starttime="20150623 08:21:35.107"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:21:35.112" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:21:35.114" level="INFO">@{queryResultSet} = [ 1004518|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:21:35.113" starttime="20150623 08:21:35.110"></status>
</kw>
<msg timestamp="20150623 08:21:35.117" level="INFO">@{queryRows} = [ 1004518|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:21:35.116" starttime="20150623 08:21:35.080"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:21:35.121" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:21:35.123" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:21:35.122" starttime="20150623 08:21:35.118"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:21:35.126" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:21:35.128" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:21:35.127" starttime="20150623 08:21:35.124"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:21:35.138" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:21:35.139" starttime="20150623 08:21:35.135"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:35.140" starttime="20150623 08:21:35.129"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:35.147" starttime="20150623 08:21:35.141"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:35.148" starttime="20150623 08:21:35.071"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:35.149" starttime="20150623 08:21:33.629"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:35.151" starttime="20150623 08:21:33.621"></status>
</kw>
<msg timestamp="20150623 08:21:35.154" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:21:35.153" starttime="20150623 08:21:33.618"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:21:35.158" level="INFO">Index in the 2. loop: 5</msg>
<status status="PASS" endtime="20150623 08:21:35.159" starttime="20150623 08:21:35.156"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:21:40.164" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20150623 08:21:40.166" starttime="20150623 08:21:35.160"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:21:40.176" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:21:40.175" starttime="20150623 08:21:40.168"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:40.177" starttime="20150623 08:21:33.618"></status>
</kw>
<kw type="foritem" name="${index} = 6">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:40.232" starttime="20150623 08:21:40.229"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:40.300" starttime="20150623 08:21:40.240"></status>
</kw>
<msg timestamp="20150623 08:21:40.303" level="INFO">${ssh_connection} = 59</msg>
<status status="PASS" endtime="20150623 08:21:40.302" starttime="20150623 08:21:40.233"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:21:40.315" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:21:40.752" level="INFO">Read output: Last login: Tue Jun 23 06:21:33 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:21:40.754" starttime="20150623 08:21:40.312"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:40.755" starttime="20150623 08:21:40.305"></status>
</kw>
<msg timestamp="20150623 08:21:40.758" level="INFO">${ssh_connection} = 59</msg>
<status status="PASS" endtime="20150623 08:21:40.757" starttime="20150623 08:21:40.220"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:40.771" starttime="20150623 08:21:40.768"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:21:40.775" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor59.log'.</msg>
<status status="PASS" endtime="20150623 08:21:40.779" starttime="20150623 08:21:40.772"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:40.780" starttime="20150623 08:21:40.761"></status>
</kw>
<msg timestamp="20150623 08:21:40.783" level="INFO">${ssh_connection} = 59</msg>
<status status="PASS" endtime="20150623 08:21:40.782" starttime="20150623 08:21:40.207"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:40.806" starttime="20150623 08:21:40.801"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:40.808" starttime="20150623 08:21:40.796"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:21:40.819" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:21:40.822" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:21:40.821" starttime="20150623 08:21:40.816"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:21:40.825" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:21:40.826" starttime="20150623 08:21:40.823"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:40.830" starttime="20150623 08:21:40.827"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:40.839" starttime="20150623 08:21:40.831"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:40.841" starttime="20150623 08:21:40.810"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:40.860" starttime="20150623 08:21:40.857"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:21:40.868" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:21:40.867" starttime="20150623 08:21:40.861"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:21:40.874" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:21:40.875" starttime="20150623 08:21:40.869"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:40.886" starttime="20150623 08:21:40.884"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:21:40.889" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:21:40.934" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:21:40.935" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:21:40.935" starttime="20150623 08:21:40.888"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:21:40.940" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:21:41.024" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:21:41.027" level="INFO">${processes_string} = 29855 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor59.log
29870 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
29888 ?        ...</msg>
<status status="PASS" endtime="20150623 08:21:41.025" starttime="20150623 08:21:40.937"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:21:41.032" level="INFO">@{processes_list} = [ 29855 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor59.log | 29870 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 29888 ?  ...</msg>
<status status="PASS" endtime="20150623 08:21:41.031" starttime="20150623 08:21:41.029"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 29855 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor59.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:21:41.039" level="INFO">${pid} = 29855</msg>
<status status="PASS" endtime="20150623 08:21:41.038" starttime="20150623 08:21:41.035"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:21:41.043" level="INFO">Executing command 'kill -9 29855'.</msg>
<msg timestamp="20150623 08:21:41.104" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:21:41.105" starttime="20150623 08:21:41.040"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:41.106" starttime="20150623 08:21:41.034"></status>
</kw>
<kw type="foritem" name="${process} = 29870 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:21:41.111" level="INFO">${pid} = 29870</msg>
<status status="PASS" endtime="20150623 08:21:41.110" starttime="20150623 08:21:41.107"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:21:41.114" level="INFO">Executing command 'kill -9 29870'.</msg>
<msg timestamp="20150623 08:21:41.183" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:21:41.184" starttime="20150623 08:21:41.112"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:41.185" starttime="20150623 08:21:41.106"></status>
</kw>
<kw type="foritem" name="${process} = 29888 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:21:41.190" level="INFO">${pid} = 29888</msg>
<status status="PASS" endtime="20150623 08:21:41.190" starttime="20150623 08:21:41.187"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:21:41.194" level="INFO">Executing command 'kill -9 29888'.</msg>
<msg timestamp="20150623 08:21:41.264" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:21:41.265" starttime="20150623 08:21:41.192"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:41.266" starttime="20150623 08:21:41.186"></status>
</kw>
<kw type="foritem" name="${process} = 29904 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:21:41.272" level="INFO">${pid} = 29904</msg>
<status status="PASS" endtime="20150623 08:21:41.270" starttime="20150623 08:21:41.268"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:21:41.276" level="INFO">Executing command 'kill -9 29904'.</msg>
<msg timestamp="20150623 08:21:41.344" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:21:41.345" starttime="20150623 08:21:41.274"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:41.346" starttime="20150623 08:21:41.267"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:41.346" starttime="20150623 08:21:41.033"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:41.347" starttime="20150623 08:21:40.877"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:21:41.352" level="INFO">Starting command 'cat tmpfilemonitor59.log'.</msg>
<status status="PASS" endtime="20150623 08:21:41.387" starttime="20150623 08:21:41.349"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:21:41.390" level="INFO">Reading output of command 'cat tmpfilemonitor59.log'.</msg>
<msg timestamp="20150623 08:21:41.426" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:21:41.428" level="INFO">${stdout_string} = [2015-06-23 06:21:21,297][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:21:41.427" starttime="20150623 08:21:41.388"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:21:41.432" level="INFO">Executing command 'rm tmpfilemonitor59.log'.</msg>
<msg timestamp="20150623 08:21:41.507" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:21:41.508" starttime="20150623 08:21:41.429"></status>
</kw>
<msg timestamp="20150623 08:21:41.511" level="INFO">${tailed_text} = [2015-06-23 06:21:21,297][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:21:41.510" starttime="20150623 08:21:40.851"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:41.520" starttime="20150623 08:21:41.513"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:41.531" starttime="20150623 08:21:41.528"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:21:41.538" starttime="20150623 08:21:41.532"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:41.540" starttime="20150623 08:21:41.521"></status>
</kw>
<msg timestamp="20150623 08:21:41.545" level="INFO">${tailed_text} = [2015-06-23 06:21:21,297][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:21:41.544" starttime="20150623 08:21:40.844"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:41.565" starttime="20150623 08:21:41.563"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:41.566" starttime="20150623 08:21:41.556"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:41.573" starttime="20150623 08:21:41.568"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:41.577" starttime="20150623 08:21:41.574"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:41.581" starttime="20150623 08:21:41.578"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:41.582" starttime="20150623 08:21:41.549"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:41.633" starttime="20150623 08:21:41.631"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:41.642" starttime="20150623 08:21:41.635"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:41.645" starttime="20150623 08:21:41.643"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:21:41.649" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:21:41.652" level="INFO">${queryResultSetLines} = 1004519|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:21:41.651" starttime="20150623 08:21:41.647"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:41.655" starttime="20150623 08:21:41.653"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:21:41.659" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:21:41.660" level="INFO">@{queryResultSet} = [ 1004519|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:21:41.660" starttime="20150623 08:21:41.656"></status>
</kw>
<msg timestamp="20150623 08:21:41.663" level="INFO">@{queryRows} = [ 1004519|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:21:41.662" starttime="20150623 08:21:41.625"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:21:41.668" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:21:41.669" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:21:41.668" starttime="20150623 08:21:41.665"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:21:41.673" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:21:41.675" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:21:41.674" starttime="20150623 08:21:41.670"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:21:41.685" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:21:41.686" starttime="20150623 08:21:41.683"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:41.687" starttime="20150623 08:21:41.676"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:41.694" starttime="20150623 08:21:41.688"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:41.695" starttime="20150623 08:21:41.616"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:41.697" starttime="20150623 08:21:40.188"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:41.699" starttime="20150623 08:21:40.181"></status>
</kw>
<msg timestamp="20150623 08:21:41.702" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:21:41.700" starttime="20150623 08:21:40.179"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:21:41.706" level="INFO">Index in the 2. loop: 6</msg>
<status status="PASS" endtime="20150623 08:21:41.707" starttime="20150623 08:21:41.703"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:21:46.711" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20150623 08:21:46.713" starttime="20150623 08:21:41.708"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:21:46.723" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:21:46.723" starttime="20150623 08:21:46.716"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:46.724" starttime="20150623 08:21:40.178"></status>
</kw>
<kw type="foritem" name="${index} = 7">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:46.778" starttime="20150623 08:21:46.776"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:46.844" starttime="20150623 08:21:46.787"></status>
</kw>
<msg timestamp="20150623 08:21:46.846" level="INFO">${ssh_connection} = 60</msg>
<status status="PASS" endtime="20150623 08:21:46.845" starttime="20150623 08:21:46.780"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:21:46.857" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:21:47.300" level="INFO">Read output: Last login: Tue Jun 23 06:21:40 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:21:47.302" starttime="20150623 08:21:46.855"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:47.304" starttime="20150623 08:21:46.847"></status>
</kw>
<msg timestamp="20150623 08:21:47.308" level="INFO">${ssh_connection} = 60</msg>
<status status="PASS" endtime="20150623 08:21:47.307" starttime="20150623 08:21:46.767"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:47.321" starttime="20150623 08:21:47.318"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:21:47.325" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor60.log'.</msg>
<status status="PASS" endtime="20150623 08:21:47.331" starttime="20150623 08:21:47.322"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:47.332" starttime="20150623 08:21:47.311"></status>
</kw>
<msg timestamp="20150623 08:21:47.335" level="INFO">${ssh_connection} = 60</msg>
<status status="PASS" endtime="20150623 08:21:47.334" starttime="20150623 08:21:46.754"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:47.363" starttime="20150623 08:21:47.355"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:47.364" starttime="20150623 08:21:47.349"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:21:47.375" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:21:47.377" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:21:47.376" starttime="20150623 08:21:47.372"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:21:47.381" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:21:47.382" starttime="20150623 08:21:47.379"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:47.385" starttime="20150623 08:21:47.383"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:47.396" starttime="20150623 08:21:47.386"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:47.397" starttime="20150623 08:21:47.366"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:47.416" starttime="20150623 08:21:47.413"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:21:47.424" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:21:47.423" starttime="20150623 08:21:47.417"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:21:47.430" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:21:47.431" starttime="20150623 08:21:47.425"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:47.442" starttime="20150623 08:21:47.439"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:21:47.445" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:21:47.494" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:21:47.496" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:21:47.495" starttime="20150623 08:21:47.443"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:21:47.500" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:21:47.593" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:21:47.595" level="INFO">${processes_string} = 30031 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor60.log
30046 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
30064 ?        ...</msg>
<status status="PASS" endtime="20150623 08:21:47.594" starttime="20150623 08:21:47.497"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:21:47.600" level="INFO">@{processes_list} = [ 30031 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor60.log | 30046 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 30064 ?  ...</msg>
<status status="PASS" endtime="20150623 08:21:47.599" starttime="20150623 08:21:47.596"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 30031 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor60.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:21:47.606" level="INFO">${pid} = 30031</msg>
<status status="PASS" endtime="20150623 08:21:47.606" starttime="20150623 08:21:47.603"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:21:47.610" level="INFO">Executing command 'kill -9 30031'.</msg>
<msg timestamp="20150623 08:21:47.673" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:21:47.675" starttime="20150623 08:21:47.608"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:47.676" starttime="20150623 08:21:47.602"></status>
</kw>
<kw type="foritem" name="${process} = 30046 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:21:47.681" level="INFO">${pid} = 30046</msg>
<status status="PASS" endtime="20150623 08:21:47.680" starttime="20150623 08:21:47.677"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:21:47.684" level="INFO">Executing command 'kill -9 30046'.</msg>
<msg timestamp="20150623 08:21:47.754" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:21:47.755" starttime="20150623 08:21:47.682"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:47.756" starttime="20150623 08:21:47.676"></status>
</kw>
<kw type="foritem" name="${process} = 30064 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:21:47.761" level="INFO">${pid} = 30064</msg>
<status status="PASS" endtime="20150623 08:21:47.760" starttime="20150623 08:21:47.757"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:21:47.765" level="INFO">Executing command 'kill -9 30064'.</msg>
<msg timestamp="20150623 08:21:47.835" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:21:47.836" starttime="20150623 08:21:47.762"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:47.837" starttime="20150623 08:21:47.756"></status>
</kw>
<kw type="foritem" name="${process} = 30080 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:21:47.842" level="INFO">${pid} = 30080</msg>
<status status="PASS" endtime="20150623 08:21:47.841" starttime="20150623 08:21:47.838"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:21:47.846" level="INFO">Executing command 'kill -9 30080'.</msg>
<msg timestamp="20150623 08:21:47.914" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:21:47.915" starttime="20150623 08:21:47.843"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:47.916" starttime="20150623 08:21:47.837"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:47.916" starttime="20150623 08:21:47.601"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:47.917" starttime="20150623 08:21:47.433"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:21:47.921" level="INFO">Starting command 'cat tmpfilemonitor60.log'.</msg>
<status status="PASS" endtime="20150623 08:21:47.957" starttime="20150623 08:21:47.918"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:21:47.960" level="INFO">Reading output of command 'cat tmpfilemonitor60.log'.</msg>
<msg timestamp="20150623 08:21:47.994" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:21:47.996" level="INFO">${stdout_string} = [2015-06-23 06:21:27,773][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:21:47.995" starttime="20150623 08:21:47.958"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:21:48.000" level="INFO">Executing command 'rm tmpfilemonitor60.log'.</msg>
<msg timestamp="20150623 08:21:48.074" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:21:48.075" starttime="20150623 08:21:47.998"></status>
</kw>
<msg timestamp="20150623 08:21:48.080" level="INFO">${tailed_text} = [2015-06-23 06:21:27,773][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:21:48.078" starttime="20150623 08:21:47.407"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:48.088" starttime="20150623 08:21:48.081"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:48.099" starttime="20150623 08:21:48.096"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:21:48.103" starttime="20150623 08:21:48.101"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:48.108" starttime="20150623 08:21:48.090"></status>
</kw>
<msg timestamp="20150623 08:21:48.111" level="INFO">${tailed_text} = [2015-06-23 06:21:27,773][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:21:48.110" starttime="20150623 08:21:47.400"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:48.130" starttime="20150623 08:21:48.127"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:48.131" starttime="20150623 08:21:48.121"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:48.138" starttime="20150623 08:21:48.132"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:48.142" starttime="20150623 08:21:48.139"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:48.145" starttime="20150623 08:21:48.143"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:48.147" starttime="20150623 08:21:48.114"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:48.177" starttime="20150623 08:21:48.176"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:48.187" starttime="20150623 08:21:48.179"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:48.190" starttime="20150623 08:21:48.188"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:21:48.194" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:21:48.196" level="INFO">${queryResultSetLines} = 1004520|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:21:48.195" starttime="20150623 08:21:48.191"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:48.199" starttime="20150623 08:21:48.197"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:21:48.203" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:21:48.204" level="INFO">@{queryResultSet} = [ 1004520|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:21:48.203" starttime="20150623 08:21:48.200"></status>
</kw>
<msg timestamp="20150623 08:21:48.207" level="INFO">@{queryRows} = [ 1004520|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:21:48.206" starttime="20150623 08:21:48.169"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:21:48.211" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:21:48.213" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:21:48.212" starttime="20150623 08:21:48.208"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:21:48.216" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:21:48.218" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:21:48.217" starttime="20150623 08:21:48.214"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:21:48.228" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:21:48.229" starttime="20150623 08:21:48.226"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:48.230" starttime="20150623 08:21:48.219"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:48.237" starttime="20150623 08:21:48.231"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:48.238" starttime="20150623 08:21:48.160"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:48.239" starttime="20150623 08:21:46.735"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:48.241" starttime="20150623 08:21:46.729"></status>
</kw>
<msg timestamp="20150623 08:21:48.245" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:21:48.243" starttime="20150623 08:21:46.727"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:21:48.248" level="INFO">Index in the 2. loop: 7</msg>
<status status="PASS" endtime="20150623 08:21:48.249" starttime="20150623 08:21:48.246"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:21:53.253" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20150623 08:21:53.256" starttime="20150623 08:21:48.251"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:21:53.266" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:21:53.265" starttime="20150623 08:21:53.258"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:53.267" starttime="20150623 08:21:46.726"></status>
</kw>
<kw type="foritem" name="${index} = 8">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:53.322" starttime="20150623 08:21:53.320"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:53.389" starttime="20150623 08:21:53.330"></status>
</kw>
<msg timestamp="20150623 08:21:53.391" level="INFO">${ssh_connection} = 61</msg>
<status status="PASS" endtime="20150623 08:21:53.390" starttime="20150623 08:21:53.323"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:21:53.402" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:21:53.840" level="INFO">Read output: Last login: Tue Jun 23 06:21:47 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:21:53.841" starttime="20150623 08:21:53.399"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:53.842" starttime="20150623 08:21:53.392"></status>
</kw>
<msg timestamp="20150623 08:21:53.843" level="INFO">${ssh_connection} = 61</msg>
<status status="PASS" endtime="20150623 08:21:53.843" starttime="20150623 08:21:53.310"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:53.849" starttime="20150623 08:21:53.848"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:21:53.851" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor61.log'.</msg>
<status status="PASS" endtime="20150623 08:21:53.855" starttime="20150623 08:21:53.850"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:53.856" starttime="20150623 08:21:53.845"></status>
</kw>
<msg timestamp="20150623 08:21:53.857" level="INFO">${ssh_connection} = 61</msg>
<status status="PASS" endtime="20150623 08:21:53.857" starttime="20150623 08:21:53.297"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:53.871" starttime="20150623 08:21:53.866"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:53.872" starttime="20150623 08:21:53.863"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:21:53.883" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:21:53.886" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:21:53.885" starttime="20150623 08:21:53.881"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:21:53.889" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:21:53.890" starttime="20150623 08:21:53.887"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:53.894" starttime="20150623 08:21:53.891"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:53.904" starttime="20150623 08:21:53.895"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:53.906" starttime="20150623 08:21:53.874"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:53.936" starttime="20150623 08:21:53.933"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:21:53.944" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:21:53.943" starttime="20150623 08:21:53.938"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:21:53.950" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:21:53.951" starttime="20150623 08:21:53.946"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:53.962" starttime="20150623 08:21:53.960"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:21:53.965" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:21:54.013" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:21:54.016" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:21:54.014" starttime="20150623 08:21:53.964"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:21:54.020" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:21:54.112" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:21:54.114" level="INFO">${processes_string} = 30205 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor61.log
30220 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
30238 ?        ...</msg>
<status status="PASS" endtime="20150623 08:21:54.113" starttime="20150623 08:21:54.017"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:21:54.120" level="INFO">@{processes_list} = [ 30205 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor61.log | 30220 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 30238 ?  ...</msg>
<status status="PASS" endtime="20150623 08:21:54.119" starttime="20150623 08:21:54.116"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 30205 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor61.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:21:54.126" level="INFO">${pid} = 30205</msg>
<status status="PASS" endtime="20150623 08:21:54.125" starttime="20150623 08:21:54.123"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:21:54.130" level="INFO">Executing command 'kill -9 30205'.</msg>
<msg timestamp="20150623 08:21:54.193" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:21:54.194" starttime="20150623 08:21:54.127"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:54.195" starttime="20150623 08:21:54.122"></status>
</kw>
<kw type="foritem" name="${process} = 30220 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:21:54.200" level="INFO">${pid} = 30220</msg>
<status status="PASS" endtime="20150623 08:21:54.199" starttime="20150623 08:21:54.196"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:21:54.204" level="INFO">Executing command 'kill -9 30220'.</msg>
<msg timestamp="20150623 08:21:54.275" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:21:54.276" starttime="20150623 08:21:54.201"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:54.276" starttime="20150623 08:21:54.195"></status>
</kw>
<kw type="foritem" name="${process} = 30238 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:21:54.281" level="INFO">${pid} = 30238</msg>
<status status="PASS" endtime="20150623 08:21:54.281" starttime="20150623 08:21:54.278"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:21:54.285" level="INFO">Executing command 'kill -9 30238'.</msg>
<msg timestamp="20150623 08:21:54.357" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:21:54.358" starttime="20150623 08:21:54.283"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:54.359" starttime="20150623 08:21:54.277"></status>
</kw>
<kw type="foritem" name="${process} = 30254 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:21:54.364" level="INFO">${pid} = 30254</msg>
<status status="PASS" endtime="20150623 08:21:54.364" starttime="20150623 08:21:54.361"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:21:54.368" level="INFO">Executing command 'kill -9 30254'.</msg>
<msg timestamp="20150623 08:21:54.437" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:21:54.438" starttime="20150623 08:21:54.366"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:54.439" starttime="20150623 08:21:54.360"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:54.439" starttime="20150623 08:21:54.121"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:54.440" starttime="20150623 08:21:53.953"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:21:54.445" level="INFO">Starting command 'cat tmpfilemonitor61.log'.</msg>
<status status="PASS" endtime="20150623 08:21:54.480" starttime="20150623 08:21:54.442"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:21:54.483" level="INFO">Reading output of command 'cat tmpfilemonitor61.log'.</msg>
<msg timestamp="20150623 08:21:54.512" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:21:54.514" level="INFO">${stdout_string} = [2015-06-23 06:21:34,327][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:21:54.513" starttime="20150623 08:21:54.481"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:21:54.518" level="INFO">Executing command 'rm tmpfilemonitor61.log'.</msg>
<msg timestamp="20150623 08:21:54.592" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:21:54.593" starttime="20150623 08:21:54.515"></status>
</kw>
<msg timestamp="20150623 08:21:54.597" level="INFO">${tailed_text} = [2015-06-23 06:21:34,327][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:21:54.595" starttime="20150623 08:21:53.916"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:54.605" starttime="20150623 08:21:54.598"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:54.616" starttime="20150623 08:21:54.613"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:21:54.620" starttime="20150623 08:21:54.617"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:54.626" starttime="20150623 08:21:54.607"></status>
</kw>
<msg timestamp="20150623 08:21:54.630" level="INFO">${tailed_text} = [2015-06-23 06:21:34,327][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:21:54.628" starttime="20150623 08:21:53.909"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:54.649" starttime="20150623 08:21:54.646"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:54.650" starttime="20150623 08:21:54.640"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:54.657" starttime="20150623 08:21:54.651"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:54.661" starttime="20150623 08:21:54.658"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:54.665" starttime="20150623 08:21:54.662"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:54.666" starttime="20150623 08:21:54.633"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:54.698" starttime="20150623 08:21:54.696"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:54.706" starttime="20150623 08:21:54.699"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:54.709" starttime="20150623 08:21:54.707"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:21:54.713" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:21:54.716" level="INFO">${queryResultSetLines} = 1004521|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:21:54.715" starttime="20150623 08:21:54.711"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:54.719" starttime="20150623 08:21:54.717"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:21:54.722" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:21:54.724" level="INFO">@{queryResultSet} = [ 1004521|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:21:54.723" starttime="20150623 08:21:54.720"></status>
</kw>
<msg timestamp="20150623 08:21:54.727" level="INFO">@{queryRows} = [ 1004521|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:21:54.726" starttime="20150623 08:21:54.690"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:21:54.731" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:21:54.733" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:21:54.732" starttime="20150623 08:21:54.728"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:21:54.736" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:21:54.738" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:21:54.737" starttime="20150623 08:21:54.734"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:21:54.748" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:21:54.749" starttime="20150623 08:21:54.746"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:54.750" starttime="20150623 08:21:54.739"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:54.757" starttime="20150623 08:21:54.751"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:54.758" starttime="20150623 08:21:54.680"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:54.760" starttime="20150623 08:21:53.278"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:54.762" starttime="20150623 08:21:53.271"></status>
</kw>
<msg timestamp="20150623 08:21:54.765" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:21:54.763" starttime="20150623 08:21:53.269"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:21:54.769" level="INFO">Index in the 2. loop: 8</msg>
<status status="PASS" endtime="20150623 08:21:54.770" starttime="20150623 08:21:54.766"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:21:59.774" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20150623 08:21:59.776" starttime="20150623 08:21:54.771"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:21:59.786" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:21:59.786" starttime="20150623 08:21:59.779"></status>
</kw>
<status status="PASS" endtime="20150623 08:21:59.787" starttime="20150623 08:21:53.268"></status>
</kw>
<kw type="foritem" name="${index} = 9">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:59.843" starttime="20150623 08:21:59.840"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:21:59.915" starttime="20150623 08:21:59.851"></status>
</kw>
<msg timestamp="20150623 08:21:59.917" level="INFO">${ssh_connection} = 62</msg>
<status status="PASS" endtime="20150623 08:21:59.916" starttime="20150623 08:21:59.844"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:21:59.929" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:22:00.328" level="INFO">Read output: Last login: Tue Jun 23 06:21:53 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:22:00.330" starttime="20150623 08:21:59.926"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:00.333" starttime="20150623 08:21:59.919"></status>
</kw>
<msg timestamp="20150623 08:22:00.337" level="INFO">${ssh_connection} = 62</msg>
<status status="PASS" endtime="20150623 08:22:00.336" starttime="20150623 08:21:59.831"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:00.350" starttime="20150623 08:22:00.347"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:22:00.354" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor62.log'.</msg>
<status status="PASS" endtime="20150623 08:22:00.358" starttime="20150623 08:22:00.351"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:00.360" starttime="20150623 08:22:00.340"></status>
</kw>
<msg timestamp="20150623 08:22:00.363" level="INFO">${ssh_connection} = 62</msg>
<status status="PASS" endtime="20150623 08:22:00.362" starttime="20150623 08:21:59.818"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:00.390" starttime="20150623 08:22:00.383"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:00.391" starttime="20150623 08:22:00.376"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:22:00.402" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:22:00.405" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:22:00.404" starttime="20150623 08:22:00.400"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:22:00.408" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:22:00.409" starttime="20150623 08:22:00.406"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:00.413" starttime="20150623 08:22:00.410"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:00.424" starttime="20150623 08:22:00.414"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:00.425" starttime="20150623 08:22:00.393"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:00.444" starttime="20150623 08:22:00.442"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:22:00.452" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:22:00.451" starttime="20150623 08:22:00.446"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:22:00.458" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:22:00.459" starttime="20150623 08:22:00.453"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:00.470" starttime="20150623 08:22:00.467"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:22:00.473" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:22:00.511" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:22:00.513" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:22:00.512" starttime="20150623 08:22:00.471"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:22:00.518" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:22:00.608" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:22:00.610" level="INFO">${processes_string} = 30379 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor62.log
30394 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
30412 ?        ...</msg>
<status status="PASS" endtime="20150623 08:22:00.609" starttime="20150623 08:22:00.515"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:22:00.615" level="INFO">@{processes_list} = [ 30379 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor62.log | 30394 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 30412 ?  ...</msg>
<status status="PASS" endtime="20150623 08:22:00.614" starttime="20150623 08:22:00.611"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 30379 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor62.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:22:00.621" level="INFO">${pid} = 30379</msg>
<status status="PASS" endtime="20150623 08:22:00.621" starttime="20150623 08:22:00.618"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:22:00.625" level="INFO">Executing command 'kill -9 30379'.</msg>
<msg timestamp="20150623 08:22:00.687" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:22:00.688" starttime="20150623 08:22:00.623"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:00.689" starttime="20150623 08:22:00.617"></status>
</kw>
<kw type="foritem" name="${process} = 30394 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:22:00.694" level="INFO">${pid} = 30394</msg>
<status status="PASS" endtime="20150623 08:22:00.693" starttime="20150623 08:22:00.690"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:22:00.698" level="INFO">Executing command 'kill -9 30394'.</msg>
<msg timestamp="20150623 08:22:00.767" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:22:00.768" starttime="20150623 08:22:00.695"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:00.769" starttime="20150623 08:22:00.689"></status>
</kw>
<kw type="foritem" name="${process} = 30412 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:22:00.774" level="INFO">${pid} = 30412</msg>
<status status="PASS" endtime="20150623 08:22:00.773" starttime="20150623 08:22:00.771"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:22:00.778" level="INFO">Executing command 'kill -9 30412'.</msg>
<msg timestamp="20150623 08:22:00.850" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:22:00.851" starttime="20150623 08:22:00.776"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:00.852" starttime="20150623 08:22:00.770"></status>
</kw>
<kw type="foritem" name="${process} = 30428 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:22:00.857" level="INFO">${pid} = 30428</msg>
<status status="PASS" endtime="20150623 08:22:00.857" starttime="20150623 08:22:00.854"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:22:00.861" level="INFO">Executing command 'kill -9 30428'.</msg>
<msg timestamp="20150623 08:22:00.932" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:22:00.933" starttime="20150623 08:22:00.859"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:00.934" starttime="20150623 08:22:00.853"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:00.934" starttime="20150623 08:22:00.616"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:00.935" starttime="20150623 08:22:00.461"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:22:00.939" level="INFO">Starting command 'cat tmpfilemonitor62.log'.</msg>
<status status="PASS" endtime="20150623 08:22:00.975" starttime="20150623 08:22:00.937"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:22:00.978" level="INFO">Reading output of command 'cat tmpfilemonitor62.log'.</msg>
<msg timestamp="20150623 08:22:01.014" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:22:01.017" level="INFO">${stdout_string} = [2015-06-23 06:21:40,866][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:22:01.016" starttime="20150623 08:22:00.976"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:22:01.021" level="INFO">Executing command 'rm tmpfilemonitor62.log'.</msg>
<msg timestamp="20150623 08:22:01.098" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:22:01.099" starttime="20150623 08:22:01.019"></status>
</kw>
<msg timestamp="20150623 08:22:01.103" level="INFO">${tailed_text} = [2015-06-23 06:21:40,866][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:22:01.101" starttime="20150623 08:22:00.436"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:01.111" starttime="20150623 08:22:01.104"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:01.122" starttime="20150623 08:22:01.120"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:22:01.126" starttime="20150623 08:22:01.124"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:01.131" starttime="20150623 08:22:01.113"></status>
</kw>
<msg timestamp="20150623 08:22:01.134" level="INFO">${tailed_text} = [2015-06-23 06:21:40,866][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:22:01.133" starttime="20150623 08:22:00.428"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:01.154" starttime="20150623 08:22:01.151"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:01.155" starttime="20150623 08:22:01.144"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:01.162" starttime="20150623 08:22:01.156"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:01.166" starttime="20150623 08:22:01.163"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:01.170" starttime="20150623 08:22:01.167"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:01.171" starttime="20150623 08:22:01.137"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:01.202" starttime="20150623 08:22:01.200"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:01.209" starttime="20150623 08:22:01.203"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:01.212" starttime="20150623 08:22:01.210"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:22:01.216" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:22:01.219" level="INFO">${queryResultSetLines} = 1004522|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:22:01.218" starttime="20150623 08:22:01.214"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:01.222" starttime="20150623 08:22:01.220"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:22:01.225" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:22:01.227" level="INFO">@{queryResultSet} = [ 1004522|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:22:01.226" starttime="20150623 08:22:01.223"></status>
</kw>
<msg timestamp="20150623 08:22:01.229" level="INFO">@{queryRows} = [ 1004522|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:22:01.229" starttime="20150623 08:22:01.193"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:22:01.234" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:22:01.235" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:22:01.234" starttime="20150623 08:22:01.231"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:22:01.239" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:22:01.240" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:22:01.239" starttime="20150623 08:22:01.236"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:22:01.251" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:22:01.252" starttime="20150623 08:22:01.249"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:01.253" starttime="20150623 08:22:01.242"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:01.260" starttime="20150623 08:22:01.254"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:01.261" starttime="20150623 08:22:01.185"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:01.262" starttime="20150623 08:21:59.799"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:01.264" starttime="20150623 08:21:59.792"></status>
</kw>
<msg timestamp="20150623 08:22:01.268" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:22:01.266" starttime="20150623 08:21:59.790"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:22:01.271" level="INFO">Index in the 2. loop: 9</msg>
<status status="PASS" endtime="20150623 08:22:01.272" starttime="20150623 08:22:01.269"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:22:06.277" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20150623 08:22:06.279" starttime="20150623 08:22:01.274"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:22:06.289" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:22:06.288" starttime="20150623 08:22:06.282"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:06.290" starttime="20150623 08:21:59.789"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:06.291" starttime="20150623 08:21:00.800"></status>
</kw>
<msg timestamp="20150623 08:22:06.295" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:22:06.293" starttime="20150623 08:21:00.794"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>For delay ${loopIdx} we had ${failure} failure(s)</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:22:06.299" level="INFO">For delay 5 we had None failure(s)</msg>
<status status="PASS" endtime="20150623 08:22:06.300" starttime="20150623 08:22:06.296"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:06.300" starttime="20150623 08:21:00.784"></status>
</kw>
<kw type="foritem" name="${loopIdx} = 6">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Sitting in first FOR, Loop No.: ${loopIdx}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:22:06.302" level="INFO">Sitting in first FOR, Loop No.: 6</msg>
<status status="PASS" endtime="20150623 08:22:06.302" starttime="20150623 08:22:06.301"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Timeout set to ${loopIdx} secs</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:22:06.304" level="INFO">Timeout set to 6 secs</msg>
<status status="PASS" endtime="20150623 08:22:06.304" starttime="20150623 08:22:06.303"></status>
</kw>
<kw type="kw" name="${failure} = Internal Loop">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${loopIdx}</arg>
</arguments>
<kw type="for" name="${index} IN RANGE [ 0 | 10 ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${index} = 0">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:06.350" starttime="20150623 08:22:06.349"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:06.413" starttime="20150623 08:22:06.354"></status>
</kw>
<msg timestamp="20150623 08:22:06.416" level="INFO">${ssh_connection} = 63</msg>
<status status="PASS" endtime="20150623 08:22:06.415" starttime="20150623 08:22:06.350"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:22:06.431" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:22:06.885" level="INFO">Read output: Last login: Tue Jun 23 06:22:00 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:22:06.887" starttime="20150623 08:22:06.427"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:06.888" starttime="20150623 08:22:06.417"></status>
</kw>
<msg timestamp="20150623 08:22:06.891" level="INFO">${ssh_connection} = 63</msg>
<status status="PASS" endtime="20150623 08:22:06.890" starttime="20150623 08:22:06.329"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:06.904" starttime="20150623 08:22:06.901"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:22:06.908" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor63.log'.</msg>
<status status="PASS" endtime="20150623 08:22:06.912" starttime="20150623 08:22:06.905"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:06.914" starttime="20150623 08:22:06.894"></status>
</kw>
<msg timestamp="20150623 08:22:06.916" level="INFO">${ssh_connection} = 63</msg>
<status status="PASS" endtime="20150623 08:22:06.916" starttime="20150623 08:22:06.323"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:06.967" starttime="20150623 08:22:06.937"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:06.968" starttime="20150623 08:22:06.930"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:22:06.979" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:22:06.981" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:22:06.980" starttime="20150623 08:22:06.976"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:22:06.985" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:22:06.986" starttime="20150623 08:22:06.983"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:06.989" starttime="20150623 08:22:06.987"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:07.000" starttime="20150623 08:22:06.991"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:07.002" starttime="20150623 08:22:06.969"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:07.025" starttime="20150623 08:22:07.023"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:22:07.033" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:22:07.032" starttime="20150623 08:22:07.027"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:22:07.040" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:22:07.041" starttime="20150623 08:22:07.035"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:07.052" starttime="20150623 08:22:07.049"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:22:07.055" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:22:07.099" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:22:07.101" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:22:07.100" starttime="20150623 08:22:07.053"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:22:07.105" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:22:07.190" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:22:07.192" level="INFO">${processes_string} = 30555 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor63.log
30570 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
30588 ?        ...</msg>
<status status="PASS" endtime="20150623 08:22:07.191" starttime="20150623 08:22:07.102"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:22:07.197" level="INFO">@{processes_list} = [ 30555 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor63.log | 30570 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 30588 ?  ...</msg>
<status status="PASS" endtime="20150623 08:22:07.196" starttime="20150623 08:22:07.193"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 30555 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor63.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:22:07.204" level="INFO">${pid} = 30555</msg>
<status status="PASS" endtime="20150623 08:22:07.203" starttime="20150623 08:22:07.200"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:22:07.208" level="INFO">Executing command 'kill -9 30555'.</msg>
<msg timestamp="20150623 08:22:07.262" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:22:07.263" starttime="20150623 08:22:07.205"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:07.264" starttime="20150623 08:22:07.199"></status>
</kw>
<kw type="foritem" name="${process} = 30570 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:22:07.269" level="INFO">${pid} = 30570</msg>
<status status="PASS" endtime="20150623 08:22:07.268" starttime="20150623 08:22:07.266"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:22:07.273" level="INFO">Executing command 'kill -9 30570'.</msg>
<msg timestamp="20150623 08:22:07.345" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:22:07.346" starttime="20150623 08:22:07.271"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:07.347" starttime="20150623 08:22:07.265"></status>
</kw>
<kw type="foritem" name="${process} = 30588 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:22:07.352" level="INFO">${pid} = 30588</msg>
<status status="PASS" endtime="20150623 08:22:07.351" starttime="20150623 08:22:07.349"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:22:07.356" level="INFO">Executing command 'kill -9 30588'.</msg>
<msg timestamp="20150623 08:22:07.428" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:22:07.429" starttime="20150623 08:22:07.354"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:07.430" starttime="20150623 08:22:07.348"></status>
</kw>
<kw type="foritem" name="${process} = 30604 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:22:07.435" level="INFO">${pid} = 30604</msg>
<status status="PASS" endtime="20150623 08:22:07.435" starttime="20150623 08:22:07.432"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:22:07.439" level="INFO">Executing command 'kill -9 30604'.</msg>
<msg timestamp="20150623 08:22:07.515" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:22:07.516" starttime="20150623 08:22:07.437"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:07.517" starttime="20150623 08:22:07.431"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:07.518" starttime="20150623 08:22:07.198"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:07.518" starttime="20150623 08:22:07.043"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:22:07.522" level="INFO">Starting command 'cat tmpfilemonitor63.log'.</msg>
<status status="PASS" endtime="20150623 08:22:07.558" starttime="20150623 08:22:07.520"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:22:07.561" level="INFO">Reading output of command 'cat tmpfilemonitor63.log'.</msg>
<msg timestamp="20150623 08:22:07.590" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:22:07.591" level="INFO">${stdout_string} = [2015-06-23 06:21:47,429][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:22:07.591" starttime="20150623 08:22:07.560"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:22:07.595" level="INFO">Executing command 'rm tmpfilemonitor63.log'.</msg>
<msg timestamp="20150623 08:22:07.666" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:22:07.667" starttime="20150623 08:22:07.593"></status>
</kw>
<msg timestamp="20150623 08:22:07.669" level="INFO">${tailed_text} = [2015-06-23 06:21:47,429][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:22:07.669" starttime="20150623 08:22:07.016"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:07.678" starttime="20150623 08:22:07.671"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:07.689" starttime="20150623 08:22:07.686"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:22:07.692" starttime="20150623 08:22:07.690"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:07.697" starttime="20150623 08:22:07.680"></status>
</kw>
<msg timestamp="20150623 08:22:07.700" level="INFO">${tailed_text} = [2015-06-23 06:21:47,429][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:22:07.699" starttime="20150623 08:22:07.006"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:07.718" starttime="20150623 08:22:07.716"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:07.719" starttime="20150623 08:22:07.709"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:07.726" starttime="20150623 08:22:07.721"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:07.730" starttime="20150623 08:22:07.728"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:07.734" starttime="20150623 08:22:07.732"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:07.735" starttime="20150623 08:22:07.703"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:07.766" starttime="20150623 08:22:07.764"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:07.773" starttime="20150623 08:22:07.767"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:07.776" starttime="20150623 08:22:07.775"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:22:07.781" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:22:07.783" level="INFO">${queryResultSetLines} = 1004523|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:22:07.782" starttime="20150623 08:22:07.778"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:07.786" starttime="20150623 08:22:07.784"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:22:07.789" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:22:07.791" level="INFO">@{queryResultSet} = [ 1004523|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:22:07.790" starttime="20150623 08:22:07.787"></status>
</kw>
<msg timestamp="20150623 08:22:07.794" level="INFO">@{queryRows} = [ 1004523|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:22:07.793" starttime="20150623 08:22:07.757"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:22:07.798" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:22:07.799" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:22:07.799" starttime="20150623 08:22:07.795"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:22:07.801" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:22:07.802" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:22:07.801" starttime="20150623 08:22:07.800"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:22:07.807" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:22:07.807" starttime="20150623 08:22:07.805"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:07.807" starttime="20150623 08:22:07.802"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:07.811" starttime="20150623 08:22:07.808"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:07.811" starttime="20150623 08:22:07.749"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:07.812" starttime="20150623 08:22:06.313"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:07.813" starttime="20150623 08:22:06.310"></status>
</kw>
<msg timestamp="20150623 08:22:07.814" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:22:07.814" starttime="20150623 08:22:06.309"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:22:07.816" level="INFO">Index in the 2. loop: 0</msg>
<status status="PASS" endtime="20150623 08:22:07.816" starttime="20150623 08:22:07.815"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:22:13.819" level="INFO">Slept 6 seconds</msg>
<status status="PASS" endtime="20150623 08:22:13.822" starttime="20150623 08:22:07.817"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:22:13.832" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:22:13.831" starttime="20150623 08:22:13.824"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:13.832" starttime="20150623 08:22:06.308"></status>
</kw>
<kw type="foritem" name="${index} = 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:13.887" starttime="20150623 08:22:13.885"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:13.956" starttime="20150623 08:22:13.896"></status>
</kw>
<msg timestamp="20150623 08:22:13.959" level="INFO">${ssh_connection} = 64</msg>
<status status="PASS" endtime="20150623 08:22:13.958" starttime="20150623 08:22:13.889"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:22:13.971" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:22:14.403" level="INFO">Read output: Last login: Tue Jun 23 06:22:06 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:22:14.405" starttime="20150623 08:22:13.968"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:14.407" starttime="20150623 08:22:13.960"></status>
</kw>
<msg timestamp="20150623 08:22:14.412" level="INFO">${ssh_connection} = 64</msg>
<status status="PASS" endtime="20150623 08:22:14.410" starttime="20150623 08:22:13.876"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:14.424" starttime="20150623 08:22:14.422"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:22:14.426" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor64.log'.</msg>
<status status="PASS" endtime="20150623 08:22:14.430" starttime="20150623 08:22:14.425"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:14.431" starttime="20150623 08:22:14.415"></status>
</kw>
<msg timestamp="20150623 08:22:14.432" level="INFO">${ssh_connection} = 64</msg>
<status status="PASS" endtime="20150623 08:22:14.432" starttime="20150623 08:22:13.863"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:14.447" starttime="20150623 08:22:14.442"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:14.449" starttime="20150623 08:22:14.439"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:22:14.461" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:22:14.463" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:22:14.462" starttime="20150623 08:22:14.458"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:22:14.467" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:22:14.468" starttime="20150623 08:22:14.465"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:14.471" starttime="20150623 08:22:14.469"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:14.481" starttime="20150623 08:22:14.473"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:14.482" starttime="20150623 08:22:14.451"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:14.501" starttime="20150623 08:22:14.498"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:22:14.509" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:22:14.508" starttime="20150623 08:22:14.502"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:22:14.515" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:22:14.516" starttime="20150623 08:22:14.510"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:14.527" starttime="20150623 08:22:14.524"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:22:14.530" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:22:14.578" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:22:14.579" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:22:14.579" starttime="20150623 08:22:14.528"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:22:14.584" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:22:14.679" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:22:14.681" level="INFO">${processes_string} = 30729 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor64.log
30744 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
30762 ?        ...</msg>
<status status="PASS" endtime="20150623 08:22:14.680" starttime="20150623 08:22:14.581"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:22:14.686" level="INFO">@{processes_list} = [ 30729 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor64.log | 30744 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 30762 ?  ...</msg>
<status status="PASS" endtime="20150623 08:22:14.685" starttime="20150623 08:22:14.682"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 30729 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor64.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:22:14.693" level="INFO">${pid} = 30729</msg>
<status status="PASS" endtime="20150623 08:22:14.692" starttime="20150623 08:22:14.689"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:22:14.696" level="INFO">Executing command 'kill -9 30729'.</msg>
<msg timestamp="20150623 08:22:14.749" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:22:14.750" starttime="20150623 08:22:14.694"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:14.751" starttime="20150623 08:22:14.688"></status>
</kw>
<kw type="foritem" name="${process} = 30744 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:22:14.756" level="INFO">${pid} = 30744</msg>
<status status="PASS" endtime="20150623 08:22:14.755" starttime="20150623 08:22:14.752"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:22:14.760" level="INFO">Executing command 'kill -9 30744'.</msg>
<msg timestamp="20150623 08:22:14.827" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:22:14.828" starttime="20150623 08:22:14.758"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:14.829" starttime="20150623 08:22:14.752"></status>
</kw>
<kw type="foritem" name="${process} = 30762 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:22:14.834" level="INFO">${pid} = 30762</msg>
<status status="PASS" endtime="20150623 08:22:14.834" starttime="20150623 08:22:14.831"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:22:14.839" level="INFO">Executing command 'kill -9 30762'.</msg>
<msg timestamp="20150623 08:22:14.909" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:22:14.910" starttime="20150623 08:22:14.836"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:14.911" starttime="20150623 08:22:14.830"></status>
</kw>
<kw type="foritem" name="${process} = 30778 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:22:14.917" level="INFO">${pid} = 30778</msg>
<status status="PASS" endtime="20150623 08:22:14.916" starttime="20150623 08:22:14.913"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:22:14.921" level="INFO">Executing command 'kill -9 30778'.</msg>
<msg timestamp="20150623 08:22:14.994" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:22:14.995" starttime="20150623 08:22:14.918"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:14.996" starttime="20150623 08:22:14.912"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:14.997" starttime="20150623 08:22:14.687"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:14.998" starttime="20150623 08:22:14.518"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:22:15.002" level="INFO">Starting command 'cat tmpfilemonitor64.log'.</msg>
<status status="PASS" endtime="20150623 08:22:15.038" starttime="20150623 08:22:14.999"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:22:15.042" level="INFO">Reading output of command 'cat tmpfilemonitor64.log'.</msg>
<msg timestamp="20150623 08:22:15.076" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:22:15.078" level="INFO">${stdout_string} = [2015-06-23 06:21:53,937][INFO ][Camel (ticket-router) thread #44 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:22:15.077" starttime="20150623 08:22:15.040"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:22:15.082" level="INFO">Executing command 'rm tmpfilemonitor64.log'.</msg>
<msg timestamp="20150623 08:22:15.169" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:22:15.170" starttime="20150623 08:22:15.080"></status>
</kw>
<msg timestamp="20150623 08:22:15.173" level="INFO">${tailed_text} = [2015-06-23 06:21:53,937][INFO ][Camel (ticket-router) thread #44 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:22:15.172" starttime="20150623 08:22:14.492"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:15.182" starttime="20150623 08:22:15.175"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:15.193" starttime="20150623 08:22:15.190"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:22:15.196" starttime="20150623 08:22:15.194"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:15.201" starttime="20150623 08:22:15.184"></status>
</kw>
<msg timestamp="20150623 08:22:15.205" level="INFO">${tailed_text} = [2015-06-23 06:21:53,937][INFO ][Camel (ticket-router) thread #44 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:22:15.203" starttime="20150623 08:22:14.485"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:15.223" starttime="20150623 08:22:15.220"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:15.224" starttime="20150623 08:22:15.214"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:15.231" starttime="20150623 08:22:15.225"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:15.235" starttime="20150623 08:22:15.232"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:15.238" starttime="20150623 08:22:15.236"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:15.240" starttime="20150623 08:22:15.208"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:15.271" starttime="20150623 08:22:15.269"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:15.298" starttime="20150623 08:22:15.291"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:15.301" starttime="20150623 08:22:15.299"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:22:15.305" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:22:15.308" level="INFO">${queryResultSetLines} = 1004524|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:22:15.307" starttime="20150623 08:22:15.303"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:15.311" starttime="20150623 08:22:15.309"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:22:15.314" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:22:15.316" level="INFO">@{queryResultSet} = [ 1004524|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:22:15.315" starttime="20150623 08:22:15.312"></status>
</kw>
<msg timestamp="20150623 08:22:15.319" level="INFO">@{queryRows} = [ 1004524|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:22:15.318" starttime="20150623 08:22:15.262"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:22:15.323" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:22:15.324" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:22:15.324" starttime="20150623 08:22:15.320"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:22:15.328" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:22:15.330" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:22:15.329" starttime="20150623 08:22:15.326"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:22:15.340" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:22:15.341" starttime="20150623 08:22:15.338"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:15.342" starttime="20150623 08:22:15.331"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:15.349" starttime="20150623 08:22:15.343"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:15.350" starttime="20150623 08:22:15.253"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:15.351" starttime="20150623 08:22:13.844"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:15.353" starttime="20150623 08:22:13.837"></status>
</kw>
<msg timestamp="20150623 08:22:15.357" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:22:15.355" starttime="20150623 08:22:13.835"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:22:15.360" level="INFO">Index in the 2. loop: 1</msg>
<status status="PASS" endtime="20150623 08:22:15.361" starttime="20150623 08:22:15.358"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:22:21.366" level="INFO">Slept 6 seconds</msg>
<status status="PASS" endtime="20150623 08:22:21.368" starttime="20150623 08:22:15.362"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:22:21.379" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:22:21.378" starttime="20150623 08:22:21.371"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:21.379" starttime="20150623 08:22:13.834"></status>
</kw>
<kw type="foritem" name="${index} = 2">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:21.434" starttime="20150623 08:22:21.432"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:21.508" starttime="20150623 08:22:21.443"></status>
</kw>
<msg timestamp="20150623 08:22:21.511" level="INFO">${ssh_connection} = 65</msg>
<status status="PASS" endtime="20150623 08:22:21.510" starttime="20150623 08:22:21.436"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:22:21.523" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:22:21.944" level="INFO">Read output: Last login: Tue Jun 23 06:22:14 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:22:21.945" starttime="20150623 08:22:21.520"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:21.945" starttime="20150623 08:22:21.512"></status>
</kw>
<msg timestamp="20150623 08:22:21.947" level="INFO">${ssh_connection} = 65</msg>
<status status="PASS" endtime="20150623 08:22:21.946" starttime="20150623 08:22:21.423"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:21.953" starttime="20150623 08:22:21.951"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:22:21.955" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor65.log'.</msg>
<status status="PASS" endtime="20150623 08:22:21.958" starttime="20150623 08:22:21.953"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:21.959" starttime="20150623 08:22:21.948"></status>
</kw>
<msg timestamp="20150623 08:22:21.960" level="INFO">${ssh_connection} = 65</msg>
<status status="PASS" endtime="20150623 08:22:21.959" starttime="20150623 08:22:21.410"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:22.000" starttime="20150623 08:22:21.987"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:22.005" starttime="20150623 08:22:21.984"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:22:22.018" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:22:22.020" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:22:22.019" starttime="20150623 08:22:22.015"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:22:22.024" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:22:22.025" starttime="20150623 08:22:22.021"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:22.028" starttime="20150623 08:22:22.026"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:22.039" starttime="20150623 08:22:22.030"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:22.040" starttime="20150623 08:22:22.008"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:22.060" starttime="20150623 08:22:22.057"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:22:22.068" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:22:22.067" starttime="20150623 08:22:22.061"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:22:22.074" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:22:22.075" starttime="20150623 08:22:22.069"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:22.087" starttime="20150623 08:22:22.084"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:22:22.090" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:22:22.139" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:22:22.141" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:22:22.140" starttime="20150623 08:22:22.088"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:22:22.145" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:22:22.239" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:22:22.241" level="INFO">${processes_string} = 30903 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor65.log
30918 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
30936 ?        ...</msg>
<status status="PASS" endtime="20150623 08:22:22.240" starttime="20150623 08:22:22.142"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:22:22.247" level="INFO">@{processes_list} = [ 30903 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor65.log | 30918 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 30936 ?  ...</msg>
<status status="PASS" endtime="20150623 08:22:22.246" starttime="20150623 08:22:22.243"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 30903 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor65.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:22:22.255" level="INFO">${pid} = 30903</msg>
<status status="PASS" endtime="20150623 08:22:22.254" starttime="20150623 08:22:22.251"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:22:22.259" level="INFO">Executing command 'kill -9 30903'.</msg>
<msg timestamp="20150623 08:22:22.321" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:22:22.322" starttime="20150623 08:22:22.257"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:22.323" starttime="20150623 08:22:22.250"></status>
</kw>
<kw type="foritem" name="${process} = 30918 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:22:22.329" level="INFO">${pid} = 30918</msg>
<status status="PASS" endtime="20150623 08:22:22.328" starttime="20150623 08:22:22.325"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:22:22.333" level="INFO">Executing command 'kill -9 30918'.</msg>
<msg timestamp="20150623 08:22:22.404" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:22:22.405" starttime="20150623 08:22:22.330"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:22.406" starttime="20150623 08:22:22.324"></status>
</kw>
<kw type="foritem" name="${process} = 30936 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:22:22.412" level="INFO">${pid} = 30936</msg>
<status status="PASS" endtime="20150623 08:22:22.411" starttime="20150623 08:22:22.408"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:22:22.416" level="INFO">Executing command 'kill -9 30936'.</msg>
<msg timestamp="20150623 08:22:22.483" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:22:22.484" starttime="20150623 08:22:22.414"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:22.485" starttime="20150623 08:22:22.407"></status>
</kw>
<kw type="foritem" name="${process} = 30952 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:22:22.490" level="INFO">${pid} = 30952</msg>
<status status="PASS" endtime="20150623 08:22:22.490" starttime="20150623 08:22:22.487"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:22:22.494" level="INFO">Executing command 'kill -9 30952'.</msg>
<msg timestamp="20150623 08:22:22.563" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:22:22.564" starttime="20150623 08:22:22.492"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:22.565" starttime="20150623 08:22:22.486"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:22.565" starttime="20150623 08:22:22.249"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:22.566" starttime="20150623 08:22:22.077"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:22:22.570" level="INFO">Starting command 'cat tmpfilemonitor65.log'.</msg>
<status status="PASS" endtime="20150623 08:22:22.606" starttime="20150623 08:22:22.567"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:22:22.609" level="INFO">Reading output of command 'cat tmpfilemonitor65.log'.</msg>
<msg timestamp="20150623 08:22:22.646" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:22:22.648" level="INFO">${stdout_string} = [2015-06-23 06:22:00,456][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:22:22.647" starttime="20150623 08:22:22.608"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:22:22.652" level="INFO">Executing command 'rm tmpfilemonitor65.log'.</msg>
<msg timestamp="20150623 08:22:22.726" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:22:22.727" starttime="20150623 08:22:22.649"></status>
</kw>
<msg timestamp="20150623 08:22:22.729" level="INFO">${tailed_text} = [2015-06-23 06:22:00,456][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:22:22.729" starttime="20150623 08:22:22.051"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:22.738" starttime="20150623 08:22:22.731"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:22.749" starttime="20150623 08:22:22.746"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:22:22.752" starttime="20150623 08:22:22.750"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:22.757" starttime="20150623 08:22:22.740"></status>
</kw>
<msg timestamp="20150623 08:22:22.760" level="INFO">${tailed_text} = [2015-06-23 06:22:00,456][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:22:22.759" starttime="20150623 08:22:22.043"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:22.778" starttime="20150623 08:22:22.776"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:22.779" starttime="20150623 08:22:22.770"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:22.786" starttime="20150623 08:22:22.780"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:22.790" starttime="20150623 08:22:22.787"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:22.794" starttime="20150623 08:22:22.791"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:22.795" starttime="20150623 08:22:22.763"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:22.826" starttime="20150623 08:22:22.824"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:22.834" starttime="20150623 08:22:22.827"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:22.837" starttime="20150623 08:22:22.835"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:22:22.841" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:22:22.843" level="INFO">${queryResultSetLines} = 1004525|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:22:22.842" starttime="20150623 08:22:22.838"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:22.846" starttime="20150623 08:22:22.844"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:22:22.850" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:22:22.851" level="INFO">@{queryResultSet} = [ 1004525|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:22:22.851" starttime="20150623 08:22:22.848"></status>
</kw>
<msg timestamp="20150623 08:22:22.854" level="INFO">@{queryRows} = [ 1004525|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:22:22.853" starttime="20150623 08:22:22.817"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:22:22.858" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:22:22.860" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:22:22.859" starttime="20150623 08:22:22.855"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:22:22.863" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:22:22.865" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:22:22.864" starttime="20150623 08:22:22.861"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:22:22.875" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:22:22.876" starttime="20150623 08:22:22.873"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:22.877" starttime="20150623 08:22:22.866"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:22.884" starttime="20150623 08:22:22.878"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:22.885" starttime="20150623 08:22:22.809"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:22.887" starttime="20150623 08:22:21.391"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:22.889" starttime="20150623 08:22:21.384"></status>
</kw>
<msg timestamp="20150623 08:22:22.892" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:22:22.890" starttime="20150623 08:22:21.382"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:22:22.895" level="INFO">Index in the 2. loop: 2</msg>
<status status="PASS" endtime="20150623 08:22:22.896" starttime="20150623 08:22:22.893"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:22:28.901" level="INFO">Slept 6 seconds</msg>
<status status="PASS" endtime="20150623 08:22:28.903" starttime="20150623 08:22:22.898"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:22:28.913" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:22:28.912" starttime="20150623 08:22:28.905"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:28.914" starttime="20150623 08:22:21.381"></status>
</kw>
<kw type="foritem" name="${index} = 3">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:28.968" starttime="20150623 08:22:28.966"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:29.037" starttime="20150623 08:22:28.977"></status>
</kw>
<msg timestamp="20150623 08:22:29.042" level="INFO">${ssh_connection} = 66</msg>
<status status="PASS" endtime="20150623 08:22:29.040" starttime="20150623 08:22:28.970"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:22:29.054" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:22:29.480" level="INFO">Read output: Last login: Tue Jun 23 06:22:21 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:22:29.481" starttime="20150623 08:22:29.051"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:29.483" starttime="20150623 08:22:29.043"></status>
</kw>
<msg timestamp="20150623 08:22:29.486" level="INFO">${ssh_connection} = 66</msg>
<status status="PASS" endtime="20150623 08:22:29.485" starttime="20150623 08:22:28.957"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:29.499" starttime="20150623 08:22:29.496"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:22:29.503" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor66.log'.</msg>
<status status="PASS" endtime="20150623 08:22:29.508" starttime="20150623 08:22:29.500"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:29.509" starttime="20150623 08:22:29.489"></status>
</kw>
<msg timestamp="20150623 08:22:29.512" level="INFO">${ssh_connection} = 66</msg>
<status status="PASS" endtime="20150623 08:22:29.511" starttime="20150623 08:22:28.944"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:29.539" starttime="20150623 08:22:29.532"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:29.540" starttime="20150623 08:22:29.525"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:22:29.552" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:22:29.554" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:22:29.553" starttime="20150623 08:22:29.549"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:22:29.558" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:22:29.559" starttime="20150623 08:22:29.556"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:29.562" starttime="20150623 08:22:29.560"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:29.573" starttime="20150623 08:22:29.563"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:29.574" starttime="20150623 08:22:29.542"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:29.593" starttime="20150623 08:22:29.590"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:22:29.601" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:22:29.600" starttime="20150623 08:22:29.594"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:22:29.607" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:22:29.608" starttime="20150623 08:22:29.602"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:29.619" starttime="20150623 08:22:29.617"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:22:29.622" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:22:29.670" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:22:29.672" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:22:29.671" starttime="20150623 08:22:29.620"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:22:29.676" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:22:29.767" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:22:29.769" level="INFO">${processes_string} = 31080 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor66.log
31095 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
31113 ?        ...</msg>
<status status="PASS" endtime="20150623 08:22:29.768" starttime="20150623 08:22:29.673"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:22:29.774" level="INFO">@{processes_list} = [ 31080 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor66.log | 31095 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 31113 ?  ...</msg>
<status status="PASS" endtime="20150623 08:22:29.774" starttime="20150623 08:22:29.771"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 31080 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor66.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:22:29.781" level="INFO">${pid} = 31080</msg>
<status status="PASS" endtime="20150623 08:22:29.780" starttime="20150623 08:22:29.777"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:22:29.785" level="INFO">Executing command 'kill -9 31080'.</msg>
<msg timestamp="20150623 08:22:29.847" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:22:29.848" starttime="20150623 08:22:29.782"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:29.849" starttime="20150623 08:22:29.776"></status>
</kw>
<kw type="foritem" name="${process} = 31095 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:22:29.854" level="INFO">${pid} = 31095</msg>
<status status="PASS" endtime="20150623 08:22:29.854" starttime="20150623 08:22:29.851"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:22:29.858" level="INFO">Executing command 'kill -9 31095'.</msg>
<msg timestamp="20150623 08:22:29.930" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:22:29.931" starttime="20150623 08:22:29.856"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:29.932" starttime="20150623 08:22:29.850"></status>
</kw>
<kw type="foritem" name="${process} = 31113 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:22:29.937" level="INFO">${pid} = 31113</msg>
<status status="PASS" endtime="20150623 08:22:29.937" starttime="20150623 08:22:29.934"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:22:29.941" level="INFO">Executing command 'kill -9 31113'.</msg>
<msg timestamp="20150623 08:22:30.018" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:22:30.019" starttime="20150623 08:22:29.939"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:30.021" starttime="20150623 08:22:29.933"></status>
</kw>
<kw type="foritem" name="${process} = 31129 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:22:30.026" level="INFO">${pid} = 31129</msg>
<status status="PASS" endtime="20150623 08:22:30.026" starttime="20150623 08:22:30.023"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:22:30.030" level="INFO">Executing command 'kill -9 31129'.</msg>
<msg timestamp="20150623 08:22:30.100" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:22:30.101" starttime="20150623 08:22:30.028"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:30.102" starttime="20150623 08:22:30.022"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:30.102" starttime="20150623 08:22:29.775"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:30.104" starttime="20150623 08:22:29.610"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:22:30.108" level="INFO">Starting command 'cat tmpfilemonitor66.log'.</msg>
<status status="PASS" endtime="20150623 08:22:30.143" starttime="20150623 08:22:30.106"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:22:30.146" level="INFO">Reading output of command 'cat tmpfilemonitor66.log'.</msg>
<msg timestamp="20150623 08:22:30.184" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:22:30.186" level="INFO">${stdout_string} = [2015-06-23 06:22:07,061][INFO ][Camel (ticket-router) thread #53 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:22:30.185" starttime="20150623 08:22:30.145"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:22:30.190" level="INFO">Executing command 'rm tmpfilemonitor66.log'.</msg>
<msg timestamp="20150623 08:22:30.268" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:22:30.269" starttime="20150623 08:22:30.187"></status>
</kw>
<msg timestamp="20150623 08:22:30.272" level="INFO">${tailed_text} = [2015-06-23 06:22:07,061][INFO ][Camel (ticket-router) thread #53 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:22:30.271" starttime="20150623 08:22:29.584"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:30.281" starttime="20150623 08:22:30.274"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:30.292" starttime="20150623 08:22:30.289"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:22:30.295" starttime="20150623 08:22:30.293"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:30.300" starttime="20150623 08:22:30.283"></status>
</kw>
<msg timestamp="20150623 08:22:30.304" level="INFO">${tailed_text} = [2015-06-23 06:22:07,061][INFO ][Camel (ticket-router) thread #53 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:22:30.302" starttime="20150623 08:22:29.577"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:30.322" starttime="20150623 08:22:30.320"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:30.323" starttime="20150623 08:22:30.313"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:30.330" starttime="20150623 08:22:30.325"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:30.334" starttime="20150623 08:22:30.332"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:30.338" starttime="20150623 08:22:30.336"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:30.339" starttime="20150623 08:22:30.307"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:30.386" starttime="20150623 08:22:30.384"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:30.395" starttime="20150623 08:22:30.387"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:30.399" starttime="20150623 08:22:30.397"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:22:30.403" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:22:30.405" level="INFO">${queryResultSetLines} = 1004526|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:22:30.404" starttime="20150623 08:22:30.400"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:30.408" starttime="20150623 08:22:30.406"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:22:30.411" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:22:30.413" level="INFO">@{queryResultSet} = [ 1004526|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:22:30.412" starttime="20150623 08:22:30.409"></status>
</kw>
<msg timestamp="20150623 08:22:30.416" level="INFO">@{queryRows} = [ 1004526|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:22:30.415" starttime="20150623 08:22:30.377"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:22:30.420" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:22:30.422" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:22:30.421" starttime="20150623 08:22:30.417"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:22:30.425" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:22:30.427" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:22:30.426" starttime="20150623 08:22:30.423"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:22:30.437" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:22:30.438" starttime="20150623 08:22:30.435"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:30.439" starttime="20150623 08:22:30.428"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:30.446" starttime="20150623 08:22:30.441"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:30.448" starttime="20150623 08:22:30.353"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:30.449" starttime="20150623 08:22:28.925"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:30.451" starttime="20150623 08:22:28.918"></status>
</kw>
<msg timestamp="20150623 08:22:30.454" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:22:30.453" starttime="20150623 08:22:28.916"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:22:30.458" level="INFO">Index in the 2. loop: 3</msg>
<status status="PASS" endtime="20150623 08:22:30.459" starttime="20150623 08:22:30.455"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:22:36.464" level="INFO">Slept 6 seconds</msg>
<status status="PASS" endtime="20150623 08:22:36.466" starttime="20150623 08:22:30.460"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:22:36.477" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:22:36.476" starttime="20150623 08:22:36.469"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:36.478" starttime="20150623 08:22:28.915"></status>
</kw>
<kw type="foritem" name="${index} = 4">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:36.534" starttime="20150623 08:22:36.532"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:36.600" starttime="20150623 08:22:36.542"></status>
</kw>
<msg timestamp="20150623 08:22:36.602" level="INFO">${ssh_connection} = 67</msg>
<status status="PASS" endtime="20150623 08:22:36.601" starttime="20150623 08:22:36.535"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:22:36.613" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:22:37.065" level="INFO">Read output: Last login: Tue Jun 23 06:22:29 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:22:37.066" starttime="20150623 08:22:36.610"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:37.067" starttime="20150623 08:22:36.603"></status>
</kw>
<msg timestamp="20150623 08:22:37.069" level="INFO">${ssh_connection} = 67</msg>
<status status="PASS" endtime="20150623 08:22:37.069" starttime="20150623 08:22:36.522"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:37.075" starttime="20150623 08:22:37.074"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:22:37.077" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor67.log'.</msg>
<status status="PASS" endtime="20150623 08:22:37.081" starttime="20150623 08:22:37.076"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:37.082" starttime="20150623 08:22:37.071"></status>
</kw>
<msg timestamp="20150623 08:22:37.084" level="INFO">${ssh_connection} = 67</msg>
<status status="PASS" endtime="20150623 08:22:37.083" starttime="20150623 08:22:36.509"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:37.098" starttime="20150623 08:22:37.093"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:37.099" starttime="20150623 08:22:37.090"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:22:37.106" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:22:37.108" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:22:37.108" starttime="20150623 08:22:37.103"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:22:37.112" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:22:37.113" starttime="20150623 08:22:37.110"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:37.116" starttime="20150623 08:22:37.114"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:37.126" starttime="20150623 08:22:37.118"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:37.128" starttime="20150623 08:22:37.099"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:37.147" starttime="20150623 08:22:37.144"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:22:37.154" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:22:37.154" starttime="20150623 08:22:37.148"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:22:37.160" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:22:37.161" starttime="20150623 08:22:37.156"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:37.172" starttime="20150623 08:22:37.170"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:22:37.176" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:22:37.222" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:22:37.223" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:22:37.223" starttime="20150623 08:22:37.174"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:22:37.228" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:22:37.320" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:22:37.322" level="INFO">${processes_string} = 31254 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor67.log
31269 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
31287 ?        ...</msg>
<status status="PASS" endtime="20150623 08:22:37.321" starttime="20150623 08:22:37.225"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:22:37.327" level="INFO">@{processes_list} = [ 31254 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor67.log | 31269 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 31287 ?  ...</msg>
<status status="PASS" endtime="20150623 08:22:37.326" starttime="20150623 08:22:37.323"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 31254 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor67.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:22:37.334" level="INFO">${pid} = 31254</msg>
<status status="PASS" endtime="20150623 08:22:37.333" starttime="20150623 08:22:37.330"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:22:37.337" level="INFO">Executing command 'kill -9 31254'.</msg>
<msg timestamp="20150623 08:22:37.401" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:22:37.402" starttime="20150623 08:22:37.335"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:37.403" starttime="20150623 08:22:37.329"></status>
</kw>
<kw type="foritem" name="${process} = 31269 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:22:37.408" level="INFO">${pid} = 31269</msg>
<status status="PASS" endtime="20150623 08:22:37.407" starttime="20150623 08:22:37.404"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:22:37.412" level="INFO">Executing command 'kill -9 31269'.</msg>
<msg timestamp="20150623 08:22:37.481" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:22:37.482" starttime="20150623 08:22:37.409"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:37.483" starttime="20150623 08:22:37.403"></status>
</kw>
<kw type="foritem" name="${process} = 31287 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:22:37.488" level="INFO">${pid} = 31287</msg>
<status status="PASS" endtime="20150623 08:22:37.487" starttime="20150623 08:22:37.485"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:22:37.492" level="INFO">Executing command 'kill -9 31287'.</msg>
<msg timestamp="20150623 08:22:37.562" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:22:37.563" starttime="20150623 08:22:37.489"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:37.564" starttime="20150623 08:22:37.484"></status>
</kw>
<kw type="foritem" name="${process} = 31303 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:22:37.570" level="INFO">${pid} = 31303</msg>
<status status="PASS" endtime="20150623 08:22:37.569" starttime="20150623 08:22:37.566"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:22:37.573" level="INFO">Executing command 'kill -9 31303'.</msg>
<msg timestamp="20150623 08:22:37.643" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:22:37.644" starttime="20150623 08:22:37.571"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:37.645" starttime="20150623 08:22:37.565"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:37.645" starttime="20150623 08:22:37.328"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:37.646" starttime="20150623 08:22:37.163"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:22:37.650" level="INFO">Starting command 'cat tmpfilemonitor67.log'.</msg>
<status status="PASS" endtime="20150623 08:22:37.686" starttime="20150623 08:22:37.647"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:22:37.689" level="INFO">Reading output of command 'cat tmpfilemonitor67.log'.</msg>
<msg timestamp="20150623 08:22:37.731" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:22:37.733" level="INFO">${stdout_string} = [2015-06-23 06:22:14,513][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:22:37.732" starttime="20150623 08:22:37.688"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:22:37.737" level="INFO">Executing command 'rm tmpfilemonitor67.log'.</msg>
<msg timestamp="20150623 08:22:37.813" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:22:37.814" starttime="20150623 08:22:37.734"></status>
</kw>
<msg timestamp="20150623 08:22:37.817" level="INFO">${tailed_text} = [2015-06-23 06:22:14,513][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:22:37.816" starttime="20150623 08:22:37.138"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:37.825" starttime="20150623 08:22:37.818"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:37.836" starttime="20150623 08:22:37.834"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:22:37.847" starttime="20150623 08:22:37.838"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:37.849" starttime="20150623 08:22:37.827"></status>
</kw>
<msg timestamp="20150623 08:22:37.851" level="INFO">${tailed_text} = [2015-06-23 06:22:14,513][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:22:37.850" starttime="20150623 08:22:37.131"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:37.890" starttime="20150623 08:22:37.886"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:37.891" starttime="20150623 08:22:37.869"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:37.899" starttime="20150623 08:22:37.892"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:37.904" starttime="20150623 08:22:37.901"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:37.908" starttime="20150623 08:22:37.906"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:37.909" starttime="20150623 08:22:37.854"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:37.941" starttime="20150623 08:22:37.939"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:37.950" starttime="20150623 08:22:37.942"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:37.953" starttime="20150623 08:22:37.951"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:22:37.958" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:22:37.960" level="INFO">${queryResultSetLines} = 1004527|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:22:37.959" starttime="20150623 08:22:37.955"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:37.963" starttime="20150623 08:22:37.961"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:22:37.967" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:22:37.968" level="INFO">@{queryResultSet} = [ 1004527|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:22:37.967" starttime="20150623 08:22:37.964"></status>
</kw>
<msg timestamp="20150623 08:22:37.971" level="INFO">@{queryRows} = [ 1004527|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:22:37.970" starttime="20150623 08:22:37.932"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:22:37.975" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:22:37.977" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:22:37.976" starttime="20150623 08:22:37.972"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:22:37.980" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:22:37.982" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:22:37.981" starttime="20150623 08:22:37.978"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:22:37.992" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:22:37.993" starttime="20150623 08:22:37.990"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:37.994" starttime="20150623 08:22:37.983"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:38.001" starttime="20150623 08:22:37.995"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:38.003" starttime="20150623 08:22:37.923"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:38.005" starttime="20150623 08:22:36.490"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:38.007" starttime="20150623 08:22:36.483"></status>
</kw>
<msg timestamp="20150623 08:22:38.010" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:22:38.009" starttime="20150623 08:22:36.480"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:22:38.014" level="INFO">Index in the 2. loop: 4</msg>
<status status="PASS" endtime="20150623 08:22:38.015" starttime="20150623 08:22:38.012"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:22:44.020" level="INFO">Slept 6 seconds</msg>
<status status="PASS" endtime="20150623 08:22:44.021" starttime="20150623 08:22:38.017"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:22:44.031" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:22:44.031" starttime="20150623 08:22:44.024"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:44.032" starttime="20150623 08:22:36.479"></status>
</kw>
<kw type="foritem" name="${index} = 5">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:44.087" starttime="20150623 08:22:44.085"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:44.150" starttime="20150623 08:22:44.095"></status>
</kw>
<msg timestamp="20150623 08:22:44.152" level="INFO">${ssh_connection} = 68</msg>
<status status="PASS" endtime="20150623 08:22:44.151" starttime="20150623 08:22:44.088"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:22:44.163" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:22:44.596" level="INFO">Read output: Last login: Tue Jun 23 06:22:36 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:22:44.597" starttime="20150623 08:22:44.161"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:44.597" starttime="20150623 08:22:44.153"></status>
</kw>
<msg timestamp="20150623 08:22:44.599" level="INFO">${ssh_connection} = 68</msg>
<status status="PASS" endtime="20150623 08:22:44.599" starttime="20150623 08:22:44.075"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:44.605" starttime="20150623 08:22:44.604"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:22:44.607" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor68.log'.</msg>
<status status="PASS" endtime="20150623 08:22:44.610" starttime="20150623 08:22:44.605"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:44.611" starttime="20150623 08:22:44.600"></status>
</kw>
<msg timestamp="20150623 08:22:44.612" level="INFO">${ssh_connection} = 68</msg>
<status status="PASS" endtime="20150623 08:22:44.611" starttime="20150623 08:22:44.063"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:44.626" starttime="20150623 08:22:44.621"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:44.628" starttime="20150623 08:22:44.618"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:22:44.639" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:22:44.641" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:22:44.640" starttime="20150623 08:22:44.636"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:22:44.644" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:22:44.645" starttime="20150623 08:22:44.642"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:44.649" starttime="20150623 08:22:44.647"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:44.659" starttime="20150623 08:22:44.650"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:44.660" starttime="20150623 08:22:44.630"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:44.679" starttime="20150623 08:22:44.676"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:22:44.687" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:22:44.686" starttime="20150623 08:22:44.680"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:22:44.693" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:22:44.694" starttime="20150623 08:22:44.688"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:44.721" starttime="20150623 08:22:44.719"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:22:44.724" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:22:44.769" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:22:44.771" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:22:44.770" starttime="20150623 08:22:44.723"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:22:44.775" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:22:44.899" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:22:44.901" level="INFO">${processes_string} = 31428 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor68.log
31443 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
31461 ?        ...</msg>
<status status="PASS" endtime="20150623 08:22:44.900" starttime="20150623 08:22:44.772"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:22:44.907" level="INFO">@{processes_list} = [ 31428 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor68.log | 31443 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 31461 ?  ...</msg>
<status status="PASS" endtime="20150623 08:22:44.906" starttime="20150623 08:22:44.903"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 31428 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor68.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:22:44.913" level="INFO">${pid} = 31428</msg>
<status status="PASS" endtime="20150623 08:22:44.913" starttime="20150623 08:22:44.910"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:22:44.917" level="INFO">Executing command 'kill -9 31428'.</msg>
<msg timestamp="20150623 08:22:44.980" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:22:44.981" starttime="20150623 08:22:44.915"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:44.982" starttime="20150623 08:22:44.909"></status>
</kw>
<kw type="foritem" name="${process} = 31443 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:22:44.988" level="INFO">${pid} = 31443</msg>
<status status="PASS" endtime="20150623 08:22:44.987" starttime="20150623 08:22:44.984"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:22:44.992" level="INFO">Executing command 'kill -9 31443'.</msg>
<msg timestamp="20150623 08:22:45.064" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:22:45.065" starttime="20150623 08:22:44.989"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:45.067" starttime="20150623 08:22:44.983"></status>
</kw>
<kw type="foritem" name="${process} = 31461 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:22:45.073" level="INFO">${pid} = 31461</msg>
<status status="PASS" endtime="20150623 08:22:45.072" starttime="20150623 08:22:45.069"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:22:45.076" level="INFO">Executing command 'kill -9 31461'.</msg>
<msg timestamp="20150623 08:22:45.145" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:22:45.146" starttime="20150623 08:22:45.074"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:45.147" starttime="20150623 08:22:45.068"></status>
</kw>
<kw type="foritem" name="${process} = 31477 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:22:45.152" level="INFO">${pid} = 31477</msg>
<status status="PASS" endtime="20150623 08:22:45.151" starttime="20150623 08:22:45.148"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:22:45.156" level="INFO">Executing command 'kill -9 31477'.</msg>
<msg timestamp="20150623 08:22:45.232" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:22:45.233" starttime="20150623 08:22:45.153"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:45.234" starttime="20150623 08:22:45.147"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:45.234" starttime="20150623 08:22:44.908"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:45.236" starttime="20150623 08:22:44.696"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:22:45.240" level="INFO">Starting command 'cat tmpfilemonitor68.log'.</msg>
<status status="PASS" endtime="20150623 08:22:45.275" starttime="20150623 08:22:45.238"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:22:45.278" level="INFO">Reading output of command 'cat tmpfilemonitor68.log'.</msg>
<msg timestamp="20150623 08:22:45.317" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:22:45.319" level="INFO">${stdout_string} = [2015-06-23 06:22:22,069][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:22:45.318" starttime="20150623 08:22:45.277"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:22:45.323" level="INFO">Executing command 'rm tmpfilemonitor68.log'.</msg>
<msg timestamp="20150623 08:22:45.402" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:22:45.403" starttime="20150623 08:22:45.320"></status>
</kw>
<msg timestamp="20150623 08:22:45.406" level="INFO">${tailed_text} = [2015-06-23 06:22:22,069][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:22:45.405" starttime="20150623 08:22:44.670"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:45.415" starttime="20150623 08:22:45.408"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:45.426" starttime="20150623 08:22:45.423"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:22:45.430" starttime="20150623 08:22:45.427"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:45.435" starttime="20150623 08:22:45.416"></status>
</kw>
<msg timestamp="20150623 08:22:45.438" level="INFO">${tailed_text} = [2015-06-23 06:22:22,069][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:22:45.437" starttime="20150623 08:22:44.663"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:45.457" starttime="20150623 08:22:45.454"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:45.458" starttime="20150623 08:22:45.448"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:45.465" starttime="20150623 08:22:45.459"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:45.469" starttime="20150623 08:22:45.466"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:45.473" starttime="20150623 08:22:45.470"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:45.474" starttime="20150623 08:22:45.441"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:45.504" starttime="20150623 08:22:45.503"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:45.512" starttime="20150623 08:22:45.506"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:45.515" starttime="20150623 08:22:45.514"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:22:45.520" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:22:45.522" level="INFO">${queryResultSetLines} = 1004528|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:22:45.521" starttime="20150623 08:22:45.517"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:45.525" starttime="20150623 08:22:45.523"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:22:45.529" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:22:45.530" level="INFO">@{queryResultSet} = [ 1004528|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:22:45.529" starttime="20150623 08:22:45.526"></status>
</kw>
<msg timestamp="20150623 08:22:45.533" level="INFO">@{queryRows} = [ 1004528|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:22:45.532" starttime="20150623 08:22:45.496"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:22:45.537" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:22:45.539" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:22:45.538" starttime="20150623 08:22:45.534"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:22:45.542" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:22:45.544" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:22:45.543" starttime="20150623 08:22:45.540"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:22:45.554" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:22:45.555" starttime="20150623 08:22:45.552"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:45.556" starttime="20150623 08:22:45.545"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:45.563" starttime="20150623 08:22:45.557"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:45.564" starttime="20150623 08:22:45.487"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:45.566" starttime="20150623 08:22:44.043"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:45.568" starttime="20150623 08:22:44.037"></status>
</kw>
<msg timestamp="20150623 08:22:45.571" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:22:45.570" starttime="20150623 08:22:44.035"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:22:45.575" level="INFO">Index in the 2. loop: 5</msg>
<status status="PASS" endtime="20150623 08:22:45.576" starttime="20150623 08:22:45.572"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:22:51.581" level="INFO">Slept 6 seconds</msg>
<status status="PASS" endtime="20150623 08:22:51.583" starttime="20150623 08:22:45.577"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:22:51.592" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:22:51.591" starttime="20150623 08:22:51.585"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:51.593" starttime="20150623 08:22:44.034"></status>
</kw>
<kw type="foritem" name="${index} = 6">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:51.647" starttime="20150623 08:22:51.645"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:51.707" starttime="20150623 08:22:51.655"></status>
</kw>
<msg timestamp="20150623 08:22:51.709" level="INFO">${ssh_connection} = 69</msg>
<status status="PASS" endtime="20150623 08:22:51.708" starttime="20150623 08:22:51.649"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:22:51.721" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:22:52.103" level="INFO">Read output: Last login: Tue Jun 23 06:22:44 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:22:52.105" starttime="20150623 08:22:51.719"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:52.108" starttime="20150623 08:22:51.710"></status>
</kw>
<msg timestamp="20150623 08:22:52.112" level="INFO">${ssh_connection} = 69</msg>
<status status="PASS" endtime="20150623 08:22:52.110" starttime="20150623 08:22:51.636"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:52.125" starttime="20150623 08:22:52.122"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:22:52.129" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor69.log'.</msg>
<status status="PASS" endtime="20150623 08:22:52.133" starttime="20150623 08:22:52.126"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:52.134" starttime="20150623 08:22:52.115"></status>
</kw>
<msg timestamp="20150623 08:22:52.138" level="INFO">${ssh_connection} = 69</msg>
<status status="PASS" endtime="20150623 08:22:52.136" starttime="20150623 08:22:51.623"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:52.164" starttime="20150623 08:22:52.157"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:52.165" starttime="20150623 08:22:52.151"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:22:52.177" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:22:52.179" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:22:52.178" starttime="20150623 08:22:52.173"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:22:52.182" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:22:52.183" starttime="20150623 08:22:52.180"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:52.187" starttime="20150623 08:22:52.185"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:52.197" starttime="20150623 08:22:52.188"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:52.198" starttime="20150623 08:22:52.167"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:52.217" starttime="20150623 08:22:52.214"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:22:52.225" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:22:52.224" starttime="20150623 08:22:52.218"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:22:52.231" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:22:52.232" starttime="20150623 08:22:52.226"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:52.243" starttime="20150623 08:22:52.241"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:22:52.246" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:22:52.286" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:22:52.288" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:22:52.287" starttime="20150623 08:22:52.245"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:22:52.292" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:22:52.381" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:22:52.383" level="INFO">${processes_string} = 31602 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor69.log
31617 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
31635 ?        ...</msg>
<status status="PASS" endtime="20150623 08:22:52.382" starttime="20150623 08:22:52.289"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:22:52.388" level="INFO">@{processes_list} = [ 31602 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor69.log | 31617 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 31635 ?  ...</msg>
<status status="PASS" endtime="20150623 08:22:52.387" starttime="20150623 08:22:52.384"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 31602 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor69.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:22:52.395" level="INFO">${pid} = 31602</msg>
<status status="PASS" endtime="20150623 08:22:52.394" starttime="20150623 08:22:52.391"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:22:52.398" level="INFO">Executing command 'kill -9 31602'.</msg>
<msg timestamp="20150623 08:22:52.454" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:22:52.455" starttime="20150623 08:22:52.396"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:52.456" starttime="20150623 08:22:52.390"></status>
</kw>
<kw type="foritem" name="${process} = 31617 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:22:52.461" level="INFO">${pid} = 31617</msg>
<status status="PASS" endtime="20150623 08:22:52.460" starttime="20150623 08:22:52.458"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:22:52.465" level="INFO">Executing command 'kill -9 31617'.</msg>
<msg timestamp="20150623 08:22:52.528" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:22:52.529" starttime="20150623 08:22:52.463"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:52.530" starttime="20150623 08:22:52.457"></status>
</kw>
<kw type="foritem" name="${process} = 31635 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:22:52.535" level="INFO">${pid} = 31635</msg>
<status status="PASS" endtime="20150623 08:22:52.534" starttime="20150623 08:22:52.531"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:22:52.539" level="INFO">Executing command 'kill -9 31635'.</msg>
<msg timestamp="20150623 08:22:52.595" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:22:52.596" starttime="20150623 08:22:52.536"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:52.597" starttime="20150623 08:22:52.530"></status>
</kw>
<kw type="foritem" name="${process} = 31651 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:22:52.602" level="INFO">${pid} = 31651</msg>
<status status="PASS" endtime="20150623 08:22:52.601" starttime="20150623 08:22:52.599"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:22:52.606" level="INFO">Executing command 'kill -9 31651'.</msg>
<msg timestamp="20150623 08:22:52.656" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:22:52.657" starttime="20150623 08:22:52.603"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:52.658" starttime="20150623 08:22:52.598"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:52.658" starttime="20150623 08:22:52.389"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:52.659" starttime="20150623 08:22:52.234"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:22:52.663" level="INFO">Starting command 'cat tmpfilemonitor69.log'.</msg>
<status status="PASS" endtime="20150623 08:22:52.698" starttime="20150623 08:22:52.661"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:22:52.701" level="INFO">Reading output of command 'cat tmpfilemonitor69.log'.</msg>
<msg timestamp="20150623 08:22:52.718" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:22:52.720" level="INFO">${stdout_string} = [2015-06-23 06:22:29,603][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:22:52.719" starttime="20150623 08:22:52.700"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:22:52.724" level="INFO">Executing command 'rm tmpfilemonitor69.log'.</msg>
<msg timestamp="20150623 08:22:52.780" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:22:52.781" starttime="20150623 08:22:52.721"></status>
</kw>
<msg timestamp="20150623 08:22:52.784" level="INFO">${tailed_text} = [2015-06-23 06:22:29,603][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:22:52.783" starttime="20150623 08:22:52.208"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:52.792" starttime="20150623 08:22:52.785"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:52.803" starttime="20150623 08:22:52.801"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:22:52.807" starttime="20150623 08:22:52.805"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:52.812" starttime="20150623 08:22:52.794"></status>
</kw>
<msg timestamp="20150623 08:22:52.814" level="INFO">${tailed_text} = [2015-06-23 06:22:29,603][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:22:52.813" starttime="20150623 08:22:52.201"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:52.833" starttime="20150623 08:22:52.831"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:52.834" starttime="20150623 08:22:52.824"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:52.841" starttime="20150623 08:22:52.836"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:52.845" starttime="20150623 08:22:52.842"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:52.849" starttime="20150623 08:22:52.847"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:52.850" starttime="20150623 08:22:52.818"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:52.881" starttime="20150623 08:22:52.879"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:52.889" starttime="20150623 08:22:52.883"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:52.892" starttime="20150623 08:22:52.890"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:22:52.896" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:22:52.898" level="INFO">${queryResultSetLines} = 1004529|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:22:52.897" starttime="20150623 08:22:52.893"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:52.901" starttime="20150623 08:22:52.900"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:22:52.905" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:22:52.907" level="INFO">@{queryResultSet} = [ 1004529|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:22:52.906" starttime="20150623 08:22:52.903"></status>
</kw>
<msg timestamp="20150623 08:22:52.909" level="INFO">@{queryRows} = [ 1004529|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:22:52.908" starttime="20150623 08:22:52.872"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:22:52.913" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:22:52.915" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:22:52.914" starttime="20150623 08:22:52.910"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:22:52.919" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:22:52.920" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:22:52.920" starttime="20150623 08:22:52.916"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:22:52.927" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:22:52.928" starttime="20150623 08:22:52.926"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:52.928" starttime="20150623 08:22:52.922"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:52.931" starttime="20150623 08:22:52.929"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:52.932" starttime="20150623 08:22:52.864"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:52.933" starttime="20150623 08:22:51.604"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:52.934" starttime="20150623 08:22:51.598"></status>
</kw>
<msg timestamp="20150623 08:22:52.935" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:22:52.934" starttime="20150623 08:22:51.595"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:22:52.937" level="INFO">Index in the 2. loop: 6</msg>
<status status="PASS" endtime="20150623 08:22:52.937" starttime="20150623 08:22:52.936"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:22:58.939" level="INFO">Slept 6 seconds</msg>
<status status="PASS" endtime="20150623 08:22:58.941" starttime="20150623 08:22:52.938"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:22:58.951" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:22:58.950" starttime="20150623 08:22:58.944"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:58.952" starttime="20150623 08:22:51.594"></status>
</kw>
<kw type="foritem" name="${index} = 7">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:59.028" starttime="20150623 08:22:59.026"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:59.090" starttime="20150623 08:22:59.037"></status>
</kw>
<msg timestamp="20150623 08:22:59.092" level="INFO">${ssh_connection} = 70</msg>
<status status="PASS" endtime="20150623 08:22:59.091" starttime="20150623 08:22:59.030"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:22:59.104" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:22:59.533" level="INFO">Read output: Last login: Tue Jun 23 06:22:51 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:22:59.535" starttime="20150623 08:22:59.101"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:59.536" starttime="20150623 08:22:59.094"></status>
</kw>
<msg timestamp="20150623 08:22:59.539" level="INFO">${ssh_connection} = 70</msg>
<status status="PASS" endtime="20150623 08:22:59.538" starttime="20150623 08:22:59.015"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:59.550" starttime="20150623 08:22:59.549"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:22:59.552" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor70.log'.</msg>
<status status="PASS" endtime="20150623 08:22:59.555" starttime="20150623 08:22:59.551"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:59.556" starttime="20150623 08:22:59.542"></status>
</kw>
<msg timestamp="20150623 08:22:59.558" level="INFO">${ssh_connection} = 70</msg>
<status status="PASS" endtime="20150623 08:22:59.557" starttime="20150623 08:22:58.982"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:59.571" starttime="20150623 08:22:59.567"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:59.573" starttime="20150623 08:22:59.563"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:22:59.584" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:22:59.586" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:22:59.585" starttime="20150623 08:22:59.581"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:22:59.590" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:22:59.591" starttime="20150623 08:22:59.588"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:59.594" starttime="20150623 08:22:59.592"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:59.604" starttime="20150623 08:22:59.595"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:59.606" starttime="20150623 08:22:59.575"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:59.625" starttime="20150623 08:22:59.622"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:22:59.632" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:22:59.631" starttime="20150623 08:22:59.626"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:22:59.638" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:22:59.639" starttime="20150623 08:22:59.633"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:22:59.650" starttime="20150623 08:22:59.647"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:22:59.653" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:22:59.698" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:22:59.700" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:22:59.700" starttime="20150623 08:22:59.651"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:22:59.705" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:22:59.796" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:22:59.798" level="INFO">${processes_string} = 31777 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor70.log
31792 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
31810 ?        ...</msg>
<status status="PASS" endtime="20150623 08:22:59.797" starttime="20150623 08:22:59.702"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:22:59.803" level="INFO">@{processes_list} = [ 31777 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor70.log | 31792 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 31810 ?  ...</msg>
<status status="PASS" endtime="20150623 08:22:59.803" starttime="20150623 08:22:59.800"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 31777 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor70.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:22:59.810" level="INFO">${pid} = 31777</msg>
<status status="PASS" endtime="20150623 08:22:59.809" starttime="20150623 08:22:59.806"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:22:59.813" level="INFO">Executing command 'kill -9 31777'.</msg>
<msg timestamp="20150623 08:22:59.877" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:22:59.878" starttime="20150623 08:22:59.811"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:59.879" starttime="20150623 08:22:59.805"></status>
</kw>
<kw type="foritem" name="${process} = 31792 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:22:59.884" level="INFO">${pid} = 31792</msg>
<status status="PASS" endtime="20150623 08:22:59.883" starttime="20150623 08:22:59.880"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:22:59.888" level="INFO">Executing command 'kill -9 31792'.</msg>
<msg timestamp="20150623 08:22:59.957" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:22:59.958" starttime="20150623 08:22:59.885"></status>
</kw>
<status status="PASS" endtime="20150623 08:22:59.959" starttime="20150623 08:22:59.879"></status>
</kw>
<kw type="foritem" name="${process} = 31810 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:22:59.964" level="INFO">${pid} = 31810</msg>
<status status="PASS" endtime="20150623 08:22:59.963" starttime="20150623 08:22:59.960"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:22:59.968" level="INFO">Executing command 'kill -9 31810'.</msg>
<msg timestamp="20150623 08:23:00.040" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:23:00.041" starttime="20150623 08:22:59.965"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:00.043" starttime="20150623 08:22:59.959"></status>
</kw>
<kw type="foritem" name="${process} = 31826 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:23:00.048" level="INFO">${pid} = 31826</msg>
<status status="PASS" endtime="20150623 08:23:00.048" starttime="20150623 08:23:00.045"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:23:00.052" level="INFO">Executing command 'kill -9 31826'.</msg>
<msg timestamp="20150623 08:23:00.122" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:23:00.123" starttime="20150623 08:23:00.050"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:00.124" starttime="20150623 08:23:00.044"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:00.124" starttime="20150623 08:22:59.804"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:00.126" starttime="20150623 08:22:59.641"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:23:00.130" level="INFO">Starting command 'cat tmpfilemonitor70.log'.</msg>
<status status="PASS" endtime="20150623 08:23:00.165" starttime="20150623 08:23:00.128"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:23:00.168" level="INFO">Reading output of command 'cat tmpfilemonitor70.log'.</msg>
<msg timestamp="20150623 08:23:00.206" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:23:00.208" level="INFO">${stdout_string} = [2015-06-23 06:22:37,159][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:23:00.207" starttime="20150623 08:23:00.166"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:23:00.212" level="INFO">Executing command 'rm tmpfilemonitor70.log'.</msg>
<msg timestamp="20150623 08:23:00.290" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:23:00.291" starttime="20150623 08:23:00.210"></status>
</kw>
<msg timestamp="20150623 08:23:00.294" level="INFO">${tailed_text} = [2015-06-23 06:22:37,159][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:23:00.293" starttime="20150623 08:22:59.616"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:00.303" starttime="20150623 08:23:00.296"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:00.313" starttime="20150623 08:23:00.311"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:23:00.317" starttime="20150623 08:23:00.315"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:00.322" starttime="20150623 08:23:00.305"></status>
</kw>
<msg timestamp="20150623 08:23:00.325" level="INFO">${tailed_text} = [2015-06-23 06:22:37,159][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:23:00.324" starttime="20150623 08:22:59.609"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:00.344" starttime="20150623 08:23:00.341"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:00.345" starttime="20150623 08:23:00.335"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:00.352" starttime="20150623 08:23:00.346"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:00.356" starttime="20150623 08:23:00.353"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:00.359" starttime="20150623 08:23:00.357"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:00.361" starttime="20150623 08:23:00.328"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:00.391" starttime="20150623 08:23:00.389"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:00.398" starttime="20150623 08:23:00.392"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:00.402" starttime="20150623 08:23:00.400"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:23:00.406" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:23:00.408" level="INFO">${queryResultSetLines} = 1004530|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:23:00.407" starttime="20150623 08:23:00.403"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:00.411" starttime="20150623 08:23:00.409"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:23:00.414" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:23:00.416" level="INFO">@{queryResultSet} = [ 1004530|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:23:00.415" starttime="20150623 08:23:00.412"></status>
</kw>
<msg timestamp="20150623 08:23:00.419" level="INFO">@{queryRows} = [ 1004530|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:23:00.418" starttime="20150623 08:23:00.383"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:23:00.423" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:23:00.425" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:23:00.424" starttime="20150623 08:23:00.420"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:23:00.428" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:23:00.430" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:23:00.429" starttime="20150623 08:23:00.426"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:23:00.440" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:23:00.441" starttime="20150623 08:23:00.437"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:00.442" starttime="20150623 08:23:00.431"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:00.448" starttime="20150623 08:23:00.443"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:00.450" starttime="20150623 08:23:00.374"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:00.451" starttime="20150623 08:22:58.963"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:00.453" starttime="20150623 08:22:58.956"></status>
</kw>
<msg timestamp="20150623 08:23:00.456" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:23:00.455" starttime="20150623 08:22:58.954"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:23:00.460" level="INFO">Index in the 2. loop: 7</msg>
<status status="PASS" endtime="20150623 08:23:00.461" starttime="20150623 08:23:00.457"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:23:06.465" level="INFO">Slept 6 seconds</msg>
<status status="PASS" endtime="20150623 08:23:06.467" starttime="20150623 08:23:00.462"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:23:06.477" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:23:06.476" starttime="20150623 08:23:06.469"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:06.478" starttime="20150623 08:22:58.953"></status>
</kw>
<kw type="foritem" name="${index} = 8">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:06.532" starttime="20150623 08:23:06.529"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:06.603" starttime="20150623 08:23:06.540"></status>
</kw>
<msg timestamp="20150623 08:23:06.605" level="INFO">${ssh_connection} = 71</msg>
<status status="PASS" endtime="20150623 08:23:06.604" starttime="20150623 08:23:06.533"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:23:06.617" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:23:07.056" level="INFO">Read output: Last login: Tue Jun 23 06:22:59 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:23:07.058" starttime="20150623 08:23:06.614"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:07.060" starttime="20150623 08:23:06.607"></status>
</kw>
<msg timestamp="20150623 08:23:07.064" level="INFO">${ssh_connection} = 71</msg>
<status status="PASS" endtime="20150623 08:23:07.062" starttime="20150623 08:23:06.520"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:07.077" starttime="20150623 08:23:07.074"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:23:07.081" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor71.log'.</msg>
<status status="PASS" endtime="20150623 08:23:07.086" starttime="20150623 08:23:07.078"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:07.087" starttime="20150623 08:23:07.067"></status>
</kw>
<msg timestamp="20150623 08:23:07.091" level="INFO">${ssh_connection} = 71</msg>
<status status="PASS" endtime="20150623 08:23:07.089" starttime="20150623 08:23:06.507"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:07.117" starttime="20150623 08:23:07.110"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:07.118" starttime="20150623 08:23:07.104"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:23:07.129" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:23:07.131" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:23:07.131" starttime="20150623 08:23:07.127"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:23:07.135" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:23:07.136" starttime="20150623 08:23:07.133"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:07.139" starttime="20150623 08:23:07.137"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:07.149" starttime="20150623 08:23:07.140"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:07.150" starttime="20150623 08:23:07.120"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:07.169" starttime="20150623 08:23:07.166"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:23:07.177" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:23:07.176" starttime="20150623 08:23:07.170"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:23:07.184" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:23:07.184" starttime="20150623 08:23:07.178"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:07.195" starttime="20150623 08:23:07.193"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:23:07.198" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:23:07.250" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:23:07.252" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:23:07.251" starttime="20150623 08:23:07.196"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:23:07.256" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:23:07.361" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:23:07.363" level="INFO">${processes_string} = 31953 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor71.log
31968 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
31986 ?        ...</msg>
<status status="PASS" endtime="20150623 08:23:07.362" starttime="20150623 08:23:07.254"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:23:07.368" level="INFO">@{processes_list} = [ 31953 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor71.log | 31968 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 31986 ?  ...</msg>
<status status="PASS" endtime="20150623 08:23:07.367" starttime="20150623 08:23:07.365"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 31953 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor71.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:23:07.375" level="INFO">${pid} = 31953</msg>
<status status="PASS" endtime="20150623 08:23:07.374" starttime="20150623 08:23:07.371"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:23:07.378" level="INFO">Executing command 'kill -9 31953'.</msg>
<msg timestamp="20150623 08:23:07.448" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:23:07.449" starttime="20150623 08:23:07.376"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:07.450" starttime="20150623 08:23:07.370"></status>
</kw>
<kw type="foritem" name="${process} = 31968 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:23:07.455" level="INFO">${pid} = 31968</msg>
<status status="PASS" endtime="20150623 08:23:07.455" starttime="20150623 08:23:07.452"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:23:07.459" level="INFO">Executing command 'kill -9 31968'.</msg>
<msg timestamp="20150623 08:23:07.531" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:23:07.532" starttime="20150623 08:23:07.457"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:07.533" starttime="20150623 08:23:07.451"></status>
</kw>
<kw type="foritem" name="${process} = 31986 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:23:07.538" level="INFO">${pid} = 31986</msg>
<status status="PASS" endtime="20150623 08:23:07.537" starttime="20150623 08:23:07.534"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:23:07.541" level="INFO">Executing command 'kill -9 31986'.</msg>
<msg timestamp="20150623 08:23:07.612" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:23:07.613" starttime="20150623 08:23:07.539"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:07.613" starttime="20150623 08:23:07.533"></status>
</kw>
<kw type="foritem" name="${process} = 32002 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:23:07.618" level="INFO">${pid} = 32002</msg>
<status status="PASS" endtime="20150623 08:23:07.618" starttime="20150623 08:23:07.615"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:23:07.622" level="INFO">Executing command 'kill -9 32002'.</msg>
<msg timestamp="20150623 08:23:07.693" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:23:07.694" starttime="20150623 08:23:07.620"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:07.695" starttime="20150623 08:23:07.614"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:07.695" starttime="20150623 08:23:07.369"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:07.696" starttime="20150623 08:23:07.186"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:23:07.700" level="INFO">Starting command 'cat tmpfilemonitor71.log'.</msg>
<status status="PASS" endtime="20150623 08:23:07.737" starttime="20150623 08:23:07.697"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:23:07.740" level="INFO">Reading output of command 'cat tmpfilemonitor71.log'.</msg>
<msg timestamp="20150623 08:23:07.775" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:23:07.777" level="INFO">${stdout_string} = [2015-06-23 06:22:44,692][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:23:07.776" starttime="20150623 08:23:07.738"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:23:07.781" level="INFO">Executing command 'rm tmpfilemonitor71.log'.</msg>
<msg timestamp="20150623 08:23:07.858" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:23:07.859" starttime="20150623 08:23:07.778"></status>
</kw>
<msg timestamp="20150623 08:23:07.862" level="INFO">${tailed_text} = [2015-06-23 06:22:44,692][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:23:07.861" starttime="20150623 08:23:07.160"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:07.870" starttime="20150623 08:23:07.863"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:07.881" starttime="20150623 08:23:07.879"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:23:07.885" starttime="20150623 08:23:07.883"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:07.890" starttime="20150623 08:23:07.872"></status>
</kw>
<msg timestamp="20150623 08:23:07.892" level="INFO">${tailed_text} = [2015-06-23 06:22:44,692][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:23:07.891" starttime="20150623 08:23:07.153"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:07.910" starttime="20150623 08:23:07.908"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:07.912" starttime="20150623 08:23:07.902"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:07.919" starttime="20150623 08:23:07.913"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:07.924" starttime="20150623 08:23:07.921"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:07.928" starttime="20150623 08:23:07.926"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:07.929" starttime="20150623 08:23:07.895"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:07.960" starttime="20150623 08:23:07.958"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:07.967" starttime="20150623 08:23:07.961"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:07.971" starttime="20150623 08:23:07.969"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:23:07.975" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:23:07.977" level="INFO">${queryResultSetLines} = 1004531|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:23:07.976" starttime="20150623 08:23:07.972"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:07.980" starttime="20150623 08:23:07.978"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:23:07.983" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:23:07.985" level="INFO">@{queryResultSet} = [ 1004531|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:23:07.984" starttime="20150623 08:23:07.981"></status>
</kw>
<msg timestamp="20150623 08:23:07.988" level="INFO">@{queryRows} = [ 1004531|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:23:07.987" starttime="20150623 08:23:07.952"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:23:07.992" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:23:07.993" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:23:07.993" starttime="20150623 08:23:07.989"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:23:07.997" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:23:07.999" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:23:07.998" starttime="20150623 08:23:07.995"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:23:08.009" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:23:08.010" starttime="20150623 08:23:08.007"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:08.011" starttime="20150623 08:23:08.000"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:08.018" starttime="20150623 08:23:08.012"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:08.019" starttime="20150623 08:23:07.943"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:08.021" starttime="20150623 08:23:06.489"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:08.023" starttime="20150623 08:23:06.482"></status>
</kw>
<msg timestamp="20150623 08:23:08.026" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:23:08.025" starttime="20150623 08:23:06.480"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:23:08.030" level="INFO">Index in the 2. loop: 8</msg>
<status status="PASS" endtime="20150623 08:23:08.031" starttime="20150623 08:23:08.027"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:23:14.037" level="INFO">Slept 6 seconds</msg>
<status status="PASS" endtime="20150623 08:23:14.038" starttime="20150623 08:23:08.032"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:23:14.048" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:23:14.047" starttime="20150623 08:23:14.041"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:14.050" starttime="20150623 08:23:06.479"></status>
</kw>
<kw type="foritem" name="${index} = 9">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:14.103" starttime="20150623 08:23:14.101"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:14.167" starttime="20150623 08:23:14.112"></status>
</kw>
<msg timestamp="20150623 08:23:14.169" level="INFO">${ssh_connection} = 72</msg>
<status status="PASS" endtime="20150623 08:23:14.168" starttime="20150623 08:23:14.105"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:23:14.182" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:23:14.612" level="INFO">Read output: Last login: Tue Jun 23 06:23:06 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:23:14.613" starttime="20150623 08:23:14.179"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:14.613" starttime="20150623 08:23:14.171"></status>
</kw>
<msg timestamp="20150623 08:23:14.615" level="INFO">${ssh_connection} = 72</msg>
<status status="PASS" endtime="20150623 08:23:14.615" starttime="20150623 08:23:14.092"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:14.621" starttime="20150623 08:23:14.620"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:23:14.623" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor72.log'.</msg>
<status status="PASS" endtime="20150623 08:23:14.627" starttime="20150623 08:23:14.622"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:14.627" starttime="20150623 08:23:14.616"></status>
</kw>
<msg timestamp="20150623 08:23:14.629" level="INFO">${ssh_connection} = 72</msg>
<status status="PASS" endtime="20150623 08:23:14.628" starttime="20150623 08:23:14.079"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:14.643" starttime="20150623 08:23:14.638"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:14.645" starttime="20150623 08:23:14.635"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:23:14.656" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:23:14.658" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:23:14.658" starttime="20150623 08:23:14.653"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:23:14.662" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:23:14.663" starttime="20150623 08:23:14.660"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:14.666" starttime="20150623 08:23:14.664"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:14.676" starttime="20150623 08:23:14.667"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:14.677" starttime="20150623 08:23:14.647"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:14.696" starttime="20150623 08:23:14.693"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:23:14.704" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:23:14.703" starttime="20150623 08:23:14.697"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:23:14.711" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:23:14.712" starttime="20150623 08:23:14.705"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:14.723" starttime="20150623 08:23:14.720"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:23:14.726" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:23:14.773" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:23:14.775" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:23:14.774" starttime="20150623 08:23:14.724"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:23:14.779" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:23:14.874" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:23:14.876" level="INFO">${processes_string} = 32127 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor72.log
32142 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
32160 ?        ...</msg>
<status status="PASS" endtime="20150623 08:23:14.875" starttime="20150623 08:23:14.776"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:23:14.881" level="INFO">@{processes_list} = [ 32127 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor72.log | 32142 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 32160 ?  ...</msg>
<status status="PASS" endtime="20150623 08:23:14.880" starttime="20150623 08:23:14.877"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 32127 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor72.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:23:14.888" level="INFO">${pid} = 32127</msg>
<status status="PASS" endtime="20150623 08:23:14.887" starttime="20150623 08:23:14.884"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:23:14.905" level="INFO">Executing command 'kill -9 32127'.</msg>
<msg timestamp="20150623 08:23:14.947" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:23:14.948" starttime="20150623 08:23:14.890"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:14.949" starttime="20150623 08:23:14.883"></status>
</kw>
<kw type="foritem" name="${process} = 32142 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:23:14.954" level="INFO">${pid} = 32142</msg>
<status status="PASS" endtime="20150623 08:23:14.953" starttime="20150623 08:23:14.951"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:23:14.958" level="INFO">Executing command 'kill -9 32142'.</msg>
<msg timestamp="20150623 08:23:15.025" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:23:15.027" starttime="20150623 08:23:14.956"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:15.028" starttime="20150623 08:23:14.950"></status>
</kw>
<kw type="foritem" name="${process} = 32160 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:23:15.034" level="INFO">${pid} = 32160</msg>
<status status="PASS" endtime="20150623 08:23:15.033" starttime="20150623 08:23:15.030"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:23:15.038" level="INFO">Executing command 'kill -9 32160'.</msg>
<msg timestamp="20150623 08:23:15.114" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:23:15.115" starttime="20150623 08:23:15.035"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:15.116" starttime="20150623 08:23:15.030"></status>
</kw>
<kw type="foritem" name="${process} = 32176 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:23:15.121" level="INFO">${pid} = 32176</msg>
<status status="PASS" endtime="20150623 08:23:15.120" starttime="20150623 08:23:15.118"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:23:15.125" level="INFO">Executing command 'kill -9 32176'.</msg>
<msg timestamp="20150623 08:23:15.193" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:23:15.194" starttime="20150623 08:23:15.123"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:15.195" starttime="20150623 08:23:15.117"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:15.196" starttime="20150623 08:23:14.882"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:15.197" starttime="20150623 08:23:14.714"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:23:15.202" level="INFO">Starting command 'cat tmpfilemonitor72.log'.</msg>
<status status="PASS" endtime="20150623 08:23:15.236" starttime="20150623 08:23:15.199"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:23:15.239" level="INFO">Reading output of command 'cat tmpfilemonitor72.log'.</msg>
<msg timestamp="20150623 08:23:15.267" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:23:15.269" level="INFO">${stdout_string} = [2015-06-23 06:22:52,222][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:23:15.268" starttime="20150623 08:23:15.237"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:23:15.273" level="INFO">Executing command 'rm tmpfilemonitor72.log'.</msg>
<msg timestamp="20150623 08:23:15.351" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:23:15.352" starttime="20150623 08:23:15.270"></status>
</kw>
<msg timestamp="20150623 08:23:15.355" level="INFO">${tailed_text} = [2015-06-23 06:22:52,222][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:23:15.354" starttime="20150623 08:23:14.687"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:15.363" starttime="20150623 08:23:15.356"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:15.374" starttime="20150623 08:23:15.372"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:23:15.378" starttime="20150623 08:23:15.376"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:15.382" starttime="20150623 08:23:15.365"></status>
</kw>
<msg timestamp="20150623 08:23:15.386" level="INFO">${tailed_text} = [2015-06-23 06:22:52,222][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:23:15.384" starttime="20150623 08:23:14.680"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:15.404" starttime="20150623 08:23:15.402"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:15.405" starttime="20150623 08:23:15.396"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:15.412" starttime="20150623 08:23:15.406"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:15.416" starttime="20150623 08:23:15.413"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:15.420" starttime="20150623 08:23:15.418"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:15.421" starttime="20150623 08:23:15.389"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:15.452" starttime="20150623 08:23:15.450"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:15.461" starttime="20150623 08:23:15.453"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:15.464" starttime="20150623 08:23:15.462"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:23:15.468" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:23:15.470" level="INFO">${queryResultSetLines} = 1004532|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:23:15.470" starttime="20150623 08:23:15.466"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:15.474" starttime="20150623 08:23:15.472"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:23:15.477" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:23:15.479" level="INFO">@{queryResultSet} = [ 1004532|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:23:15.478" starttime="20150623 08:23:15.475"></status>
</kw>
<msg timestamp="20150623 08:23:15.481" level="INFO">@{queryRows} = [ 1004532|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:23:15.481" starttime="20150623 08:23:15.443"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:23:15.486" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:23:15.487" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:23:15.486" starttime="20150623 08:23:15.483"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:23:15.491" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:23:15.492" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:23:15.491" starttime="20150623 08:23:15.488"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:23:15.502" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:23:15.503" starttime="20150623 08:23:15.500"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:15.504" starttime="20150623 08:23:15.494"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:15.511" starttime="20150623 08:23:15.505"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:15.512" starttime="20150623 08:23:15.435"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:15.513" starttime="20150623 08:23:14.060"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:15.515" starttime="20150623 08:23:14.054"></status>
</kw>
<msg timestamp="20150623 08:23:15.519" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:23:15.517" starttime="20150623 08:23:14.052"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:23:15.522" level="INFO">Index in the 2. loop: 9</msg>
<status status="PASS" endtime="20150623 08:23:15.523" starttime="20150623 08:23:15.520"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:23:21.527" level="INFO">Slept 6 seconds</msg>
<status status="PASS" endtime="20150623 08:23:21.529" starttime="20150623 08:23:15.525"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:23:21.539" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:23:21.538" starttime="20150623 08:23:21.531"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:21.540" starttime="20150623 08:23:14.051"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:21.541" starttime="20150623 08:22:06.308"></status>
</kw>
<msg timestamp="20150623 08:23:21.544" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:23:21.543" starttime="20150623 08:22:06.305"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>For delay ${loopIdx} we had ${failure} failure(s)</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:23:21.548" level="INFO">For delay 6 we had None failure(s)</msg>
<status status="PASS" endtime="20150623 08:23:21.550" starttime="20150623 08:23:21.545"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:21.550" starttime="20150623 08:22:06.301"></status>
</kw>
<kw type="foritem" name="${loopIdx} = 7">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Sitting in first FOR, Loop No.: ${loopIdx}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:23:21.555" level="INFO">Sitting in first FOR, Loop No.: 7</msg>
<status status="PASS" endtime="20150623 08:23:21.556" starttime="20150623 08:23:21.552"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Timeout set to ${loopIdx} secs</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:23:21.559" level="INFO">Timeout set to 7 secs</msg>
<status status="PASS" endtime="20150623 08:23:21.560" starttime="20150623 08:23:21.557"></status>
</kw>
<kw type="kw" name="${failure} = Internal Loop">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${loopIdx}</arg>
</arguments>
<kw type="for" name="${index} IN RANGE [ 0 | 10 ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${index} = 0">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:21.621" starttime="20150623 08:23:21.618"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:21.689" starttime="20150623 08:23:21.629"></status>
</kw>
<msg timestamp="20150623 08:23:21.691" level="INFO">${ssh_connection} = 73</msg>
<status status="PASS" endtime="20150623 08:23:21.691" starttime="20150623 08:23:21.622"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:23:21.703" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:23:22.140" level="INFO">Read output: Last login: Tue Jun 23 06:23:14 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:23:22.141" starttime="20150623 08:23:21.700"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:22.142" starttime="20150623 08:23:21.693"></status>
</kw>
<msg timestamp="20150623 08:23:22.144" level="INFO">${ssh_connection} = 73</msg>
<status status="PASS" endtime="20150623 08:23:22.144" starttime="20150623 08:23:21.609"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:22.150" starttime="20150623 08:23:22.149"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:23:22.152" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor73.log'.</msg>
<status status="PASS" endtime="20150623 08:23:22.156" starttime="20150623 08:23:22.151"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:22.157" starttime="20150623 08:23:22.146"></status>
</kw>
<msg timestamp="20150623 08:23:22.158" level="INFO">${ssh_connection} = 73</msg>
<status status="PASS" endtime="20150623 08:23:22.158" starttime="20150623 08:23:21.596"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:22.172" starttime="20150623 08:23:22.167"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:22.174" starttime="20150623 08:23:22.164"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:23:22.185" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:23:22.188" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:23:22.187" starttime="20150623 08:23:22.183"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:23:22.191" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:23:22.192" starttime="20150623 08:23:22.189"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:22.195" starttime="20150623 08:23:22.193"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:22.206" starttime="20150623 08:23:22.197"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:22.208" starttime="20150623 08:23:22.176"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:22.226" starttime="20150623 08:23:22.224"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:23:22.234" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:23:22.233" starttime="20150623 08:23:22.228"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:23:22.246" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:23:22.246" starttime="20150623 08:23:22.235"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:22.257" starttime="20150623 08:23:22.255"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:23:22.260" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:23:22.315" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:23:22.317" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:23:22.316" starttime="20150623 08:23:22.259"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:23:22.321" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:23:22.414" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:23:22.416" level="INFO">${processes_string} = 32301 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor73.log
32316 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
32334 ?        ...</msg>
<status status="PASS" endtime="20150623 08:23:22.415" starttime="20150623 08:23:22.318"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:23:22.421" level="INFO">@{processes_list} = [ 32301 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor73.log | 32316 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 32334 ?  ...</msg>
<status status="PASS" endtime="20150623 08:23:22.420" starttime="20150623 08:23:22.418"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 32301 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor73.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:23:22.428" level="INFO">${pid} = 32301</msg>
<status status="PASS" endtime="20150623 08:23:22.427" starttime="20150623 08:23:22.424"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:23:22.431" level="INFO">Executing command 'kill -9 32301'.</msg>
<msg timestamp="20150623 08:23:22.493" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:23:22.495" starttime="20150623 08:23:22.429"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:22.495" starttime="20150623 08:23:22.423"></status>
</kw>
<kw type="foritem" name="${process} = 32316 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:23:22.500" level="INFO">${pid} = 32316</msg>
<status status="PASS" endtime="20150623 08:23:22.500" starttime="20150623 08:23:22.497"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:23:22.504" level="INFO">Executing command 'kill -9 32316'.</msg>
<msg timestamp="20150623 08:23:22.562" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:23:22.563" starttime="20150623 08:23:22.502"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:22.564" starttime="20150623 08:23:22.496"></status>
</kw>
<kw type="foritem" name="${process} = 32334 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:23:22.569" level="INFO">${pid} = 32334</msg>
<status status="PASS" endtime="20150623 08:23:22.568" starttime="20150623 08:23:22.565"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:23:22.572" level="INFO">Executing command 'kill -9 32334'.</msg>
<msg timestamp="20150623 08:23:22.634" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:23:22.635" starttime="20150623 08:23:22.570"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:22.635" starttime="20150623 08:23:22.564"></status>
</kw>
<kw type="foritem" name="${process} = 32350 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:23:22.640" level="INFO">${pid} = 32350</msg>
<status status="PASS" endtime="20150623 08:23:22.639" starttime="20150623 08:23:22.637"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:23:22.644" level="INFO">Executing command 'kill -9 32350'.</msg>
<msg timestamp="20150623 08:23:22.707" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:23:22.708" starttime="20150623 08:23:22.642"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:22.709" starttime="20150623 08:23:22.636"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:22.709" starttime="20150623 08:23:22.422"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:22.710" starttime="20150623 08:23:22.248"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:23:22.713" level="INFO">Starting command 'cat tmpfilemonitor73.log'.</msg>
<status status="PASS" endtime="20150623 08:23:22.750" starttime="20150623 08:23:22.711"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:23:22.753" level="INFO">Reading output of command 'cat tmpfilemonitor73.log'.</msg>
<msg timestamp="20150623 08:23:22.780" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:23:22.782" level="INFO">${stdout_string} = [2015-06-23 06:22:59,634][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:23:22.782" starttime="20150623 08:23:22.751"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:23:22.786" level="INFO">Executing command 'rm tmpfilemonitor73.log'.</msg>
<msg timestamp="20150623 08:23:22.861" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:23:22.862" starttime="20150623 08:23:22.784"></status>
</kw>
<msg timestamp="20150623 08:23:22.865" level="INFO">${tailed_text} = [2015-06-23 06:22:59,634][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:23:22.864" starttime="20150623 08:23:22.218"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:22.873" starttime="20150623 08:23:22.866"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:22.883" starttime="20150623 08:23:22.881"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:23:22.887" starttime="20150623 08:23:22.885"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:22.892" starttime="20150623 08:23:22.875"></status>
</kw>
<msg timestamp="20150623 08:23:22.895" level="INFO">${tailed_text} = [2015-06-23 06:22:59,634][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:23:22.894" starttime="20150623 08:23:22.211"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:22.913" starttime="20150623 08:23:22.910"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:22.914" starttime="20150623 08:23:22.904"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:22.921" starttime="20150623 08:23:22.915"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:22.925" starttime="20150623 08:23:22.922"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:22.929" starttime="20150623 08:23:22.926"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:22.930" starttime="20150623 08:23:22.898"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:22.977" starttime="20150623 08:23:22.975"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:22.985" starttime="20150623 08:23:22.979"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:22.988" starttime="20150623 08:23:22.986"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:23:22.992" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:23:22.994" level="INFO">${queryResultSetLines} = 1004533|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:23:22.993" starttime="20150623 08:23:22.989"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:22.997" starttime="20150623 08:23:22.995"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:23:23.000" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:23:23.003" level="INFO">@{queryResultSet} = [ 1004533|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:23:23.002" starttime="20150623 08:23:22.998"></status>
</kw>
<msg timestamp="20150623 08:23:23.006" level="INFO">@{queryRows} = [ 1004533|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:23:23.005" starttime="20150623 08:23:22.968"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:23:23.011" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:23:23.012" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:23:23.012" starttime="20150623 08:23:23.008"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:23:23.016" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:23:23.018" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:23:23.017" starttime="20150623 08:23:23.014"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:23:23.028" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:23:23.029" starttime="20150623 08:23:23.026"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:23.030" starttime="20150623 08:23:23.019"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:23.037" starttime="20150623 08:23:23.031"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:23.038" starttime="20150623 08:23:22.943"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:23.040" starttime="20150623 08:23:21.578"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:23.042" starttime="20150623 08:23:21.571"></status>
</kw>
<msg timestamp="20150623 08:23:23.045" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:23:23.044" starttime="20150623 08:23:21.569"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:23:23.049" level="INFO">Index in the 2. loop: 0</msg>
<status status="PASS" endtime="20150623 08:23:23.050" starttime="20150623 08:23:23.046"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:23:30.054" level="INFO">Slept 7 seconds</msg>
<status status="PASS" endtime="20150623 08:23:30.056" starttime="20150623 08:23:23.051"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:23:30.066" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:23:30.065" starttime="20150623 08:23:30.058"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:30.067" starttime="20150623 08:23:21.568"></status>
</kw>
<kw type="foritem" name="${index} = 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:30.121" starttime="20150623 08:23:30.119"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:30.189" starttime="20150623 08:23:30.129"></status>
</kw>
<msg timestamp="20150623 08:23:30.191" level="INFO">${ssh_connection} = 74</msg>
<status status="PASS" endtime="20150623 08:23:30.190" starttime="20150623 08:23:30.122"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:23:30.202" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:23:30.628" level="INFO">Read output: Last login: Tue Jun 23 06:23:21 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:23:30.629" starttime="20150623 08:23:30.199"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:30.630" starttime="20150623 08:23:30.192"></status>
</kw>
<msg timestamp="20150623 08:23:30.631" level="INFO">${ssh_connection} = 74</msg>
<status status="PASS" endtime="20150623 08:23:30.631" starttime="20150623 08:23:30.110"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:30.637" starttime="20150623 08:23:30.636"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:23:30.639" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor74.log'.</msg>
<status status="PASS" endtime="20150623 08:23:30.642" starttime="20150623 08:23:30.637"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:30.643" starttime="20150623 08:23:30.632"></status>
</kw>
<msg timestamp="20150623 08:23:30.644" level="INFO">${ssh_connection} = 74</msg>
<status status="PASS" endtime="20150623 08:23:30.644" starttime="20150623 08:23:30.097"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:30.658" starttime="20150623 08:23:30.653"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:30.658" starttime="20150623 08:23:30.650"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:23:30.663" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:23:30.664" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:23:30.664" starttime="20150623 08:23:30.662"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:23:30.666" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:23:30.666" starttime="20150623 08:23:30.665"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:30.668" starttime="20150623 08:23:30.667"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:30.676" starttime="20150623 08:23:30.668"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:30.676" starttime="20150623 08:23:30.659"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:30.686" starttime="20150623 08:23:30.685"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:23:30.690" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:23:30.690" starttime="20150623 08:23:30.687"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:23:30.695" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:23:30.696" starttime="20150623 08:23:30.691"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:30.701" starttime="20150623 08:23:30.700"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:23:30.703" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:23:30.755" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:23:30.757" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:23:30.756" starttime="20150623 08:23:30.702"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:23:30.761" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:23:30.855" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:23:30.857" level="INFO">${processes_string} = 32476 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor74.log
32491 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
32509 ?        ...</msg>
<status status="PASS" endtime="20150623 08:23:30.856" starttime="20150623 08:23:30.759"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:23:30.862" level="INFO">@{processes_list} = [ 32476 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor74.log | 32491 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 32509 ?  ...</msg>
<status status="PASS" endtime="20150623 08:23:30.861" starttime="20150623 08:23:30.859"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 32476 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor74.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:23:30.869" level="INFO">${pid} = 32476</msg>
<status status="PASS" endtime="20150623 08:23:30.868" starttime="20150623 08:23:30.865"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:23:30.872" level="INFO">Executing command 'kill -9 32476'.</msg>
<msg timestamp="20150623 08:23:30.947" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:23:30.948" starttime="20150623 08:23:30.870"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:30.949" starttime="20150623 08:23:30.864"></status>
</kw>
<kw type="foritem" name="${process} = 32491 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:23:30.954" level="INFO">${pid} = 32491</msg>
<status status="PASS" endtime="20150623 08:23:30.953" starttime="20150623 08:23:30.950"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:23:30.957" level="INFO">Executing command 'kill -9 32491'.</msg>
<msg timestamp="20150623 08:23:31.016" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:23:31.017" starttime="20150623 08:23:30.955"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:31.019" starttime="20150623 08:23:30.949"></status>
</kw>
<kw type="foritem" name="${process} = 32509 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:23:31.024" level="INFO">${pid} = 32509</msg>
<status status="PASS" endtime="20150623 08:23:31.024" starttime="20150623 08:23:31.021"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:23:31.028" level="INFO">Executing command 'kill -9 32509'.</msg>
<msg timestamp="20150623 08:23:31.093" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:23:31.094" starttime="20150623 08:23:31.026"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:31.095" starttime="20150623 08:23:31.020"></status>
</kw>
<kw type="foritem" name="${process} = 32525 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:23:31.100" level="INFO">${pid} = 32525</msg>
<status status="PASS" endtime="20150623 08:23:31.099" starttime="20150623 08:23:31.097"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:23:31.104" level="INFO">Executing command 'kill -9 32525'.</msg>
<msg timestamp="20150623 08:23:31.174" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:23:31.175" starttime="20150623 08:23:31.102"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:31.176" starttime="20150623 08:23:31.096"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:31.176" starttime="20150623 08:23:30.863"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:31.178" starttime="20150623 08:23:30.697"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:23:31.182" level="INFO">Starting command 'cat tmpfilemonitor74.log'.</msg>
<status status="PASS" endtime="20150623 08:23:31.217" starttime="20150623 08:23:31.180"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:23:31.220" level="INFO">Reading output of command 'cat tmpfilemonitor74.log'.</msg>
<msg timestamp="20150623 08:23:31.257" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:23:31.259" level="INFO">${stdout_string} = [2015-06-23 06:23:14,673][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150623 08:23:31.258" starttime="20150623 08:23:31.219"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:23:31.263" level="INFO">Executing command 'rm tmpfilemonitor74.log'.</msg>
<msg timestamp="20150623 08:23:31.339" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:23:31.340" starttime="20150623 08:23:31.261"></status>
</kw>
<msg timestamp="20150623 08:23:31.343" level="INFO">${tailed_text} = [2015-06-23 06:23:14,673][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150623 08:23:31.342" starttime="20150623 08:23:30.681"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:31.351" starttime="20150623 08:23:31.345"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:31.362" starttime="20150623 08:23:31.360"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:23:31.368" starttime="20150623 08:23:31.363"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:31.372" starttime="20150623 08:23:31.353"></status>
</kw>
<msg timestamp="20150623 08:23:31.376" level="INFO">${tailed_text} = [2015-06-23 06:23:14,673][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150623 08:23:31.374" starttime="20150623 08:23:30.678"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:31.395" starttime="20150623 08:23:31.393"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:31.396" starttime="20150623 08:23:31.386"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:31.403" starttime="20150623 08:23:31.398"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:31.407" starttime="20150623 08:23:31.405"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:31.411" starttime="20150623 08:23:31.408"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:31.412" starttime="20150623 08:23:31.379"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:31.443" starttime="20150623 08:23:31.441"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:31.450" starttime="20150623 08:23:31.444"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:31.454" starttime="20150623 08:23:31.452"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:23:31.458" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:23:31.460" level="INFO">${queryResultSetLines} = 1004534|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:23:31.459" starttime="20150623 08:23:31.455"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:31.463" starttime="20150623 08:23:31.461"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:23:31.466" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:23:31.468" level="INFO">@{queryResultSet} = [ 1004534|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:23:31.467" starttime="20150623 08:23:31.464"></status>
</kw>
<msg timestamp="20150623 08:23:31.471" level="INFO">@{queryRows} = [ 1004534|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:23:31.470" starttime="20150623 08:23:31.434"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:23:31.493" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:23:31.494" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:23:31.494" starttime="20150623 08:23:31.472"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:23:31.498" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:23:31.500" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:23:31.499" starttime="20150623 08:23:31.496"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:23:31.510" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:23:31.511" starttime="20150623 08:23:31.508"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:31.512" starttime="20150623 08:23:31.501"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:31.519" starttime="20150623 08:23:31.514"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:31.521" starttime="20150623 08:23:31.426"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:31.522" starttime="20150623 08:23:30.078"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:31.524" starttime="20150623 08:23:30.071"></status>
</kw>
<msg timestamp="20150623 08:23:31.527" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:23:31.526" starttime="20150623 08:23:30.069"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:23:31.531" level="INFO">Index in the 2. loop: 1</msg>
<status status="PASS" endtime="20150623 08:23:31.532" starttime="20150623 08:23:31.528"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:23:38.538" level="INFO">Slept 7 seconds</msg>
<status status="PASS" endtime="20150623 08:23:38.539" starttime="20150623 08:23:31.533"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:23:38.550" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:23:38.549" starttime="20150623 08:23:38.542"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:38.551" starttime="20150623 08:23:30.068"></status>
</kw>
<kw type="foritem" name="${index} = 2">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:38.606" starttime="20150623 08:23:38.604"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:38.673" starttime="20150623 08:23:38.614"></status>
</kw>
<msg timestamp="20150623 08:23:38.675" level="INFO">${ssh_connection} = 75</msg>
<status status="PASS" endtime="20150623 08:23:38.675" starttime="20150623 08:23:38.607"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:23:38.688" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:23:39.136" level="INFO">Read output: Last login: Tue Jun 23 06:23:30 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:23:39.138" starttime="20150623 08:23:38.686"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:39.140" starttime="20150623 08:23:38.677"></status>
</kw>
<msg timestamp="20150623 08:23:39.145" level="INFO">${ssh_connection} = 75</msg>
<status status="PASS" endtime="20150623 08:23:39.143" starttime="20150623 08:23:38.594"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:39.157" starttime="20150623 08:23:39.155"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:23:39.162" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor75.log'.</msg>
<status status="PASS" endtime="20150623 08:23:39.166" starttime="20150623 08:23:39.159"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:39.167" starttime="20150623 08:23:39.147"></status>
</kw>
<msg timestamp="20150623 08:23:39.170" level="INFO">${ssh_connection} = 75</msg>
<status status="PASS" endtime="20150623 08:23:39.169" starttime="20150623 08:23:38.582"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:39.196" starttime="20150623 08:23:39.190"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:39.198" starttime="20150623 08:23:39.183"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:23:39.209" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:23:39.211" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:23:39.210" starttime="20150623 08:23:39.206"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:23:39.214" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:23:39.215" starttime="20150623 08:23:39.212"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:39.219" starttime="20150623 08:23:39.217"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:39.228" starttime="20150623 08:23:39.220"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:39.230" starttime="20150623 08:23:39.200"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:39.248" starttime="20150623 08:23:39.246"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:23:39.256" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:23:39.255" starttime="20150623 08:23:39.250"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:23:39.262" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:23:39.263" starttime="20150623 08:23:39.257"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:39.274" starttime="20150623 08:23:39.271"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:23:39.277" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:23:39.307" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:23:39.309" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:23:39.308" starttime="20150623 08:23:39.275"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:23:39.313" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:23:39.408" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:23:39.410" level="INFO">${processes_string} = 32650 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor75.log
32665 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
32683 ?        ...</msg>
<status status="PASS" endtime="20150623 08:23:39.409" starttime="20150623 08:23:39.310"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:23:39.415" level="INFO">@{processes_list} = [ 32650 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor75.log | 32665 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 32683 ?  ...</msg>
<status status="PASS" endtime="20150623 08:23:39.414" starttime="20150623 08:23:39.411"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 32650 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor75.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:23:39.421" level="INFO">${pid} = 32650</msg>
<status status="PASS" endtime="20150623 08:23:39.421" starttime="20150623 08:23:39.418"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:23:39.425" level="INFO">Executing command 'kill -9 32650'.</msg>
<msg timestamp="20150623 08:23:39.489" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:23:39.490" starttime="20150623 08:23:39.423"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:39.491" starttime="20150623 08:23:39.417"></status>
</kw>
<kw type="foritem" name="${process} = 32665 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:23:39.496" level="INFO">${pid} = 32665</msg>
<status status="PASS" endtime="20150623 08:23:39.495" starttime="20150623 08:23:39.493"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:23:39.500" level="INFO">Executing command 'kill -9 32665'.</msg>
<msg timestamp="20150623 08:23:39.570" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:23:39.571" starttime="20150623 08:23:39.497"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:39.572" starttime="20150623 08:23:39.492"></status>
</kw>
<kw type="foritem" name="${process} = 32683 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:23:39.577" level="INFO">${pid} = 32683</msg>
<status status="PASS" endtime="20150623 08:23:39.576" starttime="20150623 08:23:39.573"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:23:39.580" level="INFO">Executing command 'kill -9 32683'.</msg>
<msg timestamp="20150623 08:23:39.651" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:23:39.652" starttime="20150623 08:23:39.578"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:39.652" starttime="20150623 08:23:39.572"></status>
</kw>
<kw type="foritem" name="${process} = 32699 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:23:39.658" level="INFO">${pid} = 32699</msg>
<status status="PASS" endtime="20150623 08:23:39.657" starttime="20150623 08:23:39.654"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:23:39.661" level="INFO">Executing command 'kill -9 32699'.</msg>
<msg timestamp="20150623 08:23:39.730" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:23:39.731" starttime="20150623 08:23:39.659"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:39.732" starttime="20150623 08:23:39.653"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:39.732" starttime="20150623 08:23:39.416"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:39.733" starttime="20150623 08:23:39.265"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:23:39.737" level="INFO">Starting command 'cat tmpfilemonitor75.log'.</msg>
<status status="PASS" endtime="20150623 08:23:39.773" starttime="20150623 08:23:39.734"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:23:39.776" level="INFO">Reading output of command 'cat tmpfilemonitor75.log'.</msg>
<msg timestamp="20150623 08:23:39.811" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:23:39.812" level="INFO">${stdout_string} = [2015-06-23 06:23:14,705][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:23:39.812" starttime="20150623 08:23:39.774"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:23:39.816" level="INFO">Executing command 'rm tmpfilemonitor75.log'.</msg>
<msg timestamp="20150623 08:23:39.891" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:23:39.892" starttime="20150623 08:23:39.814"></status>
</kw>
<msg timestamp="20150623 08:23:39.895" level="INFO">${tailed_text} = [2015-06-23 06:23:14,705][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:23:39.894" starttime="20150623 08:23:39.240"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:39.903" starttime="20150623 08:23:39.896"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:39.914" starttime="20150623 08:23:39.911"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:23:39.917" starttime="20150623 08:23:39.915"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:39.928" starttime="20150623 08:23:39.905"></status>
</kw>
<msg timestamp="20150623 08:23:39.931" level="INFO">${tailed_text} = [2015-06-23 06:23:14,705][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:23:39.930" starttime="20150623 08:23:39.233"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:39.950" starttime="20150623 08:23:39.947"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:39.951" starttime="20150623 08:23:39.941"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:39.979" starttime="20150623 08:23:39.952"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:39.984" starttime="20150623 08:23:39.981"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:39.987" starttime="20150623 08:23:39.985"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:39.989" starttime="20150623 08:23:39.934"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:40.020" starttime="20150623 08:23:40.018"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:40.027" starttime="20150623 08:23:40.021"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:40.031" starttime="20150623 08:23:40.029"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:23:40.035" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:23:40.037" level="INFO">${queryResultSetLines} = 1004535|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:23:40.036" starttime="20150623 08:23:40.032"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:40.040" starttime="20150623 08:23:40.039"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:23:40.044" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:23:40.046" level="INFO">@{queryResultSet} = [ 1004535|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:23:40.045" starttime="20150623 08:23:40.042"></status>
</kw>
<msg timestamp="20150623 08:23:40.048" level="INFO">@{queryRows} = [ 1004535|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:23:40.047" starttime="20150623 08:23:40.011"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:23:40.053" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:23:40.055" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:23:40.054" starttime="20150623 08:23:40.050"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:23:40.058" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:23:40.060" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:23:40.059" starttime="20150623 08:23:40.056"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:23:40.070" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:23:40.071" starttime="20150623 08:23:40.068"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:40.072" starttime="20150623 08:23:40.061"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:40.079" starttime="20150623 08:23:40.073"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:40.080" starttime="20150623 08:23:40.002"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:40.082" starttime="20150623 08:23:38.563"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:40.084" starttime="20150623 08:23:38.555"></status>
</kw>
<msg timestamp="20150623 08:23:40.087" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:23:40.085" starttime="20150623 08:23:38.553"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:23:40.090" level="INFO">Index in the 2. loop: 2</msg>
<status status="PASS" endtime="20150623 08:23:40.091" starttime="20150623 08:23:40.088"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:23:47.096" level="INFO">Slept 7 seconds</msg>
<status status="PASS" endtime="20150623 08:23:47.098" starttime="20150623 08:23:40.093"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:23:47.108" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:23:47.107" starttime="20150623 08:23:47.101"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:47.109" starttime="20150623 08:23:38.552"></status>
</kw>
<kw type="foritem" name="${index} = 3">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:47.163" starttime="20150623 08:23:47.161"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:47.233" starttime="20150623 08:23:47.172"></status>
</kw>
<msg timestamp="20150623 08:23:47.235" level="INFO">${ssh_connection} = 76</msg>
<status status="PASS" endtime="20150623 08:23:47.234" starttime="20150623 08:23:47.165"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:23:47.248" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:23:47.606" level="INFO">Read output: Last login: Tue Jun 23 06:23:38 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:23:47.608" starttime="20150623 08:23:47.245"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:47.609" starttime="20150623 08:23:47.237"></status>
</kw>
<msg timestamp="20150623 08:23:47.612" level="INFO">${ssh_connection} = 76</msg>
<status status="PASS" endtime="20150623 08:23:47.611" starttime="20150623 08:23:47.152"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:47.624" starttime="20150623 08:23:47.621"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:23:47.628" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log'.</msg>
<status status="PASS" endtime="20150623 08:23:47.632" starttime="20150623 08:23:47.625"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:47.633" starttime="20150623 08:23:47.614"></status>
</kw>
<msg timestamp="20150623 08:23:47.636" level="INFO">${ssh_connection} = 76</msg>
<status status="PASS" endtime="20150623 08:23:47.635" starttime="20150623 08:23:47.139"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:47.663" starttime="20150623 08:23:47.656"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:47.665" starttime="20150623 08:23:47.649"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:23:47.677" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:23:47.679" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:23:47.679" starttime="20150623 08:23:47.674"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:23:47.683" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:23:47.684" starttime="20150623 08:23:47.681"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:47.687" starttime="20150623 08:23:47.685"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:47.701" starttime="20150623 08:23:47.688"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:47.703" starttime="20150623 08:23:47.667"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:47.721" starttime="20150623 08:23:47.719"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:23:47.729" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:23:47.728" starttime="20150623 08:23:47.722"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:23:47.735" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:23:47.736" starttime="20150623 08:23:47.730"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:47.747" starttime="20150623 08:23:47.745"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:23:47.750" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:23:47.785" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:23:47.787" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:23:47.786" starttime="20150623 08:23:47.749"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:23:47.792" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:23:47.885" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:23:47.887" level="INFO">${processes_string} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log
  373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
  392 ?        ...</msg>
<status status="PASS" endtime="20150623 08:23:47.886" starttime="20150623 08:23:47.789"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:23:47.892" level="INFO">@{processes_list} = [   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log |   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log |   392 ?  ...</msg>
<status status="PASS" endtime="20150623 08:23:47.891" starttime="20150623 08:23:47.888"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:23:47.898" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:23:47.898" starttime="20150623 08:23:47.895"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:23:47.902" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:23:47.966" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:23:47.967" starttime="20150623 08:23:47.900"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:47.968" starttime="20150623 08:23:47.894"></status>
</kw>
<kw type="foritem" name="${process} =   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:23:47.974" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:23:47.973" starttime="20150623 08:23:47.970"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:23:47.977" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:23:48.046" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:23:48.048" starttime="20150623 08:23:47.975"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:48.050" starttime="20150623 08:23:47.969"></status>
</kw>
<kw type="foritem" name="${process} =   392 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:23:48.056" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:23:48.055" starttime="20150623 08:23:48.052"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:23:48.060" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:23:48.127" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:23:48.128" starttime="20150623 08:23:48.058"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:48.129" starttime="20150623 08:23:48.051"></status>
</kw>
<kw type="foritem" name="${process} =   409 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:23:48.133" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:23:48.133" starttime="20150623 08:23:48.130"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:23:48.137" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:23:48.208" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:23:48.209" starttime="20150623 08:23:48.135"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:48.210" starttime="20150623 08:23:48.129"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:48.211" starttime="20150623 08:23:47.893"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:48.212" starttime="20150623 08:23:47.738"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:23:48.217" level="INFO">Starting command 'cat tmpfilemonitor76.log'.</msg>
<status status="PASS" endtime="20150623 08:23:48.251" starttime="20150623 08:23:48.214"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:23:48.254" level="INFO">Reading output of command 'cat tmpfilemonitor76.log'.</msg>
<msg timestamp="20150623 08:23:48.291" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:23:48.293" level="INFO">${stdout_string} = [2015-06-23 06:23:22,243][INFO ][Camel (ticket-router) thread #53 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:23:48.292" starttime="20150623 08:23:48.252"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:23:48.297" level="INFO">Executing command 'rm tmpfilemonitor76.log'.</msg>
<msg timestamp="20150623 08:23:48.375" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:23:48.376" starttime="20150623 08:23:48.294"></status>
</kw>
<msg timestamp="20150623 08:23:48.380" level="INFO">${tailed_text} = [2015-06-23 06:23:22,243][INFO ][Camel (ticket-router) thread #53 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:23:48.378" starttime="20150623 08:23:47.712"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:48.388" starttime="20150623 08:23:48.381"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:48.399" starttime="20150623 08:23:48.396"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:23:48.403" starttime="20150623 08:23:48.400"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:48.409" starttime="20150623 08:23:48.390"></status>
</kw>
<msg timestamp="20150623 08:23:48.412" level="INFO">${tailed_text} = [2015-06-23 06:23:22,243][INFO ][Camel (ticket-router) thread #53 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:23:48.410" starttime="20150623 08:23:47.705"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:48.432" starttime="20150623 08:23:48.430"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:48.433" starttime="20150623 08:23:48.422"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:48.440" starttime="20150623 08:23:48.435"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:48.444" starttime="20150623 08:23:48.441"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:48.448" starttime="20150623 08:23:48.445"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:48.449" starttime="20150623 08:23:48.415"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:48.480" starttime="20150623 08:23:48.478"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:48.488" starttime="20150623 08:23:48.481"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:48.491" starttime="20150623 08:23:48.489"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:23:48.495" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:23:48.497" level="INFO">${queryResultSetLines} = 1004536|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:23:48.497" starttime="20150623 08:23:48.493"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:48.500" starttime="20150623 08:23:48.499"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:23:48.504" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:23:48.506" level="INFO">@{queryResultSet} = [ 1004536|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:23:48.505" starttime="20150623 08:23:48.502"></status>
</kw>
<msg timestamp="20150623 08:23:48.508" level="INFO">@{queryRows} = [ 1004536|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:23:48.508" starttime="20150623 08:23:48.471"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:23:48.513" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:23:48.514" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:23:48.514" starttime="20150623 08:23:48.510"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:23:48.518" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:23:48.520" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:23:48.519" starttime="20150623 08:23:48.516"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:23:48.530" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:23:48.531" starttime="20150623 08:23:48.527"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:48.532" starttime="20150623 08:23:48.521"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:48.539" starttime="20150623 08:23:48.533"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:48.540" starttime="20150623 08:23:48.463"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:48.541" starttime="20150623 08:23:47.120"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:48.543" starttime="20150623 08:23:47.113"></status>
</kw>
<msg timestamp="20150623 08:23:48.546" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:23:48.545" starttime="20150623 08:23:47.111"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:23:48.550" level="INFO">Index in the 2. loop: 3</msg>
<status status="PASS" endtime="20150623 08:23:48.551" starttime="20150623 08:23:48.548"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:23:55.556" level="INFO">Slept 7 seconds</msg>
<status status="PASS" endtime="20150623 08:23:55.558" starttime="20150623 08:23:48.553"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:23:55.568" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:23:55.567" starttime="20150623 08:23:55.560"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:55.569" starttime="20150623 08:23:47.110"></status>
</kw>
<kw type="foritem" name="${index} = 4">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:55.623" starttime="20150623 08:23:55.621"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:55.694" starttime="20150623 08:23:55.631"></status>
</kw>
<msg timestamp="20150623 08:23:55.696" level="INFO">${ssh_connection} = 77</msg>
<status status="PASS" endtime="20150623 08:23:55.695" starttime="20150623 08:23:55.624"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:23:55.708" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:23:56.155" level="INFO">Read output: Last login: Tue Jun 23 06:23:47 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:23:56.157" starttime="20150623 08:23:55.706"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:56.159" starttime="20150623 08:23:55.698"></status>
</kw>
<msg timestamp="20150623 08:23:56.164" level="INFO">${ssh_connection} = 77</msg>
<status status="PASS" endtime="20150623 08:23:56.162" starttime="20150623 08:23:55.612"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:56.176" starttime="20150623 08:23:56.173"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:23:56.181" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor77.log'.</msg>
<status status="PASS" endtime="20150623 08:23:56.185" starttime="20150623 08:23:56.178"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:56.186" starttime="20150623 08:23:56.166"></status>
</kw>
<msg timestamp="20150623 08:23:56.189" level="INFO">${ssh_connection} = 77</msg>
<status status="PASS" endtime="20150623 08:23:56.188" starttime="20150623 08:23:55.599"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:56.216" starttime="20150623 08:23:56.209"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:56.217" starttime="20150623 08:23:56.202"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:23:56.228" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:23:56.231" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:23:56.230" starttime="20150623 08:23:56.226"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:23:56.234" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:23:56.235" starttime="20150623 08:23:56.232"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:56.238" starttime="20150623 08:23:56.236"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:56.249" starttime="20150623 08:23:56.240"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:56.251" starttime="20150623 08:23:56.219"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:56.270" starttime="20150623 08:23:56.267"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:23:56.277" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:23:56.277" starttime="20150623 08:23:56.271"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:23:56.284" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:23:56.285" starttime="20150623 08:23:56.279"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:56.296" starttime="20150623 08:23:56.294"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:23:56.300" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:23:56.346" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:23:56.348" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:23:56.347" starttime="20150623 08:23:56.298"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:23:56.352" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:23:56.446" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:23:56.448" level="INFO">${processes_string} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log
  373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
  538 ?        ...</msg>
<status status="PASS" endtime="20150623 08:23:56.447" starttime="20150623 08:23:56.349"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:23:56.453" level="INFO">@{processes_list} = [   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log |   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log |   538 ?  ...</msg>
<status status="PASS" endtime="20150623 08:23:56.452" starttime="20150623 08:23:56.449"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:23:56.459" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:23:56.458" starttime="20150623 08:23:56.455"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:23:56.463" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:23:56.528" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:23:56.529" starttime="20150623 08:23:56.460"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:56.530" starttime="20150623 08:23:56.455"></status>
</kw>
<kw type="foritem" name="${process} =   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:23:56.535" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:23:56.534" starttime="20150623 08:23:56.531"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:23:56.539" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:23:56.609" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:23:56.610" starttime="20150623 08:23:56.536"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:56.611" starttime="20150623 08:23:56.530"></status>
</kw>
<kw type="foritem" name="${process} =   538 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor77.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:23:56.616" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:23:56.615" starttime="20150623 08:23:56.612"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:23:56.619" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:23:56.690" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:23:56.691" starttime="20150623 08:23:56.617"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:56.692" starttime="20150623 08:23:56.611"></status>
</kw>
<kw type="foritem" name="${process} =   553 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:23:56.697" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:23:56.696" starttime="20150623 08:23:56.693"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:23:56.700" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:23:56.770" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:23:56.771" starttime="20150623 08:23:56.698"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:56.772" starttime="20150623 08:23:56.692"></status>
</kw>
<kw type="foritem" name="${process} =   571 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:23:56.777" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:23:56.776" starttime="20150623 08:23:56.773"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:23:56.781" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:23:56.854" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:23:56.855" starttime="20150623 08:23:56.778"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:56.856" starttime="20150623 08:23:56.772"></status>
</kw>
<kw type="foritem" name="${process} =   587 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:23:56.861" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:23:56.860" starttime="20150623 08:23:56.858"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:23:56.865" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:23:56.937" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:23:56.938" starttime="20150623 08:23:56.862"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:56.939" starttime="20150623 08:23:56.857"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:56.939" starttime="20150623 08:23:56.454"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:56.940" starttime="20150623 08:23:56.287"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:23:56.944" level="INFO">Starting command 'cat tmpfilemonitor77.log'.</msg>
<status status="PASS" endtime="20150623 08:23:56.980" starttime="20150623 08:23:56.942"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:23:56.983" level="INFO">Reading output of command 'cat tmpfilemonitor77.log'.</msg>
<msg timestamp="20150623 08:23:57.021" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:23:57.024" level="INFO">${stdout_string} = [2015-06-23 06:23:30,710][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:23:57.022" starttime="20150623 08:23:56.982"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:23:57.027" level="INFO">Executing command 'rm tmpfilemonitor77.log'.</msg>
<msg timestamp="20150623 08:23:57.105" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:23:57.106" starttime="20150623 08:23:57.025"></status>
</kw>
<msg timestamp="20150623 08:23:57.109" level="INFO">${tailed_text} = [2015-06-23 06:23:30,710][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:23:57.108" starttime="20150623 08:23:56.261"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:57.117" starttime="20150623 08:23:57.111"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:57.128" starttime="20150623 08:23:57.126"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:23:57.132" starttime="20150623 08:23:57.130"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:57.138" starttime="20150623 08:23:57.119"></status>
</kw>
<msg timestamp="20150623 08:23:57.141" level="INFO">${tailed_text} = [2015-06-23 06:23:30,710][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:23:57.140" starttime="20150623 08:23:56.254"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:57.160" starttime="20150623 08:23:57.157"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:57.161" starttime="20150623 08:23:57.151"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:57.168" starttime="20150623 08:23:57.162"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:57.172" starttime="20150623 08:23:57.169"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:57.176" starttime="20150623 08:23:57.173"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:57.177" starttime="20150623 08:23:57.144"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:57.208" starttime="20150623 08:23:57.206"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:57.215" starttime="20150623 08:23:57.209"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:57.218" starttime="20150623 08:23:57.217"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:23:57.223" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:23:57.225" level="INFO">${queryResultSetLines} = 1004537|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:23:57.224" starttime="20150623 08:23:57.220"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:57.228" starttime="20150623 08:23:57.226"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:23:57.231" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:23:57.233" level="INFO">@{queryResultSet} = [ 1004537|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:23:57.232" starttime="20150623 08:23:57.229"></status>
</kw>
<msg timestamp="20150623 08:23:57.236" level="INFO">@{queryRows} = [ 1004537|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:23:57.235" starttime="20150623 08:23:57.199"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:23:57.240" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:23:57.242" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:23:57.241" starttime="20150623 08:23:57.237"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:23:57.245" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:23:57.247" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:23:57.246" starttime="20150623 08:23:57.243"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:23:57.257" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:23:57.258" starttime="20150623 08:23:57.254"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:57.259" starttime="20150623 08:23:57.248"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:23:57.266" starttime="20150623 08:23:57.260"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:57.268" starttime="20150623 08:23:57.190"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:57.269" starttime="20150623 08:23:55.580"></status>
</kw>
<status status="PASS" endtime="20150623 08:23:57.271" starttime="20150623 08:23:55.573"></status>
</kw>
<msg timestamp="20150623 08:23:57.274" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:23:57.273" starttime="20150623 08:23:55.571"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:23:57.278" level="INFO">Index in the 2. loop: 4</msg>
<status status="PASS" endtime="20150623 08:23:57.279" starttime="20150623 08:23:57.275"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:24:04.283" level="INFO">Slept 7 seconds</msg>
<status status="PASS" endtime="20150623 08:24:04.285" starttime="20150623 08:23:57.280"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:24:04.295" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:24:04.295" starttime="20150623 08:24:04.287"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:04.296" starttime="20150623 08:23:55.570"></status>
</kw>
<kw type="foritem" name="${index} = 5">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:04.372" starttime="20150623 08:24:04.370"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:04.437" starttime="20150623 08:24:04.380"></status>
</kw>
<msg timestamp="20150623 08:24:04.439" level="INFO">${ssh_connection} = 78</msg>
<status status="PASS" endtime="20150623 08:24:04.438" starttime="20150623 08:24:04.373"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:24:04.452" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:24:04.889" level="INFO">Read output: Last login: Tue Jun 23 06:23:55 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:24:04.891" starttime="20150623 08:24:04.449"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:04.892" starttime="20150623 08:24:04.441"></status>
</kw>
<msg timestamp="20150623 08:24:04.895" level="INFO">${ssh_connection} = 78</msg>
<status status="PASS" endtime="20150623 08:24:04.894" starttime="20150623 08:24:04.340"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:04.907" starttime="20150623 08:24:04.905"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:24:04.911" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor78.log'.</msg>
<status status="PASS" endtime="20150623 08:24:04.916" starttime="20150623 08:24:04.909"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:04.917" starttime="20150623 08:24:04.897"></status>
</kw>
<msg timestamp="20150623 08:24:04.919" level="INFO">${ssh_connection} = 78</msg>
<status status="PASS" endtime="20150623 08:24:04.919" starttime="20150623 08:24:04.327"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:04.946" starttime="20150623 08:24:04.939"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:04.948" starttime="20150623 08:24:04.933"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:24:04.960" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:24:04.962" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:24:04.961" starttime="20150623 08:24:04.957"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:24:04.966" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:24:04.967" starttime="20150623 08:24:04.964"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:04.970" starttime="20150623 08:24:04.968"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:04.981" starttime="20150623 08:24:04.972"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:04.983" starttime="20150623 08:24:04.950"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:05.002" starttime="20150623 08:24:04.999"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:24:05.010" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:24:05.010" starttime="20150623 08:24:05.004"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:24:05.017" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:24:05.018" starttime="20150623 08:24:05.012"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:05.029" starttime="20150623 08:24:05.026"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:24:05.032" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:24:05.067" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:24:05.069" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:24:05.068" starttime="20150623 08:24:05.030"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:24:05.073" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:24:05.156" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:24:05.158" level="INFO">${processes_string} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log
  373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
  538 ?        ...</msg>
<status status="PASS" endtime="20150623 08:24:05.157" starttime="20150623 08:24:05.070"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:24:05.163" level="INFO">@{processes_list} = [   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log |   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log |   538 ?  ...</msg>
<status status="PASS" endtime="20150623 08:24:05.162" starttime="20150623 08:24:05.160"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:05.170" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:05.169" starttime="20150623 08:24:05.166"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:05.173" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:05.226" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:05.227" starttime="20150623 08:24:05.171"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:05.228" starttime="20150623 08:24:05.165"></status>
</kw>
<kw type="foritem" name="${process} =   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:05.232" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:05.232" starttime="20150623 08:24:05.229"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:05.236" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:05.306" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:05.307" starttime="20150623 08:24:05.234"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:05.308" starttime="20150623 08:24:05.228"></status>
</kw>
<kw type="foritem" name="${process} =   538 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor77.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:05.313" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:05.312" starttime="20150623 08:24:05.309"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:05.317" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:05.389" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:05.390" starttime="20150623 08:24:05.314"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:05.391" starttime="20150623 08:24:05.308"></status>
</kw>
<kw type="foritem" name="${process} =   553 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:05.396" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:05.396" starttime="20150623 08:24:05.393"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:05.400" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:05.480" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:05.481" starttime="20150623 08:24:05.398"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:05.482" starttime="20150623 08:24:05.392"></status>
</kw>
<kw type="foritem" name="${process} =   745 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor78.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:05.487" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:05.486" starttime="20150623 08:24:05.483"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:05.491" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:05.561" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:05.562" starttime="20150623 08:24:05.488"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:05.562" starttime="20150623 08:24:05.482"></status>
</kw>
<kw type="foritem" name="${process} =   760 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:05.567" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:05.567" starttime="20150623 08:24:05.564"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:05.571" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:05.641" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:05.642" starttime="20150623 08:24:05.569"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:05.643" starttime="20150623 08:24:05.563"></status>
</kw>
<kw type="foritem" name="${process} =   778 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:05.648" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:05.647" starttime="20150623 08:24:05.644"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:05.651" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:05.722" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:05.723" starttime="20150623 08:24:05.649"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:05.724" starttime="20150623 08:24:05.643"></status>
</kw>
<kw type="foritem" name="${process} =   794 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:05.729" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:05.728" starttime="20150623 08:24:05.725"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:05.732" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:05.802" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:05.803" starttime="20150623 08:24:05.730"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:05.804" starttime="20150623 08:24:05.724"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:05.804" starttime="20150623 08:24:05.164"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:05.805" starttime="20150623 08:24:05.020"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:24:05.809" level="INFO">Starting command 'cat tmpfilemonitor78.log'.</msg>
<status status="PASS" endtime="20150623 08:24:05.845" starttime="20150623 08:24:05.807"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:24:05.848" level="INFO">Reading output of command 'cat tmpfilemonitor78.log'.</msg>
<msg timestamp="20150623 08:24:05.884" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:24:05.886" level="INFO">${stdout_string} = [2015-06-23 06:23:39,253][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:24:05.885" starttime="20150623 08:24:05.846"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:24:05.890" level="INFO">Executing command 'rm tmpfilemonitor78.log'.</msg>
<msg timestamp="20150623 08:24:05.968" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:24:05.969" starttime="20150623 08:24:05.887"></status>
</kw>
<msg timestamp="20150623 08:24:05.973" level="INFO">${tailed_text} = [2015-06-23 06:23:39,253][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:24:05.971" starttime="20150623 08:24:04.993"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:05.981" starttime="20150623 08:24:05.974"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:05.992" starttime="20150623 08:24:05.989"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:24:05.996" starttime="20150623 08:24:05.993"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:06.001" starttime="20150623 08:24:05.983"></status>
</kw>
<msg timestamp="20150623 08:24:06.005" level="INFO">${tailed_text} = [2015-06-23 06:23:39,253][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:24:06.003" starttime="20150623 08:24:04.986"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:06.024" starttime="20150623 08:24:06.022"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:06.025" starttime="20150623 08:24:06.015"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:06.032" starttime="20150623 08:24:06.027"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:06.037" starttime="20150623 08:24:06.034"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:06.040" starttime="20150623 08:24:06.038"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:06.041" starttime="20150623 08:24:06.008"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:06.072" starttime="20150623 08:24:06.071"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:06.081" starttime="20150623 08:24:06.074"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:06.085" starttime="20150623 08:24:06.083"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:24:06.089" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:24:06.091" level="INFO">${queryResultSetLines} = 1004538|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:24:06.090" starttime="20150623 08:24:06.086"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:06.094" starttime="20150623 08:24:06.092"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:24:06.097" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:24:06.099" level="INFO">@{queryResultSet} = [ 1004538|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:24:06.098" starttime="20150623 08:24:06.095"></status>
</kw>
<msg timestamp="20150623 08:24:06.102" level="INFO">@{queryRows} = [ 1004538|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:24:06.101" starttime="20150623 08:24:06.064"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:24:06.106" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:24:06.107" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:24:06.107" starttime="20150623 08:24:06.103"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:24:06.111" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:24:06.112" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:24:06.112" starttime="20150623 08:24:06.109"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:24:06.122" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:24:06.123" starttime="20150623 08:24:06.120"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:06.124" starttime="20150623 08:24:06.114"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:06.131" starttime="20150623 08:24:06.126"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:06.133" starttime="20150623 08:24:06.055"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:06.134" starttime="20150623 08:24:04.308"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:06.136" starttime="20150623 08:24:04.301"></status>
</kw>
<msg timestamp="20150623 08:24:06.139" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:24:06.137" starttime="20150623 08:24:04.298"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:24:06.142" level="INFO">Index in the 2. loop: 5</msg>
<status status="PASS" endtime="20150623 08:24:06.143" starttime="20150623 08:24:06.140"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:24:13.148" level="INFO">Slept 7 seconds</msg>
<status status="PASS" endtime="20150623 08:24:13.150" starttime="20150623 08:24:06.145"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:24:13.160" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:24:13.159" starttime="20150623 08:24:13.152"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:13.161" starttime="20150623 08:24:04.297"></status>
</kw>
<kw type="foritem" name="${index} = 6">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:13.215" starttime="20150623 08:24:13.213"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:13.281" starttime="20150623 08:24:13.223"></status>
</kw>
<msg timestamp="20150623 08:24:13.284" level="INFO">${ssh_connection} = 79</msg>
<status status="PASS" endtime="20150623 08:24:13.283" starttime="20150623 08:24:13.216"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:24:13.295" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:24:13.669" level="INFO">Read output: Last login: Tue Jun 23 06:24:04 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:24:13.671" starttime="20150623 08:24:13.292"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:13.672" starttime="20150623 08:24:13.285"></status>
</kw>
<msg timestamp="20150623 08:24:13.675" level="INFO">${ssh_connection} = 79</msg>
<status status="PASS" endtime="20150623 08:24:13.674" starttime="20150623 08:24:13.203"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:13.681" starttime="20150623 08:24:13.679"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:24:13.683" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor79.log'.</msg>
<status status="PASS" endtime="20150623 08:24:13.687" starttime="20150623 08:24:13.681"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:13.687" starttime="20150623 08:24:13.676"></status>
</kw>
<msg timestamp="20150623 08:24:13.689" level="INFO">${ssh_connection} = 79</msg>
<status status="PASS" endtime="20150623 08:24:13.688" starttime="20150623 08:24:13.191"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:13.703" starttime="20150623 08:24:13.697"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:13.704" starttime="20150623 08:24:13.694"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:24:13.715" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:24:13.718" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:24:13.717" starttime="20150623 08:24:13.713"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:24:13.721" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:24:13.722" starttime="20150623 08:24:13.719"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:13.725" starttime="20150623 08:24:13.723"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:13.736" starttime="20150623 08:24:13.727"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:13.737" starttime="20150623 08:24:13.706"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:13.756" starttime="20150623 08:24:13.753"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:24:13.764" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:24:13.763" starttime="20150623 08:24:13.757"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:24:13.770" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:24:13.771" starttime="20150623 08:24:13.765"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:13.782" starttime="20150623 08:24:13.780"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:24:13.785" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:24:13.829" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:24:13.831" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:24:13.830" starttime="20150623 08:24:13.783"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:24:13.835" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:24:13.925" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:24:13.926" level="INFO">${processes_string} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log
  373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
  538 ?        ...</msg>
<status status="PASS" endtime="20150623 08:24:13.926" starttime="20150623 08:24:13.832"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:24:13.932" level="INFO">@{processes_list} = [   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log |   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log |   538 ?  ...</msg>
<status status="PASS" endtime="20150623 08:24:13.931" starttime="20150623 08:24:13.928"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:13.938" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:13.937" starttime="20150623 08:24:13.934"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:13.942" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:14.001" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:14.002" starttime="20150623 08:24:13.939"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:14.004" starttime="20150623 08:24:13.933"></status>
</kw>
<kw type="foritem" name="${process} =   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:14.010" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:14.009" starttime="20150623 08:24:14.006"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:14.014" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:14.079" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:14.080" starttime="20150623 08:24:14.011"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:14.081" starttime="20150623 08:24:14.005"></status>
</kw>
<kw type="foritem" name="${process} =   538 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor77.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:14.086" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:14.085" starttime="20150623 08:24:14.083"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:14.090" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:14.159" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:14.160" starttime="20150623 08:24:14.088"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:14.160" starttime="20150623 08:24:14.082"></status>
</kw>
<kw type="foritem" name="${process} =   553 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:14.166" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:14.165" starttime="20150623 08:24:14.162"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:14.169" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:14.243" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:14.244" starttime="20150623 08:24:14.167"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:14.245" starttime="20150623 08:24:14.161"></status>
</kw>
<kw type="foritem" name="${process} =   745 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor78.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:14.250" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:14.249" starttime="20150623 08:24:14.247"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:14.254" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:14.324" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:14.325" starttime="20150623 08:24:14.252"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:14.326" starttime="20150623 08:24:14.246"></status>
</kw>
<kw type="foritem" name="${process} =   760 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:14.331" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:14.330" starttime="20150623 08:24:14.327"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:14.334" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:14.405" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:14.406" starttime="20150623 08:24:14.332"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:14.408" starttime="20150623 08:24:14.326"></status>
</kw>
<kw type="foritem" name="${process} =   985 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor79.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:14.413" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:14.412" starttime="20150623 08:24:14.409"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:14.417" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:14.485" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:14.487" starttime="20150623 08:24:14.414"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:14.487" starttime="20150623 08:24:14.408"></status>
</kw>
<kw type="foritem" name="${process} =  1000 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:14.493" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:14.492" starttime="20150623 08:24:14.489"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:14.496" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:14.566" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:14.567" starttime="20150623 08:24:14.494"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:14.567" starttime="20150623 08:24:14.488"></status>
</kw>
<kw type="foritem" name="${process} =  1018 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:14.572" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:14.572" starttime="20150623 08:24:14.569"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:14.576" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:14.647" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:14.648" starttime="20150623 08:24:14.574"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:14.649" starttime="20150623 08:24:14.568"></status>
</kw>
<kw type="foritem" name="${process} =  1034 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:14.654" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:14.653" starttime="20150623 08:24:14.650"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:14.658" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:14.729" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:14.730" starttime="20150623 08:24:14.655"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:14.731" starttime="20150623 08:24:14.649"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:14.731" starttime="20150623 08:24:13.933"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:14.733" starttime="20150623 08:24:13.773"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:24:14.738" level="INFO">Starting command 'cat tmpfilemonitor79.log'.</msg>
<status status="PASS" endtime="20150623 08:24:14.772" starttime="20150623 08:24:14.735"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:24:14.775" level="INFO">Reading output of command 'cat tmpfilemonitor79.log'.</msg>
<msg timestamp="20150623 08:24:14.811" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:24:14.814" level="INFO">${stdout_string} = [2015-06-23 06:23:47,721][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:24:14.813" starttime="20150623 08:24:14.773"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:24:14.818" level="INFO">Executing command 'rm tmpfilemonitor79.log'.</msg>
<msg timestamp="20150623 08:24:14.895" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:24:14.896" starttime="20150623 08:24:14.816"></status>
</kw>
<msg timestamp="20150623 08:24:14.900" level="INFO">${tailed_text} = [2015-06-23 06:23:47,721][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:24:14.898" starttime="20150623 08:24:13.747"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:14.908" starttime="20150623 08:24:14.901"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:14.919" starttime="20150623 08:24:14.917"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:24:14.927" starttime="20150623 08:24:14.921"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:14.929" starttime="20150623 08:24:14.910"></status>
</kw>
<msg timestamp="20150623 08:24:14.932" level="INFO">${tailed_text} = [2015-06-23 06:23:47,721][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:24:14.930" starttime="20150623 08:24:13.740"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:14.951" starttime="20150623 08:24:14.949"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:14.952" starttime="20150623 08:24:14.942"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:14.959" starttime="20150623 08:24:14.953"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:14.963" starttime="20150623 08:24:14.960"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:14.967" starttime="20150623 08:24:14.964"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:14.968" starttime="20150623 08:24:14.935"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:14.999" starttime="20150623 08:24:14.997"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:15.006" starttime="20150623 08:24:15.000"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:15.010" starttime="20150623 08:24:15.008"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:24:15.014" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:24:15.017" level="INFO">${queryResultSetLines} = 1004539|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:24:15.016" starttime="20150623 08:24:15.011"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:15.020" starttime="20150623 08:24:15.018"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:24:15.023" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:24:15.025" level="INFO">@{queryResultSet} = [ 1004539|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:24:15.024" starttime="20150623 08:24:15.021"></status>
</kw>
<msg timestamp="20150623 08:24:15.029" level="INFO">@{queryRows} = [ 1004539|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:24:15.027" starttime="20150623 08:24:14.990"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:24:15.033" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:24:15.035" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:24:15.034" starttime="20150623 08:24:15.030"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:24:15.038" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:24:15.040" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:24:15.039" starttime="20150623 08:24:15.036"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:24:15.051" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:24:15.052" starttime="20150623 08:24:15.048"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:15.053" starttime="20150623 08:24:15.041"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:15.060" starttime="20150623 08:24:15.054"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:15.061" starttime="20150623 08:24:14.981"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:15.063" starttime="20150623 08:24:13.171"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:15.065" starttime="20150623 08:24:13.165"></status>
</kw>
<msg timestamp="20150623 08:24:15.068" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:24:15.067" starttime="20150623 08:24:13.163"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:24:15.072" level="INFO">Index in the 2. loop: 6</msg>
<status status="PASS" endtime="20150623 08:24:15.073" starttime="20150623 08:24:15.070"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:24:22.078" level="INFO">Slept 7 seconds</msg>
<status status="PASS" endtime="20150623 08:24:22.080" starttime="20150623 08:24:15.074"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:24:22.090" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:24:22.089" starttime="20150623 08:24:22.082"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:22.090" starttime="20150623 08:24:13.162"></status>
</kw>
<kw type="foritem" name="${index} = 7">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:22.145" starttime="20150623 08:24:22.143"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:22.218" starttime="20150623 08:24:22.153"></status>
</kw>
<msg timestamp="20150623 08:24:22.221" level="INFO">${ssh_connection} = 80</msg>
<status status="PASS" endtime="20150623 08:24:22.220" starttime="20150623 08:24:22.146"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:24:22.232" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:24:22.672" level="INFO">Read output: Last login: Tue Jun 23 06:24:13 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:24:22.673" starttime="20150623 08:24:22.229"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:22.675" starttime="20150623 08:24:22.222"></status>
</kw>
<msg timestamp="20150623 08:24:22.678" level="INFO">${ssh_connection} = 80</msg>
<status status="PASS" endtime="20150623 08:24:22.677" starttime="20150623 08:24:22.133"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:22.690" starttime="20150623 08:24:22.687"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:24:22.694" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor80.log'.</msg>
<status status="PASS" endtime="20150623 08:24:22.698" starttime="20150623 08:24:22.691"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:22.700" starttime="20150623 08:24:22.680"></status>
</kw>
<msg timestamp="20150623 08:24:22.702" level="INFO">${ssh_connection} = 80</msg>
<status status="PASS" endtime="20150623 08:24:22.701" starttime="20150623 08:24:22.121"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:22.728" starttime="20150623 08:24:22.722"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:22.730" starttime="20150623 08:24:22.715"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:24:22.740" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:24:22.743" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:24:22.742" starttime="20150623 08:24:22.738"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:24:22.746" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:24:22.747" starttime="20150623 08:24:22.744"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:22.751" starttime="20150623 08:24:22.748"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:22.761" starttime="20150623 08:24:22.752"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:22.762" starttime="20150623 08:24:22.732"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:22.781" starttime="20150623 08:24:22.778"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:24:22.789" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:24:22.788" starttime="20150623 08:24:22.782"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:24:22.795" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:24:22.796" starttime="20150623 08:24:22.790"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:22.808" starttime="20150623 08:24:22.805"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:24:22.811" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:24:22.854" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:24:22.856" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:24:22.855" starttime="20150623 08:24:22.809"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:24:22.860" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:24:22.952" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:24:22.954" level="INFO">${processes_string} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log
  373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
  538 ?        ...</msg>
<status status="PASS" endtime="20150623 08:24:22.953" starttime="20150623 08:24:22.858"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:24:22.959" level="INFO">@{processes_list} = [   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log |   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log |   538 ?  ...</msg>
<status status="PASS" endtime="20150623 08:24:22.958" starttime="20150623 08:24:22.955"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:22.966" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:22.965" starttime="20150623 08:24:22.962"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:22.969" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:23.032" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:23.033" starttime="20150623 08:24:22.967"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:23.035" starttime="20150623 08:24:22.961"></status>
</kw>
<kw type="foritem" name="${process} =   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:23.041" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:23.040" starttime="20150623 08:24:23.037"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:23.044" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:23.113" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:23.114" starttime="20150623 08:24:23.042"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:23.115" starttime="20150623 08:24:23.036"></status>
</kw>
<kw type="foritem" name="${process} =   538 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor77.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:23.120" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:23.119" starttime="20150623 08:24:23.116"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:23.123" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:23.205" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:23.206" starttime="20150623 08:24:23.121"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:23.207" starttime="20150623 08:24:23.115"></status>
</kw>
<kw type="foritem" name="${process} =   553 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:23.212" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:23.211" starttime="20150623 08:24:23.209"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:23.216" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:23.283" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:23.284" starttime="20150623 08:24:23.213"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:23.285" starttime="20150623 08:24:23.208"></status>
</kw>
<kw type="foritem" name="${process} =   745 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor78.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:23.290" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:23.289" starttime="20150623 08:24:23.286"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:23.294" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:23.363" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:23.364" starttime="20150623 08:24:23.291"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:23.364" starttime="20150623 08:24:23.285"></status>
</kw>
<kw type="foritem" name="${process} =   760 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:23.369" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:23.369" starttime="20150623 08:24:23.366"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:23.373" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:23.446" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:23.447" starttime="20150623 08:24:23.371"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:23.448" starttime="20150623 08:24:23.365"></status>
</kw>
<kw type="foritem" name="${process} =   985 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor79.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:23.453" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:23.452" starttime="20150623 08:24:23.450"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:23.457" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:23.528" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:23.529" starttime="20150623 08:24:23.455"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:23.530" starttime="20150623 08:24:23.449"></status>
</kw>
<kw type="foritem" name="${process} =  1000 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:23.535" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:23.534" starttime="20150623 08:24:23.531"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:23.538" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:23.612" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:23.612" starttime="20150623 08:24:23.536"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:23.613" starttime="20150623 08:24:23.530"></status>
</kw>
<kw type="foritem" name="${process} =  1249 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor80.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:23.618" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:23.618" starttime="20150623 08:24:23.615"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:23.623" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:23.694" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:23.695" starttime="20150623 08:24:23.620"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:23.696" starttime="20150623 08:24:23.614"></status>
</kw>
<kw type="foritem" name="${process} =  1264 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:23.701" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:23.700" starttime="20150623 08:24:23.697"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:23.705" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:23.781" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:23.782" starttime="20150623 08:24:23.702"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:23.783" starttime="20150623 08:24:23.696"></status>
</kw>
<kw type="foritem" name="${process} =  1282 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:23.788" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:23.787" starttime="20150623 08:24:23.784"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:23.792" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:23.860" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:23.861" starttime="20150623 08:24:23.789"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:23.861" starttime="20150623 08:24:23.783"></status>
</kw>
<kw type="foritem" name="${process} =  1300 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:23.866" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:23.866" starttime="20150623 08:24:23.863"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:23.870" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:23.927" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:23.928" starttime="20150623 08:24:23.868"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:23.929" starttime="20150623 08:24:23.862"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:23.929" starttime="20150623 08:24:22.960"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:23.931" starttime="20150623 08:24:22.798"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:24:23.935" level="INFO">Starting command 'cat tmpfilemonitor80.log'.</msg>
<status status="PASS" endtime="20150623 08:24:23.969" starttime="20150623 08:24:23.933"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:24:23.971" level="INFO">Reading output of command 'cat tmpfilemonitor80.log'.</msg>
<msg timestamp="20150623 08:24:24.006" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:24:24.008" level="INFO">${stdout_string} = [2015-06-23 06:23:56,279][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:24:24.007" starttime="20150623 08:24:23.970"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:24:24.012" level="INFO">Executing command 'rm tmpfilemonitor80.log'.</msg>
<msg timestamp="20150623 08:24:24.087" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:24:24.088" starttime="20150623 08:24:24.010"></status>
</kw>
<msg timestamp="20150623 08:24:24.092" level="INFO">${tailed_text} = [2015-06-23 06:23:56,279][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:24:24.090" starttime="20150623 08:24:22.772"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:24.100" starttime="20150623 08:24:24.093"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:24.111" starttime="20150623 08:24:24.108"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:24:24.115" starttime="20150623 08:24:24.112"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:24.120" starttime="20150623 08:24:24.102"></status>
</kw>
<msg timestamp="20150623 08:24:24.124" level="INFO">${tailed_text} = [2015-06-23 06:23:56,279][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:24:24.122" starttime="20150623 08:24:22.765"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:24.143" starttime="20150623 08:24:24.140"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:24.144" starttime="20150623 08:24:24.134"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:24.151" starttime="20150623 08:24:24.145"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:24.155" starttime="20150623 08:24:24.152"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:24.159" starttime="20150623 08:24:24.156"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:24.160" starttime="20150623 08:24:24.127"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:24.210" starttime="20150623 08:24:24.208"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:24.222" starttime="20150623 08:24:24.211"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:24.225" starttime="20150623 08:24:24.223"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:24:24.229" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:24:24.231" level="INFO">${queryResultSetLines} = 1004540|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:24:24.231" starttime="20150623 08:24:24.227"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:24.234" starttime="20150623 08:24:24.233"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:24:24.238" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:24:24.239" level="INFO">@{queryResultSet} = [ 1004540|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:24:24.239" starttime="20150623 08:24:24.236"></status>
</kw>
<msg timestamp="20150623 08:24:24.242" level="INFO">@{queryRows} = [ 1004540|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:24:24.241" starttime="20150623 08:24:24.201"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:24:24.246" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:24:24.248" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:24:24.247" starttime="20150623 08:24:24.243"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:24:24.252" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:24:24.253" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:24:24.252" starttime="20150623 08:24:24.249"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:24:24.263" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:24:24.264" starttime="20150623 08:24:24.261"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:24.265" starttime="20150623 08:24:24.254"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:24.272" starttime="20150623 08:24:24.267"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:24.274" starttime="20150623 08:24:24.173"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:24.275" starttime="20150623 08:24:22.102"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:24.277" starttime="20150623 08:24:22.095"></status>
</kw>
<msg timestamp="20150623 08:24:24.280" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:24:24.278" starttime="20150623 08:24:22.093"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:24:24.283" level="INFO">Index in the 2. loop: 7</msg>
<status status="PASS" endtime="20150623 08:24:24.285" starttime="20150623 08:24:24.281"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:24:31.290" level="INFO">Slept 7 seconds</msg>
<status status="PASS" endtime="20150623 08:24:31.291" starttime="20150623 08:24:24.286"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:24:31.302" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:24:31.301" starttime="20150623 08:24:31.294"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:31.303" starttime="20150623 08:24:22.092"></status>
</kw>
<kw type="foritem" name="${index} = 8">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:31.358" starttime="20150623 08:24:31.355"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:31.425" starttime="20150623 08:24:31.366"></status>
</kw>
<msg timestamp="20150623 08:24:31.427" level="INFO">${ssh_connection} = 81</msg>
<status status="PASS" endtime="20150623 08:24:31.426" starttime="20150623 08:24:31.359"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:24:31.438" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:24:31.867" level="INFO">Read output: Last login: Tue Jun 23 06:24:22 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:24:31.868" starttime="20150623 08:24:31.436"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:31.868" starttime="20150623 08:24:31.428"></status>
</kw>
<msg timestamp="20150623 08:24:31.870" level="INFO">${ssh_connection} = 81</msg>
<status status="PASS" endtime="20150623 08:24:31.869" starttime="20150623 08:24:31.346"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:31.876" starttime="20150623 08:24:31.874"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:24:31.877" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor81.log'.</msg>
<status status="PASS" endtime="20150623 08:24:31.881" starttime="20150623 08:24:31.876"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:31.881" starttime="20150623 08:24:31.871"></status>
</kw>
<msg timestamp="20150623 08:24:31.883" level="INFO">${ssh_connection} = 81</msg>
<status status="PASS" endtime="20150623 08:24:31.882" starttime="20150623 08:24:31.333"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:31.896" starttime="20150623 08:24:31.892"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:31.898" starttime="20150623 08:24:31.888"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:24:31.909" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:24:31.911" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:24:31.910" starttime="20150623 08:24:31.906"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:24:31.915" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:24:31.916" starttime="20150623 08:24:31.913"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:31.919" starttime="20150623 08:24:31.917"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:31.929" starttime="20150623 08:24:31.920"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:31.930" starttime="20150623 08:24:31.900"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:31.949" starttime="20150623 08:24:31.947"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:24:31.957" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:24:31.956" starttime="20150623 08:24:31.950"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:24:31.963" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:24:31.964" starttime="20150623 08:24:31.958"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:31.975" starttime="20150623 08:24:31.973"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:24:31.978" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:24:32.030" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:24:32.034" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:24:32.032" starttime="20150623 08:24:31.977"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:24:32.038" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:24:32.157" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:24:32.159" level="INFO">${processes_string} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log
  373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
  538 ?        ...</msg>
<status status="PASS" endtime="20150623 08:24:32.158" starttime="20150623 08:24:32.035"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:24:32.164" level="INFO">@{processes_list} = [   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log |   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log |   538 ?  ...</msg>
<status status="PASS" endtime="20150623 08:24:32.163" starttime="20150623 08:24:32.160"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:32.170" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:32.170" starttime="20150623 08:24:32.167"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:32.174" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:32.240" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:32.242" starttime="20150623 08:24:32.172"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:32.242" starttime="20150623 08:24:32.166"></status>
</kw>
<kw type="foritem" name="${process} =   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:32.247" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:32.247" starttime="20150623 08:24:32.244"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:32.251" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:32.321" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:32.322" starttime="20150623 08:24:32.249"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:32.323" starttime="20150623 08:24:32.243"></status>
</kw>
<kw type="foritem" name="${process} =   538 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor77.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:32.328" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:32.327" starttime="20150623 08:24:32.324"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:32.331" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:32.404" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:32.405" starttime="20150623 08:24:32.329"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:32.406" starttime="20150623 08:24:32.323"></status>
</kw>
<kw type="foritem" name="${process} =   553 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:32.411" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:32.410" starttime="20150623 08:24:32.408"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:32.415" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:32.484" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:32.485" starttime="20150623 08:24:32.412"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:32.486" starttime="20150623 08:24:32.407"></status>
</kw>
<kw type="foritem" name="${process} =   745 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor78.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:32.491" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:32.490" starttime="20150623 08:24:32.488"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:32.495" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:32.564" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:32.565" starttime="20150623 08:24:32.492"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:32.566" starttime="20150623 08:24:32.487"></status>
</kw>
<kw type="foritem" name="${process} =   760 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:32.570" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:32.570" starttime="20150623 08:24:32.567"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:32.574" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:32.643" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:32.644" starttime="20150623 08:24:32.572"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:32.645" starttime="20150623 08:24:32.566"></status>
</kw>
<kw type="foritem" name="${process} =   985 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor79.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:32.650" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:32.649" starttime="20150623 08:24:32.646"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:32.653" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:32.722" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:32.723" starttime="20150623 08:24:32.651"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:32.723" starttime="20150623 08:24:32.645"></status>
</kw>
<kw type="foritem" name="${process} =  1000 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:32.729" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:32.728" starttime="20150623 08:24:32.725"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:32.732" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:32.803" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:32.804" starttime="20150623 08:24:32.730"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:32.805" starttime="20150623 08:24:32.724"></status>
</kw>
<kw type="foritem" name="${process} =  1249 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor80.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:32.810" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:32.809" starttime="20150623 08:24:32.806"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:32.814" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:32.883" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:32.884" starttime="20150623 08:24:32.811"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:32.885" starttime="20150623 08:24:32.805"></status>
</kw>
<kw type="foritem" name="${process} =  1264 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:32.890" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:32.889" starttime="20150623 08:24:32.887"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:32.894" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:32.963" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:32.964" starttime="20150623 08:24:32.891"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:32.965" starttime="20150623 08:24:32.886"></status>
</kw>
<kw type="foritem" name="${process} =  1559 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor81.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:32.970" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:32.969" starttime="20150623 08:24:32.967"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:32.974" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:33.043" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:33.044" starttime="20150623 08:24:32.971"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:33.046" starttime="20150623 08:24:32.966"></status>
</kw>
<kw type="foritem" name="${process} =  1574 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:33.052" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:33.051" starttime="20150623 08:24:33.048"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:33.056" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:33.122" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:33.123" starttime="20150623 08:24:33.053"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:33.124" starttime="20150623 08:24:33.047"></status>
</kw>
<kw type="foritem" name="${process} =  1592 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:33.129" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:33.128" starttime="20150623 08:24:33.125"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:33.133" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:33.202" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:33.203" starttime="20150623 08:24:33.130"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:33.204" starttime="20150623 08:24:33.124"></status>
</kw>
<kw type="foritem" name="${process} =  1609 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:33.209" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:33.208" starttime="20150623 08:24:33.206"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:33.213" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:33.282" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:33.283" starttime="20150623 08:24:33.210"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:33.284" starttime="20150623 08:24:33.205"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:33.284" starttime="20150623 08:24:32.165"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:33.286" starttime="20150623 08:24:31.966"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:24:33.290" level="INFO">Starting command 'cat tmpfilemonitor81.log'.</msg>
<status status="PASS" endtime="20150623 08:24:33.325" starttime="20150623 08:24:33.288"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:24:33.328" level="INFO">Reading output of command 'cat tmpfilemonitor81.log'.</msg>
<msg timestamp="20150623 08:24:33.364" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:24:33.366" level="INFO">${stdout_string} = [2015-06-23 06:24:05,008][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:24:33.365" starttime="20150623 08:24:33.326"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:24:33.370" level="INFO">Executing command 'rm tmpfilemonitor81.log'.</msg>
<msg timestamp="20150623 08:24:33.448" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:24:33.449" starttime="20150623 08:24:33.367"></status>
</kw>
<msg timestamp="20150623 08:24:33.453" level="INFO">${tailed_text} = [2015-06-23 06:24:05,008][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:24:33.451" starttime="20150623 08:24:31.940"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:33.461" starttime="20150623 08:24:33.454"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:33.472" starttime="20150623 08:24:33.469"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:24:33.476" starttime="20150623 08:24:33.473"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:33.481" starttime="20150623 08:24:33.463"></status>
</kw>
<msg timestamp="20150623 08:24:33.484" level="INFO">${tailed_text} = [2015-06-23 06:24:05,008][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:24:33.482" starttime="20150623 08:24:31.933"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:33.502" starttime="20150623 08:24:33.500"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:33.503" starttime="20150623 08:24:33.494"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:33.529" starttime="20150623 08:24:33.505"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:33.533" starttime="20150623 08:24:33.530"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:33.537" starttime="20150623 08:24:33.535"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:33.539" starttime="20150623 08:24:33.487"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:33.570" starttime="20150623 08:24:33.568"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:33.577" starttime="20150623 08:24:33.571"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:33.580" starttime="20150623 08:24:33.579"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:24:33.585" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:24:33.587" level="INFO">${queryResultSetLines} = 1004541|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:24:33.586" starttime="20150623 08:24:33.582"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:33.590" starttime="20150623 08:24:33.588"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:24:33.593" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:24:33.595" level="INFO">@{queryResultSet} = [ 1004541|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:24:33.594" starttime="20150623 08:24:33.591"></status>
</kw>
<msg timestamp="20150623 08:24:33.598" level="INFO">@{queryRows} = [ 1004541|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:24:33.597" starttime="20150623 08:24:33.561"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:24:33.602" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:24:33.604" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:24:33.603" starttime="20150623 08:24:33.599"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:24:33.607" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:24:33.609" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:24:33.608" starttime="20150623 08:24:33.605"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:24:33.619" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:24:33.620" starttime="20150623 08:24:33.617"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:33.621" starttime="20150623 08:24:33.610"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:33.628" starttime="20150623 08:24:33.622"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:33.629" starttime="20150623 08:24:33.552"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:33.631" starttime="20150623 08:24:31.314"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:33.633" starttime="20150623 08:24:31.307"></status>
</kw>
<msg timestamp="20150623 08:24:33.636" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:24:33.634" starttime="20150623 08:24:31.305"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:24:33.640" level="INFO">Index in the 2. loop: 8</msg>
<status status="PASS" endtime="20150623 08:24:33.642" starttime="20150623 08:24:33.637"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:24:40.645" level="INFO">Slept 7 seconds</msg>
<status status="PASS" endtime="20150623 08:24:40.646" starttime="20150623 08:24:33.643"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:24:40.652" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:24:40.652" starttime="20150623 08:24:40.647"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:40.653" starttime="20150623 08:24:31.304"></status>
</kw>
<kw type="foritem" name="${index} = 9">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:40.683" starttime="20150623 08:24:40.683"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:40.728" starttime="20150623 08:24:40.688"></status>
</kw>
<msg timestamp="20150623 08:24:40.730" level="INFO">${ssh_connection} = 82</msg>
<status status="PASS" endtime="20150623 08:24:40.729" starttime="20150623 08:24:40.684"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:24:40.735" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:24:41.093" level="INFO">Read output: Last login: Tue Jun 23 06:24:31 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:24:41.094" starttime="20150623 08:24:40.734"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:41.096" starttime="20150623 08:24:40.730"></status>
</kw>
<msg timestamp="20150623 08:24:41.101" level="INFO">${ssh_connection} = 82</msg>
<status status="PASS" endtime="20150623 08:24:41.099" starttime="20150623 08:24:40.678"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:41.113" starttime="20150623 08:24:41.110"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:24:41.117" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor82.log'.</msg>
<status status="PASS" endtime="20150623 08:24:41.122" starttime="20150623 08:24:41.114"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:41.123" starttime="20150623 08:24:41.103"></status>
</kw>
<msg timestamp="20150623 08:24:41.126" level="INFO">${ssh_connection} = 82</msg>
<status status="PASS" endtime="20150623 08:24:41.125" starttime="20150623 08:24:40.671"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:41.174" starttime="20150623 08:24:41.167"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:41.176" starttime="20150623 08:24:41.140"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:24:41.187" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:24:41.189" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:24:41.188" starttime="20150623 08:24:41.184"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:24:41.193" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:24:41.193" starttime="20150623 08:24:41.191"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:41.197" starttime="20150623 08:24:41.195"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:41.207" starttime="20150623 08:24:41.198"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:41.208" starttime="20150623 08:24:41.178"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:41.226" starttime="20150623 08:24:41.224"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:24:41.234" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:24:41.233" starttime="20150623 08:24:41.228"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:24:41.245" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:24:41.246" starttime="20150623 08:24:41.235"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:41.257" starttime="20150623 08:24:41.254"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:24:41.260" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:24:41.305" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:24:41.306" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:24:41.306" starttime="20150623 08:24:41.258"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:24:41.310" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:24:41.405" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:24:41.407" level="INFO">${processes_string} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log
  373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
  538 ?        ...</msg>
<status status="PASS" endtime="20150623 08:24:41.406" starttime="20150623 08:24:41.308"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:24:41.412" level="INFO">@{processes_list} = [   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log |   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log |   538 ?  ...</msg>
<status status="PASS" endtime="20150623 08:24:41.411" starttime="20150623 08:24:41.408"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:41.418" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:41.417" starttime="20150623 08:24:41.415"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:41.422" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:41.484" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:41.485" starttime="20150623 08:24:41.419"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:41.486" starttime="20150623 08:24:41.414"></status>
</kw>
<kw type="foritem" name="${process} =   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:41.491" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:41.490" starttime="20150623 08:24:41.488"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:41.495" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:41.563" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:41.564" starttime="20150623 08:24:41.493"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:41.565" starttime="20150623 08:24:41.487"></status>
</kw>
<kw type="foritem" name="${process} =   538 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor77.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:41.570" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:41.569" starttime="20150623 08:24:41.567"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:41.574" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:41.650" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:41.651" starttime="20150623 08:24:41.571"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:41.652" starttime="20150623 08:24:41.566"></status>
</kw>
<kw type="foritem" name="${process} =   553 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:41.657" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:41.656" starttime="20150623 08:24:41.654"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:41.661" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:41.737" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:41.738" starttime="20150623 08:24:41.658"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:41.739" starttime="20150623 08:24:41.653"></status>
</kw>
<kw type="foritem" name="${process} =   745 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor78.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:41.744" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:41.743" starttime="20150623 08:24:41.740"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:41.747" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:41.819" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:41.820" starttime="20150623 08:24:41.745"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:41.820" starttime="20150623 08:24:41.739"></status>
</kw>
<kw type="foritem" name="${process} =   760 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:41.825" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:41.825" starttime="20150623 08:24:41.822"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:41.829" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:41.898" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:41.899" starttime="20150623 08:24:41.827"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:41.900" starttime="20150623 08:24:41.821"></status>
</kw>
<kw type="foritem" name="${process} =   985 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor79.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:41.905" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:41.904" starttime="20150623 08:24:41.902"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:41.909" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:41.978" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:41.979" starttime="20150623 08:24:41.907"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:41.980" starttime="20150623 08:24:41.901"></status>
</kw>
<kw type="foritem" name="${process} =  1000 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:41.985" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:41.984" starttime="20150623 08:24:41.982"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:41.989" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:42.060" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:42.062" starttime="20150623 08:24:41.987"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:42.063" starttime="20150623 08:24:41.981"></status>
</kw>
<kw type="foritem" name="${process} =  1249 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor80.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:42.069" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:42.068" starttime="20150623 08:24:42.066"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:42.073" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:42.141" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:42.142" starttime="20150623 08:24:42.071"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:42.143" starttime="20150623 08:24:42.065"></status>
</kw>
<kw type="foritem" name="${process} =  1264 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:42.148" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:42.147" starttime="20150623 08:24:42.144"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:42.152" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:42.222" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:42.223" starttime="20150623 08:24:42.149"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:42.224" starttime="20150623 08:24:42.144"></status>
</kw>
<kw type="foritem" name="${process} =  1559 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor81.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:42.229" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:42.228" starttime="20150623 08:24:42.225"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:42.232" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:42.302" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:42.303" starttime="20150623 08:24:42.230"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:42.304" starttime="20150623 08:24:42.224"></status>
</kw>
<kw type="foritem" name="${process} =  1574 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:42.309" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:42.308" starttime="20150623 08:24:42.306"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:42.313" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:42.383" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:42.384" starttime="20150623 08:24:42.310"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:42.385" starttime="20150623 08:24:42.305"></status>
</kw>
<kw type="foritem" name="${process} =  1899 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor82.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:42.389" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:42.389" starttime="20150623 08:24:42.386"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:42.393" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:42.463" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:42.464" starttime="20150623 08:24:42.391"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:42.465" starttime="20150623 08:24:42.385"></status>
</kw>
<kw type="foritem" name="${process} =  1914 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:42.470" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:42.469" starttime="20150623 08:24:42.466"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:42.473" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:42.543" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:42.544" starttime="20150623 08:24:42.471"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:42.545" starttime="20150623 08:24:42.465"></status>
</kw>
<kw type="foritem" name="${process} =  1932 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:42.550" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:42.549" starttime="20150623 08:24:42.546"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:42.554" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:42.624" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:42.625" starttime="20150623 08:24:42.551"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:42.626" starttime="20150623 08:24:42.545"></status>
</kw>
<kw type="foritem" name="${process} =  1948 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:42.631" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:42.630" starttime="20150623 08:24:42.627"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:42.635" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:42.704" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:42.705" starttime="20150623 08:24:42.632"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:42.706" starttime="20150623 08:24:42.626"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:42.706" starttime="20150623 08:24:41.413"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:42.708" starttime="20150623 08:24:41.248"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:24:42.712" level="INFO">Starting command 'cat tmpfilemonitor82.log'.</msg>
<status status="PASS" endtime="20150623 08:24:42.747" starttime="20150623 08:24:42.710"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:24:42.750" level="INFO">Reading output of command 'cat tmpfilemonitor82.log'.</msg>
<msg timestamp="20150623 08:24:42.786" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:24:42.787" level="INFO">${stdout_string} = [2015-06-23 06:24:13,762][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:24:42.787" starttime="20150623 08:24:42.748"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:24:42.791" level="INFO">Executing command 'rm tmpfilemonitor82.log'.</msg>
<msg timestamp="20150623 08:24:42.866" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:24:42.867" starttime="20150623 08:24:42.789"></status>
</kw>
<msg timestamp="20150623 08:24:42.870" level="INFO">${tailed_text} = [2015-06-23 06:24:13,762][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:24:42.869" starttime="20150623 08:24:41.218"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:42.879" starttime="20150623 08:24:42.872"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:42.889" starttime="20150623 08:24:42.887"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:24:42.893" starttime="20150623 08:24:42.891"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:42.898" starttime="20150623 08:24:42.880"></status>
</kw>
<msg timestamp="20150623 08:24:42.901" level="INFO">${tailed_text} = [2015-06-23 06:24:13,762][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:24:42.900" starttime="20150623 08:24:41.211"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:42.919" starttime="20150623 08:24:42.917"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:42.921" starttime="20150623 08:24:42.911"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:42.928" starttime="20150623 08:24:42.922"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:42.932" starttime="20150623 08:24:42.929"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:42.935" starttime="20150623 08:24:42.933"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:42.937" starttime="20150623 08:24:42.904"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:42.985" starttime="20150623 08:24:42.983"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:42.996" starttime="20150623 08:24:42.986"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:42.999" starttime="20150623 08:24:42.997"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:24:43.004" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:24:43.006" level="INFO">${queryResultSetLines} = 1004542|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:24:43.005" starttime="20150623 08:24:43.001"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:43.009" starttime="20150623 08:24:43.008"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:24:43.013" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:24:43.015" level="INFO">@{queryResultSet} = [ 1004542|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:24:43.014" starttime="20150623 08:24:43.011"></status>
</kw>
<msg timestamp="20150623 08:24:43.018" level="INFO">@{queryRows} = [ 1004542|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:24:43.016" starttime="20150623 08:24:42.958"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:24:43.022" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:24:43.024" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:24:43.023" starttime="20150623 08:24:43.019"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:24:43.027" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:24:43.029" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:24:43.028" starttime="20150623 08:24:43.025"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:24:43.039" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:24:43.040" starttime="20150623 08:24:43.037"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:43.041" starttime="20150623 08:24:43.031"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:43.048" starttime="20150623 08:24:43.043"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:43.050" starttime="20150623 08:24:42.950"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:43.052" starttime="20150623 08:24:40.660"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:43.054" starttime="20150623 08:24:40.655"></status>
</kw>
<msg timestamp="20150623 08:24:43.057" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:24:43.056" starttime="20150623 08:24:40.654"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:24:43.061" level="INFO">Index in the 2. loop: 9</msg>
<status status="PASS" endtime="20150623 08:24:43.062" starttime="20150623 08:24:43.058"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:24:50.066" level="INFO">Slept 7 seconds</msg>
<status status="PASS" endtime="20150623 08:24:50.068" starttime="20150623 08:24:43.063"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:24:50.078" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:24:50.077" starttime="20150623 08:24:50.070"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:50.079" starttime="20150623 08:24:40.654"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:50.080" starttime="20150623 08:23:21.567"></status>
</kw>
<msg timestamp="20150623 08:24:50.083" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:24:50.082" starttime="20150623 08:23:21.562"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>For delay ${loopIdx} we had ${failure} failure(s)</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:24:50.087" level="INFO">For delay 7 we had None failure(s)</msg>
<status status="PASS" endtime="20150623 08:24:50.089" starttime="20150623 08:24:50.085"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:50.089" starttime="20150623 08:23:21.552"></status>
</kw>
<kw type="foritem" name="${loopIdx} = 8">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Sitting in first FOR, Loop No.: ${loopIdx}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:24:50.094" level="INFO">Sitting in first FOR, Loop No.: 8</msg>
<status status="PASS" endtime="20150623 08:24:50.095" starttime="20150623 08:24:50.091"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Timeout set to ${loopIdx} secs</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:24:50.098" level="INFO">Timeout set to 8 secs</msg>
<status status="PASS" endtime="20150623 08:24:50.099" starttime="20150623 08:24:50.096"></status>
</kw>
<kw type="kw" name="${failure} = Internal Loop">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${loopIdx}</arg>
</arguments>
<kw type="for" name="${index} IN RANGE [ 0 | 10 ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${index} = 0">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:50.160" starttime="20150623 08:24:50.158"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:50.228" starttime="20150623 08:24:50.168"></status>
</kw>
<msg timestamp="20150623 08:24:50.230" level="INFO">${ssh_connection} = 83</msg>
<status status="PASS" endtime="20150623 08:24:50.230" starttime="20150623 08:24:50.161"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:24:50.243" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:24:50.593" level="INFO">Read output: Last login: Tue Jun 23 06:24:40 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:24:50.595" starttime="20150623 08:24:50.240"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:50.596" starttime="20150623 08:24:50.232"></status>
</kw>
<msg timestamp="20150623 08:24:50.599" level="INFO">${ssh_connection} = 83</msg>
<status status="PASS" endtime="20150623 08:24:50.598" starttime="20150623 08:24:50.148"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:50.611" starttime="20150623 08:24:50.609"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:24:50.615" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor83.log'.</msg>
<status status="PASS" endtime="20150623 08:24:50.620" starttime="20150623 08:24:50.613"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:50.621" starttime="20150623 08:24:50.601"></status>
</kw>
<msg timestamp="20150623 08:24:50.623" level="INFO">${ssh_connection} = 83</msg>
<status status="PASS" endtime="20150623 08:24:50.623" starttime="20150623 08:24:50.136"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:50.650" starttime="20150623 08:24:50.643"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:50.652" starttime="20150623 08:24:50.637"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:24:50.664" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:24:50.666" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:24:50.665" starttime="20150623 08:24:50.661"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:24:50.669" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:24:50.670" starttime="20150623 08:24:50.668"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:50.674" starttime="20150623 08:24:50.672"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:50.685" starttime="20150623 08:24:50.676"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:50.686" starttime="20150623 08:24:50.654"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:50.705" starttime="20150623 08:24:50.702"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:24:50.728" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:24:50.727" starttime="20150623 08:24:50.706"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:24:50.734" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:24:50.736" starttime="20150623 08:24:50.729"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:50.747" starttime="20150623 08:24:50.744"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:24:50.750" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:24:50.784" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:24:50.786" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:24:50.785" starttime="20150623 08:24:50.748"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:24:50.790" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:24:50.880" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:24:50.882" level="INFO">${processes_string} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log
  373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
  538 ?        ...</msg>
<status status="PASS" endtime="20150623 08:24:50.881" starttime="20150623 08:24:50.787"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:24:50.887" level="INFO">@{processes_list} = [   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log |   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log |   538 ?  ...</msg>
<status status="PASS" endtime="20150623 08:24:50.886" starttime="20150623 08:24:50.883"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:50.894" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:50.893" starttime="20150623 08:24:50.890"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:50.897" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:50.954" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:50.955" starttime="20150623 08:24:50.895"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:50.956" starttime="20150623 08:24:50.889"></status>
</kw>
<kw type="foritem" name="${process} =   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:50.960" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:50.960" starttime="20150623 08:24:50.957"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:50.964" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:51.033" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:51.035" starttime="20150623 08:24:50.962"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:51.036" starttime="20150623 08:24:50.956"></status>
</kw>
<kw type="foritem" name="${process} =   538 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor77.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:51.042" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:51.041" starttime="20150623 08:24:51.038"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:51.046" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:51.105" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:51.106" starttime="20150623 08:24:51.043"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:51.106" starttime="20150623 08:24:51.037"></status>
</kw>
<kw type="foritem" name="${process} =   553 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:51.111" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:51.111" starttime="20150623 08:24:51.108"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:51.115" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:51.175" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:51.176" starttime="20150623 08:24:51.113"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:51.177" starttime="20150623 08:24:51.107"></status>
</kw>
<kw type="foritem" name="${process} =   745 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor78.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:51.182" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:51.181" starttime="20150623 08:24:51.179"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:51.186" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:51.258" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:51.259" starttime="20150623 08:24:51.184"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:51.260" starttime="20150623 08:24:51.178"></status>
</kw>
<kw type="foritem" name="${process} =   760 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:51.265" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:51.264" starttime="20150623 08:24:51.261"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:51.269" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:51.333" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:51.334" starttime="20150623 08:24:51.266"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:51.334" starttime="20150623 08:24:51.261"></status>
</kw>
<kw type="foritem" name="${process} =   985 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor79.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:51.339" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:51.339" starttime="20150623 08:24:51.336"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:51.343" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:51.407" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:51.408" starttime="20150623 08:24:51.341"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:51.409" starttime="20150623 08:24:51.335"></status>
</kw>
<kw type="foritem" name="${process} =  1000 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:51.414" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:51.413" starttime="20150623 08:24:51.410"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:51.417" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:51.489" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:51.490" starttime="20150623 08:24:51.415"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:51.491" starttime="20150623 08:24:51.409"></status>
</kw>
<kw type="foritem" name="${process} =  1249 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor80.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:51.496" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:51.495" starttime="20150623 08:24:51.492"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:51.499" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:51.572" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:51.573" starttime="20150623 08:24:51.497"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:51.574" starttime="20150623 08:24:51.491"></status>
</kw>
<kw type="foritem" name="${process} =  1264 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:51.579" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:51.578" starttime="20150623 08:24:51.575"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:51.582" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:51.658" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:51.659" starttime="20150623 08:24:51.580"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:51.659" starttime="20150623 08:24:51.574"></status>
</kw>
<kw type="foritem" name="${process} =  1559 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor81.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:51.664" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:51.664" starttime="20150623 08:24:51.661"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:51.668" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:51.739" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:51.740" starttime="20150623 08:24:51.666"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:51.741" starttime="20150623 08:24:51.660"></status>
</kw>
<kw type="foritem" name="${process} =  1574 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:51.746" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:51.745" starttime="20150623 08:24:51.743"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:51.750" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:51.822" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:51.823" starttime="20150623 08:24:51.747"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:51.824" starttime="20150623 08:24:51.742"></status>
</kw>
<kw type="foritem" name="${process} =  1899 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor82.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:51.829" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:51.828" starttime="20150623 08:24:51.825"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:51.833" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:51.906" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:51.906" starttime="20150623 08:24:51.830"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:51.907" starttime="20150623 08:24:51.824"></status>
</kw>
<kw type="foritem" name="${process} =  1914 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:51.912" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:51.912" starttime="20150623 08:24:51.909"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:51.916" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:51.973" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:51.974" starttime="20150623 08:24:51.914"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:51.975" starttime="20150623 08:24:51.908"></status>
</kw>
<kw type="foritem" name="${process} =  2254 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor83.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:51.980" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:51.980" starttime="20150623 08:24:51.977"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:51.984" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:52.044" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:52.045" starttime="20150623 08:24:51.982"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:52.047" starttime="20150623 08:24:51.976"></status>
</kw>
<kw type="foritem" name="${process} =  2269 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:52.053" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:52.052" starttime="20150623 08:24:52.049"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:52.057" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:52.125" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:52.126" starttime="20150623 08:24:52.054"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:52.127" starttime="20150623 08:24:52.048"></status>
</kw>
<kw type="foritem" name="${process} =  2287 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:52.132" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:52.132" starttime="20150623 08:24:52.129"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:52.136" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:52.208" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:52.208" starttime="20150623 08:24:52.134"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:52.209" starttime="20150623 08:24:52.128"></status>
</kw>
<kw type="foritem" name="${process} =  2303 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:24:52.214" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:24:52.214" starttime="20150623 08:24:52.211"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:24:52.218" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:24:52.283" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:24:52.284" starttime="20150623 08:24:52.216"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:52.285" starttime="20150623 08:24:52.210"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:52.285" starttime="20150623 08:24:50.888"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:52.287" starttime="20150623 08:24:50.738"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:24:52.291" level="INFO">Starting command 'cat tmpfilemonitor83.log'.</msg>
<status status="PASS" endtime="20150623 08:24:52.326" starttime="20150623 08:24:52.289"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:24:52.329" level="INFO">Reading output of command 'cat tmpfilemonitor83.log'.</msg>
<msg timestamp="20150623 08:24:52.369" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:24:52.371" level="INFO">${stdout_string} = [2015-06-23 06:24:22,792][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:24:52.370" starttime="20150623 08:24:52.327"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:24:52.375" level="INFO">Executing command 'rm tmpfilemonitor83.log'.</msg>
<msg timestamp="20150623 08:24:52.442" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:24:52.443" starttime="20150623 08:24:52.372"></status>
</kw>
<msg timestamp="20150623 08:24:52.447" level="INFO">${tailed_text} = [2015-06-23 06:24:22,792][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:24:52.445" starttime="20150623 08:24:50.696"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:52.455" starttime="20150623 08:24:52.448"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:52.466" starttime="20150623 08:24:52.463"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:24:52.470" starttime="20150623 08:24:52.467"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:52.478" starttime="20150623 08:24:52.457"></status>
</kw>
<msg timestamp="20150623 08:24:52.481" level="INFO">${tailed_text} = [2015-06-23 06:24:22,792][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:24:52.480" starttime="20150623 08:24:50.689"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:52.500" starttime="20150623 08:24:52.497"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:52.501" starttime="20150623 08:24:52.491"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:52.508" starttime="20150623 08:24:52.502"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:52.512" starttime="20150623 08:24:52.509"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:52.515" starttime="20150623 08:24:52.513"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:52.517" starttime="20150623 08:24:52.484"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:52.547" starttime="20150623 08:24:52.545"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:52.555" starttime="20150623 08:24:52.548"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:52.558" starttime="20150623 08:24:52.557"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:24:52.562" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:24:52.565" level="INFO">${queryResultSetLines} = 1004543|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:24:52.564" starttime="20150623 08:24:52.560"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:52.568" starttime="20150623 08:24:52.566"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:24:52.588" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:24:52.590" level="INFO">@{queryResultSet} = [ 1004543|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:24:52.589" starttime="20150623 08:24:52.569"></status>
</kw>
<msg timestamp="20150623 08:24:52.593" level="INFO">@{queryRows} = [ 1004543|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:24:52.592" starttime="20150623 08:24:52.539"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:24:52.598" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:24:52.600" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:24:52.599" starttime="20150623 08:24:52.595"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:24:52.603" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:24:52.605" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:24:52.604" starttime="20150623 08:24:52.601"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:24:52.615" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:24:52.616" starttime="20150623 08:24:52.613"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:52.617" starttime="20150623 08:24:52.606"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:24:52.624" starttime="20150623 08:24:52.618"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:52.625" starttime="20150623 08:24:52.530"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:52.627" starttime="20150623 08:24:50.117"></status>
</kw>
<status status="PASS" endtime="20150623 08:24:52.629" starttime="20150623 08:24:50.110"></status>
</kw>
<msg timestamp="20150623 08:24:52.632" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:24:52.630" starttime="20150623 08:24:50.108"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:24:52.635" level="INFO">Index in the 2. loop: 0</msg>
<status status="PASS" endtime="20150623 08:24:52.636" starttime="20150623 08:24:52.633"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:25:00.641" level="INFO">Slept 8 seconds</msg>
<status status="PASS" endtime="20150623 08:25:00.643" starttime="20150623 08:24:52.638"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:25:00.653" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:25:00.652" starttime="20150623 08:25:00.645"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:00.654" starttime="20150623 08:24:50.107"></status>
</kw>
<kw type="foritem" name="${index} = 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:00.708" starttime="20150623 08:25:00.706"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:00.769" starttime="20150623 08:25:00.716"></status>
</kw>
<msg timestamp="20150623 08:25:00.772" level="INFO">${ssh_connection} = 84</msg>
<status status="PASS" endtime="20150623 08:25:00.771" starttime="20150623 08:25:00.709"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:25:00.784" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:25:01.167" level="INFO">Read output: Last login: Tue Jun 23 06:24:50 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:25:01.169" starttime="20150623 08:25:00.781"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:01.171" starttime="20150623 08:25:00.773"></status>
</kw>
<msg timestamp="20150623 08:25:01.175" level="INFO">${ssh_connection} = 84</msg>
<status status="PASS" endtime="20150623 08:25:01.174" starttime="20150623 08:25:00.697"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:01.181" starttime="20150623 08:25:01.179"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:25:01.183" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor84.log'.</msg>
<status status="PASS" endtime="20150623 08:25:01.185" starttime="20150623 08:25:01.181"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:01.186" starttime="20150623 08:25:01.176"></status>
</kw>
<msg timestamp="20150623 08:25:01.188" level="INFO">${ssh_connection} = 84</msg>
<status status="PASS" endtime="20150623 08:25:01.187" starttime="20150623 08:25:00.684"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:01.215" starttime="20150623 08:25:01.197"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:01.217" starttime="20150623 08:25:01.194"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:25:01.229" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:25:01.231" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:25:01.231" starttime="20150623 08:25:01.226"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:25:01.235" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:25:01.236" starttime="20150623 08:25:01.233"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:01.239" starttime="20150623 08:25:01.237"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:01.249" starttime="20150623 08:25:01.240"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:01.250" starttime="20150623 08:25:01.220"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:01.269" starttime="20150623 08:25:01.266"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:25:01.277" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:25:01.276" starttime="20150623 08:25:01.270"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:25:01.283" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:25:01.284" starttime="20150623 08:25:01.278"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:01.295" starttime="20150623 08:25:01.293"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:25:01.298" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:25:01.342" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:25:01.344" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:25:01.343" starttime="20150623 08:25:01.297"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:25:01.348" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:25:01.443" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:25:01.445" level="INFO">${processes_string} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log
  373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
  538 ?        ...</msg>
<status status="PASS" endtime="20150623 08:25:01.444" starttime="20150623 08:25:01.345"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:25:01.450" level="INFO">@{processes_list} = [   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log |   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log |   538 ?  ...</msg>
<status status="PASS" endtime="20150623 08:25:01.449" starttime="20150623 08:25:01.446"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:01.456" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:01.456" starttime="20150623 08:25:01.453"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:01.460" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:01.553" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:01.555" starttime="20150623 08:25:01.458"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:01.556" starttime="20150623 08:25:01.452"></status>
</kw>
<kw type="foritem" name="${process} =   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:01.561" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:01.561" starttime="20150623 08:25:01.557"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:01.565" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:01.731" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:01.733" starttime="20150623 08:25:01.563"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:01.734" starttime="20150623 08:25:01.556"></status>
</kw>
<kw type="foritem" name="${process} =   538 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor77.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:01.739" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:01.738" starttime="20150623 08:25:01.736"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:01.743" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:02.041" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:02.043" starttime="20150623 08:25:01.741"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:02.045" starttime="20150623 08:25:01.734"></status>
</kw>
<kw type="foritem" name="${process} =   553 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:02.051" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:02.050" starttime="20150623 08:25:02.047"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:02.055" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:02.197" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:02.198" starttime="20150623 08:25:02.053"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:02.199" starttime="20150623 08:25:02.046"></status>
</kw>
<kw type="foritem" name="${process} =   745 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor78.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:02.204" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:02.204" starttime="20150623 08:25:02.201"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:02.208" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:02.275" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:02.276" starttime="20150623 08:25:02.206"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:02.277" starttime="20150623 08:25:02.200"></status>
</kw>
<kw type="foritem" name="${process} =   760 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:02.282" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:02.282" starttime="20150623 08:25:02.278"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:02.286" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:02.483" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:02.484" starttime="20150623 08:25:02.284"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:02.485" starttime="20150623 08:25:02.277"></status>
</kw>
<kw type="foritem" name="${process} =   985 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor79.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:02.491" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:02.490" starttime="20150623 08:25:02.487"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:02.494" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:02.643" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:02.645" starttime="20150623 08:25:02.492"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:02.645" starttime="20150623 08:25:02.486"></status>
</kw>
<kw type="foritem" name="${process} =  1000 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:02.651" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:02.650" starttime="20150623 08:25:02.647"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:02.654" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:02.829" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:02.831" starttime="20150623 08:25:02.652"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:02.832" starttime="20150623 08:25:02.646"></status>
</kw>
<kw type="foritem" name="${process} =  1249 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor80.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:02.837" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:02.836" starttime="20150623 08:25:02.833"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:02.841" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:02.949" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:02.950" starttime="20150623 08:25:02.838"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:02.951" starttime="20150623 08:25:02.832"></status>
</kw>
<kw type="foritem" name="${process} =  1264 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:02.956" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:02.955" starttime="20150623 08:25:02.952"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:02.960" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:03.072" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:03.073" starttime="20150623 08:25:02.957"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:03.075" starttime="20150623 08:25:02.951"></status>
</kw>
<kw type="foritem" name="${process} =  1559 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor81.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:03.081" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:03.080" starttime="20150623 08:25:03.077"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:03.085" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:03.148" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:03.149" starttime="20150623 08:25:03.083"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:03.150" starttime="20150623 08:25:03.076"></status>
</kw>
<kw type="foritem" name="${process} =  1574 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:03.155" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:03.154" starttime="20150623 08:25:03.151"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:03.158" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:03.223" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:03.224" starttime="20150623 08:25:03.156"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:03.225" starttime="20150623 08:25:03.150"></status>
</kw>
<kw type="foritem" name="${process} =  1899 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor82.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:03.230" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:03.230" starttime="20150623 08:25:03.227"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:03.234" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:03.307" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:03.308" starttime="20150623 08:25:03.232"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:03.309" starttime="20150623 08:25:03.226"></status>
</kw>
<kw type="foritem" name="${process} =  1914 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:03.314" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:03.314" starttime="20150623 08:25:03.311"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:03.318" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:03.389" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:03.390" starttime="20150623 08:25:03.316"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:03.390" starttime="20150623 08:25:03.310"></status>
</kw>
<kw type="foritem" name="${process} =  2254 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor83.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:03.396" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:03.395" starttime="20150623 08:25:03.392"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:03.399" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:03.470" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:03.471" starttime="20150623 08:25:03.397"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:03.472" starttime="20150623 08:25:03.391"></status>
</kw>
<kw type="foritem" name="${process} =  2269 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:03.477" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:03.477" starttime="20150623 08:25:03.474"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:03.481" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:03.556" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:03.557" starttime="20150623 08:25:03.479"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:03.558" starttime="20150623 08:25:03.473"></status>
</kw>
<kw type="foritem" name="${process} =  2640 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor84.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:03.563" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:03.563" starttime="20150623 08:25:03.560"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:03.568" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:03.634" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:03.635" starttime="20150623 08:25:03.565"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:03.636" starttime="20150623 08:25:03.559"></status>
</kw>
<kw type="foritem" name="${process} =  2655 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:03.641" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:03.640" starttime="20150623 08:25:03.638"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:03.645" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:03.716" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:03.717" starttime="20150623 08:25:03.642"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:03.718" starttime="20150623 08:25:03.637"></status>
</kw>
<kw type="foritem" name="${process} =  2673 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:03.723" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:03.723" starttime="20150623 08:25:03.720"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:03.727" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:03.796" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:03.797" starttime="20150623 08:25:03.725"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:03.798" starttime="20150623 08:25:03.718"></status>
</kw>
<kw type="foritem" name="${process} =  2689 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:03.803" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:03.803" starttime="20150623 08:25:03.800"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:03.807" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:03.877" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:03.878" starttime="20150623 08:25:03.805"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:03.879" starttime="20150623 08:25:03.798"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:03.879" starttime="20150623 08:25:01.451"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:03.881" starttime="20150623 08:25:01.286"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:25:03.885" level="INFO">Starting command 'cat tmpfilemonitor84.log'.</msg>
<status status="PASS" endtime="20150623 08:25:03.920" starttime="20150623 08:25:03.883"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:25:03.923" level="INFO">Reading output of command 'cat tmpfilemonitor84.log'.</msg>
<msg timestamp="20150623 08:25:03.948" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:25:03.950" level="INFO">${stdout_string} = [2015-06-23 06:24:31,961][INFO ][Camel (ticket-router) thread #44 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:25:03.949" starttime="20150623 08:25:03.922"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:25:03.954" level="INFO">Executing command 'rm tmpfilemonitor84.log'.</msg>
<msg timestamp="20150623 08:25:04.036" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:25:04.037" starttime="20150623 08:25:03.952"></status>
</kw>
<msg timestamp="20150623 08:25:04.041" level="INFO">${tailed_text} = [2015-06-23 06:24:31,961][INFO ][Camel (ticket-router) thread #44 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:25:04.040" starttime="20150623 08:25:01.260"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:04.050" starttime="20150623 08:25:04.042"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:04.061" starttime="20150623 08:25:04.058"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:25:04.084" starttime="20150623 08:25:04.081"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:04.089" starttime="20150623 08:25:04.052"></status>
</kw>
<msg timestamp="20150623 08:25:04.092" level="INFO">${tailed_text} = [2015-06-23 06:24:31,961][INFO ][Camel (ticket-router) thread #44 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:25:04.091" starttime="20150623 08:25:01.253"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:04.112" starttime="20150623 08:25:04.109"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:04.113" starttime="20150623 08:25:04.103"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:04.119" starttime="20150623 08:25:04.114"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:04.124" starttime="20150623 08:25:04.121"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:04.127" starttime="20150623 08:25:04.125"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:04.129" starttime="20150623 08:25:04.096"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:04.159" starttime="20150623 08:25:04.157"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:04.168" starttime="20150623 08:25:04.160"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:04.172" starttime="20150623 08:25:04.170"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:25:04.177" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:25:04.179" level="INFO">${queryResultSetLines} = 1004544|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:25:04.178" starttime="20150623 08:25:04.174"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:04.182" starttime="20150623 08:25:04.180"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:25:04.186" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:25:04.187" level="INFO">@{queryResultSet} = [ 1004544|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:25:04.186" starttime="20150623 08:25:04.183"></status>
</kw>
<msg timestamp="20150623 08:25:04.190" level="INFO">@{queryRows} = [ 1004544|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:25:04.189" starttime="20150623 08:25:04.151"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:25:04.194" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:25:04.196" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:25:04.195" starttime="20150623 08:25:04.191"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:25:04.199" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:25:04.201" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:25:04.200" starttime="20150623 08:25:04.197"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:25:04.211" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:25:04.212" starttime="20150623 08:25:04.209"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:04.213" starttime="20150623 08:25:04.202"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:04.220" starttime="20150623 08:25:04.215"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:04.222" starttime="20150623 08:25:04.142"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:04.223" starttime="20150623 08:25:00.665"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:04.225" starttime="20150623 08:25:00.658"></status>
</kw>
<msg timestamp="20150623 08:25:04.228" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:25:04.227" starttime="20150623 08:25:00.656"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:25:04.232" level="INFO">Index in the 2. loop: 1</msg>
<status status="PASS" endtime="20150623 08:25:04.233" starttime="20150623 08:25:04.229"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:25:12.237" level="INFO">Slept 8 seconds</msg>
<status status="PASS" endtime="20150623 08:25:12.239" starttime="20150623 08:25:04.234"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:25:12.249" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:25:12.248" starttime="20150623 08:25:12.241"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:12.250" starttime="20150623 08:25:00.655"></status>
</kw>
<kw type="foritem" name="${index} = 2">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:12.303" starttime="20150623 08:25:12.301"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:12.368" starttime="20150623 08:25:12.311"></status>
</kw>
<msg timestamp="20150623 08:25:12.371" level="INFO">${ssh_connection} = 85</msg>
<status status="PASS" endtime="20150623 08:25:12.370" starttime="20150623 08:25:12.305"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:25:12.383" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:25:12.828" level="INFO">Read output: Last login: Tue Jun 23 06:25:01 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:25:12.830" starttime="20150623 08:25:12.380"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:12.831" starttime="20150623 08:25:12.372"></status>
</kw>
<msg timestamp="20150623 08:25:12.834" level="INFO">${ssh_connection} = 85</msg>
<status status="PASS" endtime="20150623 08:25:12.834" starttime="20150623 08:25:12.292"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:12.847" starttime="20150623 08:25:12.844"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:25:12.851" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor85.log'.</msg>
<status status="PASS" endtime="20150623 08:25:12.855" starttime="20150623 08:25:12.848"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:12.857" starttime="20150623 08:25:12.837"></status>
</kw>
<msg timestamp="20150623 08:25:12.859" level="INFO">${ssh_connection} = 85</msg>
<status status="PASS" endtime="20150623 08:25:12.858" starttime="20150623 08:25:12.279"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:12.886" starttime="20150623 08:25:12.879"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:12.888" starttime="20150623 08:25:12.872"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:25:12.900" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:25:12.902" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:25:12.901" starttime="20150623 08:25:12.897"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:25:12.906" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:25:12.907" starttime="20150623 08:25:12.903"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:12.910" starttime="20150623 08:25:12.908"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:12.921" starttime="20150623 08:25:12.912"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:12.923" starttime="20150623 08:25:12.890"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:12.942" starttime="20150623 08:25:12.939"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:25:12.950" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:25:12.949" starttime="20150623 08:25:12.943"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:25:12.955" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:25:12.956" starttime="20150623 08:25:12.951"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:12.967" starttime="20150623 08:25:12.965"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:25:12.970" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:25:13.017" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:25:13.020" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:25:13.018" starttime="20150623 08:25:12.969"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:25:13.024" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:25:13.119" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:25:13.121" level="INFO">${processes_string} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log
  373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
  538 ?        ...</msg>
<status status="PASS" endtime="20150623 08:25:13.120" starttime="20150623 08:25:13.021"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:25:13.126" level="INFO">@{processes_list} = [   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log |   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log |   538 ?  ...</msg>
<status status="PASS" endtime="20150623 08:25:13.125" starttime="20150623 08:25:13.122"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:13.132" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:13.131" starttime="20150623 08:25:13.129"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:13.136" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:13.198" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:13.199" starttime="20150623 08:25:13.134"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:13.200" starttime="20150623 08:25:13.128"></status>
</kw>
<kw type="foritem" name="${process} =   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:13.205" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:13.204" starttime="20150623 08:25:13.201"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:13.208" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:13.277" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:13.278" starttime="20150623 08:25:13.206"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:13.279" starttime="20150623 08:25:13.200"></status>
</kw>
<kw type="foritem" name="${process} =   538 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor77.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:13.284" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:13.284" starttime="20150623 08:25:13.281"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:13.288" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:13.358" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:13.359" starttime="20150623 08:25:13.286"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:13.360" starttime="20150623 08:25:13.280"></status>
</kw>
<kw type="foritem" name="${process} =   553 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:13.365" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:13.364" starttime="20150623 08:25:13.361"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:13.369" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:13.437" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:13.438" starttime="20150623 08:25:13.366"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:13.439" starttime="20150623 08:25:13.360"></status>
</kw>
<kw type="foritem" name="${process} =   745 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor78.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:13.444" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:13.443" starttime="20150623 08:25:13.440"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:13.448" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:13.517" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:13.518" starttime="20150623 08:25:13.445"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:13.519" starttime="20150623 08:25:13.439"></status>
</kw>
<kw type="foritem" name="${process} =   760 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:13.524" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:13.523" starttime="20150623 08:25:13.520"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:13.527" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:13.601" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:13.602" starttime="20150623 08:25:13.525"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:13.603" starttime="20150623 08:25:13.519"></status>
</kw>
<kw type="foritem" name="${process} =   985 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor79.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:13.608" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:13.607" starttime="20150623 08:25:13.605"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:13.612" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:13.681" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:13.682" starttime="20150623 08:25:13.610"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:13.683" starttime="20150623 08:25:13.604"></status>
</kw>
<kw type="foritem" name="${process} =  1000 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:13.688" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:13.687" starttime="20150623 08:25:13.685"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:13.692" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:13.760" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:13.761" starttime="20150623 08:25:13.689"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:13.762" starttime="20150623 08:25:13.684"></status>
</kw>
<kw type="foritem" name="${process} =  1249 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor80.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:13.767" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:13.766" starttime="20150623 08:25:13.763"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:13.771" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:13.858" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:13.859" starttime="20150623 08:25:13.768"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:13.860" starttime="20150623 08:25:13.762"></status>
</kw>
<kw type="foritem" name="${process} =  1264 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:13.865" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:13.864" starttime="20150623 08:25:13.861"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:13.868" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:13.941" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:13.942" starttime="20150623 08:25:13.866"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:13.943" starttime="20150623 08:25:13.860"></status>
</kw>
<kw type="foritem" name="${process} =  1559 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor81.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:13.948" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:13.947" starttime="20150623 08:25:13.944"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:13.951" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:14.023" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:14.025" starttime="20150623 08:25:13.949"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:14.027" starttime="20150623 08:25:13.943"></status>
</kw>
<kw type="foritem" name="${process} =  1574 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:14.033" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:14.032" starttime="20150623 08:25:14.029"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:14.036" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:14.105" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:14.106" starttime="20150623 08:25:14.034"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:14.107" starttime="20150623 08:25:14.028"></status>
</kw>
<kw type="foritem" name="${process} =  1899 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor82.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:14.112" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:14.111" starttime="20150623 08:25:14.108"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:14.116" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:14.179" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:14.180" starttime="20150623 08:25:14.113"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:14.181" starttime="20150623 08:25:14.107"></status>
</kw>
<kw type="foritem" name="${process} =  1914 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:14.186" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:14.186" starttime="20150623 08:25:14.183"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:14.207" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:14.252" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:14.253" starttime="20150623 08:25:14.204"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:14.254" starttime="20150623 08:25:14.182"></status>
</kw>
<kw type="foritem" name="${process} =  2254 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor83.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:14.259" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:14.258" starttime="20150623 08:25:14.255"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:14.263" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:14.332" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:14.333" starttime="20150623 08:25:14.260"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:14.334" starttime="20150623 08:25:14.254"></status>
</kw>
<kw type="foritem" name="${process} =  2269 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:14.339" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:14.339" starttime="20150623 08:25:14.336"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:14.343" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:14.419" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:14.420" starttime="20150623 08:25:14.341"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:14.421" starttime="20150623 08:25:14.335"></status>
</kw>
<kw type="foritem" name="${process} =  2640 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor84.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:14.426" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:14.425" starttime="20150623 08:25:14.422"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:14.430" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:14.503" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:14.504" starttime="20150623 08:25:14.427"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:14.505" starttime="20150623 08:25:14.421"></status>
</kw>
<kw type="foritem" name="${process} =  2655 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:14.510" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:14.509" starttime="20150623 08:25:14.507"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:14.514" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:14.583" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:14.584" starttime="20150623 08:25:14.511"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:14.585" starttime="20150623 08:25:14.506"></status>
</kw>
<kw type="foritem" name="${process} =  3081 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor85.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:14.590" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:14.589" starttime="20150623 08:25:14.586"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:14.593" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:14.661" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:14.662" starttime="20150623 08:25:14.591"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:14.663" starttime="20150623 08:25:14.585"></status>
</kw>
<kw type="foritem" name="${process} =  3096 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:14.668" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:14.667" starttime="20150623 08:25:14.664"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:14.672" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:14.740" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:14.741" starttime="20150623 08:25:14.669"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:14.742" starttime="20150623 08:25:14.663"></status>
</kw>
<kw type="foritem" name="${process} =  3115 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:14.747" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:14.746" starttime="20150623 08:25:14.743"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:14.751" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:14.820" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:14.822" starttime="20150623 08:25:14.748"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:14.824" starttime="20150623 08:25:14.743"></status>
</kw>
<kw type="foritem" name="${process} =  3131 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:14.832" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:14.831" starttime="20150623 08:25:14.826"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:14.838" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:14.901" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:14.902" starttime="20150623 08:25:14.834"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:14.903" starttime="20150623 08:25:14.824"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:14.903" starttime="20150623 08:25:13.127"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:14.905" starttime="20150623 08:25:12.958"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:25:14.910" level="INFO">Starting command 'cat tmpfilemonitor85.log'.</msg>
<status status="PASS" endtime="20150623 08:25:14.944" starttime="20150623 08:25:14.907"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:25:14.947" level="INFO">Reading output of command 'cat tmpfilemonitor85.log'.</msg>
<msg timestamp="20150623 08:25:14.985" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:25:14.987" level="INFO">${stdout_string} = [2015-06-23 06:24:41,244][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:25:14.986" starttime="20150623 08:25:14.945"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:25:14.991" level="INFO">Executing command 'rm tmpfilemonitor85.log'.</msg>
<msg timestamp="20150623 08:25:15.066" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:25:15.067" starttime="20150623 08:25:14.988"></status>
</kw>
<msg timestamp="20150623 08:25:15.072" level="INFO">${tailed_text} = [2015-06-23 06:24:41,244][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:25:15.070" starttime="20150623 08:25:12.933"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:15.080" starttime="20150623 08:25:15.073"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:15.091" starttime="20150623 08:25:15.088"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:25:15.095" starttime="20150623 08:25:15.092"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:15.101" starttime="20150623 08:25:15.082"></status>
</kw>
<msg timestamp="20150623 08:25:15.104" level="INFO">${tailed_text} = [2015-06-23 06:24:41,244][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:25:15.103" starttime="20150623 08:25:12.926"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:15.123" starttime="20150623 08:25:15.121"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:15.124" starttime="20150623 08:25:15.114"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:15.131" starttime="20150623 08:25:15.126"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:15.135" starttime="20150623 08:25:15.133"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:15.139" starttime="20150623 08:25:15.137"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:15.140" starttime="20150623 08:25:15.107"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:15.170" starttime="20150623 08:25:15.169"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:15.178" starttime="20150623 08:25:15.172"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:15.182" starttime="20150623 08:25:15.180"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:25:15.186" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:25:15.188" level="INFO">${queryResultSetLines} = 1004545|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:25:15.187" starttime="20150623 08:25:15.183"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:15.191" starttime="20150623 08:25:15.189"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:25:15.194" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:25:15.196" level="INFO">@{queryResultSet} = [ 1004545|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:25:15.195" starttime="20150623 08:25:15.192"></status>
</kw>
<msg timestamp="20150623 08:25:15.199" level="INFO">@{queryRows} = [ 1004545|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:25:15.198" starttime="20150623 08:25:15.162"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:25:15.203" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:25:15.205" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:25:15.204" starttime="20150623 08:25:15.200"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:25:15.208" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:25:15.210" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:25:15.209" starttime="20150623 08:25:15.206"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:25:15.220" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:25:15.221" starttime="20150623 08:25:15.217"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:15.222" starttime="20150623 08:25:15.211"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:15.228" starttime="20150623 08:25:15.223"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:15.230" starttime="20150623 08:25:15.153"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:15.231" starttime="20150623 08:25:12.260"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:15.233" starttime="20150623 08:25:12.254"></status>
</kw>
<msg timestamp="20150623 08:25:15.236" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:25:15.235" starttime="20150623 08:25:12.252"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:25:15.240" level="INFO">Index in the 2. loop: 2</msg>
<status status="PASS" endtime="20150623 08:25:15.241" starttime="20150623 08:25:15.238"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:25:23.245" level="INFO">Slept 8 seconds</msg>
<status status="PASS" endtime="20150623 08:25:23.247" starttime="20150623 08:25:15.242"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:25:23.257" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:25:23.256" starttime="20150623 08:25:23.249"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:23.258" starttime="20150623 08:25:12.251"></status>
</kw>
<kw type="foritem" name="${index} = 3">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:23.312" starttime="20150623 08:25:23.310"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:23.378" starttime="20150623 08:25:23.320"></status>
</kw>
<msg timestamp="20150623 08:25:23.381" level="INFO">${ssh_connection} = 86</msg>
<status status="PASS" endtime="20150623 08:25:23.380" starttime="20150623 08:25:23.314"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:25:23.393" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:25:23.864" level="INFO">Read output: Last login: Tue Jun 23 06:25:12 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:25:23.865" starttime="20150623 08:25:23.390"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:23.866" starttime="20150623 08:25:23.382"></status>
</kw>
<msg timestamp="20150623 08:25:23.869" level="INFO">${ssh_connection} = 86</msg>
<status status="PASS" endtime="20150623 08:25:23.869" starttime="20150623 08:25:23.301"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:23.882" starttime="20150623 08:25:23.879"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:25:23.886" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor86.log'.</msg>
<status status="PASS" endtime="20150623 08:25:23.891" starttime="20150623 08:25:23.883"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:23.893" starttime="20150623 08:25:23.872"></status>
</kw>
<msg timestamp="20150623 08:25:23.895" level="INFO">${ssh_connection} = 86</msg>
<status status="PASS" endtime="20150623 08:25:23.895" starttime="20150623 08:25:23.288"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:23.922" starttime="20150623 08:25:23.915"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:23.925" starttime="20150623 08:25:23.908"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:25:23.936" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:25:23.939" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:25:23.938" starttime="20150623 08:25:23.934"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:25:23.942" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:25:23.943" starttime="20150623 08:25:23.940"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:23.947" starttime="20150623 08:25:23.944"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:23.957" starttime="20150623 08:25:23.948"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:23.958" starttime="20150623 08:25:23.927"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:23.977" starttime="20150623 08:25:23.975"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:25:23.985" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:25:23.984" starttime="20150623 08:25:23.979"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:25:23.991" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:25:23.992" starttime="20150623 08:25:23.986"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:24.003" starttime="20150623 08:25:24.001"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:25:24.006" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:25:24.057" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:25:24.059" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:25:24.058" starttime="20150623 08:25:24.005"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:25:24.063" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:25:24.176" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:25:24.178" level="INFO">${processes_string} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log
  373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
  538 ?        ...</msg>
<status status="PASS" endtime="20150623 08:25:24.177" starttime="20150623 08:25:24.060"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:25:24.184" level="INFO">@{processes_list} = [   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log |   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log |   538 ?  ...</msg>
<status status="PASS" endtime="20150623 08:25:24.183" starttime="20150623 08:25:24.180"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:24.190" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:24.189" starttime="20150623 08:25:24.186"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:24.193" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:24.258" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:24.259" starttime="20150623 08:25:24.191"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:24.260" starttime="20150623 08:25:24.185"></status>
</kw>
<kw type="foritem" name="${process} =   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:24.265" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:24.264" starttime="20150623 08:25:24.261"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:24.268" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:24.339" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:24.340" starttime="20150623 08:25:24.266"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:24.341" starttime="20150623 08:25:24.260"></status>
</kw>
<kw type="foritem" name="${process} =   538 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor77.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:24.346" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:24.346" starttime="20150623 08:25:24.343"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:24.350" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:24.428" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:24.429" starttime="20150623 08:25:24.348"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:24.430" starttime="20150623 08:25:24.342"></status>
</kw>
<kw type="foritem" name="${process} =   553 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:24.435" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:24.435" starttime="20150623 08:25:24.432"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:24.439" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:24.499" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:24.500" starttime="20150623 08:25:24.437"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:24.501" starttime="20150623 08:25:24.431"></status>
</kw>
<kw type="foritem" name="${process} =   745 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor78.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:24.506" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:24.505" starttime="20150623 08:25:24.503"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:24.510" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:24.567" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:24.568" starttime="20150623 08:25:24.507"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:24.569" starttime="20150623 08:25:24.502"></status>
</kw>
<kw type="foritem" name="${process} =   760 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:24.574" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:24.573" starttime="20150623 08:25:24.570"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:24.578" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:24.648" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:24.649" starttime="20150623 08:25:24.575"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:24.650" starttime="20150623 08:25:24.570"></status>
</kw>
<kw type="foritem" name="${process} =   985 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor79.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:24.655" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:24.654" starttime="20150623 08:25:24.651"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:24.659" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:24.728" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:24.729" starttime="20150623 08:25:24.656"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:24.730" starttime="20150623 08:25:24.650"></status>
</kw>
<kw type="foritem" name="${process} =  1000 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:24.735" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:24.734" starttime="20150623 08:25:24.731"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:24.738" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:24.807" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:24.808" starttime="20150623 08:25:24.736"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:24.809" starttime="20150623 08:25:24.730"></status>
</kw>
<kw type="foritem" name="${process} =  1249 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor80.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:24.814" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:24.813" starttime="20150623 08:25:24.811"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:24.818" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:24.886" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:24.887" starttime="20150623 08:25:24.815"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:24.888" starttime="20150623 08:25:24.810"></status>
</kw>
<kw type="foritem" name="${process} =  1264 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:24.893" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:24.892" starttime="20150623 08:25:24.889"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:24.896" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:24.966" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:24.967" starttime="20150623 08:25:24.894"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:24.968" starttime="20150623 08:25:24.888"></status>
</kw>
<kw type="foritem" name="${process} =  1559 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor81.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:24.972" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:24.972" starttime="20150623 08:25:24.969"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:24.976" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:25.046" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:25.047" starttime="20150623 08:25:24.974"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:25.049" starttime="20150623 08:25:24.968"></status>
</kw>
<kw type="foritem" name="${process} =  1574 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:25.055" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:25.054" starttime="20150623 08:25:25.051"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:25.058" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:25.127" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:25.128" starttime="20150623 08:25:25.056"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:25.129" starttime="20150623 08:25:25.050"></status>
</kw>
<kw type="foritem" name="${process} =  1899 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor82.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:25.134" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:25.133" starttime="20150623 08:25:25.131"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:25.138" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:25.206" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:25.207" starttime="20150623 08:25:25.135"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:25.208" starttime="20150623 08:25:25.130"></status>
</kw>
<kw type="foritem" name="${process} =  1914 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:25.212" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:25.212" starttime="20150623 08:25:25.209"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:25.216" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:25.286" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:25.287" starttime="20150623 08:25:25.214"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:25.287" starttime="20150623 08:25:25.208"></status>
</kw>
<kw type="foritem" name="${process} =  2254 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor83.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:25.292" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:25.292" starttime="20150623 08:25:25.289"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:25.296" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:25.367" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:25.368" starttime="20150623 08:25:25.294"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:25.369" starttime="20150623 08:25:25.288"></status>
</kw>
<kw type="foritem" name="${process} =  2269 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:25.374" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:25.373" starttime="20150623 08:25:25.370"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:25.377" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:25.456" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:25.457" starttime="20150623 08:25:25.375"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:25.458" starttime="20150623 08:25:25.370"></status>
</kw>
<kw type="foritem" name="${process} =  2640 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor84.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:25.463" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:25.462" starttime="20150623 08:25:25.460"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:25.467" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:25.538" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:25.539" starttime="20150623 08:25:25.464"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:25.540" starttime="20150623 08:25:25.459"></status>
</kw>
<kw type="foritem" name="${process} =  2655 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:25.545" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:25.544" starttime="20150623 08:25:25.542"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:25.549" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:25.620" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:25.621" starttime="20150623 08:25:25.546"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:25.622" starttime="20150623 08:25:25.540"></status>
</kw>
<kw type="foritem" name="${process} =  3081 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor85.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:25.627" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:25.626" starttime="20150623 08:25:25.623"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:25.630" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:25.702" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:25.703" starttime="20150623 08:25:25.628"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:25.703" starttime="20150623 08:25:25.622"></status>
</kw>
<kw type="foritem" name="${process} =  3096 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:25.708" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:25.708" starttime="20150623 08:25:25.705"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:25.712" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:25.790" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:25.791" starttime="20150623 08:25:25.710"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:25.792" starttime="20150623 08:25:25.704"></status>
</kw>
<kw type="foritem" name="${process} =  3577 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor86.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:25.797" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:25.796" starttime="20150623 08:25:25.793"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:25.801" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:25.871" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:25.872" starttime="20150623 08:25:25.798"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:25.873" starttime="20150623 08:25:25.793"></status>
</kw>
<kw type="foritem" name="${process} =  3592 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:25.878" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:25.877" starttime="20150623 08:25:25.874"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:25.881" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:25.970" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:25.971" starttime="20150623 08:25:25.879"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:25.971" starttime="20150623 08:25:25.873"></status>
</kw>
<kw type="foritem" name="${process} =  3610 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:25.976" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:25.975" starttime="20150623 08:25:25.973"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:25.980" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:26.049" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:26.050" starttime="20150623 08:25:25.978"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:26.052" starttime="20150623 08:25:25.972"></status>
</kw>
<kw type="foritem" name="${process} =  3626 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:26.058" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:26.057" starttime="20150623 08:25:26.054"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:26.061" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:26.142" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:26.143" starttime="20150623 08:25:26.059"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:26.143" starttime="20150623 08:25:26.053"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:26.144" starttime="20150623 08:25:24.185"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:26.145" starttime="20150623 08:25:23.994"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:25:26.150" level="INFO">Starting command 'cat tmpfilemonitor86.log'.</msg>
<status status="PASS" endtime="20150623 08:25:26.184" starttime="20150623 08:25:26.147"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:25:26.187" level="INFO">Reading output of command 'cat tmpfilemonitor86.log'.</msg>
<msg timestamp="20150623 08:25:26.228" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:25:26.230" level="INFO">${stdout_string} = [2015-06-23 06:24:50,719][INFO ][Camel (ticket-router) thread #53 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:25:26.229" starttime="20150623 08:25:26.185"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:25:26.234" level="INFO">Executing command 'rm tmpfilemonitor86.log'.</msg>
<msg timestamp="20150623 08:25:26.310" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:25:26.311" starttime="20150623 08:25:26.231"></status>
</kw>
<msg timestamp="20150623 08:25:26.314" level="INFO">${tailed_text} = [2015-06-23 06:24:50,719][INFO ][Camel (ticket-router) thread #53 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:25:26.312" starttime="20150623 08:25:23.969"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:26.322" starttime="20150623 08:25:26.315"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:26.333" starttime="20150623 08:25:26.330"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:25:26.336" starttime="20150623 08:25:26.334"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:26.345" starttime="20150623 08:25:26.324"></status>
</kw>
<msg timestamp="20150623 08:25:26.349" level="INFO">${tailed_text} = [2015-06-23 06:24:50,719][INFO ][Camel (ticket-router) thread #53 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:25:26.347" starttime="20150623 08:25:23.961"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:26.375" starttime="20150623 08:25:26.373"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:26.376" starttime="20150623 08:25:26.366"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:26.383" starttime="20150623 08:25:26.377"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:26.387" starttime="20150623 08:25:26.384"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:26.390" starttime="20150623 08:25:26.388"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:26.392" starttime="20150623 08:25:26.352"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:26.422" starttime="20150623 08:25:26.420"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:26.430" starttime="20150623 08:25:26.423"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:26.433" starttime="20150623 08:25:26.431"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:25:26.437" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:25:26.439" level="INFO">${queryResultSetLines} = 1004546|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:25:26.438" starttime="20150623 08:25:26.434"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:26.442" starttime="20150623 08:25:26.440"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:25:26.445" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:25:26.447" level="INFO">@{queryResultSet} = [ 1004546|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:25:26.446" starttime="20150623 08:25:26.443"></status>
</kw>
<msg timestamp="20150623 08:25:26.450" level="INFO">@{queryRows} = [ 1004546|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:25:26.449" starttime="20150623 08:25:26.413"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:25:26.454" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:25:26.455" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:25:26.455" starttime="20150623 08:25:26.451"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:25:26.477" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:25:26.479" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:25:26.478" starttime="20150623 08:25:26.457"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:25:26.489" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:25:26.490" starttime="20150623 08:25:26.487"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:26.491" starttime="20150623 08:25:26.480"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:26.498" starttime="20150623 08:25:26.493"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:26.499" starttime="20150623 08:25:26.405"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:26.501" starttime="20150623 08:25:23.269"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:26.503" starttime="20150623 08:25:23.262"></status>
</kw>
<msg timestamp="20150623 08:25:26.506" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:25:26.504" starttime="20150623 08:25:23.260"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:25:26.509" level="INFO">Index in the 2. loop: 3</msg>
<status status="PASS" endtime="20150623 08:25:26.510" starttime="20150623 08:25:26.507"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:25:34.514" level="INFO">Slept 8 seconds</msg>
<status status="PASS" endtime="20150623 08:25:34.516" starttime="20150623 08:25:26.511"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:25:34.527" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:25:34.526" starttime="20150623 08:25:34.519"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:34.528" starttime="20150623 08:25:23.259"></status>
</kw>
<kw type="foritem" name="${index} = 4">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:34.583" starttime="20150623 08:25:34.581"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:34.650" starttime="20150623 08:25:34.591"></status>
</kw>
<msg timestamp="20150623 08:25:34.652" level="INFO">${ssh_connection} = 87</msg>
<status status="PASS" endtime="20150623 08:25:34.651" starttime="20150623 08:25:34.585"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:25:34.664" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:25:35.098" level="INFO">Read output: Last login: Tue Jun 23 06:25:23 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:25:35.100" starttime="20150623 08:25:34.661"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:35.102" starttime="20150623 08:25:34.654"></status>
</kw>
<msg timestamp="20150623 08:25:35.107" level="INFO">${ssh_connection} = 87</msg>
<status status="PASS" endtime="20150623 08:25:35.105" starttime="20150623 08:25:34.572"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:35.119" starttime="20150623 08:25:35.116"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:25:35.123" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor87.log'.</msg>
<status status="PASS" endtime="20150623 08:25:35.128" starttime="20150623 08:25:35.120"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:35.129" starttime="20150623 08:25:35.109"></status>
</kw>
<msg timestamp="20150623 08:25:35.133" level="INFO">${ssh_connection} = 87</msg>
<status status="PASS" endtime="20150623 08:25:35.131" starttime="20150623 08:25:34.559"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:35.159" starttime="20150623 08:25:35.152"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:35.161" starttime="20150623 08:25:35.146"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:25:35.172" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:25:35.175" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:25:35.174" starttime="20150623 08:25:35.169"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:25:35.179" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:25:35.180" starttime="20150623 08:25:35.177"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:35.183" starttime="20150623 08:25:35.181"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:35.193" starttime="20150623 08:25:35.184"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:35.194" starttime="20150623 08:25:35.163"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:35.213" starttime="20150623 08:25:35.210"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:25:35.221" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:25:35.220" starttime="20150623 08:25:35.214"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:25:35.227" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:25:35.228" starttime="20150623 08:25:35.222"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:35.239" starttime="20150623 08:25:35.236"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:25:35.242" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:25:35.287" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:25:35.289" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:25:35.288" starttime="20150623 08:25:35.240"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:25:35.293" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:25:35.395" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:25:35.397" level="INFO">${processes_string} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log
  373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
  538 ?        ...</msg>
<status status="PASS" endtime="20150623 08:25:35.396" starttime="20150623 08:25:35.290"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:25:35.403" level="INFO">@{processes_list} = [   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log |   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log |   538 ?  ...</msg>
<status status="PASS" endtime="20150623 08:25:35.402" starttime="20150623 08:25:35.399"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:35.409" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:35.408" starttime="20150623 08:25:35.406"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:35.413" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:35.476" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:35.477" starttime="20150623 08:25:35.410"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:35.478" starttime="20150623 08:25:35.404"></status>
</kw>
<kw type="foritem" name="${process} =   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:35.483" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:35.482" starttime="20150623 08:25:35.479"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:35.486" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:35.557" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:35.558" starttime="20150623 08:25:35.484"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:35.559" starttime="20150623 08:25:35.478"></status>
</kw>
<kw type="foritem" name="${process} =   538 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor77.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:35.564" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:35.563" starttime="20150623 08:25:35.560"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:35.567" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:35.638" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:35.639" starttime="20150623 08:25:35.565"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:35.640" starttime="20150623 08:25:35.559"></status>
</kw>
<kw type="foritem" name="${process} =   553 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:35.645" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:35.644" starttime="20150623 08:25:35.641"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:35.648" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:35.718" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:35.719" starttime="20150623 08:25:35.646"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:35.720" starttime="20150623 08:25:35.640"></status>
</kw>
<kw type="foritem" name="${process} =   745 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor78.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:35.725" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:35.724" starttime="20150623 08:25:35.721"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:35.728" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:35.797" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:35.798" starttime="20150623 08:25:35.726"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:35.799" starttime="20150623 08:25:35.720"></status>
</kw>
<kw type="foritem" name="${process} =   760 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:35.804" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:35.803" starttime="20150623 08:25:35.800"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:35.808" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:35.889" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:35.890" starttime="20150623 08:25:35.805"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:35.891" starttime="20150623 08:25:35.800"></status>
</kw>
<kw type="foritem" name="${process} =   985 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor79.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:35.895" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:35.895" starttime="20150623 08:25:35.892"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:35.899" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:35.970" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:35.970" starttime="20150623 08:25:35.897"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:35.971" starttime="20150623 08:25:35.891"></status>
</kw>
<kw type="foritem" name="${process} =  1000 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:35.976" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:35.975" starttime="20150623 08:25:35.973"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:35.980" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:36.050" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:36.051" starttime="20150623 08:25:35.978"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:36.053" starttime="20150623 08:25:35.972"></status>
</kw>
<kw type="foritem" name="${process} =  1249 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor80.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:36.059" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:36.058" starttime="20150623 08:25:36.055"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:36.062" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:36.128" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:36.129" starttime="20150623 08:25:36.060"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:36.130" starttime="20150623 08:25:36.054"></status>
</kw>
<kw type="foritem" name="${process} =  1264 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:36.135" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:36.134" starttime="20150623 08:25:36.131"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:36.139" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:36.210" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:36.211" starttime="20150623 08:25:36.136"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:36.212" starttime="20150623 08:25:36.130"></status>
</kw>
<kw type="foritem" name="${process} =  1559 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor81.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:36.217" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:36.216" starttime="20150623 08:25:36.213"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:36.221" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:36.290" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:36.291" starttime="20150623 08:25:36.218"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:36.292" starttime="20150623 08:25:36.213"></status>
</kw>
<kw type="foritem" name="${process} =  1574 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:36.297" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:36.296" starttime="20150623 08:25:36.293"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:36.301" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:36.378" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:36.379" starttime="20150623 08:25:36.298"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:36.380" starttime="20150623 08:25:36.292"></status>
</kw>
<kw type="foritem" name="${process} =  1899 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor82.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:36.385" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:36.384" starttime="20150623 08:25:36.381"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:36.388" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:36.458" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:36.459" starttime="20150623 08:25:36.386"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:36.460" starttime="20150623 08:25:36.380"></status>
</kw>
<kw type="foritem" name="${process} =  1914 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:36.465" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:36.464" starttime="20150623 08:25:36.461"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:36.468" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:36.538" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:36.539" starttime="20150623 08:25:36.466"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:36.539" starttime="20150623 08:25:36.460"></status>
</kw>
<kw type="foritem" name="${process} =  2254 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor83.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:36.544" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:36.544" starttime="20150623 08:25:36.541"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:36.548" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:36.618" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:36.619" starttime="20150623 08:25:36.546"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:36.620" starttime="20150623 08:25:36.540"></status>
</kw>
<kw type="foritem" name="${process} =  2269 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:36.625" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:36.624" starttime="20150623 08:25:36.621"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:36.629" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:36.704" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:36.705" starttime="20150623 08:25:36.626"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:36.706" starttime="20150623 08:25:36.621"></status>
</kw>
<kw type="foritem" name="${process} =  2640 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor84.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:36.711" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:36.710" starttime="20150623 08:25:36.707"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:36.715" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:36.786" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:36.787" starttime="20150623 08:25:36.713"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:36.788" starttime="20150623 08:25:36.706"></status>
</kw>
<kw type="foritem" name="${process} =  2655 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:36.793" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:36.792" starttime="20150623 08:25:36.789"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:36.796" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:36.867" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:36.868" starttime="20150623 08:25:36.794"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:36.869" starttime="20150623 08:25:36.788"></status>
</kw>
<kw type="foritem" name="${process} =  3081 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor85.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:36.874" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:36.873" starttime="20150623 08:25:36.870"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:36.877" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:36.949" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:36.949" starttime="20150623 08:25:36.875"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:36.950" starttime="20150623 08:25:36.869"></status>
</kw>
<kw type="foritem" name="${process} =  3096 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:36.955" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:36.954" starttime="20150623 08:25:36.952"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:36.959" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:37.036" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:37.037" starttime="20150623 08:25:36.956"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:37.039" starttime="20150623 08:25:36.951"></status>
</kw>
<kw type="foritem" name="${process} =  3577 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor86.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:37.044" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:37.044" starttime="20150623 08:25:37.041"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:37.048" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:37.110" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:37.111" starttime="20150623 08:25:37.046"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:37.112" starttime="20150623 08:25:37.040"></status>
</kw>
<kw type="foritem" name="${process} =  3592 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:37.116" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:37.116" starttime="20150623 08:25:37.113"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:37.120" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:37.180" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:37.181" starttime="20150623 08:25:37.118"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:37.182" starttime="20150623 08:25:37.112"></status>
</kw>
<kw type="foritem" name="${process} =  4052 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor87.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:37.187" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:37.186" starttime="20150623 08:25:37.184"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:37.191" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:37.258" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:37.259" starttime="20150623 08:25:37.188"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:37.260" starttime="20150623 08:25:37.182"></status>
</kw>
<kw type="foritem" name="${process} =  4067 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:37.265" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:37.264" starttime="20150623 08:25:37.261"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:37.269" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:37.337" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:37.337" starttime="20150623 08:25:37.266"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:37.338" starttime="20150623 08:25:37.260"></status>
</kw>
<kw type="foritem" name="${process} =  4085 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:37.343" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:37.342" starttime="20150623 08:25:37.340"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:37.347" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:37.430" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:37.431" starttime="20150623 08:25:37.345"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:37.432" starttime="20150623 08:25:37.339"></status>
</kw>
<kw type="foritem" name="${process} =  4101 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:37.437" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:37.436" starttime="20150623 08:25:37.433"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:37.440" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:37.508" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:37.509" starttime="20150623 08:25:37.438"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:37.510" starttime="20150623 08:25:37.432"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:37.510" starttime="20150623 08:25:35.404"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:37.512" starttime="20150623 08:25:35.230"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:25:37.517" level="INFO">Starting command 'cat tmpfilemonitor87.log'.</msg>
<status status="PASS" endtime="20150623 08:25:37.551" starttime="20150623 08:25:37.514"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:25:37.555" level="INFO">Reading output of command 'cat tmpfilemonitor87.log'.</msg>
<msg timestamp="20150623 08:25:37.588" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:25:37.590" level="INFO">${stdout_string} = [2015-06-23 06:25:01,281][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:25:37.589" starttime="20150623 08:25:37.553"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:25:37.593" level="INFO">Executing command 'rm tmpfilemonitor87.log'.</msg>
<msg timestamp="20150623 08:25:37.670" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:25:37.671" starttime="20150623 08:25:37.591"></status>
</kw>
<msg timestamp="20150623 08:25:37.675" level="INFO">${tailed_text} = [2015-06-23 06:25:01,281][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:25:37.673" starttime="20150623 08:25:35.204"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:37.683" starttime="20150623 08:25:37.676"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:37.694" starttime="20150623 08:25:37.691"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:25:37.697" starttime="20150623 08:25:37.695"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:37.704" starttime="20150623 08:25:37.685"></status>
</kw>
<msg timestamp="20150623 08:25:37.708" level="INFO">${tailed_text} = [2015-06-23 06:25:01,281][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:25:37.707" starttime="20150623 08:25:35.197"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:37.728" starttime="20150623 08:25:37.726"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:37.729" starttime="20150623 08:25:37.719"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:37.736" starttime="20150623 08:25:37.731"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:37.740" starttime="20150623 08:25:37.738"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:37.744" starttime="20150623 08:25:37.742"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:37.746" starttime="20150623 08:25:37.711"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:37.777" starttime="20150623 08:25:37.775"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:37.785" starttime="20150623 08:25:37.778"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:37.788" starttime="20150623 08:25:37.786"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:25:37.792" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:25:37.794" level="INFO">${queryResultSetLines} = 1004547|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:25:37.794" starttime="20150623 08:25:37.790"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:37.797" starttime="20150623 08:25:37.796"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:25:37.801" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:25:37.803" level="INFO">@{queryResultSet} = [ 1004547|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:25:37.802" starttime="20150623 08:25:37.799"></status>
</kw>
<msg timestamp="20150623 08:25:37.805" level="INFO">@{queryRows} = [ 1004547|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:25:37.805" starttime="20150623 08:25:37.768"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:25:37.810" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:25:37.811" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:25:37.810" starttime="20150623 08:25:37.807"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:25:37.815" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:25:37.816" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:25:37.815" starttime="20150623 08:25:37.812"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:25:37.826" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:25:37.827" starttime="20150623 08:25:37.824"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:37.828" starttime="20150623 08:25:37.817"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:37.835" starttime="20150623 08:25:37.829"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:37.836" starttime="20150623 08:25:37.760"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:37.837" starttime="20150623 08:25:34.539"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:37.839" starttime="20150623 08:25:34.532"></status>
</kw>
<msg timestamp="20150623 08:25:37.842" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:25:37.841" starttime="20150623 08:25:34.530"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:25:37.846" level="INFO">Index in the 2. loop: 4</msg>
<status status="PASS" endtime="20150623 08:25:37.847" starttime="20150623 08:25:37.844"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:25:45.852" level="INFO">Slept 8 seconds</msg>
<status status="PASS" endtime="20150623 08:25:45.854" starttime="20150623 08:25:37.848"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:25:45.864" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:25:45.863" starttime="20150623 08:25:45.856"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:45.865" starttime="20150623 08:25:34.529"></status>
</kw>
<kw type="foritem" name="${index} = 5">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:45.918" starttime="20150623 08:25:45.916"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:45.987" starttime="20150623 08:25:45.927"></status>
</kw>
<msg timestamp="20150623 08:25:45.989" level="INFO">${ssh_connection} = 88</msg>
<status status="PASS" endtime="20150623 08:25:45.988" starttime="20150623 08:25:45.920"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:25:46.018" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:25:46.440" level="INFO">Read output: Last login: Tue Jun 23 06:25:34 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:25:46.442" starttime="20150623 08:25:46.014"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:46.443" starttime="20150623 08:25:45.991"></status>
</kw>
<msg timestamp="20150623 08:25:46.448" level="INFO">${ssh_connection} = 88</msg>
<status status="PASS" endtime="20150623 08:25:46.446" starttime="20150623 08:25:45.907"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:46.460" starttime="20150623 08:25:46.457"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:25:46.464" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor88.log'.</msg>
<status status="PASS" endtime="20150623 08:25:46.468" starttime="20150623 08:25:46.461"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:46.470" starttime="20150623 08:25:46.450"></status>
</kw>
<msg timestamp="20150623 08:25:46.473" level="INFO">${ssh_connection} = 88</msg>
<status status="PASS" endtime="20150623 08:25:46.472" starttime="20150623 08:25:45.894"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:46.501" starttime="20150623 08:25:46.493"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:46.503" starttime="20150623 08:25:46.487"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:25:46.527" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:25:46.529" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:25:46.528" starttime="20150623 08:25:46.524"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:25:46.533" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:25:46.534" starttime="20150623 08:25:46.531"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:46.537" starttime="20150623 08:25:46.535"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:46.547" starttime="20150623 08:25:46.539"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:46.548" starttime="20150623 08:25:46.505"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:46.567" starttime="20150623 08:25:46.565"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:25:46.575" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:25:46.574" starttime="20150623 08:25:46.568"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:25:46.581" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:25:46.582" starttime="20150623 08:25:46.576"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:46.593" starttime="20150623 08:25:46.590"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:25:46.596" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:25:46.635" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:25:46.637" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:25:46.636" starttime="20150623 08:25:46.594"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:25:46.641" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:25:46.729" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:25:46.731" level="INFO">${processes_string} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log
  373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
  538 ?        ...</msg>
<status status="PASS" endtime="20150623 08:25:46.730" starttime="20150623 08:25:46.638"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:25:46.736" level="INFO">@{processes_list} = [   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log |   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log |   538 ?  ...</msg>
<status status="PASS" endtime="20150623 08:25:46.735" starttime="20150623 08:25:46.732"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:46.743" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:46.742" starttime="20150623 08:25:46.739"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:46.746" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:46.804" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:46.805" starttime="20150623 08:25:46.744"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:46.806" starttime="20150623 08:25:46.738"></status>
</kw>
<kw type="foritem" name="${process} =   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:46.811" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:46.810" starttime="20150623 08:25:46.807"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:46.814" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:46.883" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:46.884" starttime="20150623 08:25:46.812"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:46.885" starttime="20150623 08:25:46.806"></status>
</kw>
<kw type="foritem" name="${process} =   538 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor77.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:46.890" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:46.889" starttime="20150623 08:25:46.886"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:46.893" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:46.965" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:46.965" starttime="20150623 08:25:46.891"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:46.966" starttime="20150623 08:25:46.885"></status>
</kw>
<kw type="foritem" name="${process} =   553 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:46.971" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:46.971" starttime="20150623 08:25:46.968"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:46.975" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:47.045" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:47.047" starttime="20150623 08:25:46.973"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:47.048" starttime="20150623 08:25:46.967"></status>
</kw>
<kw type="foritem" name="${process} =   745 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor78.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:47.054" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:47.053" starttime="20150623 08:25:47.051"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:47.058" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:47.124" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:47.125" starttime="20150623 08:25:47.056"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:47.125" starttime="20150623 08:25:47.050"></status>
</kw>
<kw type="foritem" name="${process} =   760 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:47.130" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:47.130" starttime="20150623 08:25:47.127"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:47.134" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:47.203" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:47.204" starttime="20150623 08:25:47.132"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:47.205" starttime="20150623 08:25:47.126"></status>
</kw>
<kw type="foritem" name="${process} =   985 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor79.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:47.210" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:47.209" starttime="20150623 08:25:47.207"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:47.214" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:47.281" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:47.282" starttime="20150623 08:25:47.211"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:47.283" starttime="20150623 08:25:47.206"></status>
</kw>
<kw type="foritem" name="${process} =  1000 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:47.288" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:47.287" starttime="20150623 08:25:47.285"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:47.292" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:47.362" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:47.362" starttime="20150623 08:25:47.289"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:47.363" starttime="20150623 08:25:47.284"></status>
</kw>
<kw type="foritem" name="${process} =  1249 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor80.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:47.368" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:47.367" starttime="20150623 08:25:47.365"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:47.372" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:47.454" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:47.455" starttime="20150623 08:25:47.370"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:47.456" starttime="20150623 08:25:47.364"></status>
</kw>
<kw type="foritem" name="${process} =  1264 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:47.461" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:47.460" starttime="20150623 08:25:47.458"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:47.465" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:47.536" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:47.537" starttime="20150623 08:25:47.462"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:47.538" starttime="20150623 08:25:47.457"></status>
</kw>
<kw type="foritem" name="${process} =  1559 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor81.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:47.543" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:47.542" starttime="20150623 08:25:47.540"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:47.547" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:47.626" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:47.627" starttime="20150623 08:25:47.545"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:47.628" starttime="20150623 08:25:47.539"></status>
</kw>
<kw type="foritem" name="${process} =  1574 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:47.633" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:47.632" starttime="20150623 08:25:47.629"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:47.636" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:47.714" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:47.715" starttime="20150623 08:25:47.634"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:47.716" starttime="20150623 08:25:47.628"></status>
</kw>
<kw type="foritem" name="${process} =  1899 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor82.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:47.721" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:47.720" starttime="20150623 08:25:47.718"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:47.725" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:47.794" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:47.795" starttime="20150623 08:25:47.723"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:47.796" starttime="20150623 08:25:47.717"></status>
</kw>
<kw type="foritem" name="${process} =  1914 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:47.801" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:47.800" starttime="20150623 08:25:47.797"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:47.804" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:47.874" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:47.875" starttime="20150623 08:25:47.802"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:47.876" starttime="20150623 08:25:47.796"></status>
</kw>
<kw type="foritem" name="${process} =  2254 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor83.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:47.881" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:47.880" starttime="20150623 08:25:47.878"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:47.885" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:47.953" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:47.954" starttime="20150623 08:25:47.882"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:47.955" starttime="20150623 08:25:47.877"></status>
</kw>
<kw type="foritem" name="${process} =  2269 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:47.960" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:47.959" starttime="20150623 08:25:47.956"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:47.964" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:48.025" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:48.026" starttime="20150623 08:25:47.961"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:48.028" starttime="20150623 08:25:47.955"></status>
</kw>
<kw type="foritem" name="${process} =  2640 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor84.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:48.033" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:48.033" starttime="20150623 08:25:48.030"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:48.037" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:48.104" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:48.105" starttime="20150623 08:25:48.035"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:48.106" starttime="20150623 08:25:48.029"></status>
</kw>
<kw type="foritem" name="${process} =  2655 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:48.111" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:48.110" starttime="20150623 08:25:48.107"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:48.114" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:48.184" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:48.185" starttime="20150623 08:25:48.112"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:48.186" starttime="20150623 08:25:48.107"></status>
</kw>
<kw type="foritem" name="${process} =  3081 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor85.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:48.191" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:48.190" starttime="20150623 08:25:48.187"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:48.194" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:48.263" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:48.264" starttime="20150623 08:25:48.192"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:48.265" starttime="20150623 08:25:48.186"></status>
</kw>
<kw type="foritem" name="${process} =  3096 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:48.270" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:48.269" starttime="20150623 08:25:48.266"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:48.273" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:48.345" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:48.345" starttime="20150623 08:25:48.271"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:48.346" starttime="20150623 08:25:48.265"></status>
</kw>
<kw type="foritem" name="${process} =  3577 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor86.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:48.351" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:48.350" starttime="20150623 08:25:48.348"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:48.355" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:48.437" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:48.438" starttime="20150623 08:25:48.352"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:48.439" starttime="20150623 08:25:48.347"></status>
</kw>
<kw type="foritem" name="${process} =  3592 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:48.461" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:48.443" starttime="20150623 08:25:48.441"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:48.465" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:48.516" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:48.517" starttime="20150623 08:25:48.463"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:48.518" starttime="20150623 08:25:48.440"></status>
</kw>
<kw type="foritem" name="${process} =  4052 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor87.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:48.523" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:48.522" starttime="20150623 08:25:48.520"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:48.527" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:48.595" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:48.596" starttime="20150623 08:25:48.525"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:48.597" starttime="20150623 08:25:48.519"></status>
</kw>
<kw type="foritem" name="${process} =  4067 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:48.602" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:48.601" starttime="20150623 08:25:48.599"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:48.606" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:48.685" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:48.686" starttime="20150623 08:25:48.603"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:48.687" starttime="20150623 08:25:48.598"></status>
</kw>
<kw type="foritem" name="${process} =  4578 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor88.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:48.692" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:48.691" starttime="20150623 08:25:48.689"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:48.696" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:48.764" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:48.765" starttime="20150623 08:25:48.694"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:48.766" starttime="20150623 08:25:48.688"></status>
</kw>
<kw type="foritem" name="${process} =  4593 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:48.771" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:48.770" starttime="20150623 08:25:48.767"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:48.774" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:48.850" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:48.851" starttime="20150623 08:25:48.772"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:48.852" starttime="20150623 08:25:48.766"></status>
</kw>
<kw type="foritem" name="${process} =  4611 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:48.857" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:48.856" starttime="20150623 08:25:48.853"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:48.860" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:48.938" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:48.939" starttime="20150623 08:25:48.858"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:48.940" starttime="20150623 08:25:48.852"></status>
</kw>
<kw type="foritem" name="${process} =  4627 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:48.945" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:48.944" starttime="20150623 08:25:48.942"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:48.949" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:49.022" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:49.024" starttime="20150623 08:25:48.946"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:49.025" starttime="20150623 08:25:48.941"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:49.027" starttime="20150623 08:25:46.737"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:49.028" starttime="20150623 08:25:46.584"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:25:49.032" level="INFO">Starting command 'cat tmpfilemonitor88.log'.</msg>
<status status="PASS" endtime="20150623 08:25:49.065" starttime="20150623 08:25:49.030"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:25:49.068" level="INFO">Reading output of command 'cat tmpfilemonitor88.log'.</msg>
<msg timestamp="20150623 08:25:49.106" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:25:49.107" level="INFO">${stdout_string} = [2015-06-23 06:25:12,956][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:25:49.107" starttime="20150623 08:25:49.067"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:25:49.111" level="INFO">Executing command 'rm tmpfilemonitor88.log'.</msg>
<msg timestamp="20150623 08:25:49.191" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:25:49.191" starttime="20150623 08:25:49.109"></status>
</kw>
<msg timestamp="20150623 08:25:49.195" level="INFO">${tailed_text} = [2015-06-23 06:25:12,956][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:25:49.193" starttime="20150623 08:25:46.559"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:49.203" starttime="20150623 08:25:49.196"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:49.214" starttime="20150623 08:25:49.211"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:25:49.217" starttime="20150623 08:25:49.215"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:49.222" starttime="20150623 08:25:49.205"></status>
</kw>
<msg timestamp="20150623 08:25:49.225" level="INFO">${tailed_text} = [2015-06-23 06:25:12,956][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:25:49.224" starttime="20150623 08:25:46.552"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:49.243" starttime="20150623 08:25:49.241"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:49.244" starttime="20150623 08:25:49.235"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:49.251" starttime="20150623 08:25:49.246"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:49.255" starttime="20150623 08:25:49.252"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:49.259" starttime="20150623 08:25:49.257"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:49.260" starttime="20150623 08:25:49.228"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:49.290" starttime="20150623 08:25:49.289"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:49.298" starttime="20150623 08:25:49.292"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:49.301" starttime="20150623 08:25:49.299"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:25:49.305" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:25:49.307" level="INFO">${queryResultSetLines} = 1004548|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:25:49.306" starttime="20150623 08:25:49.303"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:49.310" starttime="20150623 08:25:49.309"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:25:49.314" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:25:49.315" level="INFO">@{queryResultSet} = [ 1004548|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:25:49.315" starttime="20150623 08:25:49.312"></status>
</kw>
<msg timestamp="20150623 08:25:49.318" level="INFO">@{queryRows} = [ 1004548|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:25:49.317" starttime="20150623 08:25:49.282"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:25:49.322" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:25:49.324" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:25:49.323" starttime="20150623 08:25:49.319"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:25:49.327" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:25:49.329" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:25:49.328" starttime="20150623 08:25:49.325"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:25:49.338" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:25:49.339" starttime="20150623 08:25:49.336"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:49.340" starttime="20150623 08:25:49.330"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:49.347" starttime="20150623 08:25:49.342"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:49.349" starttime="20150623 08:25:49.273"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:49.350" starttime="20150623 08:25:45.875"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:49.352" starttime="20150623 08:25:45.869"></status>
</kw>
<msg timestamp="20150623 08:25:49.355" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:25:49.354" starttime="20150623 08:25:45.867"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:25:49.358" level="INFO">Index in the 2. loop: 5</msg>
<status status="PASS" endtime="20150623 08:25:49.359" starttime="20150623 08:25:49.356"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:25:57.363" level="INFO">Slept 8 seconds</msg>
<status status="PASS" endtime="20150623 08:25:57.365" starttime="20150623 08:25:49.361"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:25:57.375" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:25:57.374" starttime="20150623 08:25:57.367"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:57.376" starttime="20150623 08:25:45.866"></status>
</kw>
<kw type="foritem" name="${index} = 6">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:57.431" starttime="20150623 08:25:57.429"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:57.490" starttime="20150623 08:25:57.439"></status>
</kw>
<msg timestamp="20150623 08:25:57.493" level="INFO">${ssh_connection} = 89</msg>
<status status="PASS" endtime="20150623 08:25:57.492" starttime="20150623 08:25:57.432"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:25:57.505" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:25:57.931" level="INFO">Read output: Last login: Tue Jun 23 06:25:46 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:25:57.932" starttime="20150623 08:25:57.502"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:57.932" starttime="20150623 08:25:57.494"></status>
</kw>
<msg timestamp="20150623 08:25:57.934" level="INFO">${ssh_connection} = 89</msg>
<status status="PASS" endtime="20150623 08:25:57.933" starttime="20150623 08:25:57.419"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:57.940" starttime="20150623 08:25:57.938"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:25:57.942" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor89.log'.</msg>
<status status="PASS" endtime="20150623 08:25:57.945" starttime="20150623 08:25:57.940"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:57.945" starttime="20150623 08:25:57.935"></status>
</kw>
<msg timestamp="20150623 08:25:57.947" level="INFO">${ssh_connection} = 89</msg>
<status status="PASS" endtime="20150623 08:25:57.946" starttime="20150623 08:25:57.406"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:57.961" starttime="20150623 08:25:57.956"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:57.963" starttime="20150623 08:25:57.953"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:25:57.974" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:25:57.977" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:25:57.976" starttime="20150623 08:25:57.972"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:25:57.980" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:25:57.981" starttime="20150623 08:25:57.978"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:57.984" starttime="20150623 08:25:57.982"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:57.995" starttime="20150623 08:25:57.986"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:57.997" starttime="20150623 08:25:57.965"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:58.016" starttime="20150623 08:25:58.013"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:25:58.038" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:25:58.037" starttime="20150623 08:25:58.017"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:25:58.044" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:25:58.045" starttime="20150623 08:25:58.039"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:25:58.057" starttime="20150623 08:25:58.054"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:25:58.060" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:25:58.104" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:25:58.106" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:25:58.105" starttime="20150623 08:25:58.058"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:25:58.110" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:25:58.204" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:25:58.205" level="INFO">${processes_string} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log
  373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
  538 ?        ...</msg>
<status status="PASS" endtime="20150623 08:25:58.205" starttime="20150623 08:25:58.107"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:25:58.211" level="INFO">@{processes_list} = [   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log |   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log |   538 ?  ...</msg>
<status status="PASS" endtime="20150623 08:25:58.210" starttime="20150623 08:25:58.207"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:58.217" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:58.216" starttime="20150623 08:25:58.214"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:58.221" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:58.280" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:58.281" starttime="20150623 08:25:58.218"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:58.282" starttime="20150623 08:25:58.213"></status>
</kw>
<kw type="foritem" name="${process} =   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:58.287" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:58.286" starttime="20150623 08:25:58.284"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:58.291" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:58.358" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:58.359" starttime="20150623 08:25:58.288"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:58.360" starttime="20150623 08:25:58.283"></status>
</kw>
<kw type="foritem" name="${process} =   538 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor77.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:58.364" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:58.364" starttime="20150623 08:25:58.361"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:58.368" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:58.438" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:58.439" starttime="20150623 08:25:58.366"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:58.440" starttime="20150623 08:25:58.360"></status>
</kw>
<kw type="foritem" name="${process} =   553 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:58.445" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:58.444" starttime="20150623 08:25:58.441"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:58.449" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:58.520" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:58.521" starttime="20150623 08:25:58.446"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:58.522" starttime="20150623 08:25:58.440"></status>
</kw>
<kw type="foritem" name="${process} =   745 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor78.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:58.527" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:58.526" starttime="20150623 08:25:58.524"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:58.531" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:58.573" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:58.574" starttime="20150623 08:25:58.528"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:58.575" starttime="20150623 08:25:58.522"></status>
</kw>
<kw type="foritem" name="${process} =   760 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:58.580" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:58.579" starttime="20150623 08:25:58.576"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:58.583" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:58.659" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:58.660" starttime="20150623 08:25:58.581"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:58.661" starttime="20150623 08:25:58.575"></status>
</kw>
<kw type="foritem" name="${process} =   985 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor79.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:58.666" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:58.665" starttime="20150623 08:25:58.662"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:58.669" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:58.747" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:58.748" starttime="20150623 08:25:58.667"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:58.749" starttime="20150623 08:25:58.661"></status>
</kw>
<kw type="foritem" name="${process} =  1000 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:58.754" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:58.753" starttime="20150623 08:25:58.750"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:58.758" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:58.831" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:58.832" starttime="20150623 08:25:58.755"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:58.833" starttime="20150623 08:25:58.750"></status>
</kw>
<kw type="foritem" name="${process} =  1249 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor80.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:58.839" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:58.838" starttime="20150623 08:25:58.835"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:58.842" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:58.914" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:58.915" starttime="20150623 08:25:58.840"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:58.915" starttime="20150623 08:25:58.834"></status>
</kw>
<kw type="foritem" name="${process} =  1264 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:58.920" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:58.920" starttime="20150623 08:25:58.917"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:58.924" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:58.981" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:58.982" starttime="20150623 08:25:58.922"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:58.983" starttime="20150623 08:25:58.916"></status>
</kw>
<kw type="foritem" name="${process} =  1559 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor81.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:58.988" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:58.987" starttime="20150623 08:25:58.985"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:58.992" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:59.051" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:59.052" starttime="20150623 08:25:58.989"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:59.054" starttime="20150623 08:25:58.984"></status>
</kw>
<kw type="foritem" name="${process} =  1574 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:59.059" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:59.059" starttime="20150623 08:25:59.056"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:59.063" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:59.127" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:59.128" starttime="20150623 08:25:59.061"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:59.129" starttime="20150623 08:25:59.055"></status>
</kw>
<kw type="foritem" name="${process} =  1899 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor82.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:59.134" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:59.133" starttime="20150623 08:25:59.130"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:59.137" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:59.209" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:59.210" starttime="20150623 08:25:59.135"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:59.211" starttime="20150623 08:25:59.129"></status>
</kw>
<kw type="foritem" name="${process} =  1914 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:59.216" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:59.215" starttime="20150623 08:25:59.212"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:59.220" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:59.290" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:59.291" starttime="20150623 08:25:59.217"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:59.292" starttime="20150623 08:25:59.211"></status>
</kw>
<kw type="foritem" name="${process} =  2254 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor83.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:59.297" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:59.296" starttime="20150623 08:25:59.293"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:59.301" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:59.368" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:59.369" starttime="20150623 08:25:59.298"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:59.370" starttime="20150623 08:25:59.292"></status>
</kw>
<kw type="foritem" name="${process} =  2269 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:59.375" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:59.374" starttime="20150623 08:25:59.371"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:59.378" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:59.457" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:59.459" starttime="20150623 08:25:59.376"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:59.460" starttime="20150623 08:25:59.370"></status>
</kw>
<kw type="foritem" name="${process} =  2640 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor84.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:59.465" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:59.465" starttime="20150623 08:25:59.461"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:59.469" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:59.536" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:59.537" starttime="20150623 08:25:59.467"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:59.538" starttime="20150623 08:25:59.460"></status>
</kw>
<kw type="foritem" name="${process} =  2655 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:59.543" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:59.542" starttime="20150623 08:25:59.539"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:59.547" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:59.616" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:59.617" starttime="20150623 08:25:59.544"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:59.618" starttime="20150623 08:25:59.538"></status>
</kw>
<kw type="foritem" name="${process} =  3081 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor85.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:59.624" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:59.623" starttime="20150623 08:25:59.620"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:59.627" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:59.696" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:59.697" starttime="20150623 08:25:59.625"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:59.698" starttime="20150623 08:25:59.619"></status>
</kw>
<kw type="foritem" name="${process} =  3096 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:59.703" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:59.702" starttime="20150623 08:25:59.699"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:59.706" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:59.775" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:59.776" starttime="20150623 08:25:59.704"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:59.777" starttime="20150623 08:25:59.698"></status>
</kw>
<kw type="foritem" name="${process} =  3577 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor86.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:59.782" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:59.781" starttime="20150623 08:25:59.779"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:59.786" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:59.855" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:59.856" starttime="20150623 08:25:59.784"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:59.857" starttime="20150623 08:25:59.778"></status>
</kw>
<kw type="foritem" name="${process} =  3592 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:59.862" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:59.861" starttime="20150623 08:25:59.858"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:59.865" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:25:59.936" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:25:59.937" starttime="20150623 08:25:59.863"></status>
</kw>
<status status="PASS" endtime="20150623 08:25:59.938" starttime="20150623 08:25:59.857"></status>
</kw>
<kw type="foritem" name="${process} =  4052 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor87.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:25:59.943" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:25:59.942" starttime="20150623 08:25:59.939"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:25:59.946" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:00.016" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:00.018" starttime="20150623 08:25:59.944"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:00.019" starttime="20150623 08:25:59.938"></status>
</kw>
<kw type="foritem" name="${process} =  4067 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:00.025" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:00.024" starttime="20150623 08:26:00.022"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:00.029" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:00.099" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:00.100" starttime="20150623 08:26:00.027"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:00.101" starttime="20150623 08:26:00.021"></status>
</kw>
<kw type="foritem" name="${process} =  4578 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor88.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:00.106" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:00.105" starttime="20150623 08:26:00.103"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:00.110" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:00.194" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:00.195" starttime="20150623 08:26:00.108"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:00.196" starttime="20150623 08:26:00.102"></status>
</kw>
<kw type="foritem" name="${process} =  4593 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:00.201" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:00.200" starttime="20150623 08:26:00.197"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:00.204" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:00.272" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:00.274" starttime="20150623 08:26:00.202"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:00.275" starttime="20150623 08:26:00.196"></status>
</kw>
<kw type="foritem" name="${process} =  5112 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor89.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:00.280" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:00.279" starttime="20150623 08:26:00.276"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:00.284" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:00.352" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:00.353" starttime="20150623 08:26:00.281"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:00.354" starttime="20150623 08:26:00.275"></status>
</kw>
<kw type="foritem" name="${process} =  5127 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:00.359" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:00.358" starttime="20150623 08:26:00.355"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:00.363" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:00.433" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:00.434" starttime="20150623 08:26:00.360"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:00.435" starttime="20150623 08:26:00.354"></status>
</kw>
<kw type="foritem" name="${process} =  5145 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:00.440" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:00.439" starttime="20150623 08:26:00.436"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:00.444" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:00.511" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:00.512" starttime="20150623 08:26:00.441"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:00.513" starttime="20150623 08:26:00.436"></status>
</kw>
<kw type="foritem" name="${process} =  5161 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:00.518" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:00.517" starttime="20150623 08:26:00.514"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:00.522" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:00.584" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:00.585" starttime="20150623 08:26:00.519"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:00.586" starttime="20150623 08:26:00.514"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:00.587" starttime="20150623 08:25:58.212"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:00.588" starttime="20150623 08:25:58.047"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:26:00.593" level="INFO">Starting command 'cat tmpfilemonitor89.log'.</msg>
<status status="PASS" endtime="20150623 08:26:00.627" starttime="20150623 08:26:00.590"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:26:00.630" level="INFO">Reading output of command 'cat tmpfilemonitor89.log'.</msg>
<msg timestamp="20150623 08:26:00.660" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:26:00.662" level="INFO">${stdout_string} = [2015-06-23 06:25:24,026][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:26:00.661" starttime="20150623 08:26:00.628"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:26:00.666" level="INFO">Executing command 'rm tmpfilemonitor89.log'.</msg>
<msg timestamp="20150623 08:26:00.736" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:26:00.736" starttime="20150623 08:26:00.663"></status>
</kw>
<msg timestamp="20150623 08:26:00.740" level="INFO">${tailed_text} = [2015-06-23 06:25:24,026][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:26:00.738" starttime="20150623 08:25:58.007"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:00.748" starttime="20150623 08:26:00.741"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:00.759" starttime="20150623 08:26:00.756"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:26:00.763" starttime="20150623 08:26:00.760"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:00.768" starttime="20150623 08:26:00.750"></status>
</kw>
<msg timestamp="20150623 08:26:00.771" level="INFO">${tailed_text} = [2015-06-23 06:25:24,026][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:26:00.770" starttime="20150623 08:25:58.000"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:00.790" starttime="20150623 08:26:00.787"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:00.791" starttime="20150623 08:26:00.781"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:00.798" starttime="20150623 08:26:00.792"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:00.802" starttime="20150623 08:26:00.799"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:00.806" starttime="20150623 08:26:00.803"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:00.807" starttime="20150623 08:26:00.774"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:00.838" starttime="20150623 08:26:00.836"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:00.845" starttime="20150623 08:26:00.839"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:00.848" starttime="20150623 08:26:00.846"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:26:00.852" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:26:00.854" level="INFO">${queryResultSetLines} = 1004549|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:26:00.854" starttime="20150623 08:26:00.850"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:00.857" starttime="20150623 08:26:00.856"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:26:00.861" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:26:00.863" level="INFO">@{queryResultSet} = [ 1004549|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:26:00.862" starttime="20150623 08:26:00.859"></status>
</kw>
<msg timestamp="20150623 08:26:00.865" level="INFO">@{queryRows} = [ 1004549|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:26:00.864" starttime="20150623 08:26:00.829"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:26:00.870" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:26:00.871" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:26:00.870" starttime="20150623 08:26:00.867"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:26:00.875" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:26:00.876" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:26:00.875" starttime="20150623 08:26:00.872"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:26:00.886" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:26:00.887" starttime="20150623 08:26:00.884"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:00.888" starttime="20150623 08:26:00.877"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:00.895" starttime="20150623 08:26:00.890"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:00.897" starttime="20150623 08:26:00.820"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:00.898" starttime="20150623 08:25:57.387"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:00.900" starttime="20150623 08:25:57.380"></status>
</kw>
<msg timestamp="20150623 08:26:00.903" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:26:00.902" starttime="20150623 08:25:57.378"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:26:00.907" level="INFO">Index in the 2. loop: 6</msg>
<status status="PASS" endtime="20150623 08:26:00.908" starttime="20150623 08:26:00.904"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:26:08.913" level="INFO">Slept 8 seconds</msg>
<status status="PASS" endtime="20150623 08:26:08.915" starttime="20150623 08:26:00.909"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:26:08.926" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:26:08.925" starttime="20150623 08:26:08.918"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:08.926" starttime="20150623 08:25:57.377"></status>
</kw>
<kw type="foritem" name="${index} = 7">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:08.980" starttime="20150623 08:26:08.978"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:09.041" starttime="20150623 08:26:08.989"></status>
</kw>
<msg timestamp="20150623 08:26:09.046" level="INFO">${ssh_connection} = 90</msg>
<status status="PASS" endtime="20150623 08:26:09.044" starttime="20150623 08:26:08.982"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:26:09.058" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:26:09.502" level="INFO">Read output: Last login: Tue Jun 23 06:25:57 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:26:09.504" starttime="20150623 08:26:09.055"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:09.505" starttime="20150623 08:26:09.047"></status>
</kw>
<msg timestamp="20150623 08:26:09.509" level="INFO">${ssh_connection} = 90</msg>
<status status="PASS" endtime="20150623 08:26:09.507" starttime="20150623 08:26:08.969"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:09.521" starttime="20150623 08:26:09.519"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:26:09.525" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor90.log'.</msg>
<status status="PASS" endtime="20150623 08:26:09.530" starttime="20150623 08:26:09.523"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:09.531" starttime="20150623 08:26:09.512"></status>
</kw>
<msg timestamp="20150623 08:26:09.534" level="INFO">${ssh_connection} = 90</msg>
<status status="PASS" endtime="20150623 08:26:09.533" starttime="20150623 08:26:08.956"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:09.557" starttime="20150623 08:26:09.552"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:09.559" starttime="20150623 08:26:09.548"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:26:09.570" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:26:09.573" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:26:09.572" starttime="20150623 08:26:09.568"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:26:09.576" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:26:09.577" starttime="20150623 08:26:09.574"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:09.580" starttime="20150623 08:26:09.578"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:09.591" starttime="20150623 08:26:09.582"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:09.592" starttime="20150623 08:26:09.561"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:09.611" starttime="20150623 08:26:09.608"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:26:09.619" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:26:09.618" starttime="20150623 08:26:09.612"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:26:09.624" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:26:09.625" starttime="20150623 08:26:09.620"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:09.636" starttime="20150623 08:26:09.633"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:26:09.639" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:26:09.691" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:26:09.693" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:26:09.692" starttime="20150623 08:26:09.637"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:26:09.697" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:26:09.798" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:26:09.800" level="INFO">${processes_string} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log
  373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
  538 ?        ...</msg>
<status status="PASS" endtime="20150623 08:26:09.798" starttime="20150623 08:26:09.694"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:26:09.805" level="INFO">@{processes_list} = [   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log |   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log |   538 ?  ...</msg>
<status status="PASS" endtime="20150623 08:26:09.804" starttime="20150623 08:26:09.801"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:09.812" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:09.811" starttime="20150623 08:26:09.808"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:09.815" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:09.881" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:09.882" starttime="20150623 08:26:09.813"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:09.883" starttime="20150623 08:26:09.807"></status>
</kw>
<kw type="foritem" name="${process} =   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:09.888" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:09.887" starttime="20150623 08:26:09.884"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:09.892" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:09.966" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:09.967" starttime="20150623 08:26:09.889"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:09.968" starttime="20150623 08:26:09.883"></status>
</kw>
<kw type="foritem" name="${process} =   538 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor77.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:09.973" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:09.972" starttime="20150623 08:26:09.969"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:09.976" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:10.048" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:10.049" starttime="20150623 08:26:09.974"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:10.051" starttime="20150623 08:26:09.968"></status>
</kw>
<kw type="foritem" name="${process} =   553 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:10.057" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:10.056" starttime="20150623 08:26:10.053"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:10.061" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:10.127" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:10.128" starttime="20150623 08:26:10.058"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:10.128" starttime="20150623 08:26:10.053"></status>
</kw>
<kw type="foritem" name="${process} =   745 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor78.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:10.134" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:10.133" starttime="20150623 08:26:10.130"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:10.137" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:10.206" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:10.207" starttime="20150623 08:26:10.135"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:10.208" starttime="20150623 08:26:10.129"></status>
</kw>
<kw type="foritem" name="${process} =   760 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:10.213" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:10.212" starttime="20150623 08:26:10.209"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:10.217" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:10.286" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:10.287" starttime="20150623 08:26:10.214"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:10.288" starttime="20150623 08:26:10.208"></status>
</kw>
<kw type="foritem" name="${process} =   985 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor79.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:10.293" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:10.292" starttime="20150623 08:26:10.290"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:10.297" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:10.357" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:10.358" starttime="20150623 08:26:10.294"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:10.359" starttime="20150623 08:26:10.289"></status>
</kw>
<kw type="foritem" name="${process} =  1000 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:10.364" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:10.363" starttime="20150623 08:26:10.360"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:10.368" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:10.441" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:10.442" starttime="20150623 08:26:10.365"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:10.443" starttime="20150623 08:26:10.359"></status>
</kw>
<kw type="foritem" name="${process} =  1249 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor80.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:10.449" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:10.448" starttime="20150623 08:26:10.445"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:10.452" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:10.513" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:10.514" starttime="20150623 08:26:10.450"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:10.515" starttime="20150623 08:26:10.444"></status>
</kw>
<kw type="foritem" name="${process} =  1264 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:10.519" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:10.519" starttime="20150623 08:26:10.516"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:10.523" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:10.587" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:10.588" starttime="20150623 08:26:10.521"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:10.589" starttime="20150623 08:26:10.515"></status>
</kw>
<kw type="foritem" name="${process} =  1559 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor81.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:10.594" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:10.593" starttime="20150623 08:26:10.590"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:10.597" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:10.659" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:10.659" starttime="20150623 08:26:10.595"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:10.660" starttime="20150623 08:26:10.589"></status>
</kw>
<kw type="foritem" name="${process} =  1574 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:10.665" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:10.665" starttime="20150623 08:26:10.662"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:10.669" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:10.735" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:10.736" starttime="20150623 08:26:10.667"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:10.737" starttime="20150623 08:26:10.661"></status>
</kw>
<kw type="foritem" name="${process} =  1899 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor82.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:10.742" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:10.741" starttime="20150623 08:26:10.738"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:10.746" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:10.809" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:10.810" starttime="20150623 08:26:10.743"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:10.811" starttime="20150623 08:26:10.737"></status>
</kw>
<kw type="foritem" name="${process} =  1914 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:10.816" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:10.815" starttime="20150623 08:26:10.813"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:10.820" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:10.892" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:10.893" starttime="20150623 08:26:10.818"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:10.894" starttime="20150623 08:26:10.812"></status>
</kw>
<kw type="foritem" name="${process} =  2254 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor83.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:10.899" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:10.898" starttime="20150623 08:26:10.895"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:10.903" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:10.972" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:10.973" starttime="20150623 08:26:10.900"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:10.973" starttime="20150623 08:26:10.894"></status>
</kw>
<kw type="foritem" name="${process} =  2269 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:10.978" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:10.978" starttime="20150623 08:26:10.975"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:10.982" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:11.057" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:11.059" starttime="20150623 08:26:10.980"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:11.060" starttime="20150623 08:26:10.974"></status>
</kw>
<kw type="foritem" name="${process} =  2640 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor84.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:11.066" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:11.065" starttime="20150623 08:26:11.063"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:11.070" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:11.126" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:11.127" starttime="20150623 08:26:11.068"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:11.128" starttime="20150623 08:26:11.062"></status>
</kw>
<kw type="foritem" name="${process} =  2655 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:11.133" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:11.132" starttime="20150623 08:26:11.129"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:11.137" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:11.203" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:11.204" starttime="20150623 08:26:11.134"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:11.205" starttime="20150623 08:26:11.129"></status>
</kw>
<kw type="foritem" name="${process} =  3081 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor85.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:11.210" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:11.209" starttime="20150623 08:26:11.207"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:11.214" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:11.286" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:11.287" starttime="20150623 08:26:11.211"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:11.288" starttime="20150623 08:26:11.206"></status>
</kw>
<kw type="foritem" name="${process} =  3096 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:11.293" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:11.292" starttime="20150623 08:26:11.289"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:11.296" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:11.366" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:11.367" starttime="20150623 08:26:11.294"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:11.368" starttime="20150623 08:26:11.288"></status>
</kw>
<kw type="foritem" name="${process} =  3577 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor86.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:11.373" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:11.372" starttime="20150623 08:26:11.369"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:11.376" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:11.452" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:11.453" starttime="20150623 08:26:11.374"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:11.454" starttime="20150623 08:26:11.368"></status>
</kw>
<kw type="foritem" name="${process} =  3592 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:11.459" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:11.458" starttime="20150623 08:26:11.455"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:11.462" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:11.560" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:11.561" starttime="20150623 08:26:11.460"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:11.562" starttime="20150623 08:26:11.454"></status>
</kw>
<kw type="foritem" name="${process} =  4052 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor87.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:11.567" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:11.566" starttime="20150623 08:26:11.564"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:11.571" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:11.642" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:11.643" starttime="20150623 08:26:11.568"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:11.644" starttime="20150623 08:26:11.563"></status>
</kw>
<kw type="foritem" name="${process} =  4067 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:11.649" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:11.648" starttime="20150623 08:26:11.645"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:11.652" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:11.722" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:11.723" starttime="20150623 08:26:11.650"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:11.724" starttime="20150623 08:26:11.644"></status>
</kw>
<kw type="foritem" name="${process} =  4578 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor88.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:11.729" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:11.728" starttime="20150623 08:26:11.726"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:11.733" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:11.803" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:11.804" starttime="20150623 08:26:11.730"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:11.805" starttime="20150623 08:26:11.725"></status>
</kw>
<kw type="foritem" name="${process} =  4593 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:11.810" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:11.809" starttime="20150623 08:26:11.806"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:11.813" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:11.884" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:11.885" starttime="20150623 08:26:11.811"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:11.886" starttime="20150623 08:26:11.805"></status>
</kw>
<kw type="foritem" name="${process} =  5112 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor89.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:11.891" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:11.890" starttime="20150623 08:26:11.888"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:11.895" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:11.964" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:11.965" starttime="20150623 08:26:11.892"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:11.966" starttime="20150623 08:26:11.887"></status>
</kw>
<kw type="foritem" name="${process} =  5127 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:11.971" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:11.970" starttime="20150623 08:26:11.967"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:11.974" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:12.043" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:12.044" starttime="20150623 08:26:11.972"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:12.046" starttime="20150623 08:26:11.966"></status>
</kw>
<kw type="foritem" name="${process} =  5740 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor90.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:12.052" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:12.051" starttime="20150623 08:26:12.048"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:12.056" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:12.121" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:12.122" starttime="20150623 08:26:12.053"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:12.123" starttime="20150623 08:26:12.047"></status>
</kw>
<kw type="foritem" name="${process} =  5755 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:12.127" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:12.127" starttime="20150623 08:26:12.124"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:12.131" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:12.200" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:12.201" starttime="20150623 08:26:12.129"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:12.202" starttime="20150623 08:26:12.123"></status>
</kw>
<kw type="foritem" name="${process} =  5773 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:12.207" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:12.206" starttime="20150623 08:26:12.204"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:12.211" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:12.280" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:12.281" starttime="20150623 08:26:12.208"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:12.282" starttime="20150623 08:26:12.203"></status>
</kw>
<kw type="foritem" name="${process} =  5789 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:12.287" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:12.286" starttime="20150623 08:26:12.284"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:12.291" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:12.362" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:12.363" starttime="20150623 08:26:12.288"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:12.363" starttime="20150623 08:26:12.283"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:12.364" starttime="20150623 08:26:09.806"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:12.366" starttime="20150623 08:26:09.627"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:26:12.370" level="INFO">Starting command 'cat tmpfilemonitor90.log'.</msg>
<status status="PASS" endtime="20150623 08:26:12.408" starttime="20150623 08:26:12.368"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:26:12.411" level="INFO">Reading output of command 'cat tmpfilemonitor90.log'.</msg>
<msg timestamp="20150623 08:26:12.440" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:26:12.441" level="INFO">${stdout_string} = [2015-06-23 06:25:35,226][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:26:12.441" starttime="20150623 08:26:12.410"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:26:12.445" level="INFO">Executing command 'rm tmpfilemonitor90.log'.</msg>
<msg timestamp="20150623 08:26:12.509" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:26:12.510" starttime="20150623 08:26:12.443"></status>
</kw>
<msg timestamp="20150623 08:26:12.513" level="INFO">${tailed_text} = [2015-06-23 06:25:35,226][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:26:12.511" starttime="20150623 08:26:09.602"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:12.521" starttime="20150623 08:26:12.514"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:12.532" starttime="20150623 08:26:12.529"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:26:12.535" starttime="20150623 08:26:12.533"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:12.541" starttime="20150623 08:26:12.523"></status>
</kw>
<msg timestamp="20150623 08:26:12.544" level="INFO">${tailed_text} = [2015-06-23 06:25:35,226][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:26:12.542" starttime="20150623 08:26:09.595"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:12.563" starttime="20150623 08:26:12.560"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:12.564" starttime="20150623 08:26:12.554"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:12.572" starttime="20150623 08:26:12.566"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:12.576" starttime="20150623 08:26:12.574"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:12.580" starttime="20150623 08:26:12.578"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:12.581" starttime="20150623 08:26:12.547"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:12.612" starttime="20150623 08:26:12.610"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:12.622" starttime="20150623 08:26:12.613"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:12.625" starttime="20150623 08:26:12.623"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:26:12.629" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:26:12.631" level="INFO">${queryResultSetLines} = 1004550|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:26:12.630" starttime="20150623 08:26:12.627"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:12.634" starttime="20150623 08:26:12.632"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:26:12.638" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:26:12.639" level="INFO">@{queryResultSet} = [ 1004550|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:26:12.638" starttime="20150623 08:26:12.635"></status>
</kw>
<msg timestamp="20150623 08:26:12.642" level="INFO">@{queryRows} = [ 1004550|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:26:12.641" starttime="20150623 08:26:12.603"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:26:12.646" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:26:12.648" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:26:12.647" starttime="20150623 08:26:12.643"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:26:12.651" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:26:12.653" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:26:12.652" starttime="20150623 08:26:12.649"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:26:12.684" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:26:12.685" starttime="20150623 08:26:12.682"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:12.686" starttime="20150623 08:26:12.656"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:12.694" starttime="20150623 08:26:12.688"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:12.695" starttime="20150623 08:26:12.594"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:12.696" starttime="20150623 08:26:08.937"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:12.698" starttime="20150623 08:26:08.931"></status>
</kw>
<msg timestamp="20150623 08:26:12.701" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:26:12.700" starttime="20150623 08:26:08.929"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:26:12.705" level="INFO">Index in the 2. loop: 7</msg>
<status status="PASS" endtime="20150623 08:26:12.706" starttime="20150623 08:26:12.703"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:26:20.711" level="INFO">Slept 8 seconds</msg>
<status status="PASS" endtime="20150623 08:26:20.713" starttime="20150623 08:26:12.707"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:26:20.724" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:26:20.723" starttime="20150623 08:26:20.715"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:20.725" starttime="20150623 08:26:08.928"></status>
</kw>
<kw type="foritem" name="${index} = 8">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:20.779" starttime="20150623 08:26:20.777"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:20.845" starttime="20150623 08:26:20.788"></status>
</kw>
<msg timestamp="20150623 08:26:20.847" level="INFO">${ssh_connection} = 91</msg>
<status status="PASS" endtime="20150623 08:26:20.846" starttime="20150623 08:26:20.781"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:26:20.859" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:26:21.296" level="INFO">Read output: Last login: Tue Jun 23 06:26:09 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:26:21.297" starttime="20150623 08:26:20.856"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:21.299" starttime="20150623 08:26:20.848"></status>
</kw>
<msg timestamp="20150623 08:26:21.301" level="INFO">${ssh_connection} = 91</msg>
<status status="PASS" endtime="20150623 08:26:21.301" starttime="20150623 08:26:20.768"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:21.307" starttime="20150623 08:26:21.306"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:26:21.309" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor91.log'.</msg>
<status status="PASS" endtime="20150623 08:26:21.312" starttime="20150623 08:26:21.308"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:21.313" starttime="20150623 08:26:21.302"></status>
</kw>
<msg timestamp="20150623 08:26:21.314" level="INFO">${ssh_connection} = 91</msg>
<status status="PASS" endtime="20150623 08:26:21.314" starttime="20150623 08:26:20.755"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:21.329" starttime="20150623 08:26:21.323"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:21.330" starttime="20150623 08:26:21.320"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:26:21.342" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:26:21.344" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:26:21.343" starttime="20150623 08:26:21.339"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:26:21.347" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:26:21.348" starttime="20150623 08:26:21.345"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:21.351" starttime="20150623 08:26:21.349"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:21.362" starttime="20150623 08:26:21.353"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:21.363" starttime="20150623 08:26:21.332"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:21.382" starttime="20150623 08:26:21.379"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:26:21.390" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:26:21.389" starttime="20150623 08:26:21.383"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:26:21.409" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:26:21.410" starttime="20150623 08:26:21.391"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:21.422" starttime="20150623 08:26:21.419"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:26:21.425" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:26:21.470" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:26:21.472" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:26:21.471" starttime="20150623 08:26:21.423"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:26:21.476" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:26:21.572" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:26:21.574" level="INFO">${processes_string} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log
  373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
  538 ?        ...</msg>
<status status="PASS" endtime="20150623 08:26:21.573" starttime="20150623 08:26:21.473"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:26:21.579" level="INFO">@{processes_list} = [   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log |   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log |   538 ?  ...</msg>
<status status="PASS" endtime="20150623 08:26:21.578" starttime="20150623 08:26:21.575"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:21.586" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:21.585" starttime="20150623 08:26:21.582"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:21.589" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:21.651" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:21.652" starttime="20150623 08:26:21.587"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:21.653" starttime="20150623 08:26:21.581"></status>
</kw>
<kw type="foritem" name="${process} =   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:21.658" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:21.657" starttime="20150623 08:26:21.654"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:21.661" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:21.730" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:21.731" starttime="20150623 08:26:21.659"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:21.732" starttime="20150623 08:26:21.653"></status>
</kw>
<kw type="foritem" name="${process} =   538 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor77.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:21.737" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:21.736" starttime="20150623 08:26:21.733"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:21.741" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:21.809" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:21.810" starttime="20150623 08:26:21.738"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:21.811" starttime="20150623 08:26:21.732"></status>
</kw>
<kw type="foritem" name="${process} =   553 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:21.816" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:21.815" starttime="20150623 08:26:21.812"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:21.819" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:21.889" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:21.890" starttime="20150623 08:26:21.817"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:21.890" starttime="20150623 08:26:21.811"></status>
</kw>
<kw type="foritem" name="${process} =   745 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor78.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:21.895" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:21.895" starttime="20150623 08:26:21.892"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:21.899" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:21.974" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:21.975" starttime="20150623 08:26:21.897"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:21.976" starttime="20150623 08:26:21.891"></status>
</kw>
<kw type="foritem" name="${process} =   760 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:21.981" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:21.980" starttime="20150623 08:26:21.977"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:21.984" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:22.062" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:22.063" starttime="20150623 08:26:21.982"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:22.065" starttime="20150623 08:26:21.976"></status>
</kw>
<kw type="foritem" name="${process} =   985 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor79.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:22.071" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:22.070" starttime="20150623 08:26:22.067"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:22.075" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:22.150" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:22.151" starttime="20150623 08:26:22.072"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:22.152" starttime="20150623 08:26:22.066"></status>
</kw>
<kw type="foritem" name="${process} =  1000 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:22.157" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:22.156" starttime="20150623 08:26:22.153"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:22.161" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:22.240" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:22.241" starttime="20150623 08:26:22.158"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:22.242" starttime="20150623 08:26:22.152"></status>
</kw>
<kw type="foritem" name="${process} =  1249 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor80.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:22.247" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:22.246" starttime="20150623 08:26:22.243"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:22.251" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:22.327" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:22.328" starttime="20150623 08:26:22.248"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:22.329" starttime="20150623 08:26:22.242"></status>
</kw>
<kw type="foritem" name="${process} =  1264 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:22.335" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:22.334" starttime="20150623 08:26:22.331"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:22.339" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:22.406" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:22.407" starttime="20150623 08:26:22.336"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:22.408" starttime="20150623 08:26:22.330"></status>
</kw>
<kw type="foritem" name="${process} =  1559 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor81.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:22.414" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:22.413" starttime="20150623 08:26:22.410"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:22.418" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:22.487" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:22.488" starttime="20150623 08:26:22.415"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:22.489" starttime="20150623 08:26:22.409"></status>
</kw>
<kw type="foritem" name="${process} =  1574 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:22.495" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:22.494" starttime="20150623 08:26:22.491"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:22.499" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:22.565" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:22.566" starttime="20150623 08:26:22.496"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:22.567" starttime="20150623 08:26:22.490"></status>
</kw>
<kw type="foritem" name="${process} =  1899 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor82.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:22.572" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:22.572" starttime="20150623 08:26:22.569"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:22.576" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:22.644" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:22.645" starttime="20150623 08:26:22.574"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:22.646" starttime="20150623 08:26:22.568"></status>
</kw>
<kw type="foritem" name="${process} =  1914 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:22.651" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:22.650" starttime="20150623 08:26:22.647"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:22.655" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:22.723" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:22.724" starttime="20150623 08:26:22.652"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:22.725" starttime="20150623 08:26:22.646"></status>
</kw>
<kw type="foritem" name="${process} =  2254 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor83.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:22.730" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:22.729" starttime="20150623 08:26:22.726"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:22.734" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:22.807" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:22.808" starttime="20150623 08:26:22.731"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:22.809" starttime="20150623 08:26:22.726"></status>
</kw>
<kw type="foritem" name="${process} =  2269 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:22.814" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:22.813" starttime="20150623 08:26:22.810"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:22.817" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:22.886" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:22.887" starttime="20150623 08:26:22.815"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:22.888" starttime="20150623 08:26:22.809"></status>
</kw>
<kw type="foritem" name="${process} =  2640 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor84.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:22.893" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:22.892" starttime="20150623 08:26:22.889"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:22.897" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:22.965" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:22.966" starttime="20150623 08:26:22.894"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:22.967" starttime="20150623 08:26:22.888"></status>
</kw>
<kw type="foritem" name="${process} =  2655 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:22.972" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:22.971" starttime="20150623 08:26:22.968"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:22.975" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:23.044" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:23.046" starttime="20150623 08:26:22.973"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:23.047" starttime="20150623 08:26:22.967"></status>
</kw>
<kw type="foritem" name="${process} =  3081 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor85.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:23.053" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:23.053" starttime="20150623 08:26:23.050"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:23.057" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:23.124" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:23.125" starttime="20150623 08:26:23.055"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:23.126" starttime="20150623 08:26:23.048"></status>
</kw>
<kw type="foritem" name="${process} =  3096 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:23.131" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:23.130" starttime="20150623 08:26:23.127"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:23.135" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:23.204" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:23.205" starttime="20150623 08:26:23.132"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:23.206" starttime="20150623 08:26:23.126"></status>
</kw>
<kw type="foritem" name="${process} =  3577 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor86.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:23.211" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:23.210" starttime="20150623 08:26:23.208"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:23.215" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:23.290" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:23.291" starttime="20150623 08:26:23.212"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:23.291" starttime="20150623 08:26:23.207"></status>
</kw>
<kw type="foritem" name="${process} =  3592 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:23.296" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:23.295" starttime="20150623 08:26:23.293"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:23.300" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:23.370" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:23.371" starttime="20150623 08:26:23.298"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:23.372" starttime="20150623 08:26:23.292"></status>
</kw>
<kw type="foritem" name="${process} =  4052 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor87.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:23.380" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:23.379" starttime="20150623 08:26:23.376"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:23.383" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:23.453" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:23.454" starttime="20150623 08:26:23.381"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:23.455" starttime="20150623 08:26:23.375"></status>
</kw>
<kw type="foritem" name="${process} =  4067 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:23.459" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:23.459" starttime="20150623 08:26:23.456"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:23.463" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:23.531" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:23.532" starttime="20150623 08:26:23.461"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:23.533" starttime="20150623 08:26:23.455"></status>
</kw>
<kw type="foritem" name="${process} =  4578 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor88.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:23.538" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:23.538" starttime="20150623 08:26:23.535"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:23.542" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:23.614" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:23.615" starttime="20150623 08:26:23.540"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:23.616" starttime="20150623 08:26:23.534"></status>
</kw>
<kw type="foritem" name="${process} =  4593 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:23.621" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:23.620" starttime="20150623 08:26:23.617"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:23.624" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:23.698" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:23.699" starttime="20150623 08:26:23.622"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:23.700" starttime="20150623 08:26:23.616"></status>
</kw>
<kw type="foritem" name="${process} =  5112 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor89.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:23.705" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:23.704" starttime="20150623 08:26:23.701"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:23.709" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:23.777" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:23.778" starttime="20150623 08:26:23.706"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:23.779" starttime="20150623 08:26:23.700"></status>
</kw>
<kw type="foritem" name="${process} =  5127 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:23.784" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:23.783" starttime="20150623 08:26:23.780"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:23.787" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:23.858" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:23.859" starttime="20150623 08:26:23.785"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:23.860" starttime="20150623 08:26:23.779"></status>
</kw>
<kw type="foritem" name="${process} =  5740 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor90.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:23.865" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:23.864" starttime="20150623 08:26:23.861"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:23.868" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:23.939" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:23.940" starttime="20150623 08:26:23.866"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:23.941" starttime="20150623 08:26:23.860"></status>
</kw>
<kw type="foritem" name="${process} =  5755 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:23.946" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:23.945" starttime="20150623 08:26:23.942"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:23.950" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:24.007" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:24.009" starttime="20150623 08:26:23.947"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:24.010" starttime="20150623 08:26:23.941"></status>
</kw>
<kw type="foritem" name="${process} =  6570 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor91.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:24.016" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:24.015" starttime="20150623 08:26:24.012"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:24.020" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:24.096" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:24.098" starttime="20150623 08:26:24.017"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:24.099" starttime="20150623 08:26:24.011"></status>
</kw>
<kw type="foritem" name="${process} =  6585 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:24.105" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:24.104" starttime="20150623 08:26:24.101"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:24.109" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:24.178" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:24.179" starttime="20150623 08:26:24.106"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:24.180" starttime="20150623 08:26:24.099"></status>
</kw>
<kw type="foritem" name="${process} =  6603 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:24.185" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:24.184" starttime="20150623 08:26:24.181"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:24.188" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:24.258" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:24.259" starttime="20150623 08:26:24.186"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:24.260" starttime="20150623 08:26:24.180"></status>
</kw>
<kw type="foritem" name="${process} =  6619 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:24.265" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:24.264" starttime="20150623 08:26:24.262"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:24.269" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:24.338" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:24.339" starttime="20150623 08:26:24.267"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:24.339" starttime="20150623 08:26:24.261"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:24.340" starttime="20150623 08:26:21.580"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:24.342" starttime="20150623 08:26:21.412"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:26:24.346" level="INFO">Starting command 'cat tmpfilemonitor91.log'.</msg>
<status status="PASS" endtime="20150623 08:26:24.381" starttime="20150623 08:26:24.344"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:26:24.384" level="INFO">Reading output of command 'cat tmpfilemonitor91.log'.</msg>
<msg timestamp="20150623 08:26:24.421" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:26:24.422" level="INFO">${stdout_string} = [2015-06-23 06:25:46,572][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:26:24.421" starttime="20150623 08:26:24.382"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:26:24.426" level="INFO">Executing command 'rm tmpfilemonitor91.log'.</msg>
<msg timestamp="20150623 08:26:24.501" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:26:24.502" starttime="20150623 08:26:24.424"></status>
</kw>
<msg timestamp="20150623 08:26:24.505" level="INFO">${tailed_text} = [2015-06-23 06:25:46,572][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:26:24.504" starttime="20150623 08:26:21.373"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:24.514" starttime="20150623 08:26:24.507"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:24.524" starttime="20150623 08:26:24.522"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:26:24.528" starttime="20150623 08:26:24.526"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:24.533" starttime="20150623 08:26:24.516"></status>
</kw>
<msg timestamp="20150623 08:26:24.536" level="INFO">${tailed_text} = [2015-06-23 06:25:46,572][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:26:24.534" starttime="20150623 08:26:21.366"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:24.554" starttime="20150623 08:26:24.552"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:24.556" starttime="20150623 08:26:24.546"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:24.562" starttime="20150623 08:26:24.557"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:24.566" starttime="20150623 08:26:24.564"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:24.570" starttime="20150623 08:26:24.568"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:24.571" starttime="20150623 08:26:24.539"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:24.602" starttime="20150623 08:26:24.600"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:24.609" starttime="20150623 08:26:24.603"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:24.612" starttime="20150623 08:26:24.611"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:26:24.616" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:26:24.619" level="INFO">${queryResultSetLines} = 1004551|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:26:24.618" starttime="20150623 08:26:24.614"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:24.622" starttime="20150623 08:26:24.620"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:26:24.625" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:26:24.627" level="INFO">@{queryResultSet} = [ 1004551|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:26:24.626" starttime="20150623 08:26:24.623"></status>
</kw>
<msg timestamp="20150623 08:26:24.629" level="INFO">@{queryRows} = [ 1004551|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:26:24.628" starttime="20150623 08:26:24.593"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:26:24.633" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:26:24.635" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:26:24.634" starttime="20150623 08:26:24.631"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:26:24.638" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:26:24.640" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:26:24.639" starttime="20150623 08:26:24.636"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:26:24.650" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:26:24.651" starttime="20150623 08:26:24.648"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:24.652" starttime="20150623 08:26:24.641"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:24.659" starttime="20150623 08:26:24.653"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:24.660" starttime="20150623 08:26:24.585"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:24.661" starttime="20150623 08:26:20.736"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:24.663" starttime="20150623 08:26:20.730"></status>
</kw>
<msg timestamp="20150623 08:26:24.667" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:26:24.665" starttime="20150623 08:26:20.727"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:26:24.670" level="INFO">Index in the 2. loop: 8</msg>
<status status="PASS" endtime="20150623 08:26:24.671" starttime="20150623 08:26:24.668"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:26:32.676" level="INFO">Slept 8 seconds</msg>
<status status="PASS" endtime="20150623 08:26:32.678" starttime="20150623 08:26:24.672"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:26:32.688" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:26:32.687" starttime="20150623 08:26:32.680"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:32.689" starttime="20150623 08:26:20.726"></status>
</kw>
<kw type="foritem" name="${index} = 9">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:32.743" starttime="20150623 08:26:32.741"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:32.808" starttime="20150623 08:26:32.751"></status>
</kw>
<msg timestamp="20150623 08:26:32.811" level="INFO">${ssh_connection} = 92</msg>
<status status="PASS" endtime="20150623 08:26:32.810" starttime="20150623 08:26:32.744"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:26:32.821" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:26:33.252" level="INFO">Read output: Last login: Tue Jun 23 06:26:21 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:26:33.253" starttime="20150623 08:26:32.819"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:33.254" starttime="20150623 08:26:32.812"></status>
</kw>
<msg timestamp="20150623 08:26:33.256" level="INFO">${ssh_connection} = 92</msg>
<status status="PASS" endtime="20150623 08:26:33.255" starttime="20150623 08:26:32.731"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:33.261" starttime="20150623 08:26:33.260"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:26:33.263" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor92.log'.</msg>
<status status="PASS" endtime="20150623 08:26:33.267" starttime="20150623 08:26:33.262"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:33.267" starttime="20150623 08:26:33.257"></status>
</kw>
<msg timestamp="20150623 08:26:33.269" level="INFO">${ssh_connection} = 92</msg>
<status status="PASS" endtime="20150623 08:26:33.268" starttime="20150623 08:26:32.719"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:33.283" starttime="20150623 08:26:33.278"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:33.284" starttime="20150623 08:26:33.275"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:26:33.289" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:26:33.290" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:26:33.290" starttime="20150623 08:26:33.288"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:26:33.292" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:26:33.292" starttime="20150623 08:26:33.291"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:33.293" starttime="20150623 08:26:33.292"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:33.302" starttime="20150623 08:26:33.294"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:33.303" starttime="20150623 08:26:33.285"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:33.313" starttime="20150623 08:26:33.311"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:26:33.317" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:26:33.317" starttime="20150623 08:26:33.313"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:26:33.321" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:26:33.322" starttime="20150623 08:26:33.318"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:33.328" starttime="20150623 08:26:33.326"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:26:33.329" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:26:33.380" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:26:33.380" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:26:33.380" starttime="20150623 08:26:33.328"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:26:33.383" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:26:33.501" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:26:33.503" level="INFO">${processes_string} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log
  373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
  538 ?        ...</msg>
<status status="PASS" endtime="20150623 08:26:33.502" starttime="20150623 08:26:33.381"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:26:33.509" level="INFO">@{processes_list} = [   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log |   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log |   538 ?  ...</msg>
<status status="PASS" endtime="20150623 08:26:33.508" starttime="20150623 08:26:33.505"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:33.515" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:33.514" starttime="20150623 08:26:33.512"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:33.519" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:33.587" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:33.588" starttime="20150623 08:26:33.516"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:33.589" starttime="20150623 08:26:33.511"></status>
</kw>
<kw type="foritem" name="${process} =   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:33.594" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:33.593" starttime="20150623 08:26:33.591"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:33.598" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:33.668" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:33.669" starttime="20150623 08:26:33.596"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:33.670" starttime="20150623 08:26:33.590"></status>
</kw>
<kw type="foritem" name="${process} =   538 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor77.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:33.676" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:33.675" starttime="20150623 08:26:33.672"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:33.679" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:33.751" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:33.752" starttime="20150623 08:26:33.677"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:33.753" starttime="20150623 08:26:33.671"></status>
</kw>
<kw type="foritem" name="${process} =   553 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:33.758" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:33.757" starttime="20150623 08:26:33.755"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:33.762" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:33.831" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:33.831" starttime="20150623 08:26:33.759"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:33.832" starttime="20150623 08:26:33.754"></status>
</kw>
<kw type="foritem" name="${process} =   745 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor78.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:33.837" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:33.836" starttime="20150623 08:26:33.834"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:33.841" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:33.911" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:33.912" starttime="20150623 08:26:33.839"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:33.912" starttime="20150623 08:26:33.833"></status>
</kw>
<kw type="foritem" name="${process} =   760 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:33.917" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:33.917" starttime="20150623 08:26:33.914"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:33.921" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:33.990" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:33.990" starttime="20150623 08:26:33.919"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:33.991" starttime="20150623 08:26:33.913"></status>
</kw>
<kw type="foritem" name="${process} =   985 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor79.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:33.996" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:33.996" starttime="20150623 08:26:33.993"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:34.000" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:34.068" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:34.069" starttime="20150623 08:26:33.998"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:34.071" starttime="20150623 08:26:33.992"></status>
</kw>
<kw type="foritem" name="${process} =  1000 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:34.077" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:34.076" starttime="20150623 08:26:34.073"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:34.081" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:34.147" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:34.148" starttime="20150623 08:26:34.078"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:34.149" starttime="20150623 08:26:34.072"></status>
</kw>
<kw type="foritem" name="${process} =  1249 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor80.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:34.154" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:34.153" starttime="20150623 08:26:34.150"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:34.157" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:34.226" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:34.227" starttime="20150623 08:26:34.155"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:34.228" starttime="20150623 08:26:34.149"></status>
</kw>
<kw type="foritem" name="${process} =  1264 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:34.233" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:34.232" starttime="20150623 08:26:34.229"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:34.236" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:34.304" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:34.305" starttime="20150623 08:26:34.234"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:34.306" starttime="20150623 08:26:34.228"></status>
</kw>
<kw type="foritem" name="${process} =  1559 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor81.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:34.311" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:34.310" starttime="20150623 08:26:34.308"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:34.315" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:34.383" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:34.384" starttime="20150623 08:26:34.312"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:34.385" starttime="20150623 08:26:34.307"></status>
</kw>
<kw type="foritem" name="${process} =  1574 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:34.390" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:34.390" starttime="20150623 08:26:34.387"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:34.394" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:34.470" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:34.471" starttime="20150623 08:26:34.392"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:34.471" starttime="20150623 08:26:34.386"></status>
</kw>
<kw type="foritem" name="${process} =  1899 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor82.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:34.477" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:34.476" starttime="20150623 08:26:34.473"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:34.480" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:34.548" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:34.550" starttime="20150623 08:26:34.478"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:34.551" starttime="20150623 08:26:34.472"></status>
</kw>
<kw type="foritem" name="${process} =  1914 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:34.556" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:34.555" starttime="20150623 08:26:34.552"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:34.559" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:34.632" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:34.633" starttime="20150623 08:26:34.557"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:34.634" starttime="20150623 08:26:34.551"></status>
</kw>
<kw type="foritem" name="${process} =  2254 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor83.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:34.639" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:34.638" starttime="20150623 08:26:34.635"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:34.642" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:34.716" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:34.717" starttime="20150623 08:26:34.640"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:34.718" starttime="20150623 08:26:34.634"></status>
</kw>
<kw type="foritem" name="${process} =  2269 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:34.723" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:34.722" starttime="20150623 08:26:34.719"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:34.726" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:34.806" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:34.807" starttime="20150623 08:26:34.724"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:34.808" starttime="20150623 08:26:34.718"></status>
</kw>
<kw type="foritem" name="${process} =  2640 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor84.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:34.814" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:34.813" starttime="20150623 08:26:34.810"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:34.817" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:34.886" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:34.887" starttime="20150623 08:26:34.815"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:34.888" starttime="20150623 08:26:34.809"></status>
</kw>
<kw type="foritem" name="${process} =  2655 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:34.893" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:34.893" starttime="20150623 08:26:34.890"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:34.897" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:34.968" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:34.969" starttime="20150623 08:26:34.895"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:34.970" starttime="20150623 08:26:34.889"></status>
</kw>
<kw type="foritem" name="${process} =  3081 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor85.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:34.975" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:34.974" starttime="20150623 08:26:34.971"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:34.979" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:35.049" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:35.050" starttime="20150623 08:26:34.976"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:35.052" starttime="20150623 08:26:34.970"></status>
</kw>
<kw type="foritem" name="${process} =  3096 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:35.058" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:35.057" starttime="20150623 08:26:35.054"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:35.061" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:35.127" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:35.128" starttime="20150623 08:26:35.059"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:35.129" starttime="20150623 08:26:35.053"></status>
</kw>
<kw type="foritem" name="${process} =  3577 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor86.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:35.134" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:35.133" starttime="20150623 08:26:35.130"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:35.138" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:35.204" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:35.205" starttime="20150623 08:26:35.135"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:35.206" starttime="20150623 08:26:35.129"></status>
</kw>
<kw type="foritem" name="${process} =  3592 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:35.211" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:35.210" starttime="20150623 08:26:35.208"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:35.215" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:35.272" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:35.273" starttime="20150623 08:26:35.212"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:35.274" starttime="20150623 08:26:35.207"></status>
</kw>
<kw type="foritem" name="${process} =  4052 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor87.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:35.279" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:35.278" starttime="20150623 08:26:35.275"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:35.283" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:35.352" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:35.353" starttime="20150623 08:26:35.280"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:35.354" starttime="20150623 08:26:35.275"></status>
</kw>
<kw type="foritem" name="${process} =  4067 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:35.359" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:35.358" starttime="20150623 08:26:35.355"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:35.363" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:35.436" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:35.437" starttime="20150623 08:26:35.360"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:35.438" starttime="20150623 08:26:35.354"></status>
</kw>
<kw type="foritem" name="${process} =  4578 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor88.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:35.443" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:35.443" starttime="20150623 08:26:35.440"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:35.447" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:35.515" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:35.516" starttime="20150623 08:26:35.445"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:35.517" starttime="20150623 08:26:35.439"></status>
</kw>
<kw type="foritem" name="${process} =  4593 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:35.522" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:35.521" starttime="20150623 08:26:35.518"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:35.526" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:35.594" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:35.595" starttime="20150623 08:26:35.523"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:35.596" starttime="20150623 08:26:35.518"></status>
</kw>
<kw type="foritem" name="${process} =  5112 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor89.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:35.601" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:35.600" starttime="20150623 08:26:35.597"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:35.604" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:35.674" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:35.675" starttime="20150623 08:26:35.602"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:35.676" starttime="20150623 08:26:35.596"></status>
</kw>
<kw type="foritem" name="${process} =  5127 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:35.681" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:35.680" starttime="20150623 08:26:35.677"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:35.684" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:35.754" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:35.755" starttime="20150623 08:26:35.682"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:35.756" starttime="20150623 08:26:35.677"></status>
</kw>
<kw type="foritem" name="${process} =  5740 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor90.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:35.761" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:35.760" starttime="20150623 08:26:35.757"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:35.764" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:35.839" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:35.840" starttime="20150623 08:26:35.762"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:35.841" starttime="20150623 08:26:35.756"></status>
</kw>
<kw type="foritem" name="${process} =  5755 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:35.846" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:35.845" starttime="20150623 08:26:35.842"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:35.849" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:35.919" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:35.919" starttime="20150623 08:26:35.847"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:35.920" starttime="20150623 08:26:35.841"></status>
</kw>
<kw type="foritem" name="${process} =  6570 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor91.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:35.925" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:35.925" starttime="20150623 08:26:35.922"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:35.929" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:35.996" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:35.997" starttime="20150623 08:26:35.927"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:35.998" starttime="20150623 08:26:35.921"></status>
</kw>
<kw type="foritem" name="${process} =  6585 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:36.004" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:36.003" starttime="20150623 08:26:36.000"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:36.008" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:36.075" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:36.076" starttime="20150623 08:26:36.006"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:36.077" starttime="20150623 08:26:35.999"></status>
</kw>
<kw type="foritem" name="${process} =  7194 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor92.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:36.083" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:36.082" starttime="20150623 08:26:36.079"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:36.087" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:36.156" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:36.157" starttime="20150623 08:26:36.084"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:36.158" starttime="20150623 08:26:36.079"></status>
</kw>
<kw type="foritem" name="${process} =  7209 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:36.163" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:36.162" starttime="20150623 08:26:36.159"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:36.167" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:36.253" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:36.254" starttime="20150623 08:26:36.164"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:36.255" starttime="20150623 08:26:36.159"></status>
</kw>
<kw type="foritem" name="${process} =  7227 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:36.260" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:36.259" starttime="20150623 08:26:36.256"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:36.264" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:36.337" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:36.338" starttime="20150623 08:26:36.261"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:36.338" starttime="20150623 08:26:36.256"></status>
</kw>
<kw type="foritem" name="${process} =  7243 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:36.343" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:36.342" starttime="20150623 08:26:36.340"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:36.347" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:36.418" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:36.419" starttime="20150623 08:26:36.345"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:36.420" starttime="20150623 08:26:36.339"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:36.420" starttime="20150623 08:26:33.510"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:36.422" starttime="20150623 08:26:33.323"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:26:36.427" level="INFO">Starting command 'cat tmpfilemonitor92.log'.</msg>
<status status="PASS" endtime="20150623 08:26:36.462" starttime="20150623 08:26:36.424"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:26:36.464" level="INFO">Reading output of command 'cat tmpfilemonitor92.log'.</msg>
<msg timestamp="20150623 08:26:36.504" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:26:36.506" level="INFO">${stdout_string} = [2015-06-23 06:26:09,588][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150623 08:26:36.505" starttime="20150623 08:26:36.463"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:26:36.509" level="INFO">Executing command 'rm tmpfilemonitor92.log'.</msg>
<msg timestamp="20150623 08:26:36.587" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:26:36.588" starttime="20150623 08:26:36.507"></status>
</kw>
<msg timestamp="20150623 08:26:36.592" level="INFO">${tailed_text} = [2015-06-23 06:26:09,588][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150623 08:26:36.590" starttime="20150623 08:26:33.308"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:36.600" starttime="20150623 08:26:36.593"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:36.610" starttime="20150623 08:26:36.608"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:26:36.617" starttime="20150623 08:26:36.612"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:36.620" starttime="20150623 08:26:36.602"></status>
</kw>
<msg timestamp="20150623 08:26:36.624" level="INFO">${tailed_text} = [2015-06-23 06:26:09,588][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150623 08:26:36.623" starttime="20150623 08:26:33.304"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:36.644" starttime="20150623 08:26:36.642"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:36.645" starttime="20150623 08:26:36.635"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:36.652" starttime="20150623 08:26:36.647"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:36.656" starttime="20150623 08:26:36.653"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:36.660" starttime="20150623 08:26:36.658"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:36.661" starttime="20150623 08:26:36.628"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:36.692" starttime="20150623 08:26:36.690"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:36.700" starttime="20150623 08:26:36.693"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:36.703" starttime="20150623 08:26:36.701"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:26:36.707" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:26:36.709" level="INFO">${queryResultSetLines} = 1004552|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:26:36.708" starttime="20150623 08:26:36.704"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:36.712" starttime="20150623 08:26:36.710"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:26:36.716" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:26:36.717" level="INFO">@{queryResultSet} = [ 1004552|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:26:36.716" starttime="20150623 08:26:36.713"></status>
</kw>
<msg timestamp="20150623 08:26:36.720" level="INFO">@{queryRows} = [ 1004552|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:26:36.719" starttime="20150623 08:26:36.683"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:26:36.724" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:26:36.726" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:26:36.725" starttime="20150623 08:26:36.721"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:26:36.729" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:26:36.731" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:26:36.730" starttime="20150623 08:26:36.727"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:26:36.741" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:26:36.742" starttime="20150623 08:26:36.739"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:36.743" starttime="20150623 08:26:36.732"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:36.770" starttime="20150623 08:26:36.744"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:36.772" starttime="20150623 08:26:36.675"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:36.773" starttime="20150623 08:26:32.700"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:36.776" starttime="20150623 08:26:32.693"></status>
</kw>
<msg timestamp="20150623 08:26:36.779" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:26:36.777" starttime="20150623 08:26:32.691"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:26:36.783" level="INFO">Index in the 2. loop: 9</msg>
<status status="PASS" endtime="20150623 08:26:36.784" starttime="20150623 08:26:36.780"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:26:44.789" level="INFO">Slept 8 seconds</msg>
<status status="PASS" endtime="20150623 08:26:44.791" starttime="20150623 08:26:36.786"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:26:44.802" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:26:44.801" starttime="20150623 08:26:44.793"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:44.803" starttime="20150623 08:26:32.690"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:44.804" starttime="20150623 08:24:50.106"></status>
</kw>
<msg timestamp="20150623 08:26:44.807" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:26:44.806" starttime="20150623 08:24:50.101"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>For delay ${loopIdx} we had ${failure} failure(s)</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:26:44.811" level="INFO">For delay 8 we had None failure(s)</msg>
<status status="PASS" endtime="20150623 08:26:44.812" starttime="20150623 08:26:44.808"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:44.813" starttime="20150623 08:24:50.091"></status>
</kw>
<kw type="foritem" name="${loopIdx} = 9">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Sitting in first FOR, Loop No.: ${loopIdx}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:26:44.818" level="INFO">Sitting in first FOR, Loop No.: 9</msg>
<status status="PASS" endtime="20150623 08:26:44.818" starttime="20150623 08:26:44.815"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Timeout set to ${loopIdx} secs</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:26:44.822" level="INFO">Timeout set to 9 secs</msg>
<status status="PASS" endtime="20150623 08:26:44.823" starttime="20150623 08:26:44.820"></status>
</kw>
<kw type="kw" name="${failure} = Internal Loop">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${loopIdx}</arg>
</arguments>
<kw type="for" name="${index} IN RANGE [ 0 | 10 ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${index} = 0">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:44.883" starttime="20150623 08:26:44.881"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:44.941" starttime="20150623 08:26:44.892"></status>
</kw>
<msg timestamp="20150623 08:26:44.942" level="INFO">${ssh_connection} = 93</msg>
<status status="PASS" endtime="20150623 08:26:44.941" starttime="20150623 08:26:44.885"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:26:44.947" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:26:45.378" level="INFO">Read output: Last login: Tue Jun 23 06:26:33 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:26:45.379" starttime="20150623 08:26:44.946"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:45.380" starttime="20150623 08:26:44.942"></status>
</kw>
<msg timestamp="20150623 08:26:45.382" level="INFO">${ssh_connection} = 93</msg>
<status status="PASS" endtime="20150623 08:26:45.381" starttime="20150623 08:26:44.872"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:45.388" starttime="20150623 08:26:45.387"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:26:45.390" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor93.log'.</msg>
<status status="PASS" endtime="20150623 08:26:45.393" starttime="20150623 08:26:45.388"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:45.393" starttime="20150623 08:26:45.383"></status>
</kw>
<msg timestamp="20150623 08:26:45.395" level="INFO">${ssh_connection} = 93</msg>
<status status="PASS" endtime="20150623 08:26:45.394" starttime="20150623 08:26:44.859"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:45.409" starttime="20150623 08:26:45.404"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:45.409" starttime="20150623 08:26:45.401"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:26:45.414" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:26:45.415" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:26:45.415" starttime="20150623 08:26:45.413"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:26:45.417" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:26:45.417" starttime="20150623 08:26:45.416"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:45.419" starttime="20150623 08:26:45.418"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:45.427" starttime="20150623 08:26:45.419"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:45.428" starttime="20150623 08:26:45.410"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:45.436" starttime="20150623 08:26:45.435"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:26:45.440" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:26:45.440" starttime="20150623 08:26:45.437"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:26:45.445" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:26:45.445" starttime="20150623 08:26:45.441"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:45.451" starttime="20150623 08:26:45.450"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:26:45.453" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:26:45.497" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:26:45.498" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:26:45.498" starttime="20150623 08:26:45.451"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:26:45.500" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:26:45.595" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:26:45.597" level="INFO">${processes_string} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log
  373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
  538 ?        ...</msg>
<status status="PASS" endtime="20150623 08:26:45.596" starttime="20150623 08:26:45.499"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:26:45.603" level="INFO">@{processes_list} = [   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log |   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log |   538 ?  ...</msg>
<status status="PASS" endtime="20150623 08:26:45.601" starttime="20150623 08:26:45.599"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:45.609" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:45.608" starttime="20150623 08:26:45.605"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:45.612" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:45.701" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:45.702" starttime="20150623 08:26:45.610"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:45.704" starttime="20150623 08:26:45.604"></status>
</kw>
<kw type="foritem" name="${process} =   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:45.709" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:45.708" starttime="20150623 08:26:45.705"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:45.712" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:45.779" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:45.780" starttime="20150623 08:26:45.710"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:45.780" starttime="20150623 08:26:45.704"></status>
</kw>
<kw type="foritem" name="${process} =   538 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor77.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:45.786" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:45.785" starttime="20150623 08:26:45.782"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:45.789" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:45.857" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:45.858" starttime="20150623 08:26:45.787"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:45.859" starttime="20150623 08:26:45.781"></status>
</kw>
<kw type="foritem" name="${process} =   553 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:45.864" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:45.863" starttime="20150623 08:26:45.860"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:45.868" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:45.936" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:45.937" starttime="20150623 08:26:45.865"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:45.938" starttime="20150623 08:26:45.859"></status>
</kw>
<kw type="foritem" name="${process} =   745 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor78.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:45.943" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:45.942" starttime="20150623 08:26:45.939"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:45.946" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:46.017" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:46.018" starttime="20150623 08:26:45.944"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:46.020" starttime="20150623 08:26:45.938"></status>
</kw>
<kw type="foritem" name="${process} =   760 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:46.025" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:46.025" starttime="20150623 08:26:46.022"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:46.029" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:46.115" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:46.116" starttime="20150623 08:26:46.027"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:46.117" starttime="20150623 08:26:46.021"></status>
</kw>
<kw type="foritem" name="${process} =   985 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor79.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:46.122" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:46.121" starttime="20150623 08:26:46.118"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:46.126" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:46.209" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:46.210" starttime="20150623 08:26:46.123"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:46.211" starttime="20150623 08:26:46.117"></status>
</kw>
<kw type="foritem" name="${process} =  1000 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:46.217" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:46.216" starttime="20150623 08:26:46.213"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:46.220" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:46.295" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:46.296" starttime="20150623 08:26:46.218"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:46.297" starttime="20150623 08:26:46.212"></status>
</kw>
<kw type="foritem" name="${process} =  1249 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor80.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:46.302" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:46.302" starttime="20150623 08:26:46.298"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:46.306" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:46.378" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:46.379" starttime="20150623 08:26:46.304"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:46.380" starttime="20150623 08:26:46.298"></status>
</kw>
<kw type="foritem" name="${process} =  1264 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:46.385" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:46.384" starttime="20150623 08:26:46.381"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:46.388" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:46.459" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:46.460" starttime="20150623 08:26:46.386"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:46.461" starttime="20150623 08:26:46.380"></status>
</kw>
<kw type="foritem" name="${process} =  1559 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor81.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:46.466" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:46.465" starttime="20150623 08:26:46.462"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:46.469" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:46.525" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:46.526" starttime="20150623 08:26:46.467"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:46.527" starttime="20150623 08:26:46.461"></status>
</kw>
<kw type="foritem" name="${process} =  1574 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:46.531" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:46.531" starttime="20150623 08:26:46.528"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:46.535" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:46.597" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:46.598" starttime="20150623 08:26:46.533"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:46.598" starttime="20150623 08:26:46.527"></status>
</kw>
<kw type="foritem" name="${process} =  1899 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor82.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:46.603" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:46.603" starttime="20150623 08:26:46.600"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:46.607" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:46.668" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:46.669" starttime="20150623 08:26:46.605"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:46.670" starttime="20150623 08:26:46.599"></status>
</kw>
<kw type="foritem" name="${process} =  1914 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:46.675" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:46.674" starttime="20150623 08:26:46.671"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:46.679" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:46.741" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:46.742" starttime="20150623 08:26:46.676"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:46.743" starttime="20150623 08:26:46.670"></status>
</kw>
<kw type="foritem" name="${process} =  2254 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor83.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:46.748" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:46.747" starttime="20150623 08:26:46.744"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:46.751" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:46.819" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:46.820" starttime="20150623 08:26:46.749"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:46.821" starttime="20150623 08:26:46.743"></status>
</kw>
<kw type="foritem" name="${process} =  2269 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:46.826" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:46.825" starttime="20150623 08:26:46.822"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:46.830" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:46.899" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:46.900" starttime="20150623 08:26:46.827"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:46.901" starttime="20150623 08:26:46.821"></status>
</kw>
<kw type="foritem" name="${process} =  2640 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor84.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:46.906" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:46.905" starttime="20150623 08:26:46.902"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:46.909" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:46.979" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:46.980" starttime="20150623 08:26:46.907"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:46.980" starttime="20150623 08:26:46.901"></status>
</kw>
<kw type="foritem" name="${process} =  2655 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:46.985" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:46.984" starttime="20150623 08:26:46.982"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:46.989" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:47.072" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:47.074" starttime="20150623 08:26:46.987"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:47.075" starttime="20150623 08:26:46.981"></status>
</kw>
<kw type="foritem" name="${process} =  3081 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor85.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:47.081" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:47.080" starttime="20150623 08:26:47.077"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:47.085" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:47.152" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:47.153" starttime="20150623 08:26:47.082"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:47.154" starttime="20150623 08:26:47.076"></status>
</kw>
<kw type="foritem" name="${process} =  3096 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:47.159" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:47.158" starttime="20150623 08:26:47.156"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:47.163" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:47.232" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:47.233" starttime="20150623 08:26:47.160"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:47.233" starttime="20150623 08:26:47.155"></status>
</kw>
<kw type="foritem" name="${process} =  3577 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor86.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:47.238" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:47.238" starttime="20150623 08:26:47.235"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:47.242" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:47.310" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:47.311" starttime="20150623 08:26:47.240"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:47.312" starttime="20150623 08:26:47.234"></status>
</kw>
<kw type="foritem" name="${process} =  3592 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:47.317" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:47.316" starttime="20150623 08:26:47.313"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:47.320" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:47.390" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:47.391" starttime="20150623 08:26:47.318"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:47.392" starttime="20150623 08:26:47.312"></status>
</kw>
<kw type="foritem" name="${process} =  4052 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor87.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:47.397" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:47.396" starttime="20150623 08:26:47.393"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:47.400" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:47.473" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:47.474" starttime="20150623 08:26:47.398"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:47.475" starttime="20150623 08:26:47.392"></status>
</kw>
<kw type="foritem" name="${process} =  4067 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:47.480" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:47.479" starttime="20150623 08:26:47.477"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:47.484" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:47.557" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:47.558" starttime="20150623 08:26:47.481"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:47.558" starttime="20150623 08:26:47.476"></status>
</kw>
<kw type="foritem" name="${process} =  4578 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor88.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:47.563" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:47.563" starttime="20150623 08:26:47.560"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:47.567" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:47.638" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:47.639" starttime="20150623 08:26:47.565"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:47.639" starttime="20150623 08:26:47.559"></status>
</kw>
<kw type="foritem" name="${process} =  4593 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:47.644" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:47.643" starttime="20150623 08:26:47.641"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:47.648" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:47.721" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:47.722" starttime="20150623 08:26:47.646"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:47.723" starttime="20150623 08:26:47.640"></status>
</kw>
<kw type="foritem" name="${process} =  5112 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor89.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:47.728" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:47.727" starttime="20150623 08:26:47.725"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:47.732" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:47.819" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:47.820" starttime="20150623 08:26:47.729"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:47.820" starttime="20150623 08:26:47.724"></status>
</kw>
<kw type="foritem" name="${process} =  5127 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:47.825" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:47.825" starttime="20150623 08:26:47.822"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:47.829" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:47.901" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:47.902" starttime="20150623 08:26:47.827"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:47.902" starttime="20150623 08:26:47.821"></status>
</kw>
<kw type="foritem" name="${process} =  5740 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor90.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:47.907" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:47.907" starttime="20150623 08:26:47.904"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:47.911" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:47.980" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:47.981" starttime="20150623 08:26:47.909"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:47.982" starttime="20150623 08:26:47.903"></status>
</kw>
<kw type="foritem" name="${process} =  5755 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:47.987" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:47.986" starttime="20150623 08:26:47.983"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:47.991" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:48.060" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:48.061" starttime="20150623 08:26:47.988"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:48.063" starttime="20150623 08:26:47.983"></status>
</kw>
<kw type="foritem" name="${process} =  6570 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor91.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:48.069" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:48.068" starttime="20150623 08:26:48.065"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:48.072" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:48.139" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:48.140" starttime="20150623 08:26:48.070"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:48.140" starttime="20150623 08:26:48.064"></status>
</kw>
<kw type="foritem" name="${process} =  6585 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:48.145" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:48.145" starttime="20150623 08:26:48.142"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:48.149" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:48.219" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:48.220" starttime="20150623 08:26:48.147"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:48.220" starttime="20150623 08:26:48.141"></status>
</kw>
<kw type="foritem" name="${process} =  7194 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor92.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:48.225" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:48.225" starttime="20150623 08:26:48.222"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:48.229" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:48.299" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:48.300" starttime="20150623 08:26:48.227"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:48.301" starttime="20150623 08:26:48.221"></status>
</kw>
<kw type="foritem" name="${process} =  7209 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:48.305" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:48.305" starttime="20150623 08:26:48.302"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:48.309" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:48.388" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:48.389" starttime="20150623 08:26:48.307"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:48.389" starttime="20150623 08:26:48.301"></status>
</kw>
<kw type="foritem" name="${process} =  7848 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor93.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:48.394" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:48.394" starttime="20150623 08:26:48.391"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:48.398" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:48.466" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:48.467" starttime="20150623 08:26:48.396"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:48.468" starttime="20150623 08:26:48.390"></status>
</kw>
<kw type="foritem" name="${process} =  7863 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:48.473" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:48.472" starttime="20150623 08:26:48.470"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:48.477" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:48.549" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:48.550" starttime="20150623 08:26:48.474"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:48.551" starttime="20150623 08:26:48.469"></status>
</kw>
<kw type="foritem" name="${process} =  7881 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:48.556" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:48.555" starttime="20150623 08:26:48.552"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:48.559" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:48.628" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:48.628" starttime="20150623 08:26:48.557"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:48.629" starttime="20150623 08:26:48.551"></status>
</kw>
<kw type="foritem" name="${process} =  7897 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:48.634" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:48.633" starttime="20150623 08:26:48.631"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:48.638" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:48.707" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:48.708" starttime="20150623 08:26:48.635"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:48.709" starttime="20150623 08:26:48.630"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:48.709" starttime="20150623 08:26:45.603"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:48.711" starttime="20150623 08:26:45.447"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:26:48.735" level="INFO">Starting command 'cat tmpfilemonitor93.log'.</msg>
<status status="PASS" endtime="20150623 08:26:48.750" starttime="20150623 08:26:48.732"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:26:48.753" level="INFO">Reading output of command 'cat tmpfilemonitor93.log'.</msg>
<msg timestamp="20150623 08:26:48.788" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:26:48.789" level="INFO">${stdout_string} = [2015-06-23 06:26:21,359][INFO ][Camel (ticket-router) thread #44 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150623 08:26:48.789" starttime="20150623 08:26:48.751"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:26:48.793" level="INFO">Executing command 'rm tmpfilemonitor93.log'.</msg>
<msg timestamp="20150623 08:26:48.875" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:26:48.876" starttime="20150623 08:26:48.791"></status>
</kw>
<msg timestamp="20150623 08:26:48.879" level="INFO">${tailed_text} = [2015-06-23 06:26:21,359][INFO ][Camel (ticket-router) thread #44 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150623 08:26:48.878" starttime="20150623 08:26:45.432"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:48.887" starttime="20150623 08:26:48.881"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:48.898" starttime="20150623 08:26:48.896"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:26:48.904" starttime="20150623 08:26:48.899"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:48.908" starttime="20150623 08:26:48.889"></status>
</kw>
<msg timestamp="20150623 08:26:48.912" level="INFO">${tailed_text} = [2015-06-23 06:26:21,359][INFO ][Camel (ticket-router) thread #44 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150623 08:26:48.910" starttime="20150623 08:26:45.429"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:48.931" starttime="20150623 08:26:48.929"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:48.932" starttime="20150623 08:26:48.922"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:48.939" starttime="20150623 08:26:48.934"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:48.943" starttime="20150623 08:26:48.940"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:48.947" starttime="20150623 08:26:48.944"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:48.948" starttime="20150623 08:26:48.915"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:48.978" starttime="20150623 08:26:48.976"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:48.986" starttime="20150623 08:26:48.979"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:48.989" starttime="20150623 08:26:48.987"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:26:48.993" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:26:48.996" level="INFO">${queryResultSetLines} = 1004553|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:26:48.995" starttime="20150623 08:26:48.991"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:48.999" starttime="20150623 08:26:48.997"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:26:49.002" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:26:49.004" level="INFO">@{queryResultSet} = [ 1004553|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:26:49.003" starttime="20150623 08:26:49.000"></status>
</kw>
<msg timestamp="20150623 08:26:49.007" level="INFO">@{queryRows} = [ 1004553|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:26:49.006" starttime="20150623 08:26:48.969"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:26:49.012" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:26:49.013" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:26:49.013" starttime="20150623 08:26:49.009"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:26:49.017" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:26:49.018" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:26:49.018" starttime="20150623 08:26:49.015"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:26:49.029" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:26:49.030" starttime="20150623 08:26:49.026"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:49.031" starttime="20150623 08:26:49.020"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:49.037" starttime="20150623 08:26:49.032"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:49.039" starttime="20150623 08:26:48.961"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:49.041" starttime="20150623 08:26:44.840"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:49.043" starttime="20150623 08:26:44.834"></status>
</kw>
<msg timestamp="20150623 08:26:49.046" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:26:49.044" starttime="20150623 08:26:44.832"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:26:49.050" level="INFO">Index in the 2. loop: 0</msg>
<status status="PASS" endtime="20150623 08:26:49.051" starttime="20150623 08:26:49.047"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:26:58.055" level="INFO">Slept 9 seconds</msg>
<status status="PASS" endtime="20150623 08:26:58.057" starttime="20150623 08:26:49.052"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:26:58.067" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:26:58.066" starttime="20150623 08:26:58.059"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:58.067" starttime="20150623 08:26:44.831"></status>
</kw>
<kw type="foritem" name="${index} = 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:58.116" starttime="20150623 08:26:58.114"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:58.182" starttime="20150623 08:26:58.123"></status>
</kw>
<msg timestamp="20150623 08:26:58.184" level="INFO">${ssh_connection} = 94</msg>
<status status="PASS" endtime="20150623 08:26:58.183" starttime="20150623 08:26:58.117"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:26:58.195" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:26:58.634" level="INFO">Read output: Last login: Tue Jun 23 06:26:45 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:26:58.636" starttime="20150623 08:26:58.192"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:58.637" starttime="20150623 08:26:58.185"></status>
</kw>
<msg timestamp="20150623 08:26:58.639" level="INFO">${ssh_connection} = 94</msg>
<status status="PASS" endtime="20150623 08:26:58.639" starttime="20150623 08:26:58.106"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:58.650" starttime="20150623 08:26:58.648"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:26:58.654" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor94.log'.</msg>
<status status="PASS" endtime="20150623 08:26:58.658" starttime="20150623 08:26:58.651"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:58.659" starttime="20150623 08:26:58.642"></status>
</kw>
<msg timestamp="20150623 08:26:58.661" level="INFO">${ssh_connection} = 94</msg>
<status status="PASS" endtime="20150623 08:26:58.661" starttime="20150623 08:26:58.094"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:58.681" starttime="20150623 08:26:58.677"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:58.682" starttime="20150623 08:26:58.674"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:26:58.692" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:26:58.694" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:26:58.694" starttime="20150623 08:26:58.690"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:26:58.697" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:26:58.698" starttime="20150623 08:26:58.695"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:58.701" starttime="20150623 08:26:58.699"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:58.709" starttime="20150623 08:26:58.702"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:58.711" starttime="20150623 08:26:58.684"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:58.727" starttime="20150623 08:26:58.725"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:26:58.734" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:26:58.734" starttime="20150623 08:26:58.728"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:26:58.740" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:26:58.741" starttime="20150623 08:26:58.736"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:26:58.751" starttime="20150623 08:26:58.749"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:26:58.753" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:26:58.798" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:26:58.800" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:26:58.799" starttime="20150623 08:26:58.752"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:26:58.803" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:26:58.900" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:26:58.901" level="INFO">${processes_string} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log
  373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
  538 ?        ...</msg>
<status status="PASS" endtime="20150623 08:26:58.901" starttime="20150623 08:26:58.801"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:26:58.907" level="INFO">@{processes_list} = [   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log |   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log |   538 ?  ...</msg>
<status status="PASS" endtime="20150623 08:26:58.906" starttime="20150623 08:26:58.903"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:58.912" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:58.911" starttime="20150623 08:26:58.909"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:58.915" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:58.977" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:58.978" starttime="20150623 08:26:58.913"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:58.979" starttime="20150623 08:26:58.908"></status>
</kw>
<kw type="foritem" name="${process} =   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:58.983" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:58.982" starttime="20150623 08:26:58.980"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:58.986" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:59.054" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:59.055" starttime="20150623 08:26:58.984"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:59.057" starttime="20150623 08:26:58.979"></status>
</kw>
<kw type="foritem" name="${process} =   538 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor77.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:59.062" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:59.061" starttime="20150623 08:26:59.059"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:59.065" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:59.131" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:59.132" starttime="20150623 08:26:59.063"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:59.133" starttime="20150623 08:26:59.058"></status>
</kw>
<kw type="foritem" name="${process} =   553 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:59.137" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:59.136" starttime="20150623 08:26:59.134"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:59.140" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:59.210" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:59.211" starttime="20150623 08:26:59.138"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:59.211" starttime="20150623 08:26:59.133"></status>
</kw>
<kw type="foritem" name="${process} =   745 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor78.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:59.216" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:59.215" starttime="20150623 08:26:59.213"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:59.219" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:59.296" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:59.297" starttime="20150623 08:26:59.217"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:59.298" starttime="20150623 08:26:59.212"></status>
</kw>
<kw type="foritem" name="${process} =   760 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:59.302" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:59.302" starttime="20150623 08:26:59.299"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:59.306" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:59.375" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:59.376" starttime="20150623 08:26:59.304"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:59.377" starttime="20150623 08:26:59.298"></status>
</kw>
<kw type="foritem" name="${process} =   985 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor79.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:59.381" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:59.380" starttime="20150623 08:26:59.378"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:59.384" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:59.462" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:59.463" starttime="20150623 08:26:59.382"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:59.464" starttime="20150623 08:26:59.377"></status>
</kw>
<kw type="foritem" name="${process} =  1000 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:59.468" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:59.468" starttime="20150623 08:26:59.465"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:59.472" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:59.546" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:59.547" starttime="20150623 08:26:59.469"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:59.548" starttime="20150623 08:26:59.464"></status>
</kw>
<kw type="foritem" name="${process} =  1249 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor80.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:59.553" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:59.552" starttime="20150623 08:26:59.550"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:59.556" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:59.626" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:59.627" starttime="20150623 08:26:59.554"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:59.628" starttime="20150623 08:26:59.548"></status>
</kw>
<kw type="foritem" name="${process} =  1264 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:59.632" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:59.631" starttime="20150623 08:26:59.629"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:59.635" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:59.707" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:59.708" starttime="20150623 08:26:59.633"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:59.709" starttime="20150623 08:26:59.628"></status>
</kw>
<kw type="foritem" name="${process} =  1559 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor81.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:59.713" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:59.712" starttime="20150623 08:26:59.710"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:59.716" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:59.796" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:59.797" starttime="20150623 08:26:59.714"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:59.798" starttime="20150623 08:26:59.709"></status>
</kw>
<kw type="foritem" name="${process} =  1574 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:59.803" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:59.802" starttime="20150623 08:26:59.800"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:59.806" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:59.879" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:59.880" starttime="20150623 08:26:59.804"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:59.880" starttime="20150623 08:26:59.798"></status>
</kw>
<kw type="foritem" name="${process} =  1899 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor82.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:59.885" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:59.884" starttime="20150623 08:26:59.882"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:59.888" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:26:59.959" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:26:59.960" starttime="20150623 08:26:59.886"></status>
</kw>
<status status="PASS" endtime="20150623 08:26:59.960" starttime="20150623 08:26:59.881"></status>
</kw>
<kw type="foritem" name="${process} =  1914 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:26:59.965" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:26:59.964" starttime="20150623 08:26:59.962"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:26:59.968" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:00.039" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:00.040" starttime="20150623 08:26:59.966"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:00.042" starttime="20150623 08:26:59.961"></status>
</kw>
<kw type="foritem" name="${process} =  2254 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor83.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:00.047" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:00.046" starttime="20150623 08:27:00.044"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:00.050" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:00.118" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:00.118" starttime="20150623 08:27:00.048"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:00.119" starttime="20150623 08:27:00.043"></status>
</kw>
<kw type="foritem" name="${process} =  2269 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:00.123" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:00.123" starttime="20150623 08:27:00.120"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:00.127" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:00.197" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:00.198" starttime="20150623 08:27:00.125"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:00.199" starttime="20150623 08:27:00.120"></status>
</kw>
<kw type="foritem" name="${process} =  2640 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor84.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:00.203" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:00.202" starttime="20150623 08:27:00.200"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:00.206" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:00.279" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:00.279" starttime="20150623 08:27:00.204"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:00.280" starttime="20150623 08:27:00.199"></status>
</kw>
<kw type="foritem" name="${process} =  2655 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:00.284" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:00.284" starttime="20150623 08:27:00.281"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:00.287" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:00.359" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:00.360" starttime="20150623 08:27:00.285"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:00.361" starttime="20150623 08:27:00.280"></status>
</kw>
<kw type="foritem" name="${process} =  3081 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor85.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:00.365" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:00.365" starttime="20150623 08:27:00.362"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:00.369" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:00.442" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:00.443" starttime="20150623 08:27:00.366"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:00.443" starttime="20150623 08:27:00.361"></status>
</kw>
<kw type="foritem" name="${process} =  3096 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:00.448" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:00.447" starttime="20150623 08:27:00.445"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:00.451" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:00.521" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:00.522" starttime="20150623 08:27:00.449"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:00.523" starttime="20150623 08:27:00.444"></status>
</kw>
<kw type="foritem" name="${process} =  3577 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor86.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:00.527" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:00.526" starttime="20150623 08:27:00.524"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:00.530" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:00.593" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:00.594" starttime="20150623 08:27:00.528"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:00.595" starttime="20150623 08:27:00.523"></status>
</kw>
<kw type="foritem" name="${process} =  3592 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:00.599" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:00.599" starttime="20150623 08:27:00.596"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:00.602" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:00.661" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:00.662" starttime="20150623 08:27:00.600"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:00.663" starttime="20150623 08:27:00.595"></status>
</kw>
<kw type="foritem" name="${process} =  4052 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor87.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:00.667" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:00.667" starttime="20150623 08:27:00.664"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:00.671" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:00.730" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:00.731" starttime="20150623 08:27:00.669"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:00.732" starttime="20150623 08:27:00.663"></status>
</kw>
<kw type="foritem" name="${process} =  4067 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:00.736" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:00.736" starttime="20150623 08:27:00.733"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:00.740" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:00.803" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:00.804" starttime="20150623 08:27:00.737"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:00.805" starttime="20150623 08:27:00.732"></status>
</kw>
<kw type="foritem" name="${process} =  4578 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor88.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:00.809" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:00.808" starttime="20150623 08:27:00.806"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:00.812" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:00.885" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:00.886" starttime="20150623 08:27:00.810"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:00.887" starttime="20150623 08:27:00.805"></status>
</kw>
<kw type="foritem" name="${process} =  4593 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:00.891" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:00.890" starttime="20150623 08:27:00.888"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:00.894" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:00.966" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:00.967" starttime="20150623 08:27:00.892"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:00.967" starttime="20150623 08:27:00.887"></status>
</kw>
<kw type="foritem" name="${process} =  5112 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor89.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:00.972" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:00.971" starttime="20150623 08:27:00.969"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:00.975" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:01.048" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:01.049" starttime="20150623 08:27:00.973"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:01.051" starttime="20150623 08:27:00.968"></status>
</kw>
<kw type="foritem" name="${process} =  5127 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:01.056" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:01.056" starttime="20150623 08:27:01.053"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:01.060" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:01.130" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:01.131" starttime="20150623 08:27:01.058"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:01.132" starttime="20150623 08:27:01.052"></status>
</kw>
<kw type="foritem" name="${process} =  5740 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor90.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:01.137" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:01.136" starttime="20150623 08:27:01.134"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:01.141" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:01.207" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:01.208" starttime="20150623 08:27:01.138"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:01.209" starttime="20150623 08:27:01.133"></status>
</kw>
<kw type="foritem" name="${process} =  5755 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:01.213" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:01.213" starttime="20150623 08:27:01.210"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:01.217" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:01.291" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:01.292" starttime="20150623 08:27:01.215"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:01.293" starttime="20150623 08:27:01.209"></status>
</kw>
<kw type="foritem" name="${process} =  6570 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor91.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:01.297" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:01.297" starttime="20150623 08:27:01.294"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:01.301" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:01.373" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:01.374" starttime="20150623 08:27:01.298"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:01.375" starttime="20150623 08:27:01.293"></status>
</kw>
<kw type="foritem" name="${process} =  6585 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:01.380" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:01.379" starttime="20150623 08:27:01.377"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:01.383" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:01.455" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:01.456" starttime="20150623 08:27:01.381"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:01.457" starttime="20150623 08:27:01.376"></status>
</kw>
<kw type="foritem" name="${process} =  7194 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor92.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:01.462" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:01.461" starttime="20150623 08:27:01.459"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:01.465" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:01.532" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:01.533" starttime="20150623 08:27:01.463"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:01.534" starttime="20150623 08:27:01.458"></status>
</kw>
<kw type="foritem" name="${process} =  7209 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:01.538" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:01.537" starttime="20150623 08:27:01.535"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:01.541" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:01.612" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:01.613" starttime="20150623 08:27:01.539"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:01.614" starttime="20150623 08:27:01.534"></status>
</kw>
<kw type="foritem" name="${process} =  7848 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor93.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:01.618" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:01.617" starttime="20150623 08:27:01.615"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:01.622" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:01.693" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:01.695" starttime="20150623 08:27:01.620"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:01.696" starttime="20150623 08:27:01.614"></status>
</kw>
<kw type="foritem" name="${process} =  7863 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:01.700" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:01.700" starttime="20150623 08:27:01.697"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:01.703" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:01.766" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:01.767" starttime="20150623 08:27:01.701"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:01.768" starttime="20150623 08:27:01.696"></status>
</kw>
<kw type="foritem" name="${process} =  8532 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor94.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:01.773" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:01.772" starttime="20150623 08:27:01.770"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:01.776" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:01.849" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:01.850" starttime="20150623 08:27:01.774"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:01.851" starttime="20150623 08:27:01.769"></status>
</kw>
<kw type="foritem" name="${process} =  8547 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:01.855" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:01.855" starttime="20150623 08:27:01.852"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:01.859" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:01.951" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:01.952" starttime="20150623 08:27:01.857"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:01.953" starttime="20150623 08:27:01.851"></status>
</kw>
<kw type="foritem" name="${process} =  8565 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:01.957" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:01.957" starttime="20150623 08:27:01.954"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:01.961" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:02.073" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:02.074" starttime="20150623 08:27:01.959"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:02.076" starttime="20150623 08:27:01.953"></status>
</kw>
<kw type="foritem" name="${process} =  8581 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:02.081" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:02.080" starttime="20150623 08:27:02.078"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:02.084" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:02.202" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:02.203" starttime="20150623 08:27:02.082"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:02.204" starttime="20150623 08:27:02.077"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:02.205" starttime="20150623 08:26:58.908"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:02.206" starttime="20150623 08:26:58.743"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:27:02.211" level="INFO">Starting command 'cat tmpfilemonitor94.log'.</msg>
<status status="PASS" endtime="20150623 08:27:02.245" starttime="20150623 08:27:02.208"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:27:02.247" level="INFO">Reading output of command 'cat tmpfilemonitor94.log'.</msg>
<msg timestamp="20150623 08:27:02.282" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:27:02.284" level="INFO">${stdout_string} = [2015-06-23 06:26:21,394][INFO ][Camel (ticket-router) thread #44 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:27:02.283" starttime="20150623 08:27:02.246"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:27:02.287" level="INFO">Executing command 'rm tmpfilemonitor94.log'.</msg>
<msg timestamp="20150623 08:27:02.362" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:27:02.363" starttime="20150623 08:27:02.285"></status>
</kw>
<msg timestamp="20150623 08:27:02.367" level="INFO">${tailed_text} = [2015-06-23 06:26:21,394][INFO ][Camel (ticket-router) thread #44 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:27:02.365" starttime="20150623 08:26:58.720"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:02.375" starttime="20150623 08:27:02.368"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:02.384" starttime="20150623 08:27:02.382"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:27:02.387" starttime="20150623 08:27:02.386"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:02.390" starttime="20150623 08:27:02.376"></status>
</kw>
<msg timestamp="20150623 08:27:02.393" level="INFO">${tailed_text} = [2015-06-23 06:26:21,394][INFO ][Camel (ticket-router) thread #44 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:27:02.392" starttime="20150623 08:26:58.713"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:02.414" starttime="20150623 08:27:02.412"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:02.415" starttime="20150623 08:27:02.406"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:02.421" starttime="20150623 08:27:02.416"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:02.425" starttime="20150623 08:27:02.422"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:02.428" starttime="20150623 08:27:02.426"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:02.429" starttime="20150623 08:27:02.401"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:02.457" starttime="20150623 08:27:02.455"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:02.464" starttime="20150623 08:27:02.458"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:02.466" starttime="20150623 08:27:02.465"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:27:02.470" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:27:02.472" level="INFO">${queryResultSetLines} = 1004554|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:27:02.471" starttime="20150623 08:27:02.468"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:02.475" starttime="20150623 08:27:02.473"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:27:02.478" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:27:02.479" level="INFO">@{queryResultSet} = [ 1004554|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:27:02.479" starttime="20150623 08:27:02.476"></status>
</kw>
<msg timestamp="20150623 08:27:02.482" level="INFO">@{queryRows} = [ 1004554|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:27:02.481" starttime="20150623 08:27:02.449"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:27:02.486" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:27:02.487" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:27:02.486" starttime="20150623 08:27:02.483"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:27:02.490" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:27:02.492" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:27:02.491" starttime="20150623 08:27:02.488"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:27:02.501" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:27:02.502" starttime="20150623 08:27:02.499"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:02.503" starttime="20150623 08:27:02.493"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:02.509" starttime="20150623 08:27:02.504"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:02.510" starttime="20150623 08:27:02.442"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:02.511" starttime="20150623 08:26:58.077"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:02.513" starttime="20150623 08:26:58.071"></status>
</kw>
<msg timestamp="20150623 08:27:02.516" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:27:02.514" starttime="20150623 08:26:58.069"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:27:02.519" level="INFO">Index in the 2. loop: 1</msg>
<status status="PASS" endtime="20150623 08:27:02.520" starttime="20150623 08:27:02.517"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:27:11.524" level="INFO">Slept 9 seconds</msg>
<status status="PASS" endtime="20150623 08:27:11.526" starttime="20150623 08:27:02.521"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:27:11.535" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:27:11.534" starttime="20150623 08:27:11.528"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:11.535" starttime="20150623 08:26:58.069"></status>
</kw>
<kw type="foritem" name="${index} = 2">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:11.584" starttime="20150623 08:27:11.582"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:11.648" starttime="20150623 08:27:11.591"></status>
</kw>
<msg timestamp="20150623 08:27:11.650" level="INFO">${ssh_connection} = 95</msg>
<status status="PASS" endtime="20150623 08:27:11.649" starttime="20150623 08:27:11.585"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:27:11.661" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:27:12.113" level="INFO">Read output: Last login: Tue Jun 23 06:26:58 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:27:12.115" starttime="20150623 08:27:11.659"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:12.117" starttime="20150623 08:27:11.651"></status>
</kw>
<msg timestamp="20150623 08:27:12.121" level="INFO">${ssh_connection} = 95</msg>
<status status="PASS" endtime="20150623 08:27:12.120" starttime="20150623 08:27:11.574"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:12.132" starttime="20150623 08:27:12.130"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:27:12.136" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor95.log'.</msg>
<status status="PASS" endtime="20150623 08:27:12.140" starttime="20150623 08:27:12.133"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:12.141" starttime="20150623 08:27:12.123"></status>
</kw>
<msg timestamp="20150623 08:27:12.144" level="INFO">${ssh_connection} = 95</msg>
<status status="PASS" endtime="20150623 08:27:12.143" starttime="20150623 08:27:11.562"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:12.171" starttime="20150623 08:27:12.164"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:12.173" starttime="20150623 08:27:12.157"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:27:12.183" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:27:12.185" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:27:12.185" starttime="20150623 08:27:12.181"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:27:12.188" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:27:12.189" starttime="20150623 08:27:12.187"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:12.192" starttime="20150623 08:27:12.190"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:12.203" starttime="20150623 08:27:12.193"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:12.205" starttime="20150623 08:27:12.175"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:12.221" starttime="20150623 08:27:12.219"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:27:12.228" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:27:12.227" starttime="20150623 08:27:12.222"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:27:12.233" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:27:12.234" starttime="20150623 08:27:12.229"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:12.244" starttime="20150623 08:27:12.241"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:27:12.246" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:27:12.287" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:27:12.288" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:27:12.288" starttime="20150623 08:27:12.245"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:27:12.292" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:27:12.387" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:27:12.388" level="INFO">${processes_string} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log
  373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
  538 ?        ...</msg>
<status status="PASS" endtime="20150623 08:27:12.388" starttime="20150623 08:27:12.289"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:27:12.393" level="INFO">@{processes_list} = [   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log |   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log |   538 ?  ...</msg>
<status status="PASS" endtime="20150623 08:27:12.392" starttime="20150623 08:27:12.390"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:12.398" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:12.398" starttime="20150623 08:27:12.395"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:12.402" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:12.467" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:12.468" starttime="20150623 08:27:12.400"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:12.468" starttime="20150623 08:27:12.395"></status>
</kw>
<kw type="foritem" name="${process} =   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:12.473" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:12.472" starttime="20150623 08:27:12.470"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:12.476" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:12.552" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:12.553" starttime="20150623 08:27:12.474"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:12.553" starttime="20150623 08:27:12.469"></status>
</kw>
<kw type="foritem" name="${process} =   538 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor77.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:12.558" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:12.557" starttime="20150623 08:27:12.555"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:12.561" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:12.623" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:12.624" starttime="20150623 08:27:12.559"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:12.624" starttime="20150623 08:27:12.554"></status>
</kw>
<kw type="foritem" name="${process} =   553 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:12.629" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:12.628" starttime="20150623 08:27:12.626"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:12.632" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:12.693" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:12.694" starttime="20150623 08:27:12.630"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:12.695" starttime="20150623 08:27:12.625"></status>
</kw>
<kw type="foritem" name="${process} =   745 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor78.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:12.699" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:12.699" starttime="20150623 08:27:12.696"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:12.702" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:12.767" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:12.768" starttime="20150623 08:27:12.700"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:12.768" starttime="20150623 08:27:12.695"></status>
</kw>
<kw type="foritem" name="${process} =   760 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:12.773" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:12.772" starttime="20150623 08:27:12.770"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:12.776" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:12.849" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:12.850" starttime="20150623 08:27:12.774"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:12.851" starttime="20150623 08:27:12.769"></status>
</kw>
<kw type="foritem" name="${process} =   985 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor79.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:12.855" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:12.854" starttime="20150623 08:27:12.852"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:12.858" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:12.924" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:12.925" starttime="20150623 08:27:12.856"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:12.926" starttime="20150623 08:27:12.851"></status>
</kw>
<kw type="foritem" name="${process} =  1000 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:12.930" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:12.930" starttime="20150623 08:27:12.927"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:12.933" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:13.014" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:13.015" starttime="20150623 08:27:12.931"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:13.017" starttime="20150623 08:27:12.926"></status>
</kw>
<kw type="foritem" name="${process} =  1249 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor80.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:13.022" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:13.021" starttime="20150623 08:27:13.019"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:13.025" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:13.093" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:13.094" starttime="20150623 08:27:13.023"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:13.095" starttime="20150623 08:27:13.018"></status>
</kw>
<kw type="foritem" name="${process} =  1264 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:13.099" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:13.098" starttime="20150623 08:27:13.096"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:13.102" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:13.175" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:13.176" starttime="20150623 08:27:13.100"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:13.177" starttime="20150623 08:27:13.095"></status>
</kw>
<kw type="foritem" name="${process} =  1559 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor81.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:13.181" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:13.181" starttime="20150623 08:27:13.178"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:13.185" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:13.255" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:13.256" starttime="20150623 08:27:13.183"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:13.257" starttime="20150623 08:27:13.177"></status>
</kw>
<kw type="foritem" name="${process} =  1574 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:13.261" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:13.261" starttime="20150623 08:27:13.258"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:13.265" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:13.333" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:13.334" starttime="20150623 08:27:13.262"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:13.334" starttime="20150623 08:27:13.257"></status>
</kw>
<kw type="foritem" name="${process} =  1899 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor82.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:13.339" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:13.338" starttime="20150623 08:27:13.336"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:13.342" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:13.415" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:13.416" starttime="20150623 08:27:13.340"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:13.416" starttime="20150623 08:27:13.335"></status>
</kw>
<kw type="foritem" name="${process} =  1914 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:13.421" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:13.420" starttime="20150623 08:27:13.418"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:13.424" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:13.495" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:13.496" starttime="20150623 08:27:13.422"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:13.497" starttime="20150623 08:27:13.417"></status>
</kw>
<kw type="foritem" name="${process} =  2254 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor83.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:13.501" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:13.500" starttime="20150623 08:27:13.498"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:13.504" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:13.577" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:13.577" starttime="20150623 08:27:13.502"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:13.578" starttime="20150623 08:27:13.497"></status>
</kw>
<kw type="foritem" name="${process} =  2269 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:13.582" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:13.582" starttime="20150623 08:27:13.579"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:13.586" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:13.656" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:13.657" starttime="20150623 08:27:13.584"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:13.658" starttime="20150623 08:27:13.579"></status>
</kw>
<kw type="foritem" name="${process} =  2640 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor84.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:13.662" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:13.661" starttime="20150623 08:27:13.659"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:13.665" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:13.734" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:13.735" starttime="20150623 08:27:13.663"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:13.736" starttime="20150623 08:27:13.658"></status>
</kw>
<kw type="foritem" name="${process} =  2655 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:13.740" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:13.739" starttime="20150623 08:27:13.737"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:13.743" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:13.817" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:13.817" starttime="20150623 08:27:13.741"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:13.818" starttime="20150623 08:27:13.736"></status>
</kw>
<kw type="foritem" name="${process} =  3081 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor85.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:13.823" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:13.822" starttime="20150623 08:27:13.819"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:13.826" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:13.903" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:13.904" starttime="20150623 08:27:13.824"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:13.905" starttime="20150623 08:27:13.819"></status>
</kw>
<kw type="foritem" name="${process} =  3096 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:13.909" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:13.908" starttime="20150623 08:27:13.906"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:13.912" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:13.987" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:13.988" starttime="20150623 08:27:13.910"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:13.989" starttime="20150623 08:27:13.905"></status>
</kw>
<kw type="foritem" name="${process} =  3577 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor86.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:13.993" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:13.992" starttime="20150623 08:27:13.990"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:13.996" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:14.069" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:14.070" starttime="20150623 08:27:13.994"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:14.072" starttime="20150623 08:27:13.989"></status>
</kw>
<kw type="foritem" name="${process} =  3592 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:14.078" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:14.077" starttime="20150623 08:27:14.074"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:14.081" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:14.158" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:14.159" starttime="20150623 08:27:14.079"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:14.160" starttime="20150623 08:27:14.073"></status>
</kw>
<kw type="foritem" name="${process} =  4052 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor87.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:14.164" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:14.163" starttime="20150623 08:27:14.161"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:14.168" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:14.239" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:14.240" starttime="20150623 08:27:14.165"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:14.241" starttime="20150623 08:27:14.160"></status>
</kw>
<kw type="foritem" name="${process} =  4067 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:14.245" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:14.245" starttime="20150623 08:27:14.242"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:14.249" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:14.320" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:14.321" starttime="20150623 08:27:14.247"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:14.322" starttime="20150623 08:27:14.241"></status>
</kw>
<kw type="foritem" name="${process} =  4578 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor88.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:14.326" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:14.326" starttime="20150623 08:27:14.323"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:14.329" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:14.400" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:14.401" starttime="20150623 08:27:14.327"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:14.402" starttime="20150623 08:27:14.322"></status>
</kw>
<kw type="foritem" name="${process} =  4593 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:14.407" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:14.406" starttime="20150623 08:27:14.403"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:14.410" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:14.472" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:14.473" starttime="20150623 08:27:14.408"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:14.474" starttime="20150623 08:27:14.402"></status>
</kw>
<kw type="foritem" name="${process} =  5112 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor89.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:14.478" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:14.478" starttime="20150623 08:27:14.475"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:14.482" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:14.543" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:14.544" starttime="20150623 08:27:14.479"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:14.545" starttime="20150623 08:27:14.474"></status>
</kw>
<kw type="foritem" name="${process} =  5127 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:14.550" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:14.549" starttime="20150623 08:27:14.546"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:14.553" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:14.620" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:14.621" starttime="20150623 08:27:14.551"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:14.621" starttime="20150623 08:27:14.546"></status>
</kw>
<kw type="foritem" name="${process} =  5740 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor90.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:14.626" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:14.625" starttime="20150623 08:27:14.623"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:14.629" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:14.689" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:14.690" starttime="20150623 08:27:14.627"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:14.691" starttime="20150623 08:27:14.622"></status>
</kw>
<kw type="foritem" name="${process} =  5755 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:14.695" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:14.694" starttime="20150623 08:27:14.692"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:14.698" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:14.763" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:14.764" starttime="20150623 08:27:14.696"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:14.765" starttime="20150623 08:27:14.691"></status>
</kw>
<kw type="foritem" name="${process} =  6570 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor91.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:14.769" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:14.769" starttime="20150623 08:27:14.766"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:14.773" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:14.841" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:14.842" starttime="20150623 08:27:14.771"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:14.843" starttime="20150623 08:27:14.765"></status>
</kw>
<kw type="foritem" name="${process} =  6585 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:14.848" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:14.847" starttime="20150623 08:27:14.844"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:14.851" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:14.923" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:14.924" starttime="20150623 08:27:14.849"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:14.925" starttime="20150623 08:27:14.843"></status>
</kw>
<kw type="foritem" name="${process} =  7194 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor92.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:14.930" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:14.930" starttime="20150623 08:27:14.927"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:14.934" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:15.004" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:15.005" starttime="20150623 08:27:14.932"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:15.007" starttime="20150623 08:27:14.926"></status>
</kw>
<kw type="foritem" name="${process} =  7209 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:15.012" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:15.011" starttime="20150623 08:27:15.009"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:15.015" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:15.095" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:15.096" starttime="20150623 08:27:15.013"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:15.097" starttime="20150623 08:27:15.008"></status>
</kw>
<kw type="foritem" name="${process} =  7848 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor93.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:15.102" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:15.101" starttime="20150623 08:27:15.098"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:15.105" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:15.178" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:15.179" starttime="20150623 08:27:15.103"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:15.179" starttime="20150623 08:27:15.098"></status>
</kw>
<kw type="foritem" name="${process} =  7863 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:15.184" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:15.183" starttime="20150623 08:27:15.181"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:15.187" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:15.274" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:15.275" starttime="20150623 08:27:15.185"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:15.275" starttime="20150623 08:27:15.180"></status>
</kw>
<kw type="foritem" name="${process} =  8532 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor94.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:15.280" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:15.279" starttime="20150623 08:27:15.277"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:15.283" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:15.344" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:15.345" starttime="20150623 08:27:15.281"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:15.346" starttime="20150623 08:27:15.276"></status>
</kw>
<kw type="foritem" name="${process} =  8547 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:15.350" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:15.350" starttime="20150623 08:27:15.347"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:15.354" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:15.417" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:15.418" starttime="20150623 08:27:15.352"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:15.419" starttime="20150623 08:27:15.346"></status>
</kw>
<kw type="foritem" name="${process} =  9249 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor95.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:15.423" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:15.423" starttime="20150623 08:27:15.420"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:15.427" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:15.488" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:15.488" starttime="20150623 08:27:15.425"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:15.489" starttime="20150623 08:27:15.419"></status>
</kw>
<kw type="foritem" name="${process} =  9264 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:15.494" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:15.493" starttime="20150623 08:27:15.491"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:15.497" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:15.560" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:15.561" starttime="20150623 08:27:15.495"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:15.562" starttime="20150623 08:27:15.490"></status>
</kw>
<kw type="foritem" name="${process} =  9282 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:15.567" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:15.566" starttime="20150623 08:27:15.563"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:15.570" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:15.641" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:15.642" starttime="20150623 08:27:15.568"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:15.643" starttime="20150623 08:27:15.562"></status>
</kw>
<kw type="foritem" name="${process} =  9298 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:15.647" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:15.646" starttime="20150623 08:27:15.644"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:15.672" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:15.720" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:15.721" starttime="20150623 08:27:15.648"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:15.722" starttime="20150623 08:27:15.643"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:15.722" starttime="20150623 08:27:12.394"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:15.724" starttime="20150623 08:27:12.236"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:27:15.729" level="INFO">Starting command 'cat tmpfilemonitor95.log'.</msg>
<status status="PASS" endtime="20150623 08:27:15.763" starttime="20150623 08:27:15.726"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:27:15.766" level="INFO">Reading output of command 'cat tmpfilemonitor95.log'.</msg>
<msg timestamp="20150623 08:27:15.801" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:27:15.803" level="INFO">${stdout_string} = [2015-06-23 06:26:33,339][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:27:15.802" starttime="20150623 08:27:15.764"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:27:15.807" level="INFO">Executing command 'rm tmpfilemonitor95.log'.</msg>
<msg timestamp="20150623 08:27:15.882" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:27:15.884" starttime="20150623 08:27:15.804"></status>
</kw>
<msg timestamp="20150623 08:27:15.887" level="INFO">${tailed_text} = [2015-06-23 06:26:33,339][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:27:15.886" starttime="20150623 08:27:12.213"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:15.895" starttime="20150623 08:27:15.888"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:15.904" starttime="20150623 08:27:15.902"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:27:15.911" starttime="20150623 08:27:15.906"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:15.913" starttime="20150623 08:27:15.896"></status>
</kw>
<msg timestamp="20150623 08:27:15.916" level="INFO">${tailed_text} = [2015-06-23 06:26:33,339][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:27:15.915" starttime="20150623 08:27:12.207"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:15.936" starttime="20150623 08:27:15.933"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:15.937" starttime="20150623 08:27:15.927"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:15.943" starttime="20150623 08:27:15.938"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:15.946" starttime="20150623 08:27:15.944"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:15.949" starttime="20150623 08:27:15.947"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:15.951" starttime="20150623 08:27:15.920"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:15.979" starttime="20150623 08:27:15.977"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:15.986" starttime="20150623 08:27:15.980"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:15.989" starttime="20150623 08:27:15.987"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:27:15.993" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:27:15.994" level="INFO">${queryResultSetLines} = 1004555|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:27:15.994" starttime="20150623 08:27:15.990"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:15.997" starttime="20150623 08:27:15.996"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:27:16.000" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:27:16.003" level="INFO">@{queryResultSet} = [ 1004555|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:27:16.001" starttime="20150623 08:27:15.998"></status>
</kw>
<msg timestamp="20150623 08:27:16.006" level="INFO">@{queryRows} = [ 1004555|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:27:16.004" starttime="20150623 08:27:15.971"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:27:16.009" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:27:16.011" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:27:16.010" starttime="20150623 08:27:16.007"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:27:16.014" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:27:16.015" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:27:16.015" starttime="20150623 08:27:16.012"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:27:16.025" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:27:16.025" starttime="20150623 08:27:16.022"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:16.026" starttime="20150623 08:27:16.016"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:16.033" starttime="20150623 08:27:16.027"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:16.034" starttime="20150623 08:27:15.963"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:16.036" starttime="20150623 08:27:11.545"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:16.037" starttime="20150623 08:27:11.539"></status>
</kw>
<msg timestamp="20150623 08:27:16.040" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:27:16.039" starttime="20150623 08:27:11.537"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:27:16.043" level="INFO">Index in the 2. loop: 2</msg>
<status status="PASS" endtime="20150623 08:27:16.044" starttime="20150623 08:27:16.041"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:27:25.049" level="INFO">Slept 9 seconds</msg>
<status status="PASS" endtime="20150623 08:27:25.051" starttime="20150623 08:27:16.045"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:27:25.060" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:27:25.059" starttime="20150623 08:27:25.053"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:25.061" starttime="20150623 08:27:11.536"></status>
</kw>
<kw type="foritem" name="${index} = 3">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:25.109" starttime="20150623 08:27:25.107"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:25.172" starttime="20150623 08:27:25.116"></status>
</kw>
<msg timestamp="20150623 08:27:25.175" level="INFO">${ssh_connection} = 96</msg>
<status status="PASS" endtime="20150623 08:27:25.174" starttime="20150623 08:27:25.110"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:27:25.186" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:27:25.628" level="INFO">Read output: Last login: Tue Jun 23 06:27:11 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:27:25.630" starttime="20150623 08:27:25.184"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:25.631" starttime="20150623 08:27:25.176"></status>
</kw>
<msg timestamp="20150623 08:27:25.634" level="INFO">${ssh_connection} = 96</msg>
<status status="PASS" endtime="20150623 08:27:25.633" starttime="20150623 08:27:25.099"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:25.645" starttime="20150623 08:27:25.642"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:27:25.648" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor96.log'.</msg>
<status status="PASS" endtime="20150623 08:27:25.653" starttime="20150623 08:27:25.646"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:25.654" starttime="20150623 08:27:25.636"></status>
</kw>
<msg timestamp="20150623 08:27:25.656" level="INFO">${ssh_connection} = 96</msg>
<status status="PASS" endtime="20150623 08:27:25.655" starttime="20150623 08:27:25.088"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:25.680" starttime="20150623 08:27:25.674"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:25.682" starttime="20150623 08:27:25.668"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:27:25.692" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:27:25.694" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:27:25.693" starttime="20150623 08:27:25.689"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:27:25.697" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:27:25.698" starttime="20150623 08:27:25.695"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:25.701" starttime="20150623 08:27:25.699"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:25.711" starttime="20150623 08:27:25.702"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:25.712" starttime="20150623 08:27:25.683"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:25.729" starttime="20150623 08:27:25.726"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:27:25.736" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:27:25.735" starttime="20150623 08:27:25.730"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:27:25.741" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:27:25.742" starttime="20150623 08:27:25.737"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:25.752" starttime="20150623 08:27:25.750"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:27:25.754" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:27:25.800" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:27:25.801" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:27:25.800" starttime="20150623 08:27:25.753"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:27:25.802" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:27:25.904" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:27:25.906" level="INFO">${processes_string} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log
  373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
  538 ?        ...</msg>
<status status="PASS" endtime="20150623 08:27:25.905" starttime="20150623 08:27:25.801"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:27:25.910" level="INFO">@{processes_list} = [   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log |   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log |   538 ?  ...</msg>
<status status="PASS" endtime="20150623 08:27:25.909" starttime="20150623 08:27:25.907"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:25.916" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:25.915" starttime="20150623 08:27:25.913"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:25.919" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:25.988" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:25.989" starttime="20150623 08:27:25.917"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:25.989" starttime="20150623 08:27:25.912"></status>
</kw>
<kw type="foritem" name="${process} =   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:25.994" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:25.993" starttime="20150623 08:27:25.991"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:25.997" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:26.068" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:26.069" starttime="20150623 08:27:25.995"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:26.071" starttime="20150623 08:27:25.990"></status>
</kw>
<kw type="foritem" name="${process} =   538 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor77.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:26.076" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:26.075" starttime="20150623 08:27:26.073"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:26.080" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:26.148" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:26.149" starttime="20150623 08:27:26.078"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:26.150" starttime="20150623 08:27:26.072"></status>
</kw>
<kw type="foritem" name="${process} =   553 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:26.154" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:26.153" starttime="20150623 08:27:26.151"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:26.158" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:26.224" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:26.225" starttime="20150623 08:27:26.155"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:26.225" starttime="20150623 08:27:26.150"></status>
</kw>
<kw type="foritem" name="${process} =   745 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor78.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:26.230" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:26.229" starttime="20150623 08:27:26.227"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:26.233" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:26.303" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:26.303" starttime="20150623 08:27:26.231"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:26.304" starttime="20150623 08:27:26.226"></status>
</kw>
<kw type="foritem" name="${process} =   760 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:26.308" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:26.308" starttime="20150623 08:27:26.305"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:26.312" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:26.382" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:26.383" starttime="20150623 08:27:26.310"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:26.384" starttime="20150623 08:27:26.305"></status>
</kw>
<kw type="foritem" name="${process} =   985 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor79.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:26.388" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:26.387" starttime="20150623 08:27:26.385"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:26.391" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:26.461" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:26.462" starttime="20150623 08:27:26.389"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:26.463" starttime="20150623 08:27:26.384"></status>
</kw>
<kw type="foritem" name="${process} =  1000 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:26.467" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:26.467" starttime="20150623 08:27:26.464"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:26.470" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:26.542" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:26.543" starttime="20150623 08:27:26.468"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:26.544" starttime="20150623 08:27:26.463"></status>
</kw>
<kw type="foritem" name="${process} =  1249 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor80.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:26.549" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:26.548" starttime="20150623 08:27:26.545"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:26.552" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:26.622" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:26.623" starttime="20150623 08:27:26.550"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:26.624" starttime="20150623 08:27:26.545"></status>
</kw>
<kw type="foritem" name="${process} =  1264 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:26.628" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:26.627" starttime="20150623 08:27:26.625"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:26.631" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:26.702" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:26.703" starttime="20150623 08:27:26.629"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:26.704" starttime="20150623 08:27:26.624"></status>
</kw>
<kw type="foritem" name="${process} =  1559 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor81.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:26.708" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:26.708" starttime="20150623 08:27:26.705"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:26.711" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:26.783" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:26.784" starttime="20150623 08:27:26.709"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:26.785" starttime="20150623 08:27:26.704"></status>
</kw>
<kw type="foritem" name="${process} =  1574 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:26.789" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:26.789" starttime="20150623 08:27:26.786"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:26.792" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:26.863" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:26.864" starttime="20150623 08:27:26.790"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:26.865" starttime="20150623 08:27:26.785"></status>
</kw>
<kw type="foritem" name="${process} =  1899 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor82.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:26.869" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:26.869" starttime="20150623 08:27:26.866"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:26.873" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:26.943" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:26.944" starttime="20150623 08:27:26.871"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:26.945" starttime="20150623 08:27:26.866"></status>
</kw>
<kw type="foritem" name="${process} =  1914 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:26.949" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:26.948" starttime="20150623 08:27:26.946"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:26.952" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:27.023" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:27.024" starttime="20150623 08:27:26.950"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:27.026" starttime="20150623 08:27:26.945"></status>
</kw>
<kw type="foritem" name="${process} =  2254 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor83.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:27.031" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:27.030" starttime="20150623 08:27:27.028"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:27.034" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:27.103" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:27.104" starttime="20150623 08:27:27.032"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:27.104" starttime="20150623 08:27:27.027"></status>
</kw>
<kw type="foritem" name="${process} =  2269 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:27.109" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:27.108" starttime="20150623 08:27:27.106"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:27.112" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:27.186" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:27.187" starttime="20150623 08:27:27.110"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:27.187" starttime="20150623 08:27:27.105"></status>
</kw>
<kw type="foritem" name="${process} =  2640 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor84.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:27.192" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:27.191" starttime="20150623 08:27:27.189"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:27.195" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:27.267" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:27.268" starttime="20150623 08:27:27.193"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:27.269" starttime="20150623 08:27:27.188"></status>
</kw>
<kw type="foritem" name="${process} =  2655 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:27.273" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:27.272" starttime="20150623 08:27:27.270"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:27.276" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:27.349" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:27.350" starttime="20150623 08:27:27.274"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:27.351" starttime="20150623 08:27:27.269"></status>
</kw>
<kw type="foritem" name="${process} =  3081 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor85.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:27.355" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:27.355" starttime="20150623 08:27:27.352"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:27.358" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:27.432" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:27.433" starttime="20150623 08:27:27.356"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:27.434" starttime="20150623 08:27:27.351"></status>
</kw>
<kw type="foritem" name="${process} =  3096 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:27.439" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:27.438" starttime="20150623 08:27:27.435"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:27.442" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:27.511" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:27.512" starttime="20150623 08:27:27.440"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:27.512" starttime="20150623 08:27:27.434"></status>
</kw>
<kw type="foritem" name="${process} =  3577 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor86.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:27.517" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:27.516" starttime="20150623 08:27:27.514"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:27.520" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:27.590" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:27.591" starttime="20150623 08:27:27.518"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:27.592" starttime="20150623 08:27:27.513"></status>
</kw>
<kw type="foritem" name="${process} =  3592 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:27.597" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:27.596" starttime="20150623 08:27:27.593"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:27.600" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:27.668" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:27.669" starttime="20150623 08:27:27.598"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:27.669" starttime="20150623 08:27:27.592"></status>
</kw>
<kw type="foritem" name="${process} =  4052 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor87.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:27.674" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:27.673" starttime="20150623 08:27:27.671"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:27.677" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:27.747" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:27.748" starttime="20150623 08:27:27.675"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:27.749" starttime="20150623 08:27:27.670"></status>
</kw>
<kw type="foritem" name="${process} =  4067 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:27.754" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:27.753" starttime="20150623 08:27:27.751"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:27.757" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:27.826" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:27.827" starttime="20150623 08:27:27.755"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:27.828" starttime="20150623 08:27:27.750"></status>
</kw>
<kw type="foritem" name="${process} =  4578 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor88.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:27.832" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:27.831" starttime="20150623 08:27:27.829"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:27.835" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:27.906" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:27.907" starttime="20150623 08:27:27.833"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:27.908" starttime="20150623 08:27:27.828"></status>
</kw>
<kw type="foritem" name="${process} =  4593 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:27.912" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:27.912" starttime="20150623 08:27:27.909"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:27.915" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:27.986" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:27.987" starttime="20150623 08:27:27.913"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:27.987" starttime="20150623 08:27:27.908"></status>
</kw>
<kw type="foritem" name="${process} =  5112 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor89.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:27.992" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:27.991" starttime="20150623 08:27:27.989"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:27.995" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:28.065" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:28.067" starttime="20150623 08:27:27.993"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:28.069" starttime="20150623 08:27:27.988"></status>
</kw>
<kw type="foritem" name="${process} =  5127 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:28.074" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:28.073" starttime="20150623 08:27:28.071"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:28.078" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:28.144" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:28.145" starttime="20150623 08:27:28.075"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:28.146" starttime="20150623 08:27:28.070"></status>
</kw>
<kw type="foritem" name="${process} =  5740 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor90.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:28.150" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:28.149" starttime="20150623 08:27:28.147"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:28.153" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:28.225" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:28.226" starttime="20150623 08:27:28.151"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:28.227" starttime="20150623 08:27:28.146"></status>
</kw>
<kw type="foritem" name="${process} =  5755 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:28.231" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:28.231" starttime="20150623 08:27:28.228"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:28.235" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:28.304" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:28.305" starttime="20150623 08:27:28.233"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:28.306" starttime="20150623 08:27:28.227"></status>
</kw>
<kw type="foritem" name="${process} =  6570 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor91.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:28.310" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:28.310" starttime="20150623 08:27:28.307"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:28.314" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:28.391" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:28.392" starttime="20150623 08:27:28.312"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:28.393" starttime="20150623 08:27:28.306"></status>
</kw>
<kw type="foritem" name="${process} =  6585 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:28.397" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:28.396" starttime="20150623 08:27:28.394"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:28.400" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:28.473" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:28.474" starttime="20150623 08:27:28.398"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:28.474" starttime="20150623 08:27:28.393"></status>
</kw>
<kw type="foritem" name="${process} =  7194 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor92.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:28.479" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:28.478" starttime="20150623 08:27:28.476"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:28.482" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:28.556" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:28.557" starttime="20150623 08:27:28.480"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:28.557" starttime="20150623 08:27:28.475"></status>
</kw>
<kw type="foritem" name="${process} =  7209 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:28.562" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:28.561" starttime="20150623 08:27:28.559"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:28.565" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:28.640" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:28.641" starttime="20150623 08:27:28.563"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:28.642" starttime="20150623 08:27:28.558"></status>
</kw>
<kw type="foritem" name="${process} =  7848 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor93.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:28.647" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:28.647" starttime="20150623 08:27:28.644"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:28.651" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:28.721" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:28.722" starttime="20150623 08:27:28.649"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:28.723" starttime="20150623 08:27:28.643"></status>
</kw>
<kw type="foritem" name="${process} =  7863 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:28.727" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:28.727" starttime="20150623 08:27:28.724"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:28.730" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:28.816" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:28.817" starttime="20150623 08:27:28.728"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:28.818" starttime="20150623 08:27:28.723"></status>
</kw>
<kw type="foritem" name="${process} =  8532 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor94.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:28.823" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:28.822" starttime="20150623 08:27:28.819"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:28.826" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:28.897" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:28.898" starttime="20150623 08:27:28.824"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:28.899" starttime="20150623 08:27:28.818"></status>
</kw>
<kw type="foritem" name="${process} =  8547 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:28.903" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:28.903" starttime="20150623 08:27:28.900"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:28.907" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:28.966" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:28.967" starttime="20150623 08:27:28.905"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:28.967" starttime="20150623 08:27:28.899"></status>
</kw>
<kw type="foritem" name="${process} =  9249 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor95.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:28.972" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:28.971" starttime="20150623 08:27:28.969"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:28.975" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:29.044" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:29.045" starttime="20150623 08:27:28.973"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:29.047" starttime="20150623 08:27:28.968"></status>
</kw>
<kw type="foritem" name="${process} =  9264 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:29.052" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:29.052" starttime="20150623 08:27:29.049"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:29.056" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:29.134" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:29.135" starttime="20150623 08:27:29.053"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:29.136" starttime="20150623 08:27:29.048"></status>
</kw>
<kw type="foritem" name="${process} =  9993 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor96.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:29.140" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:29.139" starttime="20150623 08:27:29.137"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:29.143" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:29.217" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:29.219" starttime="20150623 08:27:29.141"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:29.219" starttime="20150623 08:27:29.136"></status>
</kw>
<kw type="foritem" name="${process} = 10008 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:29.225" level="INFO">${pid} = 10008</msg>
<status status="PASS" endtime="20150623 08:27:29.224" starttime="20150623 08:27:29.221"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:29.229" level="INFO">Executing command 'kill -9 10008'.</msg>
<msg timestamp="20150623 08:27:29.296" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:27:29.297" starttime="20150623 08:27:29.226"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:29.298" starttime="20150623 08:27:29.220"></status>
</kw>
<kw type="foritem" name="${process} = 10026 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:29.301" level="INFO">${pid} = 10026</msg>
<status status="PASS" endtime="20150623 08:27:29.301" starttime="20150623 08:27:29.299"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:29.302" level="INFO">Executing command 'kill -9 10026'.</msg>
<msg timestamp="20150623 08:27:29.342" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:29.342" starttime="20150623 08:27:29.301"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:29.343" starttime="20150623 08:27:29.299"></status>
</kw>
<kw type="foritem" name="${process} = 10042 ?        R      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:29.345" level="INFO">${pid} = 10042</msg>
<status status="PASS" endtime="20150623 08:27:29.344" starttime="20150623 08:27:29.343"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:29.347" level="INFO">Executing command 'kill -9 10042'.</msg>
<msg timestamp="20150623 08:27:29.422" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:29.422" starttime="20150623 08:27:29.345"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:29.422" starttime="20150623 08:27:29.343"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:29.422" starttime="20150623 08:27:25.911"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:29.423" starttime="20150623 08:27:25.744"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:27:29.425" level="INFO">Starting command 'cat tmpfilemonitor96.log'.</msg>
<status status="PASS" endtime="20150623 08:27:29.464" starttime="20150623 08:27:29.424"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:27:29.466" level="INFO">Reading output of command 'cat tmpfilemonitor96.log'.</msg>
<msg timestamp="20150623 08:27:29.511" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:27:29.512" level="INFO">${stdout_string} = [2015-06-23 06:26:45,459][INFO ][Camel (ticket-router) thread #53 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:27:29.512" starttime="20150623 08:27:29.465"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:27:29.514" level="INFO">Executing command 'rm tmpfilemonitor96.log'.</msg>
<msg timestamp="20150623 08:27:29.599" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:27:29.599" starttime="20150623 08:27:29.513"></status>
</kw>
<msg timestamp="20150623 08:27:29.601" level="INFO">${tailed_text} = [2015-06-23 06:26:45,459][INFO ][Camel (ticket-router) thread #53 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:27:29.600" starttime="20150623 08:27:25.721"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:29.604" starttime="20150623 08:27:29.601"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:29.609" starttime="20150623 08:27:29.608"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:27:29.612" starttime="20150623 08:27:29.610"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:29.613" starttime="20150623 08:27:29.605"></status>
</kw>
<msg timestamp="20150623 08:27:29.614" level="INFO">${tailed_text} = [2015-06-23 06:26:45,459][INFO ][Camel (ticket-router) thread #53 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:27:29.614" starttime="20150623 08:27:25.715"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:29.630" starttime="20150623 08:27:29.629"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:29.630" starttime="20150623 08:27:29.619"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:29.633" starttime="20150623 08:27:29.631"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:29.635" starttime="20150623 08:27:29.634"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:29.636" starttime="20150623 08:27:29.635"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:29.637" starttime="20150623 08:27:29.616"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:29.650" starttime="20150623 08:27:29.649"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:29.657" starttime="20150623 08:27:29.650"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:29.660" starttime="20150623 08:27:29.659"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:27:29.664" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:27:29.666" level="INFO">${queryResultSetLines} = 1004556|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:27:29.665" starttime="20150623 08:27:29.662"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:29.669" starttime="20150623 08:27:29.667"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:27:29.672" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:27:29.673" level="INFO">@{queryResultSet} = [ 1004556|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:27:29.672" starttime="20150623 08:27:29.670"></status>
</kw>
<msg timestamp="20150623 08:27:29.676" level="INFO">@{queryRows} = [ 1004556|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:27:29.675" starttime="20150623 08:27:29.646"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:27:29.679" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:27:29.681" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:27:29.680" starttime="20150623 08:27:29.677"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:27:29.684" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:27:29.685" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:27:29.684" starttime="20150623 08:27:29.682"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:27:29.694" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:27:29.695" starttime="20150623 08:27:29.692"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:29.696" starttime="20150623 08:27:29.686"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:29.702" starttime="20150623 08:27:29.697"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:29.703" starttime="20150623 08:27:29.643"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:29.704" starttime="20150623 08:27:25.070"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:29.706" starttime="20150623 08:27:25.065"></status>
</kw>
<msg timestamp="20150623 08:27:29.709" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:27:29.708" starttime="20150623 08:27:25.063"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:27:29.712" level="INFO">Index in the 2. loop: 3</msg>
<status status="PASS" endtime="20150623 08:27:29.713" starttime="20150623 08:27:29.710"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:27:38.718" level="INFO">Slept 9 seconds</msg>
<status status="PASS" endtime="20150623 08:27:38.719" starttime="20150623 08:27:29.714"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:27:38.730" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:27:38.729" starttime="20150623 08:27:38.721"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:38.731" starttime="20150623 08:27:25.062"></status>
</kw>
<kw type="foritem" name="${index} = 4">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:38.781" starttime="20150623 08:27:38.780"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:38.846" starttime="20150623 08:27:38.789"></status>
</kw>
<msg timestamp="20150623 08:27:38.848" level="INFO">${ssh_connection} = 97</msg>
<status status="PASS" endtime="20150623 08:27:38.847" starttime="20150623 08:27:38.783"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:27:38.859" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:27:39.289" level="INFO">Read output: Last login: Tue Jun 23 06:27:25 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:27:39.291" starttime="20150623 08:27:38.856"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:39.293" starttime="20150623 08:27:38.849"></status>
</kw>
<msg timestamp="20150623 08:27:39.297" level="INFO">${ssh_connection} = 97</msg>
<status status="PASS" endtime="20150623 08:27:39.295" starttime="20150623 08:27:38.771"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:39.303" starttime="20150623 08:27:39.302"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:27:39.305" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor97.log'.</msg>
<status status="PASS" endtime="20150623 08:27:39.308" starttime="20150623 08:27:39.304"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:39.309" starttime="20150623 08:27:39.299"></status>
</kw>
<msg timestamp="20150623 08:27:39.310" level="INFO">${ssh_connection} = 97</msg>
<status status="PASS" endtime="20150623 08:27:39.309" starttime="20150623 08:27:38.760"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:39.323" starttime="20150623 08:27:39.318"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:39.325" starttime="20150623 08:27:39.316"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:27:39.336" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:27:39.338" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:27:39.337" starttime="20150623 08:27:39.333"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:27:39.340" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:27:39.341" starttime="20150623 08:27:39.339"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:39.344" starttime="20150623 08:27:39.342"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:39.354" starttime="20150623 08:27:39.345"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:39.355" starttime="20150623 08:27:39.327"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:39.372" starttime="20150623 08:27:39.369"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:27:39.379" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:27:39.378" starttime="20150623 08:27:39.373"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:27:39.384" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:27:39.385" starttime="20150623 08:27:39.380"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:39.394" starttime="20150623 08:27:39.392"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:27:39.397" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:27:39.444" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:27:39.446" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:27:39.445" starttime="20150623 08:27:39.396"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:27:39.449" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:27:39.548" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:27:39.550" level="INFO">${processes_string} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log
  373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
  538 ?        ...</msg>
<status status="PASS" endtime="20150623 08:27:39.550" starttime="20150623 08:27:39.447"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:27:39.555" level="INFO">@{processes_list} = [   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log |   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log |   538 ?  ...</msg>
<status status="PASS" endtime="20150623 08:27:39.554" starttime="20150623 08:27:39.552"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:39.561" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:39.560" starttime="20150623 08:27:39.558"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:39.564" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:39.630" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:39.630" starttime="20150623 08:27:39.562"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:39.631" starttime="20150623 08:27:39.557"></status>
</kw>
<kw type="foritem" name="${process} =   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:39.635" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:39.635" starttime="20150623 08:27:39.632"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:39.639" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:39.710" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:39.711" starttime="20150623 08:27:39.637"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:39.712" starttime="20150623 08:27:39.632"></status>
</kw>
<kw type="foritem" name="${process} =   538 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor77.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:39.716" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:39.715" starttime="20150623 08:27:39.713"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:39.719" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:39.791" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:39.792" starttime="20150623 08:27:39.717"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:39.792" starttime="20150623 08:27:39.712"></status>
</kw>
<kw type="foritem" name="${process} =   553 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:39.817" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:39.816" starttime="20150623 08:27:39.814"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:39.820" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:39.873" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:39.874" starttime="20150623 08:27:39.818"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:39.874" starttime="20150623 08:27:39.793"></status>
</kw>
<kw type="foritem" name="${process} =   745 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor78.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:39.879" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:39.878" starttime="20150623 08:27:39.876"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:39.882" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:39.955" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:39.956" starttime="20150623 08:27:39.880"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:39.957" starttime="20150623 08:27:39.875"></status>
</kw>
<kw type="foritem" name="${process} =   760 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:39.961" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:39.960" starttime="20150623 08:27:39.958"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:39.964" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:40.041" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:40.042" starttime="20150623 08:27:39.962"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:40.043" starttime="20150623 08:27:39.957"></status>
</kw>
<kw type="foritem" name="${process} =   985 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor79.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:40.048" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:40.048" starttime="20150623 08:27:40.045"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:40.052" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:40.121" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:40.122" starttime="20150623 08:27:40.050"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:40.123" starttime="20150623 08:27:40.044"></status>
</kw>
<kw type="foritem" name="${process} =  1000 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:40.127" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:40.126" starttime="20150623 08:27:40.124"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:40.130" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:40.202" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:40.203" starttime="20150623 08:27:40.128"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:40.204" starttime="20150623 08:27:40.123"></status>
</kw>
<kw type="foritem" name="${process} =  1249 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor80.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:40.208" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:40.208" starttime="20150623 08:27:40.205"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:40.211" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:40.281" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:40.282" starttime="20150623 08:27:40.209"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:40.283" starttime="20150623 08:27:40.204"></status>
</kw>
<kw type="foritem" name="${process} =  1264 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:40.287" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:40.286" starttime="20150623 08:27:40.284"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:40.290" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:40.361" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:40.362" starttime="20150623 08:27:40.288"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:40.363" starttime="20150623 08:27:40.283"></status>
</kw>
<kw type="foritem" name="${process} =  1559 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor81.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:40.367" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:40.366" starttime="20150623 08:27:40.364"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:40.370" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:40.441" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:40.442" starttime="20150623 08:27:40.368"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:40.442" starttime="20150623 08:27:40.363"></status>
</kw>
<kw type="foritem" name="${process} =  1574 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:40.447" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:40.446" starttime="20150623 08:27:40.444"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:40.450" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:40.520" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:40.521" starttime="20150623 08:27:40.448"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:40.522" starttime="20150623 08:27:40.443"></status>
</kw>
<kw type="foritem" name="${process} =  1899 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor82.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:40.526" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:40.525" starttime="20150623 08:27:40.523"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:40.529" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:40.605" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:40.606" starttime="20150623 08:27:40.527"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:40.607" starttime="20150623 08:27:40.522"></status>
</kw>
<kw type="foritem" name="${process} =  1914 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:40.611" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:40.610" starttime="20150623 08:27:40.608"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:40.614" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:40.683" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:40.684" starttime="20150623 08:27:40.612"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:40.685" starttime="20150623 08:27:40.607"></status>
</kw>
<kw type="foritem" name="${process} =  2254 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor83.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:40.689" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:40.688" starttime="20150623 08:27:40.686"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:40.692" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:40.763" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:40.764" starttime="20150623 08:27:40.690"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:40.764" starttime="20150623 08:27:40.685"></status>
</kw>
<kw type="foritem" name="${process} =  2269 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:40.769" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:40.768" starttime="20150623 08:27:40.766"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:40.772" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:40.842" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:40.843" starttime="20150623 08:27:40.770"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:40.844" starttime="20150623 08:27:40.765"></status>
</kw>
<kw type="foritem" name="${process} =  2640 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor84.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:40.848" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:40.848" starttime="20150623 08:27:40.845"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:40.851" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:40.932" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:40.933" starttime="20150623 08:27:40.849"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:40.933" starttime="20150623 08:27:40.844"></status>
</kw>
<kw type="foritem" name="${process} =  2655 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:40.938" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:40.937" starttime="20150623 08:27:40.935"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:40.941" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:41.011" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:41.013" starttime="20150623 08:27:40.939"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:41.014" starttime="20150623 08:27:40.934"></status>
</kw>
<kw type="foritem" name="${process} =  3081 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor85.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:41.019" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:41.019" starttime="20150623 08:27:41.016"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:41.023" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:41.090" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:41.092" starttime="20150623 08:27:41.020"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:41.092" starttime="20150623 08:27:41.015"></status>
</kw>
<kw type="foritem" name="${process} =  3096 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:41.097" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:41.096" starttime="20150623 08:27:41.094"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:41.100" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:41.173" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:41.174" starttime="20150623 08:27:41.098"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:41.175" starttime="20150623 08:27:41.093"></status>
</kw>
<kw type="foritem" name="${process} =  3577 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor86.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:41.179" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:41.178" starttime="20150623 08:27:41.176"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:41.182" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:41.252" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:41.253" starttime="20150623 08:27:41.180"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:41.254" starttime="20150623 08:27:41.175"></status>
</kw>
<kw type="foritem" name="${process} =  3592 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:41.258" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:41.257" starttime="20150623 08:27:41.255"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:41.261" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:41.332" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:41.332" starttime="20150623 08:27:41.259"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:41.333" starttime="20150623 08:27:41.254"></status>
</kw>
<kw type="foritem" name="${process} =  4052 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor87.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:41.338" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:41.337" starttime="20150623 08:27:41.335"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:41.341" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:41.415" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:41.416" starttime="20150623 08:27:41.339"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:41.417" starttime="20150623 08:27:41.334"></status>
</kw>
<kw type="foritem" name="${process} =  4067 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:41.422" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:41.421" starttime="20150623 08:27:41.418"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:41.425" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:41.497" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:41.498" starttime="20150623 08:27:41.423"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:41.498" starttime="20150623 08:27:41.417"></status>
</kw>
<kw type="foritem" name="${process} =  4578 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor88.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:41.503" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:41.502" starttime="20150623 08:27:41.500"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:41.506" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:41.584" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:41.585" starttime="20150623 08:27:41.504"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:41.585" starttime="20150623 08:27:41.499"></status>
</kw>
<kw type="foritem" name="${process} =  4593 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:41.590" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:41.589" starttime="20150623 08:27:41.587"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:41.593" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:41.665" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:41.666" starttime="20150623 08:27:41.591"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:41.666" starttime="20150623 08:27:41.586"></status>
</kw>
<kw type="foritem" name="${process} =  5112 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor89.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:41.671" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:41.670" starttime="20150623 08:27:41.668"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:41.674" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:41.744" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:41.744" starttime="20150623 08:27:41.672"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:41.745" starttime="20150623 08:27:41.667"></status>
</kw>
<kw type="foritem" name="${process} =  5127 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:41.747" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:41.746" starttime="20150623 08:27:41.745"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:41.748" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:41.823" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:41.824" starttime="20150623 08:27:41.747"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:41.824" starttime="20150623 08:27:41.745"></status>
</kw>
<kw type="foritem" name="${process} =  5740 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor90.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:41.826" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:41.826" starttime="20150623 08:27:41.825"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:41.827" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:41.903" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:41.903" starttime="20150623 08:27:41.826"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:41.904" starttime="20150623 08:27:41.824"></status>
</kw>
<kw type="foritem" name="${process} =  5755 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:41.909" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:41.908" starttime="20150623 08:27:41.906"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:41.912" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:41.982" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:41.983" starttime="20150623 08:27:41.910"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:41.984" starttime="20150623 08:27:41.905"></status>
</kw>
<kw type="foritem" name="${process} =  6570 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor91.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:41.988" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:41.987" starttime="20150623 08:27:41.985"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:41.991" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:42.061" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:42.062" starttime="20150623 08:27:41.989"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:42.064" starttime="20150623 08:27:41.984"></status>
</kw>
<kw type="foritem" name="${process} =  6585 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:42.069" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:42.069" starttime="20150623 08:27:42.066"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:42.073" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:42.141" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:42.142" starttime="20150623 08:27:42.071"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:42.143" starttime="20150623 08:27:42.065"></status>
</kw>
<kw type="foritem" name="${process} =  7194 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor92.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:42.148" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:42.147" starttime="20150623 08:27:42.145"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:42.151" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:42.221" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:42.222" starttime="20150623 08:27:42.149"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:42.223" starttime="20150623 08:27:42.144"></status>
</kw>
<kw type="foritem" name="${process} =  7209 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:42.227" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:42.226" starttime="20150623 08:27:42.224"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:42.231" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:42.300" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:42.301" starttime="20150623 08:27:42.228"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:42.302" starttime="20150623 08:27:42.223"></status>
</kw>
<kw type="foritem" name="${process} =  7848 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor93.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:42.306" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:42.306" starttime="20150623 08:27:42.303"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:42.310" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:42.380" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:42.381" starttime="20150623 08:27:42.308"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:42.381" starttime="20150623 08:27:42.302"></status>
</kw>
<kw type="foritem" name="${process} =  7863 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:42.386" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:42.385" starttime="20150623 08:27:42.383"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:42.389" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:42.460" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:42.461" starttime="20150623 08:27:42.387"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:42.462" starttime="20150623 08:27:42.382"></status>
</kw>
<kw type="foritem" name="${process} =  8532 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor94.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:42.467" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:42.466" starttime="20150623 08:27:42.464"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:42.470" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:42.539" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:42.540" starttime="20150623 08:27:42.468"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:42.541" starttime="20150623 08:27:42.463"></status>
</kw>
<kw type="foritem" name="${process} =  8547 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:42.545" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:42.544" starttime="20150623 08:27:42.542"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:42.548" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:42.621" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:42.621" starttime="20150623 08:27:42.546"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:42.622" starttime="20150623 08:27:42.541"></status>
</kw>
<kw type="foritem" name="${process} =  9249 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor95.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:42.626" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:42.626" starttime="20150623 08:27:42.623"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:42.630" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:42.702" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:42.703" starttime="20150623 08:27:42.628"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:42.704" starttime="20150623 08:27:42.623"></status>
</kw>
<kw type="foritem" name="${process} =  9264 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:42.709" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:42.708" starttime="20150623 08:27:42.706"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:42.712" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:42.783" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:42.784" starttime="20150623 08:27:42.710"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:42.785" starttime="20150623 08:27:42.705"></status>
</kw>
<kw type="foritem" name="${process} = 10769 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor97.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:42.789" level="INFO">${pid} = 10769</msg>
<status status="PASS" endtime="20150623 08:27:42.789" starttime="20150623 08:27:42.786"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:42.792" level="INFO">Executing command 'kill -9 10769'.</msg>
<msg timestamp="20150623 08:27:42.864" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:27:42.865" starttime="20150623 08:27:42.790"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:42.866" starttime="20150623 08:27:42.785"></status>
</kw>
<kw type="foritem" name="${process} = 10784 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:42.871" level="INFO">${pid} = 10784</msg>
<status status="PASS" endtime="20150623 08:27:42.870" starttime="20150623 08:27:42.867"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:42.874" level="INFO">Executing command 'kill -9 10784'.</msg>
<msg timestamp="20150623 08:27:42.946" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:27:42.947" starttime="20150623 08:27:42.872"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:42.948" starttime="20150623 08:27:42.867"></status>
</kw>
<kw type="foritem" name="${process} = 10802 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:42.952" level="INFO">${pid} = 10802</msg>
<status status="PASS" endtime="20150623 08:27:42.952" starttime="20150623 08:27:42.949"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:42.956" level="INFO">Executing command 'kill -9 10802'.</msg>
<msg timestamp="20150623 08:27:43.029" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:43.030" starttime="20150623 08:27:42.954"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:43.031" starttime="20150623 08:27:42.949"></status>
</kw>
<kw type="foritem" name="${process} = 10818 ?        R      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:43.036" level="INFO">${pid} = 10818</msg>
<status status="PASS" endtime="20150623 08:27:43.036" starttime="20150623 08:27:43.033"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:43.040" level="INFO">Executing command 'kill -9 10818'.</msg>
<msg timestamp="20150623 08:27:43.110" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:43.111" starttime="20150623 08:27:43.038"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:43.112" starttime="20150623 08:27:43.032"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:43.112" starttime="20150623 08:27:39.556"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:43.114" starttime="20150623 08:27:39.387"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:27:43.118" level="INFO">Starting command 'cat tmpfilemonitor97.log'.</msg>
<status status="PASS" endtime="20150623 08:27:43.153" starttime="20150623 08:27:43.116"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:27:43.155" level="INFO">Reading output of command 'cat tmpfilemonitor97.log'.</msg>
<msg timestamp="20150623 08:27:43.198" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:27:43.199" level="INFO">${stdout_string} = [2015-06-23 06:26:58,746][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:27:43.199" starttime="20150623 08:27:43.154"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:27:43.203" level="INFO">Executing command 'rm tmpfilemonitor97.log'.</msg>
<msg timestamp="20150623 08:27:43.273" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:27:43.274" starttime="20150623 08:27:43.201"></status>
</kw>
<msg timestamp="20150623 08:27:43.277" level="INFO">${tailed_text} = [2015-06-23 06:26:58,746][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:27:43.276" starttime="20150623 08:27:39.364"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:43.285" starttime="20150623 08:27:43.278"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:43.294" starttime="20150623 08:27:43.292"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:27:43.301" starttime="20150623 08:27:43.296"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:43.302" starttime="20150623 08:27:43.287"></status>
</kw>
<msg timestamp="20150623 08:27:43.306" level="INFO">${tailed_text} = [2015-06-23 06:26:58,746][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:27:43.303" starttime="20150623 08:27:39.358"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:43.323" starttime="20150623 08:27:43.321"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:43.324" starttime="20150623 08:27:43.315"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:43.330" starttime="20150623 08:27:43.325"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:43.334" starttime="20150623 08:27:43.331"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:43.337" starttime="20150623 08:27:43.335"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:43.338" starttime="20150623 08:27:43.309"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:43.365" starttime="20150623 08:27:43.364"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:43.373" starttime="20150623 08:27:43.366"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:43.376" starttime="20150623 08:27:43.374"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:27:43.380" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:27:43.382" level="INFO">${queryResultSetLines} = 1004557|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:27:43.381" starttime="20150623 08:27:43.378"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:43.385" starttime="20150623 08:27:43.383"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:27:43.388" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:27:43.389" level="INFO">@{queryResultSet} = [ 1004557|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:27:43.388" starttime="20150623 08:27:43.386"></status>
</kw>
<msg timestamp="20150623 08:27:43.391" level="INFO">@{queryRows} = [ 1004557|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:27:43.391" starttime="20150623 08:27:43.358"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:27:43.395" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:27:43.396" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:27:43.396" starttime="20150623 08:27:43.392"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:27:43.399" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:27:43.401" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:27:43.400" starttime="20150623 08:27:43.397"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:27:43.410" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:27:43.411" starttime="20150623 08:27:43.408"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:43.412" starttime="20150623 08:27:43.402"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:43.418" starttime="20150623 08:27:43.413"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:43.419" starttime="20150623 08:27:43.350"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:43.420" starttime="20150623 08:27:38.742"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:43.422" starttime="20150623 08:27:38.735"></status>
</kw>
<msg timestamp="20150623 08:27:43.425" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:27:43.423" starttime="20150623 08:27:38.733"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:27:43.428" level="INFO">Index in the 2. loop: 4</msg>
<status status="PASS" endtime="20150623 08:27:43.429" starttime="20150623 08:27:43.426"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:27:52.433" level="INFO">Slept 9 seconds</msg>
<status status="PASS" endtime="20150623 08:27:52.435" starttime="20150623 08:27:43.430"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:27:52.443" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:27:52.443" starttime="20150623 08:27:52.437"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:52.444" starttime="20150623 08:27:38.732"></status>
</kw>
<kw type="foritem" name="${index} = 5">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:52.493" starttime="20150623 08:27:52.491"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:52.554" starttime="20150623 08:27:52.500"></status>
</kw>
<msg timestamp="20150623 08:27:52.556" level="INFO">${ssh_connection} = 98</msg>
<status status="PASS" endtime="20150623 08:27:52.555" starttime="20150623 08:27:52.494"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:27:52.567" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:27:52.917" level="INFO">Read output: Last login: Tue Jun 23 06:27:39 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:27:52.918" starttime="20150623 08:27:52.565"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:52.919" starttime="20150623 08:27:52.558"></status>
</kw>
<msg timestamp="20150623 08:27:52.922" level="INFO">${ssh_connection} = 98</msg>
<status status="PASS" endtime="20150623 08:27:52.921" starttime="20150623 08:27:52.482"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:52.934" starttime="20150623 08:27:52.931"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:27:52.937" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor98.log'.</msg>
<status status="PASS" endtime="20150623 08:27:52.941" starttime="20150623 08:27:52.935"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:52.942" starttime="20150623 08:27:52.925"></status>
</kw>
<msg timestamp="20150623 08:27:52.944" level="INFO">${ssh_connection} = 98</msg>
<status status="PASS" endtime="20150623 08:27:52.944" starttime="20150623 08:27:52.471"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:52.969" starttime="20150623 08:27:52.962"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:52.971" starttime="20150623 08:27:52.957"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:27:52.981" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:27:52.983" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:27:52.982" starttime="20150623 08:27:52.978"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:27:52.986" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:27:52.987" starttime="20150623 08:27:52.984"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:52.990" starttime="20150623 08:27:52.988"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:52.999" starttime="20150623 08:27:52.991"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:53.001" starttime="20150623 08:27:52.972"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:53.018" starttime="20150623 08:27:53.016"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:27:53.025" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:27:53.025" starttime="20150623 08:27:53.019"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:27:53.031" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:27:53.032" starttime="20150623 08:27:53.026"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:53.041" starttime="20150623 08:27:53.039"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:27:53.044" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:27:53.088" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:27:53.090" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:27:53.089" starttime="20150623 08:27:53.043"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:27:53.093" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:27:53.190" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:27:53.191" level="INFO">${processes_string} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log
  373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
  538 ?        ...</msg>
<status status="PASS" endtime="20150623 08:27:53.191" starttime="20150623 08:27:53.091"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:27:53.196" level="INFO">@{processes_list} = [   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log |   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log |   538 ?  ...</msg>
<status status="PASS" endtime="20150623 08:27:53.195" starttime="20150623 08:27:53.193"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:53.202" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:53.201" starttime="20150623 08:27:53.199"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:53.205" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:53.275" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:53.276" starttime="20150623 08:27:53.203"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:53.276" starttime="20150623 08:27:53.198"></status>
</kw>
<kw type="foritem" name="${process} =   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:53.281" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:53.280" starttime="20150623 08:27:53.278"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:53.284" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:53.354" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:53.355" starttime="20150623 08:27:53.282"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:53.355" starttime="20150623 08:27:53.277"></status>
</kw>
<kw type="foritem" name="${process} =   538 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor77.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:53.360" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:53.359" starttime="20150623 08:27:53.357"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:53.363" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:53.434" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:53.435" starttime="20150623 08:27:53.361"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:53.436" starttime="20150623 08:27:53.356"></status>
</kw>
<kw type="foritem" name="${process} =   553 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:53.440" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:53.439" starttime="20150623 08:27:53.437"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:53.443" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:53.513" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:53.514" starttime="20150623 08:27:53.441"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:53.515" starttime="20150623 08:27:53.436"></status>
</kw>
<kw type="foritem" name="${process} =   745 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor78.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:53.519" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:53.518" starttime="20150623 08:27:53.516"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:53.522" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:53.594" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:53.595" starttime="20150623 08:27:53.520"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:53.596" starttime="20150623 08:27:53.515"></status>
</kw>
<kw type="foritem" name="${process} =   760 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:53.600" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:53.599" starttime="20150623 08:27:53.597"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:53.603" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:53.674" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:53.675" starttime="20150623 08:27:53.601"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:53.675" starttime="20150623 08:27:53.596"></status>
</kw>
<kw type="foritem" name="${process} =   985 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor79.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:53.680" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:53.679" starttime="20150623 08:27:53.677"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:53.683" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:53.754" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:53.755" starttime="20150623 08:27:53.681"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:53.755" starttime="20150623 08:27:53.676"></status>
</kw>
<kw type="foritem" name="${process} =  1000 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:53.760" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:53.759" starttime="20150623 08:27:53.757"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:53.763" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:53.833" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:53.834" starttime="20150623 08:27:53.761"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:53.834" starttime="20150623 08:27:53.756"></status>
</kw>
<kw type="foritem" name="${process} =  1249 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor80.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:53.839" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:53.838" starttime="20150623 08:27:53.836"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:53.842" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:53.914" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:53.915" starttime="20150623 08:27:53.840"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:53.915" starttime="20150623 08:27:53.835"></status>
</kw>
<kw type="foritem" name="${process} =  1264 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:53.920" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:53.919" starttime="20150623 08:27:53.917"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:53.923" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:53.994" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:53.995" starttime="20150623 08:27:53.921"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:53.996" starttime="20150623 08:27:53.916"></status>
</kw>
<kw type="foritem" name="${process} =  1559 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor81.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:54.001" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:54.000" starttime="20150623 08:27:53.997"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:54.004" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:54.074" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:54.075" starttime="20150623 08:27:54.002"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:54.076" starttime="20150623 08:27:53.996"></status>
</kw>
<kw type="foritem" name="${process} =  1574 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:54.082" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:54.081" starttime="20150623 08:27:54.078"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:54.085" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:54.157" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:54.158" starttime="20150623 08:27:54.083"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:54.158" starttime="20150623 08:27:54.077"></status>
</kw>
<kw type="foritem" name="${process} =  1899 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor82.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:54.163" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:54.162" starttime="20150623 08:27:54.160"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:54.166" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:54.245" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:54.246" starttime="20150623 08:27:54.164"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:54.247" starttime="20150623 08:27:54.159"></status>
</kw>
<kw type="foritem" name="${process} =  1914 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:54.251" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:54.250" starttime="20150623 08:27:54.248"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:54.254" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:54.323" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:54.324" starttime="20150623 08:27:54.252"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:54.324" starttime="20150623 08:27:54.247"></status>
</kw>
<kw type="foritem" name="${process} =  2254 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor83.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:54.329" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:54.328" starttime="20150623 08:27:54.326"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:54.332" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:54.400" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:54.400" starttime="20150623 08:27:54.330"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:54.401" starttime="20150623 08:27:54.325"></status>
</kw>
<kw type="foritem" name="${process} =  2269 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:54.406" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:54.405" starttime="20150623 08:27:54.402"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:54.409" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:54.476" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:54.477" starttime="20150623 08:27:54.407"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:54.478" starttime="20150623 08:27:54.402"></status>
</kw>
<kw type="foritem" name="${process} =  2640 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor84.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:54.482" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:54.481" starttime="20150623 08:27:54.479"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:54.485" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:54.560" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:54.561" starttime="20150623 08:27:54.483"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:54.562" starttime="20150623 08:27:54.478"></status>
</kw>
<kw type="foritem" name="${process} =  2655 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:54.566" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:54.565" starttime="20150623 08:27:54.563"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:54.569" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:54.645" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:54.646" starttime="20150623 08:27:54.567"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:54.647" starttime="20150623 08:27:54.562"></status>
</kw>
<kw type="foritem" name="${process} =  3081 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor85.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:54.670" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:54.669" starttime="20150623 08:27:54.648"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:54.674" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:54.723" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:54.724" starttime="20150623 08:27:54.672"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:54.725" starttime="20150623 08:27:54.647"></status>
</kw>
<kw type="foritem" name="${process} =  3096 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:54.729" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:54.728" starttime="20150623 08:27:54.726"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:54.732" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:54.801" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:54.802" starttime="20150623 08:27:54.730"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:54.802" starttime="20150623 08:27:54.725"></status>
</kw>
<kw type="foritem" name="${process} =  3577 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor86.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:54.807" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:54.806" starttime="20150623 08:27:54.804"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:54.810" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:54.879" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:54.880" starttime="20150623 08:27:54.808"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:54.881" starttime="20150623 08:27:54.803"></status>
</kw>
<kw type="foritem" name="${process} =  3592 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:54.885" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:54.885" starttime="20150623 08:27:54.882"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:54.889" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:54.958" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:54.959" starttime="20150623 08:27:54.887"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:54.960" starttime="20150623 08:27:54.881"></status>
</kw>
<kw type="foritem" name="${process} =  4052 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor87.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:54.964" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:54.964" starttime="20150623 08:27:54.961"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:54.968" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:55.038" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:55.039" starttime="20150623 08:27:54.966"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:55.041" starttime="20150623 08:27:54.960"></status>
</kw>
<kw type="foritem" name="${process} =  4067 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:55.046" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:55.045" starttime="20150623 08:27:55.042"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:55.049" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:55.123" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:55.123" starttime="20150623 08:27:55.047"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:55.124" starttime="20150623 08:27:55.042"></status>
</kw>
<kw type="foritem" name="${process} =  4578 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor88.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:55.128" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:55.128" starttime="20150623 08:27:55.125"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:55.131" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:55.211" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:55.211" starttime="20150623 08:27:55.130"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:55.212" starttime="20150623 08:27:55.125"></status>
</kw>
<kw type="foritem" name="${process} =  4593 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:55.217" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:55.216" starttime="20150623 08:27:55.213"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:55.220" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:55.291" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:55.292" starttime="20150623 08:27:55.218"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:55.293" starttime="20150623 08:27:55.213"></status>
</kw>
<kw type="foritem" name="${process} =  5112 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor89.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:55.297" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:55.297" starttime="20150623 08:27:55.294"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:55.301" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:55.372" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:55.373" starttime="20150623 08:27:55.298"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:55.374" starttime="20150623 08:27:55.293"></status>
</kw>
<kw type="foritem" name="${process} =  5127 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:55.378" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:55.378" starttime="20150623 08:27:55.375"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:55.381" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:55.454" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:55.455" starttime="20150623 08:27:55.379"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:55.456" starttime="20150623 08:27:55.374"></status>
</kw>
<kw type="foritem" name="${process} =  5740 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor90.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:55.460" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:55.459" starttime="20150623 08:27:55.457"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:55.463" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:55.534" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:55.535" starttime="20150623 08:27:55.461"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:55.535" starttime="20150623 08:27:55.456"></status>
</kw>
<kw type="foritem" name="${process} =  5755 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:55.540" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:55.539" starttime="20150623 08:27:55.537"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:55.543" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:55.616" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:55.617" starttime="20150623 08:27:55.541"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:55.618" starttime="20150623 08:27:55.536"></status>
</kw>
<kw type="foritem" name="${process} =  6570 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor91.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:55.622" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:55.621" starttime="20150623 08:27:55.619"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:55.625" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:55.696" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:55.697" starttime="20150623 08:27:55.623"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:55.698" starttime="20150623 08:27:55.618"></status>
</kw>
<kw type="foritem" name="${process} =  6585 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:55.702" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:55.701" starttime="20150623 08:27:55.699"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:55.705" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:55.766" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:55.767" starttime="20150623 08:27:55.703"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:55.768" starttime="20150623 08:27:55.698"></status>
</kw>
<kw type="foritem" name="${process} =  7194 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor92.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:55.772" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:55.772" starttime="20150623 08:27:55.769"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:55.775" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:55.843" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:55.844" starttime="20150623 08:27:55.773"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:55.844" starttime="20150623 08:27:55.768"></status>
</kw>
<kw type="foritem" name="${process} =  7209 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:55.849" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:55.848" starttime="20150623 08:27:55.846"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:55.852" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:55.923" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:55.924" starttime="20150623 08:27:55.850"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:55.925" starttime="20150623 08:27:55.845"></status>
</kw>
<kw type="foritem" name="${process} =  7848 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor93.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:55.929" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:55.928" starttime="20150623 08:27:55.926"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:55.932" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:56.003" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:56.004" starttime="20150623 08:27:55.930"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:56.006" starttime="20150623 08:27:55.925"></status>
</kw>
<kw type="foritem" name="${process} =  7863 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:56.011" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:56.010" starttime="20150623 08:27:56.008"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:56.014" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:56.083" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:56.085" starttime="20150623 08:27:56.012"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:56.085" starttime="20150623 08:27:56.007"></status>
</kw>
<kw type="foritem" name="${process} =  8532 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor94.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:56.090" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:56.089" starttime="20150623 08:27:56.087"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:56.093" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:56.162" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:56.163" starttime="20150623 08:27:56.091"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:56.164" starttime="20150623 08:27:56.086"></status>
</kw>
<kw type="foritem" name="${process} =  8547 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:56.168" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:56.168" starttime="20150623 08:27:56.165"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:56.171" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:56.242" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:56.243" starttime="20150623 08:27:56.169"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:56.244" starttime="20150623 08:27:56.164"></status>
</kw>
<kw type="foritem" name="${process} =  9249 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor95.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:56.248" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:56.247" starttime="20150623 08:27:56.245"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:56.251" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:56.323" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:56.324" starttime="20150623 08:27:56.249"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:56.325" starttime="20150623 08:27:56.244"></status>
</kw>
<kw type="foritem" name="${process} =  9264 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:56.329" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:27:56.328" starttime="20150623 08:27:56.326"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:56.332" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:27:56.410" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:56.411" starttime="20150623 08:27:56.330"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:56.411" starttime="20150623 08:27:56.325"></status>
</kw>
<kw type="foritem" name="${process} = 11543 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor98.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:56.416" level="INFO">${pid} = 11543</msg>
<status status="PASS" endtime="20150623 08:27:56.415" starttime="20150623 08:27:56.413"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:56.419" level="INFO">Executing command 'kill -9 11543'.</msg>
<msg timestamp="20150623 08:27:56.498" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:27:56.499" starttime="20150623 08:27:56.417"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:56.500" starttime="20150623 08:27:56.412"></status>
</kw>
<kw type="foritem" name="${process} = 11558 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:56.504" level="INFO">${pid} = 11558</msg>
<status status="PASS" endtime="20150623 08:27:56.504" starttime="20150623 08:27:56.501"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:56.507" level="INFO">Executing command 'kill -9 11558'.</msg>
<msg timestamp="20150623 08:27:56.583" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:27:56.584" starttime="20150623 08:27:56.505"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:56.585" starttime="20150623 08:27:56.500"></status>
</kw>
<kw type="foritem" name="${process} = 11576 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:56.589" level="INFO">${pid} = 11576</msg>
<status status="PASS" endtime="20150623 08:27:56.588" starttime="20150623 08:27:56.586"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:56.592" level="INFO">Executing command 'kill -9 11576'.</msg>
<msg timestamp="20150623 08:27:56.661" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:56.661" starttime="20150623 08:27:56.590"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:56.662" starttime="20150623 08:27:56.585"></status>
</kw>
<kw type="foritem" name="${process} = 11592 ?        R      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:27:56.666" level="INFO">${pid} = 11592</msg>
<status status="PASS" endtime="20150623 08:27:56.666" starttime="20150623 08:27:56.663"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:27:56.669" level="INFO">Executing command 'kill -9 11592'.</msg>
<msg timestamp="20150623 08:27:56.737" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:27:56.738" starttime="20150623 08:27:56.667"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:56.739" starttime="20150623 08:27:56.663"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:56.739" starttime="20150623 08:27:53.197"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:56.741" starttime="20150623 08:27:53.033"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:27:56.745" level="INFO">Starting command 'cat tmpfilemonitor98.log'.</msg>
<status status="PASS" endtime="20150623 08:27:56.780" starttime="20150623 08:27:56.742"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:27:56.782" level="INFO">Reading output of command 'cat tmpfilemonitor98.log'.</msg>
<msg timestamp="20150623 08:27:56.819" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:27:56.820" level="INFO">${stdout_string} = [2015-06-23 06:27:12,231][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:27:56.820" starttime="20150623 08:27:56.781"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:27:56.823" level="INFO">Executing command 'rm tmpfilemonitor98.log'.</msg>
<msg timestamp="20150623 08:27:56.900" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:27:56.901" starttime="20150623 08:27:56.821"></status>
</kw>
<msg timestamp="20150623 08:27:56.904" level="INFO">${tailed_text} = [2015-06-23 06:27:12,231][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:27:56.902" starttime="20150623 08:27:53.011"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:56.911" starttime="20150623 08:27:56.905"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:56.920" starttime="20150623 08:27:56.918"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:27:56.924" starttime="20150623 08:27:56.922"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:56.928" starttime="20150623 08:27:56.913"></status>
</kw>
<msg timestamp="20150623 08:27:56.931" level="INFO">${tailed_text} = [2015-06-23 06:27:12,231][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:27:56.930" starttime="20150623 08:27:53.005"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:56.947" starttime="20150623 08:27:56.945"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:56.948" starttime="20150623 08:27:56.940"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:56.955" starttime="20150623 08:27:56.949"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:56.958" starttime="20150623 08:27:56.956"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:56.961" starttime="20150623 08:27:56.959"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:56.962" starttime="20150623 08:27:56.934"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:56.989" starttime="20150623 08:27:56.988"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:56.996" starttime="20150623 08:27:56.990"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:56.999" starttime="20150623 08:27:56.997"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:27:57.003" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:27:57.005" level="INFO">${queryResultSetLines} = 1004558|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:27:57.004" starttime="20150623 08:27:57.000"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:57.007" starttime="20150623 08:27:57.006"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:27:57.010" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:27:57.012" level="INFO">@{queryResultSet} = [ 1004558|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:27:57.011" starttime="20150623 08:27:57.008"></status>
</kw>
<msg timestamp="20150623 08:27:57.035" level="INFO">@{queryRows} = [ 1004558|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:27:57.033" starttime="20150623 08:27:56.982"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:27:57.039" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:27:57.040" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:27:57.040" starttime="20150623 08:27:57.036"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:27:57.044" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:27:57.045" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:27:57.044" starttime="20150623 08:27:57.042"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:27:57.054" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:27:57.055" starttime="20150623 08:27:57.052"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:57.056" starttime="20150623 08:27:57.046"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:27:57.062" starttime="20150623 08:27:57.057"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:57.063" starttime="20150623 08:27:56.975"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:57.065" starttime="20150623 08:27:52.454"></status>
</kw>
<status status="PASS" endtime="20150623 08:27:57.067" starttime="20150623 08:27:52.448"></status>
</kw>
<msg timestamp="20150623 08:27:57.070" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:27:57.068" starttime="20150623 08:27:52.446"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:27:57.073" level="INFO">Index in the 2. loop: 5</msg>
<status status="PASS" endtime="20150623 08:27:57.074" starttime="20150623 08:27:57.071"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:28:06.077" level="INFO">Slept 9 seconds</msg>
<status status="PASS" endtime="20150623 08:28:06.079" starttime="20150623 08:27:57.075"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:28:06.088" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:28:06.087" starttime="20150623 08:28:06.081"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:06.088" starttime="20150623 08:27:52.445"></status>
</kw>
<kw type="foritem" name="${index} = 6">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:06.136" starttime="20150623 08:28:06.135"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:06.202" starttime="20150623 08:28:06.144"></status>
</kw>
<msg timestamp="20150623 08:28:06.204" level="INFO">${ssh_connection} = 99</msg>
<status status="PASS" endtime="20150623 08:28:06.203" starttime="20150623 08:28:06.138"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:28:06.214" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:28:06.646" level="INFO">Read output: Last login: Tue Jun 23 06:27:52 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:28:06.647" starttime="20150623 08:28:06.211"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:06.648" starttime="20150623 08:28:06.205"></status>
</kw>
<msg timestamp="20150623 08:28:06.651" level="INFO">${ssh_connection} = 99</msg>
<status status="PASS" endtime="20150623 08:28:06.650" starttime="20150623 08:28:06.126"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:06.662" starttime="20150623 08:28:06.659"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:28:06.665" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor99.log'.</msg>
<status status="PASS" endtime="20150623 08:28:06.669" starttime="20150623 08:28:06.663"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:06.670" starttime="20150623 08:28:06.653"></status>
</kw>
<msg timestamp="20150623 08:28:06.673" level="INFO">${ssh_connection} = 99</msg>
<status status="PASS" endtime="20150623 08:28:06.672" starttime="20150623 08:28:06.115"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:06.697" starttime="20150623 08:28:06.691"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:06.698" starttime="20150623 08:28:06.685"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:28:06.708" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:28:06.710" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:28:06.709" starttime="20150623 08:28:06.706"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:28:06.713" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:28:06.714" starttime="20150623 08:28:06.711"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:06.717" starttime="20150623 08:28:06.715"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:06.727" starttime="20150623 08:28:06.718"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:06.728" starttime="20150623 08:28:06.700"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:06.745" starttime="20150623 08:28:06.742"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:28:06.752" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:28:06.751" starttime="20150623 08:28:06.746"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:28:06.759" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:28:06.760" starttime="20150623 08:28:06.753"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:06.770" starttime="20150623 08:28:06.767"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:28:06.772" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:28:06.817" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:28:06.819" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:28:06.818" starttime="20150623 08:28:06.771"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:28:06.822" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:28:06.938" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:28:06.940" level="INFO">${processes_string} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log
  373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
  538 ?        ...</msg>
<status status="PASS" endtime="20150623 08:28:06.939" starttime="20150623 08:28:06.820"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:28:06.944" level="INFO">@{processes_list} = [   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log |   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log |   538 ?  ...</msg>
<status status="PASS" endtime="20150623 08:28:06.943" starttime="20150623 08:28:06.941"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:06.950" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:06.949" starttime="20150623 08:28:06.947"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:06.953" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:07.028" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:07.029" starttime="20150623 08:28:06.951"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:07.031" starttime="20150623 08:28:06.946"></status>
</kw>
<kw type="foritem" name="${process} =   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:07.036" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:07.035" starttime="20150623 08:28:07.032"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:07.039" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:07.111" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:07.112" starttime="20150623 08:28:07.037"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:07.113" starttime="20150623 08:28:07.032"></status>
</kw>
<kw type="foritem" name="${process} =   538 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor77.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:07.117" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:07.117" starttime="20150623 08:28:07.114"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:07.120" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:07.194" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:07.195" starttime="20150623 08:28:07.118"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:07.196" starttime="20150623 08:28:07.113"></status>
</kw>
<kw type="foritem" name="${process} =   553 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:07.200" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:07.200" starttime="20150623 08:28:07.197"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:07.204" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:07.278" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:07.279" starttime="20150623 08:28:07.202"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:07.279" starttime="20150623 08:28:07.197"></status>
</kw>
<kw type="foritem" name="${process} =   745 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor78.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:07.284" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:07.283" starttime="20150623 08:28:07.281"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:07.287" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:07.361" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:07.362" starttime="20150623 08:28:07.285"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:07.362" starttime="20150623 08:28:07.280"></status>
</kw>
<kw type="foritem" name="${process} =   760 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:07.367" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:07.366" starttime="20150623 08:28:07.364"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:07.370" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:07.443" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:07.444" starttime="20150623 08:28:07.368"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:07.445" starttime="20150623 08:28:07.363"></status>
</kw>
<kw type="foritem" name="${process} =   985 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor79.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:07.449" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:07.449" starttime="20150623 08:28:07.446"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:07.453" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:07.526" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:07.526" starttime="20150623 08:28:07.451"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:07.527" starttime="20150623 08:28:07.446"></status>
</kw>
<kw type="foritem" name="${process} =  1000 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:07.532" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:07.532" starttime="20150623 08:28:07.529"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:07.536" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:07.599" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:07.600" starttime="20150623 08:28:07.534"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:07.601" starttime="20150623 08:28:07.528"></status>
</kw>
<kw type="foritem" name="${process} =  1249 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor80.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:07.605" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:07.605" starttime="20150623 08:28:07.602"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:07.609" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:07.670" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:07.670" starttime="20150623 08:28:07.607"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:07.671" starttime="20150623 08:28:07.601"></status>
</kw>
<kw type="foritem" name="${process} =  1264 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:07.676" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:07.675" starttime="20150623 08:28:07.672"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:07.679" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:07.739" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:07.740" starttime="20150623 08:28:07.677"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:07.741" starttime="20150623 08:28:07.672"></status>
</kw>
<kw type="foritem" name="${process} =  1559 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor81.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:07.745" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:07.744" starttime="20150623 08:28:07.742"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:07.748" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:07.809" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:07.810" starttime="20150623 08:28:07.746"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:07.811" starttime="20150623 08:28:07.741"></status>
</kw>
<kw type="foritem" name="${process} =  1574 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:07.815" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:07.814" starttime="20150623 08:28:07.812"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:07.819" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:07.891" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:07.891" starttime="20150623 08:28:07.816"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:07.892" starttime="20150623 08:28:07.811"></status>
</kw>
<kw type="foritem" name="${process} =  1899 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor82.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:07.896" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:07.896" starttime="20150623 08:28:07.893"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:07.900" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:07.971" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:07.972" starttime="20150623 08:28:07.898"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:07.973" starttime="20150623 08:28:07.893"></status>
</kw>
<kw type="foritem" name="${process} =  1914 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:07.977" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:07.977" starttime="20150623 08:28:07.974"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:07.980" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:08.055" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:08.056" starttime="20150623 08:28:07.978"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:08.058" starttime="20150623 08:28:07.973"></status>
</kw>
<kw type="foritem" name="${process} =  2254 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor83.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:08.063" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:08.062" starttime="20150623 08:28:08.060"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:08.066" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:08.136" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:08.137" starttime="20150623 08:28:08.064"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:08.137" starttime="20150623 08:28:08.059"></status>
</kw>
<kw type="foritem" name="${process} =  2269 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:08.142" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:08.141" starttime="20150623 08:28:08.139"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:08.145" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:08.215" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:08.216" starttime="20150623 08:28:08.143"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:08.216" starttime="20150623 08:28:08.138"></status>
</kw>
<kw type="foritem" name="${process} =  2640 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor84.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:08.221" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:08.220" starttime="20150623 08:28:08.218"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:08.224" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:08.293" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:08.293" starttime="20150623 08:28:08.222"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:08.294" starttime="20150623 08:28:08.217"></status>
</kw>
<kw type="foritem" name="${process} =  2655 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:08.298" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:08.298" starttime="20150623 08:28:08.295"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:08.302" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:08.372" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:08.372" starttime="20150623 08:28:08.300"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:08.373" starttime="20150623 08:28:08.295"></status>
</kw>
<kw type="foritem" name="${process} =  3081 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor85.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:08.380" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:08.379" starttime="20150623 08:28:08.377"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:08.383" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:08.451" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:08.452" starttime="20150623 08:28:08.381"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:08.453" starttime="20150623 08:28:08.374"></status>
</kw>
<kw type="foritem" name="${process} =  3096 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:08.457" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:08.456" starttime="20150623 08:28:08.454"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:08.460" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:08.527" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:08.528" starttime="20150623 08:28:08.458"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:08.529" starttime="20150623 08:28:08.453"></status>
</kw>
<kw type="foritem" name="${process} =  3577 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor86.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:08.533" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:08.532" starttime="20150623 08:28:08.530"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:08.536" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:08.600" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:08.601" starttime="20150623 08:28:08.534"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:08.602" starttime="20150623 08:28:08.529"></status>
</kw>
<kw type="foritem" name="${process} =  3592 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:08.606" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:08.605" starttime="20150623 08:28:08.603"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:08.609" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:08.680" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:08.681" starttime="20150623 08:28:08.607"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:08.682" starttime="20150623 08:28:08.602"></status>
</kw>
<kw type="foritem" name="${process} =  4052 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor87.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:08.686" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:08.686" starttime="20150623 08:28:08.683"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:08.690" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:08.761" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:08.762" starttime="20150623 08:28:08.688"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:08.762" starttime="20150623 08:28:08.682"></status>
</kw>
<kw type="foritem" name="${process} =  4067 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:08.767" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:08.766" starttime="20150623 08:28:08.764"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:08.770" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:08.843" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:08.843" starttime="20150623 08:28:08.768"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:08.844" starttime="20150623 08:28:08.763"></status>
</kw>
<kw type="foritem" name="${process} =  4578 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor88.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:08.849" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:08.848" starttime="20150623 08:28:08.845"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:08.852" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:08.925" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:08.926" starttime="20150623 08:28:08.850"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:08.927" starttime="20150623 08:28:08.845"></status>
</kw>
<kw type="foritem" name="${process} =  4593 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:08.931" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:08.931" starttime="20150623 08:28:08.928"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:08.935" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:09.007" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:09.008" starttime="20150623 08:28:08.933"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:09.010" starttime="20150623 08:28:08.927"></status>
</kw>
<kw type="foritem" name="${process} =  5112 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor89.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:09.015" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:09.014" starttime="20150623 08:28:09.012"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:09.018" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:09.085" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:09.086" starttime="20150623 08:28:09.016"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:09.086" starttime="20150623 08:28:09.011"></status>
</kw>
<kw type="foritem" name="${process} =  5127 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:09.091" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:09.090" starttime="20150623 08:28:09.088"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:09.094" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:09.157" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:09.158" starttime="20150623 08:28:09.092"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:09.159" starttime="20150623 08:28:09.087"></status>
</kw>
<kw type="foritem" name="${process} =  5740 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor90.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:09.164" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:09.163" starttime="20150623 08:28:09.161"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:09.168" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:09.229" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:09.229" starttime="20150623 08:28:09.165"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:09.230" starttime="20150623 08:28:09.160"></status>
</kw>
<kw type="foritem" name="${process} =  5755 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:09.235" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:09.234" starttime="20150623 08:28:09.232"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:09.239" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:09.308" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:09.309" starttime="20150623 08:28:09.237"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:09.310" starttime="20150623 08:28:09.231"></status>
</kw>
<kw type="foritem" name="${process} =  6570 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor91.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:09.314" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:09.313" starttime="20150623 08:28:09.311"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:09.317" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:09.391" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:09.391" starttime="20150623 08:28:09.315"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:09.392" starttime="20150623 08:28:09.310"></status>
</kw>
<kw type="foritem" name="${process} =  6585 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:09.397" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:09.396" starttime="20150623 08:28:09.393"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:09.400" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:09.471" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:09.472" starttime="20150623 08:28:09.398"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:09.473" starttime="20150623 08:28:09.393"></status>
</kw>
<kw type="foritem" name="${process} =  7194 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor92.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:09.477" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:09.476" starttime="20150623 08:28:09.474"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:09.480" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:09.557" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:09.558" starttime="20150623 08:28:09.478"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:09.558" starttime="20150623 08:28:09.473"></status>
</kw>
<kw type="foritem" name="${process} =  7209 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:09.563" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:09.562" starttime="20150623 08:28:09.560"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:09.566" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:09.642" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:09.643" starttime="20150623 08:28:09.564"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:09.644" starttime="20150623 08:28:09.559"></status>
</kw>
<kw type="foritem" name="${process} =  7848 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor93.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:09.648" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:09.647" starttime="20150623 08:28:09.645"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:09.651" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:09.719" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:09.720" starttime="20150623 08:28:09.649"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:09.721" starttime="20150623 08:28:09.644"></status>
</kw>
<kw type="foritem" name="${process} =  7863 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:09.725" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:09.724" starttime="20150623 08:28:09.722"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:09.728" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:09.798" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:09.798" starttime="20150623 08:28:09.726"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:09.800" starttime="20150623 08:28:09.721"></status>
</kw>
<kw type="foritem" name="${process} =  8532 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor94.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:09.804" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:09.803" starttime="20150623 08:28:09.801"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:09.807" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:09.886" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:09.887" starttime="20150623 08:28:09.805"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:09.888" starttime="20150623 08:28:09.800"></status>
</kw>
<kw type="foritem" name="${process} =  8547 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:09.892" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:09.891" starttime="20150623 08:28:09.889"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:09.895" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:09.967" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:09.968" starttime="20150623 08:28:09.893"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:09.968" starttime="20150623 08:28:09.888"></status>
</kw>
<kw type="foritem" name="${process} =  9249 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor95.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:09.973" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:09.972" starttime="20150623 08:28:09.970"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:09.976" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:10.057" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:10.059" starttime="20150623 08:28:09.974"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:10.060" starttime="20150623 08:28:09.969"></status>
</kw>
<kw type="foritem" name="${process} =  9264 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:10.065" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:10.064" starttime="20150623 08:28:10.062"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:10.068" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:10.135" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:10.136" starttime="20150623 08:28:10.066"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:10.137" starttime="20150623 08:28:10.061"></status>
</kw>
<kw type="foritem" name="${process} = 12320 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor99.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:10.141" level="INFO">${pid} = 12320</msg>
<status status="PASS" endtime="20150623 08:28:10.140" starttime="20150623 08:28:10.138"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:10.144" level="INFO">Executing command 'kill -9 12320'.</msg>
<msg timestamp="20150623 08:28:10.209" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:28:10.209" starttime="20150623 08:28:10.142"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:10.210" starttime="20150623 08:28:10.137"></status>
</kw>
<kw type="foritem" name="${process} = 12335 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:10.214" level="INFO">${pid} = 12335</msg>
<status status="PASS" endtime="20150623 08:28:10.214" starttime="20150623 08:28:10.211"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:10.218" level="INFO">Executing command 'kill -9 12335'.</msg>
<msg timestamp="20150623 08:28:10.288" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:28:10.289" starttime="20150623 08:28:10.216"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:10.290" starttime="20150623 08:28:10.211"></status>
</kw>
<kw type="foritem" name="${process} = 12353 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:10.294" level="INFO">${pid} = 12353</msg>
<status status="PASS" endtime="20150623 08:28:10.294" starttime="20150623 08:28:10.291"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:10.297" level="INFO">Executing command 'kill -9 12353'.</msg>
<msg timestamp="20150623 08:28:10.370" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:10.371" starttime="20150623 08:28:10.295"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:10.372" starttime="20150623 08:28:10.290"></status>
</kw>
<kw type="foritem" name="${process} = 12369 ?        R      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:10.376" level="INFO">${pid} = 12369</msg>
<status status="PASS" endtime="20150623 08:28:10.376" starttime="20150623 08:28:10.373"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:10.379" level="INFO">Executing command 'kill -9 12369'.</msg>
<msg timestamp="20150623 08:28:10.454" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:10.454" starttime="20150623 08:28:10.377"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:10.455" starttime="20150623 08:28:10.372"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:10.456" starttime="20150623 08:28:06.945"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:10.457" starttime="20150623 08:28:06.762"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:28:10.461" level="INFO">Starting command 'cat tmpfilemonitor99.log'.</msg>
<status status="PASS" endtime="20150623 08:28:10.497" starttime="20150623 08:28:10.459"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:28:10.500" level="INFO">Reading output of command 'cat tmpfilemonitor99.log'.</msg>
<msg timestamp="20150623 08:28:10.534" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:28:10.535" level="INFO">${stdout_string} = [2015-06-23 06:27:25,747][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:28:10.535" starttime="20150623 08:28:10.499"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:28:10.539" level="INFO">Executing command 'rm tmpfilemonitor99.log'.</msg>
<msg timestamp="20150623 08:28:10.614" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:28:10.615" starttime="20150623 08:28:10.537"></status>
</kw>
<msg timestamp="20150623 08:28:10.618" level="INFO">${tailed_text} = [2015-06-23 06:27:25,747][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:28:10.616" starttime="20150623 08:28:06.737"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:10.625" starttime="20150623 08:28:10.619"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:10.634" starttime="20150623 08:28:10.632"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:28:10.637" starttime="20150623 08:28:10.635"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:10.641" starttime="20150623 08:28:10.626"></status>
</kw>
<msg timestamp="20150623 08:28:10.644" level="INFO">${tailed_text} = [2015-06-23 06:27:25,747][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:28:10.643" starttime="20150623 08:28:06.731"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:10.660" starttime="20150623 08:28:10.658"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:10.661" starttime="20150623 08:28:10.653"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:10.667" starttime="20150623 08:28:10.662"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:10.671" starttime="20150623 08:28:10.668"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:10.674" starttime="20150623 08:28:10.672"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:10.675" starttime="20150623 08:28:10.647"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:10.702" starttime="20150623 08:28:10.701"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:10.709" starttime="20150623 08:28:10.703"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:10.711" starttime="20150623 08:28:10.710"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:28:10.715" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:28:10.717" level="INFO">${queryResultSetLines} = 1004559|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:28:10.716" starttime="20150623 08:28:10.713"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:10.736" starttime="20150623 08:28:10.718"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:28:10.739" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:28:10.741" level="INFO">@{queryResultSet} = [ 1004559|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:28:10.740" starttime="20150623 08:28:10.737"></status>
</kw>
<msg timestamp="20150623 08:28:10.743" level="INFO">@{queryRows} = [ 1004559|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:28:10.743" starttime="20150623 08:28:10.695"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:28:10.747" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:28:10.749" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:28:10.748" starttime="20150623 08:28:10.745"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:28:10.751" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:28:10.753" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:28:10.752" starttime="20150623 08:28:10.750"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:28:10.762" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:28:10.763" starttime="20150623 08:28:10.760"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:10.763" starttime="20150623 08:28:10.754"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:10.770" starttime="20150623 08:28:10.765"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:10.771" starttime="20150623 08:28:10.687"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:10.772" starttime="20150623 08:28:06.098"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:10.774" starttime="20150623 08:28:06.092"></status>
</kw>
<msg timestamp="20150623 08:28:10.776" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:28:10.775" starttime="20150623 08:28:06.091"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:28:10.779" level="INFO">Index in the 2. loop: 6</msg>
<status status="PASS" endtime="20150623 08:28:10.780" starttime="20150623 08:28:10.777"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:28:19.785" level="INFO">Slept 9 seconds</msg>
<status status="PASS" endtime="20150623 08:28:19.786" starttime="20150623 08:28:10.781"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:28:19.795" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:28:19.794" starttime="20150623 08:28:19.788"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:19.796" starttime="20150623 08:28:06.090"></status>
</kw>
<kw type="foritem" name="${index} = 7">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:19.844" starttime="20150623 08:28:19.842"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:19.908" starttime="20150623 08:28:19.851"></status>
</kw>
<msg timestamp="20150623 08:28:19.910" level="INFO">${ssh_connection} = 100</msg>
<status status="PASS" endtime="20150623 08:28:19.909" starttime="20150623 08:28:19.845"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:28:19.921" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:28:20.321" level="INFO">Read output: Last login: Tue Jun 23 06:28:06 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:28:20.322" starttime="20150623 08:28:19.919"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:20.323" starttime="20150623 08:28:19.911"></status>
</kw>
<msg timestamp="20150623 08:28:20.324" level="INFO">${ssh_connection} = 100</msg>
<status status="PASS" endtime="20150623 08:28:20.324" starttime="20150623 08:28:19.834"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:20.329" starttime="20150623 08:28:20.328"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:28:20.331" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor100.log'.</msg>
<status status="PASS" endtime="20150623 08:28:20.334" starttime="20150623 08:28:20.330"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:20.335" starttime="20150623 08:28:20.325"></status>
</kw>
<msg timestamp="20150623 08:28:20.336" level="INFO">${ssh_connection} = 100</msg>
<status status="PASS" endtime="20150623 08:28:20.336" starttime="20150623 08:28:19.823"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:20.349" starttime="20150623 08:28:20.344"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:20.351" starttime="20150623 08:28:20.342"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:28:20.360" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:28:20.362" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:28:20.362" starttime="20150623 08:28:20.358"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:28:20.365" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:28:20.366" starttime="20150623 08:28:20.364"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:20.369" starttime="20150623 08:28:20.367"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:20.379" starttime="20150623 08:28:20.370"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:20.380" starttime="20150623 08:28:20.352"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:20.396" starttime="20150623 08:28:20.395"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:28:20.403" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:28:20.403" starttime="20150623 08:28:20.398"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:28:20.411" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:28:20.412" starttime="20150623 08:28:20.405"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:20.421" starttime="20150623 08:28:20.419"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:28:20.424" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:28:20.469" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:28:20.470" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:28:20.470" starttime="20150623 08:28:20.423"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:28:20.474" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:28:20.572" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:28:20.573" level="INFO">${processes_string} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log
  373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
  538 ?        ...</msg>
<status status="PASS" endtime="20150623 08:28:20.573" starttime="20150623 08:28:20.472"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:28:20.578" level="INFO">@{processes_list} = [   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log |   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log |   538 ?  ...</msg>
<status status="PASS" endtime="20150623 08:28:20.577" starttime="20150623 08:28:20.575"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:20.584" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:20.583" starttime="20150623 08:28:20.581"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:20.587" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:20.654" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:20.655" starttime="20150623 08:28:20.585"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:20.656" starttime="20150623 08:28:20.580"></status>
</kw>
<kw type="foritem" name="${process} =   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:20.660" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:20.659" starttime="20150623 08:28:20.657"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:20.663" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:20.734" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:20.735" starttime="20150623 08:28:20.661"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:20.736" starttime="20150623 08:28:20.656"></status>
</kw>
<kw type="foritem" name="${process} =   538 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor77.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:20.740" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:20.739" starttime="20150623 08:28:20.737"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:20.743" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:20.814" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:20.815" starttime="20150623 08:28:20.741"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:20.815" starttime="20150623 08:28:20.736"></status>
</kw>
<kw type="foritem" name="${process} =   553 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:20.820" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:20.819" starttime="20150623 08:28:20.817"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:20.823" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:20.894" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:20.895" starttime="20150623 08:28:20.821"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:20.896" starttime="20150623 08:28:20.816"></status>
</kw>
<kw type="foritem" name="${process} =   745 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor78.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:20.900" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:20.899" starttime="20150623 08:28:20.897"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:20.903" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:20.974" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:20.975" starttime="20150623 08:28:20.901"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:20.975" starttime="20150623 08:28:20.896"></status>
</kw>
<kw type="foritem" name="${process} =   760 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:20.980" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:20.979" starttime="20150623 08:28:20.977"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:20.983" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:21.055" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:21.056" starttime="20150623 08:28:20.981"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:21.058" starttime="20150623 08:28:20.976"></status>
</kw>
<kw type="foritem" name="${process} =   985 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor79.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:21.063" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:21.062" starttime="20150623 08:28:21.060"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:21.066" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:21.139" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:21.140" starttime="20150623 08:28:21.064"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:21.141" starttime="20150623 08:28:21.059"></status>
</kw>
<kw type="foritem" name="${process} =  1000 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:21.145" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:21.144" starttime="20150623 08:28:21.142"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:21.148" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:21.228" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:21.229" starttime="20150623 08:28:21.146"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:21.230" starttime="20150623 08:28:21.141"></status>
</kw>
<kw type="foritem" name="${process} =  1249 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor80.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:21.234" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:21.234" starttime="20150623 08:28:21.231"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:21.238" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:21.309" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:21.310" starttime="20150623 08:28:21.236"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:21.311" starttime="20150623 08:28:21.230"></status>
</kw>
<kw type="foritem" name="${process} =  1264 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:21.315" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:21.315" starttime="20150623 08:28:21.312"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:21.318" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:21.391" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:21.392" starttime="20150623 08:28:21.316"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:21.392" starttime="20150623 08:28:21.311"></status>
</kw>
<kw type="foritem" name="${process} =  1559 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor81.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:21.397" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:21.396" starttime="20150623 08:28:21.394"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:21.400" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:21.472" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:21.473" starttime="20150623 08:28:21.398"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:21.473" starttime="20150623 08:28:21.393"></status>
</kw>
<kw type="foritem" name="${process} =  1574 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:21.478" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:21.477" starttime="20150623 08:28:21.475"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:21.481" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:21.550" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:21.551" starttime="20150623 08:28:21.479"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:21.552" starttime="20150623 08:28:21.474"></status>
</kw>
<kw type="foritem" name="${process} =  1899 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor82.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:21.556" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:21.556" starttime="20150623 08:28:21.553"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:21.559" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:21.626" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:21.627" starttime="20150623 08:28:21.557"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:21.628" starttime="20150623 08:28:21.552"></status>
</kw>
<kw type="foritem" name="${process} =  1914 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:21.632" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:21.632" starttime="20150623 08:28:21.629"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:21.635" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:21.703" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:21.704" starttime="20150623 08:28:21.633"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:21.705" starttime="20150623 08:28:21.628"></status>
</kw>
<kw type="foritem" name="${process} =  2254 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor83.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:21.709" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:21.708" starttime="20150623 08:28:21.706"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:21.712" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:21.779" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:21.780" starttime="20150623 08:28:21.710"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:21.781" starttime="20150623 08:28:21.705"></status>
</kw>
<kw type="foritem" name="${process} =  2269 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:21.802" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:21.801" starttime="20150623 08:28:21.782"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:21.805" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:21.860" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:21.861" starttime="20150623 08:28:21.803"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:21.862" starttime="20150623 08:28:21.781"></status>
</kw>
<kw type="foritem" name="${process} =  2640 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor84.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:21.866" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:21.865" starttime="20150623 08:28:21.863"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:21.869" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:21.951" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:21.952" starttime="20150623 08:28:21.867"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:21.953" starttime="20150623 08:28:21.862"></status>
</kw>
<kw type="foritem" name="${process} =  2655 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:21.957" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:21.956" starttime="20150623 08:28:21.954"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:21.960" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:22.031" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:22.032" starttime="20150623 08:28:21.958"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:22.034" starttime="20150623 08:28:21.953"></status>
</kw>
<kw type="foritem" name="${process} =  3081 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor85.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:22.040" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:22.039" starttime="20150623 08:28:22.036"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:22.043" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:22.112" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:22.113" starttime="20150623 08:28:22.041"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:22.114" starttime="20150623 08:28:22.035"></status>
</kw>
<kw type="foritem" name="${process} =  3096 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:22.120" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:22.117" starttime="20150623 08:28:22.115"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:22.123" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:22.192" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:22.193" starttime="20150623 08:28:22.121"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:22.194" starttime="20150623 08:28:22.114"></status>
</kw>
<kw type="foritem" name="${process} =  3577 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor86.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:22.198" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:22.198" starttime="20150623 08:28:22.195"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:22.201" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:22.273" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:22.274" starttime="20150623 08:28:22.199"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:22.274" starttime="20150623 08:28:22.194"></status>
</kw>
<kw type="foritem" name="${process} =  3592 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:22.279" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:22.278" starttime="20150623 08:28:22.276"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:22.282" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:22.365" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:22.366" starttime="20150623 08:28:22.280"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:22.366" starttime="20150623 08:28:22.275"></status>
</kw>
<kw type="foritem" name="${process} =  4052 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor87.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:22.371" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:22.370" starttime="20150623 08:28:22.368"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:22.374" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:22.454" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:22.455" starttime="20150623 08:28:22.372"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:22.456" starttime="20150623 08:28:22.367"></status>
</kw>
<kw type="foritem" name="${process} =  4067 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:22.460" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:22.459" starttime="20150623 08:28:22.457"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:22.463" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:22.534" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:22.534" starttime="20150623 08:28:22.461"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:22.535" starttime="20150623 08:28:22.456"></status>
</kw>
<kw type="foritem" name="${process} =  4578 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor88.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:22.539" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:22.539" starttime="20150623 08:28:22.536"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:22.543" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:22.613" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:22.614" starttime="20150623 08:28:22.541"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:22.614" starttime="20150623 08:28:22.536"></status>
</kw>
<kw type="foritem" name="${process} =  4593 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:22.619" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:22.618" starttime="20150623 08:28:22.616"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:22.622" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:22.693" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:22.694" starttime="20150623 08:28:22.620"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:22.694" starttime="20150623 08:28:22.615"></status>
</kw>
<kw type="foritem" name="${process} =  5112 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor89.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:22.699" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:22.698" starttime="20150623 08:28:22.696"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:22.702" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:22.773" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:22.773" starttime="20150623 08:28:22.700"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:22.774" starttime="20150623 08:28:22.695"></status>
</kw>
<kw type="foritem" name="${process} =  5127 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:22.778" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:22.778" starttime="20150623 08:28:22.775"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:22.781" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:22.853" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:22.854" starttime="20150623 08:28:22.779"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:22.855" starttime="20150623 08:28:22.775"></status>
</kw>
<kw type="foritem" name="${process} =  5740 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor90.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:22.859" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:22.858" starttime="20150623 08:28:22.856"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:22.862" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:22.932" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:22.933" starttime="20150623 08:28:22.860"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:22.934" starttime="20150623 08:28:22.855"></status>
</kw>
<kw type="foritem" name="${process} =  5755 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:22.938" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:22.937" starttime="20150623 08:28:22.935"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:22.941" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:23.012" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:23.013" starttime="20150623 08:28:22.939"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:23.014" starttime="20150623 08:28:22.934"></status>
</kw>
<kw type="foritem" name="${process} =  6570 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor91.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:23.019" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:23.019" starttime="20150623 08:28:23.016"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:23.023" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:23.090" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:23.091" starttime="20150623 08:28:23.021"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:23.091" starttime="20150623 08:28:23.015"></status>
</kw>
<kw type="foritem" name="${process} =  6585 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:23.096" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:23.095" starttime="20150623 08:28:23.093"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:23.099" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:23.168" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:23.169" starttime="20150623 08:28:23.097"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:23.169" starttime="20150623 08:28:23.092"></status>
</kw>
<kw type="foritem" name="${process} =  7194 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor92.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:23.174" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:23.173" starttime="20150623 08:28:23.171"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:23.177" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:23.247" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:23.248" starttime="20150623 08:28:23.176"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:23.248" starttime="20150623 08:28:23.170"></status>
</kw>
<kw type="foritem" name="${process} =  7209 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:23.253" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:23.252" starttime="20150623 08:28:23.250"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:23.256" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:23.326" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:23.327" starttime="20150623 08:28:23.254"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:23.327" starttime="20150623 08:28:23.249"></status>
</kw>
<kw type="foritem" name="${process} =  7848 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor93.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:23.332" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:23.331" starttime="20150623 08:28:23.329"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:23.335" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:23.406" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:23.407" starttime="20150623 08:28:23.333"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:23.408" starttime="20150623 08:28:23.328"></status>
</kw>
<kw type="foritem" name="${process} =  7863 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:23.412" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:23.411" starttime="20150623 08:28:23.409"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:23.415" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:23.486" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:23.487" starttime="20150623 08:28:23.413"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:23.488" starttime="20150623 08:28:23.408"></status>
</kw>
<kw type="foritem" name="${process} =  8532 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor94.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:23.492" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:23.491" starttime="20150623 08:28:23.489"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:23.495" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:23.565" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:23.566" starttime="20150623 08:28:23.493"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:23.567" starttime="20150623 08:28:23.488"></status>
</kw>
<kw type="foritem" name="${process} =  8547 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:23.571" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:23.570" starttime="20150623 08:28:23.568"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:23.574" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:23.653" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:23.654" starttime="20150623 08:28:23.572"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:23.655" starttime="20150623 08:28:23.567"></status>
</kw>
<kw type="foritem" name="${process} =  9249 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor95.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:23.659" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:23.659" starttime="20150623 08:28:23.656"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:23.662" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:23.738" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:23.739" starttime="20150623 08:28:23.660"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:23.740" starttime="20150623 08:28:23.655"></status>
</kw>
<kw type="foritem" name="${process} =  9264 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:23.744" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:23.744" starttime="20150623 08:28:23.741"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:23.748" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:23.821" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:23.823" starttime="20150623 08:28:23.746"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:23.823" starttime="20150623 08:28:23.740"></status>
</kw>
<kw type="foritem" name="${process} = 13095 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor100.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:23.828" level="INFO">${pid} = 13095</msg>
<status status="PASS" endtime="20150623 08:28:23.827" starttime="20150623 08:28:23.825"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:23.831" level="INFO">Executing command 'kill -9 13095'.</msg>
<msg timestamp="20150623 08:28:23.902" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:28:23.903" starttime="20150623 08:28:23.829"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:23.904" starttime="20150623 08:28:23.824"></status>
</kw>
<kw type="foritem" name="${process} = 13110 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:23.908" level="INFO">${pid} = 13110</msg>
<status status="PASS" endtime="20150623 08:28:23.907" starttime="20150623 08:28:23.905"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:23.911" level="INFO">Executing command 'kill -9 13110'.</msg>
<msg timestamp="20150623 08:28:23.981" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:28:23.982" starttime="20150623 08:28:23.909"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:23.983" starttime="20150623 08:28:23.904"></status>
</kw>
<kw type="foritem" name="${process} = 13128 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:23.987" level="INFO">${pid} = 13128</msg>
<status status="PASS" endtime="20150623 08:28:23.986" starttime="20150623 08:28:23.984"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:23.990" level="INFO">Executing command 'kill -9 13128'.</msg>
<msg timestamp="20150623 08:28:24.063" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:24.064" starttime="20150623 08:28:23.988"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:24.066" starttime="20150623 08:28:23.983"></status>
</kw>
<kw type="foritem" name="${process} = 13144 ?        R      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:24.071" level="INFO">${pid} = 13144</msg>
<status status="PASS" endtime="20150623 08:28:24.070" starttime="20150623 08:28:24.067"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:24.074" level="INFO">Executing command 'kill -9 13144'.</msg>
<msg timestamp="20150623 08:28:24.145" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:24.146" starttime="20150623 08:28:24.072"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:24.147" starttime="20150623 08:28:24.067"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:24.148" starttime="20150623 08:28:20.579"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:24.149" starttime="20150623 08:28:20.414"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:28:24.153" level="INFO">Starting command 'cat tmpfilemonitor100.log'.</msg>
<status status="PASS" endtime="20150623 08:28:24.188" starttime="20150623 08:28:24.151"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:28:24.190" level="INFO">Reading output of command 'cat tmpfilemonitor100.log'.</msg>
<msg timestamp="20150623 08:28:24.227" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:28:24.229" level="INFO">${stdout_string} = [2015-06-23 06:27:39,387][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:28:24.228" starttime="20150623 08:28:24.189"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:28:24.252" level="INFO">Executing command 'rm tmpfilemonitor100.log'.</msg>
<msg timestamp="20150623 08:28:24.317" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:28:24.317" starttime="20150623 08:28:24.230"></status>
</kw>
<msg timestamp="20150623 08:28:24.321" level="INFO">${tailed_text} = [2015-06-23 06:27:39,387][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:28:24.319" starttime="20150623 08:28:20.389"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:24.329" starttime="20150623 08:28:24.322"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:24.338" starttime="20150623 08:28:24.336"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:28:24.341" starttime="20150623 08:28:24.339"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:24.345" starttime="20150623 08:28:24.330"></status>
</kw>
<msg timestamp="20150623 08:28:24.348" level="INFO">${tailed_text} = [2015-06-23 06:27:39,387][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:28:24.347" starttime="20150623 08:28:20.383"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:24.364" starttime="20150623 08:28:24.362"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:24.365" starttime="20150623 08:28:24.357"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:24.371" starttime="20150623 08:28:24.366"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:24.375" starttime="20150623 08:28:24.372"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:24.378" starttime="20150623 08:28:24.376"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:24.379" starttime="20150623 08:28:24.351"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:24.406" starttime="20150623 08:28:24.405"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:24.413" starttime="20150623 08:28:24.407"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:24.416" starttime="20150623 08:28:24.414"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:28:24.420" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:28:24.422" level="INFO">${queryResultSetLines} = 1004560|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:28:24.421" starttime="20150623 08:28:24.417"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:24.425" starttime="20150623 08:28:24.423"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:28:24.428" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:28:24.429" level="INFO">@{queryResultSet} = [ 1004560|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:28:24.428" starttime="20150623 08:28:24.426"></status>
</kw>
<msg timestamp="20150623 08:28:24.431" level="INFO">@{queryRows} = [ 1004560|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:28:24.430" starttime="20150623 08:28:24.399"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:28:24.435" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:28:24.436" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:28:24.436" starttime="20150623 08:28:24.432"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:28:24.439" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:28:24.440" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:28:24.440" starttime="20150623 08:28:24.437"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:28:24.449" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:28:24.450" starttime="20150623 08:28:24.447"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:24.451" starttime="20150623 08:28:24.442"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:24.457" starttime="20150623 08:28:24.452"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:24.458" starttime="20150623 08:28:24.391"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:24.459" starttime="20150623 08:28:19.806"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:24.461" starttime="20150623 08:28:19.800"></status>
</kw>
<msg timestamp="20150623 08:28:24.464" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:28:24.463" starttime="20150623 08:28:19.798"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:28:24.467" level="INFO">Index in the 2. loop: 7</msg>
<status status="PASS" endtime="20150623 08:28:24.468" starttime="20150623 08:28:24.465"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:28:33.472" level="INFO">Slept 9 seconds</msg>
<status status="PASS" endtime="20150623 08:28:33.473" starttime="20150623 08:28:24.469"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:28:33.482" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:28:33.481" starttime="20150623 08:28:33.475"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:33.483" starttime="20150623 08:28:19.797"></status>
</kw>
<kw type="foritem" name="${index} = 8">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:33.531" starttime="20150623 08:28:33.529"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:33.596" starttime="20150623 08:28:33.538"></status>
</kw>
<msg timestamp="20150623 08:28:33.598" level="INFO">${ssh_connection} = 101</msg>
<status status="PASS" endtime="20150623 08:28:33.597" starttime="20150623 08:28:33.532"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:28:33.608" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:28:34.064" level="INFO">Read output: Last login: Tue Jun 23 06:28:20 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:28:34.066" starttime="20150623 08:28:33.606"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:34.068" starttime="20150623 08:28:33.599"></status>
</kw>
<msg timestamp="20150623 08:28:34.072" level="INFO">${ssh_connection} = 101</msg>
<status status="PASS" endtime="20150623 08:28:34.070" starttime="20150623 08:28:33.521"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:34.083" starttime="20150623 08:28:34.080"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:28:34.086" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor101.log'.</msg>
<status status="PASS" endtime="20150623 08:28:34.091" starttime="20150623 08:28:34.084"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:34.092" starttime="20150623 08:28:34.074"></status>
</kw>
<msg timestamp="20150623 08:28:34.095" level="INFO">${ssh_connection} = 101</msg>
<status status="PASS" endtime="20150623 08:28:34.093" starttime="20150623 08:28:33.510"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:34.118" starttime="20150623 08:28:34.112"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:34.119" starttime="20150623 08:28:34.107"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:28:34.129" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:28:34.131" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:28:34.130" starttime="20150623 08:28:34.126"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:28:34.134" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:28:34.135" starttime="20150623 08:28:34.132"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:34.137" starttime="20150623 08:28:34.136"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:34.146" starttime="20150623 08:28:34.138"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:34.147" starttime="20150623 08:28:34.121"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:34.163" starttime="20150623 08:28:34.161"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:28:34.170" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:28:34.169" starttime="20150623 08:28:34.164"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:28:34.176" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:28:34.177" starttime="20150623 08:28:34.171"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:34.187" starttime="20150623 08:28:34.184"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:28:34.189" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:28:34.229" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:28:34.231" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:28:34.230" starttime="20150623 08:28:34.188"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:28:34.234" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:28:34.332" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:28:34.333" level="INFO">${processes_string} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log
  373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
  538 ?        ...</msg>
<status status="PASS" endtime="20150623 08:28:34.333" starttime="20150623 08:28:34.232"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:28:34.338" level="INFO">@{processes_list} = [   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log |   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log |   538 ?  ...</msg>
<status status="PASS" endtime="20150623 08:28:34.337" starttime="20150623 08:28:34.335"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:34.344" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:34.343" starttime="20150623 08:28:34.341"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:34.347" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:34.412" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:34.413" starttime="20150623 08:28:34.345"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:34.414" starttime="20150623 08:28:34.340"></status>
</kw>
<kw type="foritem" name="${process} =   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:34.418" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:34.417" starttime="20150623 08:28:34.415"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:34.421" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:34.489" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:34.490" starttime="20150623 08:28:34.419"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:34.491" starttime="20150623 08:28:34.414"></status>
</kw>
<kw type="foritem" name="${process} =   538 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor77.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:34.495" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:34.494" starttime="20150623 08:28:34.492"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:34.498" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:34.569" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:34.569" starttime="20150623 08:28:34.496"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:34.570" starttime="20150623 08:28:34.491"></status>
</kw>
<kw type="foritem" name="${process} =   553 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:34.574" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:34.574" starttime="20150623 08:28:34.571"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:34.578" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:34.648" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:34.649" starttime="20150623 08:28:34.576"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:34.650" starttime="20150623 08:28:34.571"></status>
</kw>
<kw type="foritem" name="${process} =   745 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor78.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:34.654" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:34.654" starttime="20150623 08:28:34.651"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:34.657" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:34.730" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:34.731" starttime="20150623 08:28:34.655"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:34.732" starttime="20150623 08:28:34.650"></status>
</kw>
<kw type="foritem" name="${process} =   760 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:34.736" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:34.736" starttime="20150623 08:28:34.733"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:34.739" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:34.811" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:34.812" starttime="20150623 08:28:34.737"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:34.813" starttime="20150623 08:28:34.732"></status>
</kw>
<kw type="foritem" name="${process} =   985 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor79.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:34.818" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:34.817" starttime="20150623 08:28:34.815"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:34.821" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:34.891" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:34.892" starttime="20150623 08:28:34.819"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:34.893" starttime="20150623 08:28:34.814"></status>
</kw>
<kw type="foritem" name="${process} =  1000 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:34.897" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:34.896" starttime="20150623 08:28:34.894"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:34.900" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:34.971" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:34.972" starttime="20150623 08:28:34.898"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:34.973" starttime="20150623 08:28:34.893"></status>
</kw>
<kw type="foritem" name="${process} =  1249 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor80.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:34.978" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:34.977" starttime="20150623 08:28:34.974"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:34.981" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:35.053" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:35.054" starttime="20150623 08:28:34.979"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:35.055" starttime="20150623 08:28:34.974"></status>
</kw>
<kw type="foritem" name="${process} =  1264 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:35.060" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:35.060" starttime="20150623 08:28:35.057"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:35.064" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:35.134" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:35.150" starttime="20150623 08:28:35.061"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:35.151" starttime="20150623 08:28:35.056"></status>
</kw>
<kw type="foritem" name="${process} =  1559 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor81.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:35.156" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:35.156" starttime="20150623 08:28:35.153"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:35.160" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:35.220" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:35.220" starttime="20150623 08:28:35.158"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:35.221" starttime="20150623 08:28:35.152"></status>
</kw>
<kw type="foritem" name="${process} =  1574 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:35.225" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:35.225" starttime="20150623 08:28:35.222"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:35.229" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:35.306" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:35.307" starttime="20150623 08:28:35.227"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:35.308" starttime="20150623 08:28:35.222"></status>
</kw>
<kw type="foritem" name="${process} =  1899 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor82.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:35.312" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:35.311" starttime="20150623 08:28:35.309"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:35.315" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:35.385" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:35.386" starttime="20150623 08:28:35.313"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:35.387" starttime="20150623 08:28:35.308"></status>
</kw>
<kw type="foritem" name="${process} =  1914 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:35.392" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:35.391" starttime="20150623 08:28:35.388"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:35.395" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:35.453" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:35.454" starttime="20150623 08:28:35.393"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:35.455" starttime="20150623 08:28:35.387"></status>
</kw>
<kw type="foritem" name="${process} =  2254 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor83.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:35.459" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:35.458" starttime="20150623 08:28:35.456"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:35.462" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:35.521" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:35.522" starttime="20150623 08:28:35.460"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:35.523" starttime="20150623 08:28:35.455"></status>
</kw>
<kw type="foritem" name="${process} =  2269 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:35.527" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:35.526" starttime="20150623 08:28:35.524"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:35.530" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:35.599" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:35.599" starttime="20150623 08:28:35.528"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:35.600" starttime="20150623 08:28:35.523"></status>
</kw>
<kw type="foritem" name="${process} =  2640 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor84.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:35.604" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:35.604" starttime="20150623 08:28:35.601"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:35.608" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:35.698" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:35.699" starttime="20150623 08:28:35.606"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:35.699" starttime="20150623 08:28:35.601"></status>
</kw>
<kw type="foritem" name="${process} =  2655 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:35.704" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:35.703" starttime="20150623 08:28:35.701"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:35.707" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:35.779" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:35.780" starttime="20150623 08:28:35.705"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:35.781" starttime="20150623 08:28:35.700"></status>
</kw>
<kw type="foritem" name="${process} =  3081 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor85.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:35.785" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:35.784" starttime="20150623 08:28:35.782"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:35.788" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:35.860" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:35.860" starttime="20150623 08:28:35.786"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:35.861" starttime="20150623 08:28:35.781"></status>
</kw>
<kw type="foritem" name="${process} =  3096 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:35.865" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:35.865" starttime="20150623 08:28:35.862"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:35.868" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:35.941" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:35.942" starttime="20150623 08:28:35.867"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:35.943" starttime="20150623 08:28:35.862"></status>
</kw>
<kw type="foritem" name="${process} =  3577 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor86.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:35.947" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:35.947" starttime="20150623 08:28:35.944"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:35.950" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:36.022" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:36.023" starttime="20150623 08:28:35.948"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:36.025" starttime="20150623 08:28:35.943"></status>
</kw>
<kw type="foritem" name="${process} =  3592 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:36.030" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:36.029" starttime="20150623 08:28:36.026"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:36.033" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:36.102" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:36.103" starttime="20150623 08:28:36.031"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:36.104" starttime="20150623 08:28:36.026"></status>
</kw>
<kw type="foritem" name="${process} =  4052 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor87.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:36.108" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:36.108" starttime="20150623 08:28:36.105"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:36.111" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:36.183" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:36.184" starttime="20150623 08:28:36.109"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:36.184" starttime="20150623 08:28:36.104"></status>
</kw>
<kw type="foritem" name="${process} =  4067 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:36.189" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:36.188" starttime="20150623 08:28:36.186"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:36.192" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:36.264" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:36.265" starttime="20150623 08:28:36.190"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:36.266" starttime="20150623 08:28:36.185"></status>
</kw>
<kw type="foritem" name="${process} =  4578 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor88.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:36.270" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:36.269" starttime="20150623 08:28:36.267"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:36.273" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:36.347" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:36.347" starttime="20150623 08:28:36.271"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:36.348" starttime="20150623 08:28:36.266"></status>
</kw>
<kw type="foritem" name="${process} =  4593 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:36.352" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:36.352" starttime="20150623 08:28:36.349"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:36.355" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:36.432" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:36.433" starttime="20150623 08:28:36.353"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:36.433" starttime="20150623 08:28:36.349"></status>
</kw>
<kw type="foritem" name="${process} =  5112 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor89.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:36.438" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:36.437" starttime="20150623 08:28:36.435"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:36.441" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:36.514" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:36.514" starttime="20150623 08:28:36.439"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:36.515" starttime="20150623 08:28:36.434"></status>
</kw>
<kw type="foritem" name="${process} =  5127 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:36.519" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:36.519" starttime="20150623 08:28:36.516"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:36.522" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:36.624" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:36.625" starttime="20150623 08:28:36.520"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:36.625" starttime="20150623 08:28:36.516"></status>
</kw>
<kw type="foritem" name="${process} =  5740 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor90.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:36.630" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:36.629" starttime="20150623 08:28:36.627"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:36.633" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:36.711" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:36.712" starttime="20150623 08:28:36.631"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:36.713" starttime="20150623 08:28:36.626"></status>
</kw>
<kw type="foritem" name="${process} =  5755 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:36.717" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:36.716" starttime="20150623 08:28:36.714"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:36.720" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:36.791" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:36.792" starttime="20150623 08:28:36.718"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:36.792" starttime="20150623 08:28:36.713"></status>
</kw>
<kw type="foritem" name="${process} =  6570 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor91.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:36.797" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:36.796" starttime="20150623 08:28:36.794"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:36.800" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:36.870" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:36.871" starttime="20150623 08:28:36.798"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:36.872" starttime="20150623 08:28:36.793"></status>
</kw>
<kw type="foritem" name="${process} =  6585 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:36.876" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:36.876" starttime="20150623 08:28:36.873"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:36.879" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:36.950" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:36.951" starttime="20150623 08:28:36.877"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:36.952" starttime="20150623 08:28:36.872"></status>
</kw>
<kw type="foritem" name="${process} =  7194 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor92.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:36.956" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:36.956" starttime="20150623 08:28:36.953"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:36.960" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:37.030" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:37.031" starttime="20150623 08:28:36.958"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:37.032" starttime="20150623 08:28:36.952"></status>
</kw>
<kw type="foritem" name="${process} =  7209 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:37.037" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:37.037" starttime="20150623 08:28:37.034"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:37.040" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:37.109" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:37.110" starttime="20150623 08:28:37.038"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:37.111" starttime="20150623 08:28:37.033"></status>
</kw>
<kw type="foritem" name="${process} =  7848 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor93.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:37.115" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:37.114" starttime="20150623 08:28:37.112"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:37.118" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:37.186" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:37.187" starttime="20150623 08:28:37.116"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:37.188" starttime="20150623 08:28:37.111"></status>
</kw>
<kw type="foritem" name="${process} =  7863 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:37.192" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:37.191" starttime="20150623 08:28:37.189"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:37.195" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:37.267" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:37.267" starttime="20150623 08:28:37.193"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:37.268" starttime="20150623 08:28:37.188"></status>
</kw>
<kw type="foritem" name="${process} =  8532 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor94.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:37.273" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:37.272" starttime="20150623 08:28:37.269"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:37.276" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:37.349" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:37.350" starttime="20150623 08:28:37.274"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:37.351" starttime="20150623 08:28:37.269"></status>
</kw>
<kw type="foritem" name="${process} =  8547 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:37.355" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:37.354" starttime="20150623 08:28:37.352"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:37.358" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:37.432" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:37.433" starttime="20150623 08:28:37.356"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:37.434" starttime="20150623 08:28:37.351"></status>
</kw>
<kw type="foritem" name="${process} =  9249 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor95.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:37.438" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:37.437" starttime="20150623 08:28:37.435"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:37.441" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:37.514" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:37.514" starttime="20150623 08:28:37.439"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:37.515" starttime="20150623 08:28:37.434"></status>
</kw>
<kw type="foritem" name="${process} =  9264 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:37.519" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:37.519" starttime="20150623 08:28:37.516"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:37.523" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:37.594" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:37.594" starttime="20150623 08:28:37.521"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:37.595" starttime="20150623 08:28:37.516"></status>
</kw>
<kw type="foritem" name="${process} = 13869 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor101.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:37.599" level="INFO">${pid} = 13869</msg>
<status status="PASS" endtime="20150623 08:28:37.599" starttime="20150623 08:28:37.596"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:37.602" level="INFO">Executing command 'kill -9 13869'.</msg>
<msg timestamp="20150623 08:28:37.673" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:28:37.674" starttime="20150623 08:28:37.600"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:37.675" starttime="20150623 08:28:37.596"></status>
</kw>
<kw type="foritem" name="${process} = 13885 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:37.679" level="INFO">${pid} = 13885</msg>
<status status="PASS" endtime="20150623 08:28:37.678" starttime="20150623 08:28:37.676"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:37.682" level="INFO">Executing command 'kill -9 13885'.</msg>
<msg timestamp="20150623 08:28:37.764" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:28:37.765" starttime="20150623 08:28:37.680"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:37.766" starttime="20150623 08:28:37.675"></status>
</kw>
<kw type="foritem" name="${process} = 13903 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:37.770" level="INFO">${pid} = 13903</msg>
<status status="PASS" endtime="20150623 08:28:37.769" starttime="20150623 08:28:37.767"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:37.773" level="INFO">Executing command 'kill -9 13903'.</msg>
<msg timestamp="20150623 08:28:37.854" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:37.855" starttime="20150623 08:28:37.771"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:37.856" starttime="20150623 08:28:37.766"></status>
</kw>
<kw type="foritem" name="${process} = 13919 ?        R      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:37.860" level="INFO">${pid} = 13919</msg>
<status status="PASS" endtime="20150623 08:28:37.860" starttime="20150623 08:28:37.857"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:37.864" level="INFO">Executing command 'kill -9 13919'.</msg>
<msg timestamp="20150623 08:28:37.941" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:37.941" starttime="20150623 08:28:37.862"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:37.942" starttime="20150623 08:28:37.856"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:37.943" starttime="20150623 08:28:34.339"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:37.944" starttime="20150623 08:28:34.178"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:28:37.948" level="INFO">Starting command 'cat tmpfilemonitor101.log'.</msg>
<status status="PASS" endtime="20150623 08:28:37.985" starttime="20150623 08:28:37.946"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:28:37.987" level="INFO">Reading output of command 'cat tmpfilemonitor101.log'.</msg>
<msg timestamp="20150623 08:28:38.035" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:28:38.037" level="INFO">${stdout_string} = [2015-06-23 06:27:53,026][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:28:38.036" starttime="20150623 08:28:37.986"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:28:38.041" level="INFO">Executing command 'rm tmpfilemonitor101.log'.</msg>
<msg timestamp="20150623 08:28:38.116" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:28:38.117" starttime="20150623 08:28:38.039"></status>
</kw>
<msg timestamp="20150623 08:28:38.120" level="INFO">${tailed_text} = [2015-06-23 06:27:53,026][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:28:38.118" starttime="20150623 08:28:34.156"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:38.127" starttime="20150623 08:28:38.121"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:38.137" starttime="20150623 08:28:38.134"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:28:38.140" starttime="20150623 08:28:38.138"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:38.144" starttime="20150623 08:28:38.129"></status>
</kw>
<msg timestamp="20150623 08:28:38.147" level="INFO">${tailed_text} = [2015-06-23 06:27:53,026][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:28:38.145" starttime="20150623 08:28:34.150"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:38.163" starttime="20150623 08:28:38.161"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:38.164" starttime="20150623 08:28:38.155"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:38.170" starttime="20150623 08:28:38.165"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:38.174" starttime="20150623 08:28:38.171"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:38.177" starttime="20150623 08:28:38.175"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:38.178" starttime="20150623 08:28:38.149"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:38.207" starttime="20150623 08:28:38.205"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:38.213" starttime="20150623 08:28:38.208"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:38.216" starttime="20150623 08:28:38.214"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:28:38.219" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:28:38.221" level="INFO">${queryResultSetLines} = 1004561|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:28:38.220" starttime="20150623 08:28:38.217"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:38.224" starttime="20150623 08:28:38.222"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:28:38.227" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:28:38.228" level="INFO">@{queryResultSet} = [ 1004561|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:28:38.227" starttime="20150623 08:28:38.225"></status>
</kw>
<msg timestamp="20150623 08:28:38.230" level="INFO">@{queryRows} = [ 1004561|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:28:38.230" starttime="20150623 08:28:38.198"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:28:38.234" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:28:38.235" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:28:38.235" starttime="20150623 08:28:38.231"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:28:38.238" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:28:38.240" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:28:38.239" starttime="20150623 08:28:38.236"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:28:38.248" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:28:38.249" starttime="20150623 08:28:38.247"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:38.250" starttime="20150623 08:28:38.241"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:38.256" starttime="20150623 08:28:38.251"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:38.257" starttime="20150623 08:28:38.190"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:38.259" starttime="20150623 08:28:33.493"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:38.260" starttime="20150623 08:28:33.487"></status>
</kw>
<msg timestamp="20150623 08:28:38.263" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:28:38.262" starttime="20150623 08:28:33.485"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:28:38.266" level="INFO">Index in the 2. loop: 8</msg>
<status status="PASS" endtime="20150623 08:28:38.267" starttime="20150623 08:28:38.264"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:28:47.271" level="INFO">Slept 9 seconds</msg>
<status status="PASS" endtime="20150623 08:28:47.272" starttime="20150623 08:28:38.268"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:28:47.281" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:28:47.281" starttime="20150623 08:28:47.274"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:47.282" starttime="20150623 08:28:33.484"></status>
</kw>
<kw type="foritem" name="${index} = 9">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:47.330" starttime="20150623 08:28:47.328"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:47.399" starttime="20150623 08:28:47.337"></status>
</kw>
<msg timestamp="20150623 08:28:47.401" level="INFO">${ssh_connection} = 102</msg>
<status status="PASS" endtime="20150623 08:28:47.400" starttime="20150623 08:28:47.331"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:28:47.410" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:28:47.840" level="INFO">Read output: Last login: Tue Jun 23 06:28:33 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150623 08:28:47.841" starttime="20150623 08:28:47.408"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:47.843" starttime="20150623 08:28:47.402"></status>
</kw>
<msg timestamp="20150623 08:28:47.845" level="INFO">${ssh_connection} = 102</msg>
<status status="PASS" endtime="20150623 08:28:47.845" starttime="20150623 08:28:47.320"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:47.857" starttime="20150623 08:28:47.854"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:28:47.860" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor102.log'.</msg>
<status status="PASS" endtime="20150623 08:28:47.865" starttime="20150623 08:28:47.858"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:47.866" starttime="20150623 08:28:47.848"></status>
</kw>
<msg timestamp="20150623 08:28:47.868" level="INFO">${ssh_connection} = 102</msg>
<status status="PASS" endtime="20150623 08:28:47.867" starttime="20150623 08:28:47.309"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:47.892" starttime="20150623 08:28:47.886"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:47.894" starttime="20150623 08:28:47.880"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket file to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${TICKET} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/${ticket_type}.txt</arg>
</arguments>
<msg timestamp="20150623 08:28:47.904" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tickets/MOC.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:28:47.906" level="INFO">${TICKET} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309920...</msg>
<status status="PASS" endtime="20150623 08:28:47.906" starttime="20150623 08:28:47.902"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<msg timestamp="20150623 08:28:47.909" level="INFO">5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||
</msg>
<status status="PASS" endtime="20150623 08:28:47.910" starttime="20150623 08:28:47.907"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${TICKET}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:47.913" starttime="20150623 08:28:47.911"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:47.922" starttime="20150623 08:28:47.914"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:47.923" starttime="20150623 08:28:47.896"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:47.939" starttime="20150623 08:28:47.937"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150623 08:28:47.946" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150623 08:28:47.946" starttime="20150623 08:28:47.940"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150623 08:28:47.952" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150623 08:28:47.953" starttime="20150623 08:28:47.947"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:47.962" starttime="20150623 08:28:47.960"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150623 08:28:47.965" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150623 08:28:48.007" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:28:48.010" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150623 08:28:48.009" starttime="20150623 08:28:47.964"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150623 08:28:48.014" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150623 08:28:48.110" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:28:48.111" level="INFO">${processes_string} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log
  373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
  538 ?        ...</msg>
<status status="PASS" endtime="20150623 08:28:48.110" starttime="20150623 08:28:48.011"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150623 08:28:48.116" level="INFO">@{processes_list} = [   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log |   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log |   538 ?  ...</msg>
<status status="PASS" endtime="20150623 08:28:48.115" starttime="20150623 08:28:48.112"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} =   358 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:48.121" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:48.121" starttime="20150623 08:28:48.118"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:48.124" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:48.191" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:48.191" starttime="20150623 08:28:48.122"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:48.192" starttime="20150623 08:28:48.118"></status>
</kw>
<kw type="foritem" name="${process} =   373 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:48.196" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:48.196" starttime="20150623 08:28:48.193"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:48.200" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:48.270" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:48.270" starttime="20150623 08:28:48.198"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:48.271" starttime="20150623 08:28:48.193"></status>
</kw>
<kw type="foritem" name="${process} =   538 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor77.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:48.276" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:48.275" starttime="20150623 08:28:48.272"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:48.279" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:48.350" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:48.350" starttime="20150623 08:28:48.277"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:48.351" starttime="20150623 08:28:48.271"></status>
</kw>
<kw type="foritem" name="${process} =   553 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:48.355" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:48.355" starttime="20150623 08:28:48.352"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:48.358" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:48.432" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:48.433" starttime="20150623 08:28:48.356"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:48.434" starttime="20150623 08:28:48.352"></status>
</kw>
<kw type="foritem" name="${process} =   745 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor78.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:48.438" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:48.437" starttime="20150623 08:28:48.435"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:48.441" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:48.511" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:48.512" starttime="20150623 08:28:48.439"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:48.513" starttime="20150623 08:28:48.434"></status>
</kw>
<kw type="foritem" name="${process} =   760 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:48.517" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:48.517" starttime="20150623 08:28:48.514"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:48.520" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:48.592" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:48.592" starttime="20150623 08:28:48.519"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:48.593" starttime="20150623 08:28:48.514"></status>
</kw>
<kw type="foritem" name="${process} =   985 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor79.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:48.598" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:48.597" starttime="20150623 08:28:48.594"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:48.601" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:48.672" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:48.673" starttime="20150623 08:28:48.599"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:48.674" starttime="20150623 08:28:48.594"></status>
</kw>
<kw type="foritem" name="${process} =  1000 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:48.679" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:48.678" starttime="20150623 08:28:48.676"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:48.705" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:48.758" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:48.759" starttime="20150623 08:28:48.703"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:48.759" starttime="20150623 08:28:48.675"></status>
</kw>
<kw type="foritem" name="${process} =  1249 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor80.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:48.764" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:48.763" starttime="20150623 08:28:48.761"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:48.767" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:48.840" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:48.841" starttime="20150623 08:28:48.765"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:48.842" starttime="20150623 08:28:48.760"></status>
</kw>
<kw type="foritem" name="${process} =  1264 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:48.846" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:48.846" starttime="20150623 08:28:48.843"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:48.850" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:48.920" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:48.921" starttime="20150623 08:28:48.847"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:48.922" starttime="20150623 08:28:48.842"></status>
</kw>
<kw type="foritem" name="${process} =  1559 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor81.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:48.927" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:48.927" starttime="20150623 08:28:48.924"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:48.931" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:49.007" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:49.008" starttime="20150623 08:28:48.929"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:49.010" starttime="20150623 08:28:48.923"></status>
</kw>
<kw type="foritem" name="${process} =  1574 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:49.016" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:49.015" starttime="20150623 08:28:49.012"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:49.019" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:49.092" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:49.093" starttime="20150623 08:28:49.017"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:49.093" starttime="20150623 08:28:49.011"></status>
</kw>
<kw type="foritem" name="${process} =  1899 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor82.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:49.098" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:49.097" starttime="20150623 08:28:49.095"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:49.101" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:49.169" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:49.170" starttime="20150623 08:28:49.099"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:49.171" starttime="20150623 08:28:49.094"></status>
</kw>
<kw type="foritem" name="${process} =  1914 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:49.175" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:49.175" starttime="20150623 08:28:49.172"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:49.178" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:49.238" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:49.238" starttime="20150623 08:28:49.177"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:49.239" starttime="20150623 08:28:49.171"></status>
</kw>
<kw type="foritem" name="${process} =  2254 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor83.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:49.244" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:49.243" starttime="20150623 08:28:49.241"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:49.247" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:49.307" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:49.308" starttime="20150623 08:28:49.245"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:49.309" starttime="20150623 08:28:49.240"></status>
</kw>
<kw type="foritem" name="${process} =  2269 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:49.313" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:49.312" starttime="20150623 08:28:49.310"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:49.316" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:49.383" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:49.384" starttime="20150623 08:28:49.314"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:49.385" starttime="20150623 08:28:49.309"></status>
</kw>
<kw type="foritem" name="${process} =  2640 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor84.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:49.389" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:49.388" starttime="20150623 08:28:49.386"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:49.392" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:49.463" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:49.464" starttime="20150623 08:28:49.390"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:49.465" starttime="20150623 08:28:49.385"></status>
</kw>
<kw type="foritem" name="${process} =  2655 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:49.469" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:49.468" starttime="20150623 08:28:49.466"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:49.472" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:49.543" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:49.544" starttime="20150623 08:28:49.470"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:49.544" starttime="20150623 08:28:49.465"></status>
</kw>
<kw type="foritem" name="${process} =  3081 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor85.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:49.549" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:49.548" starttime="20150623 08:28:49.546"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:49.552" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:49.623" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:49.624" starttime="20150623 08:28:49.550"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:49.625" starttime="20150623 08:28:49.545"></status>
</kw>
<kw type="foritem" name="${process} =  3096 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:49.629" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:49.628" starttime="20150623 08:28:49.626"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:49.632" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:49.706" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:49.707" starttime="20150623 08:28:49.630"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:49.708" starttime="20150623 08:28:49.625"></status>
</kw>
<kw type="foritem" name="${process} =  3577 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor86.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:49.712" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:49.711" starttime="20150623 08:28:49.709"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:49.715" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:49.789" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:49.790" starttime="20150623 08:28:49.713"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:49.790" starttime="20150623 08:28:49.708"></status>
</kw>
<kw type="foritem" name="${process} =  3592 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:49.795" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:49.794" starttime="20150623 08:28:49.792"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:49.798" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:49.869" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:49.870" starttime="20150623 08:28:49.796"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:49.871" starttime="20150623 08:28:49.791"></status>
</kw>
<kw type="foritem" name="${process} =  4052 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor87.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:49.875" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:49.874" starttime="20150623 08:28:49.872"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:49.878" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:49.950" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:49.951" starttime="20150623 08:28:49.876"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:49.952" starttime="20150623 08:28:49.871"></status>
</kw>
<kw type="foritem" name="${process} =  4067 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:49.956" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:49.955" starttime="20150623 08:28:49.953"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:49.959" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:50.039" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:50.040" starttime="20150623 08:28:49.957"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:50.042" starttime="20150623 08:28:49.952"></status>
</kw>
<kw type="foritem" name="${process} =  4578 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor88.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:50.047" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:50.046" starttime="20150623 08:28:50.044"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:50.050" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:50.122" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:50.122" starttime="20150623 08:28:50.048"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:50.123" starttime="20150623 08:28:50.043"></status>
</kw>
<kw type="foritem" name="${process} =  4593 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:50.127" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:50.127" starttime="20150623 08:28:50.124"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:50.130" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:50.206" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:50.207" starttime="20150623 08:28:50.128"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:50.208" starttime="20150623 08:28:50.124"></status>
</kw>
<kw type="foritem" name="${process} =  5112 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor89.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:50.212" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:50.211" starttime="20150623 08:28:50.209"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:50.215" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:50.289" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:50.289" starttime="20150623 08:28:50.213"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:50.290" starttime="20150623 08:28:50.208"></status>
</kw>
<kw type="foritem" name="${process} =  5127 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:50.294" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:50.294" starttime="20150623 08:28:50.291"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:50.298" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:50.370" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:50.371" starttime="20150623 08:28:50.296"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:50.371" starttime="20150623 08:28:50.291"></status>
</kw>
<kw type="foritem" name="${process} =  5740 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor90.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:50.376" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:50.375" starttime="20150623 08:28:50.373"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:50.379" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:50.452" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:50.453" starttime="20150623 08:28:50.377"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:50.454" starttime="20150623 08:28:50.372"></status>
</kw>
<kw type="foritem" name="${process} =  5755 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:50.458" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:50.457" starttime="20150623 08:28:50.455"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:50.461" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:50.531" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:50.532" starttime="20150623 08:28:50.459"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:50.532" starttime="20150623 08:28:50.454"></status>
</kw>
<kw type="foritem" name="${process} =  6570 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor91.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:50.537" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:50.536" starttime="20150623 08:28:50.534"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:50.540" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:50.614" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:50.615" starttime="20150623 08:28:50.538"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:50.616" starttime="20150623 08:28:50.533"></status>
</kw>
<kw type="foritem" name="${process} =  6585 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:50.620" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:50.619" starttime="20150623 08:28:50.617"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:50.623" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:50.693" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:50.694" starttime="20150623 08:28:50.621"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:50.695" starttime="20150623 08:28:50.616"></status>
</kw>
<kw type="foritem" name="${process} =  7194 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor92.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:50.699" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:50.699" starttime="20150623 08:28:50.696"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:50.702" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:50.774" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:50.775" starttime="20150623 08:28:50.700"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:50.776" starttime="20150623 08:28:50.696"></status>
</kw>
<kw type="foritem" name="${process} =  7209 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:50.780" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:50.779" starttime="20150623 08:28:50.777"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:50.783" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:50.855" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:50.856" starttime="20150623 08:28:50.781"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:50.857" starttime="20150623 08:28:50.776"></status>
</kw>
<kw type="foritem" name="${process} =  7848 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor93.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:50.861" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:50.860" starttime="20150623 08:28:50.858"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:50.864" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:50.936" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:50.937" starttime="20150623 08:28:50.862"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:50.937" starttime="20150623 08:28:50.857"></status>
</kw>
<kw type="foritem" name="${process} =  7863 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:50.942" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:50.941" starttime="20150623 08:28:50.939"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:50.945" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:51.016" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:51.017" starttime="20150623 08:28:50.943"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:51.019" starttime="20150623 08:28:50.938"></status>
</kw>
<kw type="foritem" name="${process} =  8532 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor94.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:51.024" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:51.023" starttime="20150623 08:28:51.021"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:51.027" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:51.096" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:51.096" starttime="20150623 08:28:51.025"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:51.097" starttime="20150623 08:28:51.020"></status>
</kw>
<kw type="foritem" name="${process} =  8547 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:51.101" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:51.101" starttime="20150623 08:28:51.098"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:51.105" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:51.174" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:51.175" starttime="20150623 08:28:51.103"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:51.175" starttime="20150623 08:28:51.098"></status>
</kw>
<kw type="foritem" name="${process} =  9249 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor95.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:51.180" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:51.179" starttime="20150623 08:28:51.177"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:51.183" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:51.254" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:51.255" starttime="20150623 08:28:51.181"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:51.256" starttime="20150623 08:28:51.176"></status>
</kw>
<kw type="foritem" name="${process} =  9264 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:51.260" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150623 08:28:51.259" starttime="20150623 08:28:51.257"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:51.281" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150623 08:28:51.334" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:51.335" starttime="20150623 08:28:51.261"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:51.336" starttime="20150623 08:28:51.256"></status>
</kw>
<kw type="foritem" name="${process} = 14647 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor102.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:51.340" level="INFO">${pid} = 14647</msg>
<status status="PASS" endtime="20150623 08:28:51.340" starttime="20150623 08:28:51.337"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:51.344" level="INFO">Executing command 'kill -9 14647'.</msg>
<msg timestamp="20150623 08:28:51.416" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:28:51.417" starttime="20150623 08:28:51.342"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:51.418" starttime="20150623 08:28:51.336"></status>
</kw>
<kw type="foritem" name="${process} = 14662 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:51.422" level="INFO">${pid} = 14662</msg>
<status status="PASS" endtime="20150623 08:28:51.421" starttime="20150623 08:28:51.419"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:51.426" level="INFO">Executing command 'kill -9 14662'.</msg>
<msg timestamp="20150623 08:28:51.497" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:28:51.497" starttime="20150623 08:28:51.423"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:51.498" starttime="20150623 08:28:51.418"></status>
</kw>
<kw type="foritem" name="${process} = 14680 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:51.502" level="INFO">${pid} = 14680</msg>
<status status="PASS" endtime="20150623 08:28:51.502" starttime="20150623 08:28:51.499"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:51.505" level="INFO">Executing command 'kill -9 14680'.</msg>
<msg timestamp="20150623 08:28:51.579" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:51.580" starttime="20150623 08:28:51.503"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:51.581" starttime="20150623 08:28:51.499"></status>
</kw>
<kw type="foritem" name="${process} = 14696 ?        R      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150623 08:28:51.585" level="INFO">${pid} = 14696</msg>
<status status="PASS" endtime="20150623 08:28:51.584" starttime="20150623 08:28:51.582"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150623 08:28:51.588" level="INFO">Executing command 'kill -9 14696'.</msg>
<msg timestamp="20150623 08:28:51.661" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:28:51.661" starttime="20150623 08:28:51.586"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:51.662" starttime="20150623 08:28:51.581"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:51.663" starttime="20150623 08:28:48.117"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:51.664" starttime="20150623 08:28:47.954"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:28:51.668" level="INFO">Starting command 'cat tmpfilemonitor102.log'.</msg>
<status status="PASS" endtime="20150623 08:28:51.704" starttime="20150623 08:28:51.666"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:28:51.706" level="INFO">Reading output of command 'cat tmpfilemonitor102.log'.</msg>
<msg timestamp="20150623 08:28:51.740" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150623 08:28:51.742" level="INFO">${stdout_string} = [2015-06-23 06:28:06,760][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:28:51.741" starttime="20150623 08:28:51.705"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150623 08:28:51.745" level="INFO">Executing command 'rm tmpfilemonitor102.log'.</msg>
<msg timestamp="20150623 08:28:51.823" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150623 08:28:51.824" starttime="20150623 08:28:51.743"></status>
</kw>
<msg timestamp="20150623 08:28:51.827" level="INFO">${tailed_text} = [2015-06-23 06:28:06,760][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:28:51.826" starttime="20150623 08:28:47.932"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:51.835" starttime="20150623 08:28:51.828"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:51.844" starttime="20150623 08:28:51.842"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:28:51.847" starttime="20150623 08:28:51.845"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:51.852" starttime="20150623 08:28:51.836"></status>
</kw>
<msg timestamp="20150623 08:28:51.855" level="INFO">${tailed_text} = [2015-06-23 06:28:06,760][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|...</msg>
<status status="PASS" endtime="20150623 08:28:51.854" starttime="20150623 08:28:47.926"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:51.871" starttime="20150623 08:28:51.869"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:51.872" starttime="20150623 08:28:51.864"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:51.878" starttime="20150623 08:28:51.873"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>${SEARCH_DATE_TAG}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:51.882" starttime="20150623 08:28:51.879"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>XdrComponentTest</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:51.885" starttime="20150623 08:28:51.883"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:51.886" starttime="20150623 08:28:51.858"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:51.913" starttime="20150623 08:28:51.912"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:51.922" starttime="20150623 08:28:51.914"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:51.925" starttime="20150623 08:28:51.923"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150623 08:28:51.928" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150623 08:28:51.932" level="INFO">${queryResultSetLines} = 1004562|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSession|...</msg>
<status status="PASS" endtime="20150623 08:28:51.931" starttime="20150623 08:28:51.926"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:51.934" starttime="20150623 08:28:51.933"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150623 08:28:51.937" level="INFO">1 lines returned</msg>
<msg timestamp="20150623 08:28:51.939" level="INFO">@{queryResultSet} = [ 1004562|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:28:51.938" starttime="20150623 08:28:51.936"></status>
</kw>
<msg timestamp="20150623 08:28:51.941" level="INFO">@{queryRows} = [ 1004562|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessio...</msg>
<status status="PASS" endtime="20150623 08:28:51.940" starttime="20150623 08:28:51.906"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150623 08:28:51.945" level="INFO">Length is 1</msg>
<msg timestamp="20150623 08:28:51.946" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150623 08:28:51.945" starttime="20150623 08:28:51.942"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150623 08:28:51.949" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150623 08:28:51.950" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150623 08:28:51.950" starttime="20150623 08:28:51.947"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150623 08:28:51.959" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150623 08:28:51.960" starttime="20150623 08:28:51.957"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:51.961" starttime="20150623 08:28:51.951"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150623 08:28:51.968" starttime="20150623 08:28:51.963"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:51.969" starttime="20150623 08:28:51.898"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:51.970" starttime="20150623 08:28:47.291"></status>
</kw>
<status status="PASS" endtime="20150623 08:28:51.972" starttime="20150623 08:28:47.286"></status>
</kw>
<msg timestamp="20150623 08:28:51.974" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150623 08:28:51.973" starttime="20150623 08:28:47.284"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Index in the 2. loop: ${index}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:28:51.977" level="INFO">Index in the 2. loop: 9</msg>
<status status="PASS" endtime="20150623 08:28:51.978" starttime="20150623 08:28:51.975"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${loopIdx}s</arg>
</arguments>
<msg timestamp="20150623 08:29:00.983" level="INFO">Slept 9 seconds</msg>
<status status="PASS" endtime="20150623 08:29:00.984" starttime="20150623 08:28:51.979"></status>
</kw>
<kw type="kw" name="${failure} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failure}+1</arg>
</arguments>
<msg timestamp="20150623 08:29:00.993" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:29:00.993" starttime="20150623 08:29:00.986"></status>
</kw>
<status status="PASS" endtime="20150623 08:29:00.994" starttime="20150623 08:28:47.283"></status>
</kw>
<status status="PASS" endtime="20150623 08:29:00.995" starttime="20150623 08:26:44.830"></status>
</kw>
<msg timestamp="20150623 08:29:00.998" level="INFO">${failure} = None</msg>
<status status="PASS" endtime="20150623 08:29:00.997" starttime="20150623 08:26:44.824"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>For delay ${loopIdx} we had ${failure} failure(s)</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150623 08:29:01.002" level="INFO">For delay 9 we had None failure(s)</msg>
<status status="PASS" endtime="20150623 08:29:01.002" starttime="20150623 08:29:00.999"></status>
</kw>
<status status="PASS" endtime="20150623 08:29:01.004" starttime="20150623 08:26:44.814"></status>
</kw>
<status status="PASS" endtime="20150623 08:29:01.005" starttime="20150623 08:18:02.089"></status>
</kw>
<doc>General test case skeleton to be executed. Contains all steps for single test case

Arguments:
==========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20150623 08:29:01.007" starttime="20150623 08:18:02.067"></status>
</test>
<kw type="teardown" name="Teardown Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Disconnect From Database">
<doc></doc>
<arguments>
</arguments>
<msg timestamp="20150623 08:29:01.022" level="INFO">SQL Warnings on this connection: null</msg>
<status status="PASS" endtime="20150623 08:29:01.023" starttime="20150623 08:29:01.019"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150623 08:29:01.043" starttime="20150623 08:29:01.041"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150623 08:29:01.139" starttime="20150623 08:29:01.050"></status>
</kw>
<msg timestamp="20150623 08:29:01.141" level="INFO">${ssh_connection} = 103</msg>
<status status="PASS" endtime="20150623 08:29:01.141" starttime="20150623 08:29:01.044"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150623 08:29:01.151" level="INFO">Logging into ':22' as 'qa_automation'.</msg>
<msg timestamp="20150623 08:29:02.334" level="INFO">Read output: Last login: Tue Jun 23 06:51:31 2015 from localhost
id: cannot find name for group ID 20007
[1m[qa_automation@testautomation ~]$</msg>
<status status="PASS" endtime="20150623 08:29:02.336" starttime="20150623 08:29:01.149"></status>
</kw>
<status status="PASS" endtime="20150623 08:29:02.338" starttime="20150623 08:29:01.143"></status>
</kw>
<msg timestamp="20150623 08:29:02.342" level="INFO">${ssh_connection} = 103</msg>
<status status="PASS" endtime="20150623 08:29:02.341" starttime="20150623 08:29:01.035"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo pkill tail</arg>
</arguments>
<msg timestamp="20150623 08:29:02.345" level="INFO">Executing command 'sudo pkill tail'.</msg>
<msg timestamp="20150623 08:29:02.417" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150623 08:29:02.419" starttime="20150623 08:29:02.343"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close All Connections">
<doc>Closes all open connections.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150623 08:29:02.433" starttime="20150623 08:29:02.420"></status>
</kw>
<status status="PASS" endtime="20150623 08:29:02.434" starttime="20150623 08:29:01.015"></status>
</kw>
<doc>This suite will collect "statistical" data - test execution time needed for single XDR ticket processing</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20150623 08:29:02.436" starttime="20150623 08:17:54.792"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="0">Critical Tests</stat>
<stat pass="1" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="1" info="" doc="" combined="" fail="0" links="">ComponentTest</stat>
<stat pass="1" info="" doc="" combined="" fail="0" links="">matko.sanseovic</stat>
<stat pass="1" info="" doc="" combined="" fail="0" links="">TNZ_supported</stat>
<stat pass="1" info="" doc="" combined="" fail="0" links="">XDR_only</stat>
</tag>
<suite>
<stat pass="1" id="s1" fail="0" name="Time Trial Xdr-Robot-Suite">Time Trial Xdr-Robot-Suite</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
