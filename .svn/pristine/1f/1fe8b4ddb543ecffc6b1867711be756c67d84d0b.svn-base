<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 2.8.7 (Jython 2.7rc1 on java1.7.0_79)" generated="20150709 15:19:29.747">
<suite source="/opt/robot/robotworkspace/robot_testsuites/experimental/hew/test/SSH-tail-killing-experimental-robot-suite.txt" id="s1" name="SSH-tail-killing-experimental-robot-suite">
<test id="s1-t1" name="Run SSH Tail-Kill Experiment">
<kw type="for" name="${i} IN RANGE [ 1 | 100 ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${i} = 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:19:31.100" level="INFO">
*********** Experiment: 1 ************</msg>
<status status="PASS" endtime="20150709 15:19:31.101" starttime="20150709 15:19:31.095"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:31.175" starttime="20150709 15:19:31.172"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:31.386" starttime="20150709 15:19:31.191"></status>
</kw>
<msg timestamp="20150709 15:19:31.392" level="INFO">${ssh_connection} = 1</msg>
<status status="PASS" endtime="20150709 15:19:31.390" starttime="20150709 15:19:31.177"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:19:31.423" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:19:31.898" level="INFO">Read output: Last login: Thu Jul  9 13:09:36 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:19:31.900" starttime="20150709 15:19:31.415"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:31.901" starttime="20150709 15:19:31.398"></status>
</kw>
<msg timestamp="20150709 15:19:31.904" level="INFO">${ssh_connection} = 1</msg>
<status status="PASS" endtime="20150709 15:19:31.904" starttime="20150709 15:19:31.152"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:31.927" starttime="20150709 15:19:31.924"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:31.932" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor1.log'.</msg>
<status status="PASS" endtime="20150709 15:19:31.939" starttime="20150709 15:19:31.929"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:31.940" starttime="20150709 15:19:31.908"></status>
</kw>
<msg timestamp="20150709 15:19:31.943" level="INFO">${ssh_connection} = 1</msg>
<status status="PASS" endtime="20150709 15:19:31.942" starttime="20150709 15:19:31.128"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:19:31.957" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:19:31.958" starttime="20150709 15:19:31.945"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:31.992" starttime="20150709 15:19:31.989"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:19:31.999" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:19:31.998" starttime="20150709 15:19:31.994"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:19:32.010" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:19:32.011" starttime="20150709 15:19:32.001"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:32.030" starttime="20150709 15:19:32.028"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:19:32.034" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:19:32.081" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:32.085" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:19:32.083" starttime="20150709 15:19:32.032"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:32.096" starttime="20150709 15:19:32.089"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:32.106" starttime="20150709 15:19:32.100"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:32.115" starttime="20150709 15:19:32.109"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:19:32.128" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:19:32.162" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:32.166" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:19:32.168" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:19:32.164" starttime="20150709 15:19:32.119"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:32.184" starttime="20150709 15:19:32.173"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:32.192" starttime="20150709 15:19:32.188"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:32.203" starttime="20150709 15:19:32.196"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:32.212" starttime="20150709 15:19:32.206"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:32.222" starttime="20150709 15:19:32.216"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:32.231" starttime="20150709 15:19:32.225"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:32.243" starttime="20150709 15:19:32.235"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:32.254" starttime="20150709 15:19:32.247"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:32.263" starttime="20150709 15:19:32.257"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:32.272" starttime="20150709 15:19:32.266"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:32.281" starttime="20150709 15:19:32.275"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:32.284" starttime="20150709 15:19:32.014"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:32.293" level="INFO">Starting command 'cat tmpfilemonitor1.log'.</msg>
<status status="PASS" endtime="20150709 15:19:32.300" starttime="20150709 15:19:32.287"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:19:32.307" level="INFO">Reading output of command 'cat tmpfilemonitor1.log'.</msg>
<msg timestamp="20150709 15:19:32.327" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:32.331" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:19:32.330" starttime="20150709 15:19:32.304"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:32.342" level="INFO">Executing command 'rm tmpfilemonitor1.log'.</msg>
<msg timestamp="20150709 15:19:32.398" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:19:32.400" starttime="20150709 15:19:32.335"></status>
</kw>
<msg timestamp="20150709 15:19:32.407" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:32.404" starttime="20150709 15:19:31.976"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:32.423" starttime="20150709 15:19:32.411"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:32.460" starttime="20150709 15:19:32.455"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:19:32.473" starttime="20150709 15:19:32.466"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:32.480" starttime="20150709 15:19:32.427"></status>
</kw>
<msg timestamp="20150709 15:19:32.486" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:32.484" starttime="20150709 15:19:31.961"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:32.489" starttime="20150709 15:19:31.093"></status>
</kw>
<kw type="foritem" name="${i} = 2">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:19:32.501" level="INFO">
*********** Experiment: 2 ************</msg>
<status status="PASS" endtime="20150709 15:19:32.503" starttime="20150709 15:19:32.494"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:32.633" starttime="20150709 15:19:32.628"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:32.717" starttime="20150709 15:19:32.651"></status>
</kw>
<msg timestamp="20150709 15:19:32.723" level="INFO">${ssh_connection} = 2</msg>
<status status="PASS" endtime="20150709 15:19:32.721" starttime="20150709 15:19:32.637"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:19:32.748" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:19:33.072" level="INFO">Read output: Last login: Thu Jul  9 13:19:31 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:19:33.074" starttime="20150709 15:19:32.743"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:33.076" starttime="20150709 15:19:32.727"></status>
</kw>
<msg timestamp="20150709 15:19:33.080" level="INFO">${ssh_connection} = 2</msg>
<status status="PASS" endtime="20150709 15:19:33.078" starttime="20150709 15:19:32.592"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:33.099" starttime="20150709 15:19:33.096"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:33.103" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor2.log'.</msg>
<status status="PASS" endtime="20150709 15:19:33.107" starttime="20150709 15:19:33.100"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:33.108" starttime="20150709 15:19:33.083"></status>
</kw>
<msg timestamp="20150709 15:19:33.111" level="INFO">${ssh_connection} = 2</msg>
<status status="PASS" endtime="20150709 15:19:33.110" starttime="20150709 15:19:32.549"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:19:33.125" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:19:33.126" starttime="20150709 15:19:33.113"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:33.157" starttime="20150709 15:19:33.153"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:19:33.163" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:19:33.163" starttime="20150709 15:19:33.158"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:19:33.170" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:19:33.171" starttime="20150709 15:19:33.165"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:33.188" starttime="20150709 15:19:33.185"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:19:33.192" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:19:33.223" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:33.227" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:19:33.225" starttime="20150709 15:19:33.190"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:33.237" starttime="20150709 15:19:33.231"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:33.245" starttime="20150709 15:19:33.240"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:33.253" starttime="20150709 15:19:33.248"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:19:33.269" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:19:33.315" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:33.319" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:19:33.321" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:19:33.317" starttime="20150709 15:19:33.260"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:33.337" starttime="20150709 15:19:33.325"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:33.345" starttime="20150709 15:19:33.340"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:33.355" starttime="20150709 15:19:33.349"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:33.364" starttime="20150709 15:19:33.358"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:33.373" starttime="20150709 15:19:33.367"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:33.382" starttime="20150709 15:19:33.376"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:33.392" starttime="20150709 15:19:33.384"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:33.401" starttime="20150709 15:19:33.394"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:33.408" starttime="20150709 15:19:33.403"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:33.416" starttime="20150709 15:19:33.411"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:33.424" starttime="20150709 15:19:33.419"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:33.426" starttime="20150709 15:19:33.173"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:33.434" level="INFO">Starting command 'cat tmpfilemonitor2.log'.</msg>
<status status="PASS" endtime="20150709 15:19:33.441" starttime="20150709 15:19:33.429"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:19:33.446" level="INFO">Reading output of command 'cat tmpfilemonitor2.log'.</msg>
<msg timestamp="20150709 15:19:33.483" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:33.488" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:19:33.487" starttime="20150709 15:19:33.444"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:33.496" level="INFO">Executing command 'rm tmpfilemonitor2.log'.</msg>
<msg timestamp="20150709 15:19:33.572" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:19:33.574" starttime="20150709 15:19:33.492"></status>
</kw>
<msg timestamp="20150709 15:19:33.579" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:33.577" starttime="20150709 15:19:33.141"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:33.593" starttime="20150709 15:19:33.582"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:33.622" starttime="20150709 15:19:33.617"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:19:33.630" starttime="20150709 15:19:33.625"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:33.634" starttime="20150709 15:19:33.597"></status>
</kw>
<msg timestamp="20150709 15:19:33.638" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:33.637" starttime="20150709 15:19:33.129"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:33.641" starttime="20150709 15:19:32.491"></status>
</kw>
<kw type="foritem" name="${i} = 3">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:19:33.652" level="INFO">
*********** Experiment: 3 ************</msg>
<status status="PASS" endtime="20150709 15:19:33.654" starttime="20150709 15:19:33.646"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:33.722" starttime="20150709 15:19:33.720"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:33.794" starttime="20150709 15:19:33.729"></status>
</kw>
<msg timestamp="20150709 15:19:33.799" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20150709 15:19:33.797" starttime="20150709 15:19:33.723"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:19:33.822" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:19:34.216" level="INFO">Read output: Last login: Thu Jul  9 13:19:32 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:19:34.217" starttime="20150709 15:19:33.816"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:34.219" starttime="20150709 15:19:33.802"></status>
</kw>
<msg timestamp="20150709 15:19:34.222" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20150709 15:19:34.221" starttime="20150709 15:19:33.708"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:34.237" starttime="20150709 15:19:34.234"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:34.241" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor3.log'.</msg>
<status status="PASS" endtime="20150709 15:19:34.245" starttime="20150709 15:19:34.238"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:34.246" starttime="20150709 15:19:34.225"></status>
</kw>
<msg timestamp="20150709 15:19:34.249" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20150709 15:19:34.247" starttime="20150709 15:19:33.689"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:19:34.263" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:19:34.263" starttime="20150709 15:19:34.250"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:34.286" starttime="20150709 15:19:34.284"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:19:34.292" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:19:34.291" starttime="20150709 15:19:34.287"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:19:34.298" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:19:34.299" starttime="20150709 15:19:34.294"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:34.312" starttime="20150709 15:19:34.309"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:19:34.315" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:19:34.356" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:34.360" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:19:34.359" starttime="20150709 15:19:34.313"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:34.369" starttime="20150709 15:19:34.363"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:34.376" starttime="20150709 15:19:34.372"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:34.384" starttime="20150709 15:19:34.379"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:19:34.394" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:19:34.448" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:34.452" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:19:34.453" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:19:34.450" starttime="20150709 15:19:34.386"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:34.467" starttime="20150709 15:19:34.457"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:34.474" starttime="20150709 15:19:34.469"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:34.481" starttime="20150709 15:19:34.476"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:34.489" starttime="20150709 15:19:34.484"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:34.497" starttime="20150709 15:19:34.492"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:34.505" starttime="20150709 15:19:34.500"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:34.514" starttime="20150709 15:19:34.508"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:34.523" starttime="20150709 15:19:34.517"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:34.530" starttime="20150709 15:19:34.526"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:34.538" starttime="20150709 15:19:34.533"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:34.545" starttime="20150709 15:19:34.540"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:34.547" starttime="20150709 15:19:34.300"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:34.555" level="INFO">Starting command 'cat tmpfilemonitor3.log'.</msg>
<status status="PASS" endtime="20150709 15:19:34.561" starttime="20150709 15:19:34.550"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:19:34.566" level="INFO">Reading output of command 'cat tmpfilemonitor3.log'.</msg>
<msg timestamp="20150709 15:19:34.587" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:34.588" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:19:34.588" starttime="20150709 15:19:34.563"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:34.592" level="INFO">Executing command 'rm tmpfilemonitor3.log'.</msg>
<msg timestamp="20150709 15:19:34.655" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:19:34.656" starttime="20150709 15:19:34.590"></status>
</kw>
<msg timestamp="20150709 15:19:34.658" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:34.657" starttime="20150709 15:19:34.275"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:34.664" starttime="20150709 15:19:34.659"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:34.676" starttime="20150709 15:19:34.674"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:19:34.679" starttime="20150709 15:19:34.677"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:34.682" starttime="20150709 15:19:34.666"></status>
</kw>
<msg timestamp="20150709 15:19:34.684" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:34.683" starttime="20150709 15:19:34.266"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:34.685" starttime="20150709 15:19:33.644"></status>
</kw>
<kw type="foritem" name="${i} = 4">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:19:34.689" level="INFO">
*********** Experiment: 4 ************</msg>
<status status="PASS" endtime="20150709 15:19:34.690" starttime="20150709 15:19:34.687"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:34.776" starttime="20150709 15:19:34.771"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:34.850" starttime="20150709 15:19:34.791"></status>
</kw>
<msg timestamp="20150709 15:19:34.854" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20150709 15:19:34.853" starttime="20150709 15:19:34.779"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:19:34.876" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:19:35.214" level="INFO">Read output: Last login: Thu Jul  9 13:19:34 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:19:35.218" starttime="20150709 15:19:34.871"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:35.222" starttime="20150709 15:19:34.857"></status>
</kw>
<msg timestamp="20150709 15:19:35.231" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20150709 15:19:35.228" starttime="20150709 15:19:34.747"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:35.265" starttime="20150709 15:19:35.260"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:35.273" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor4.log'.</msg>
<status status="PASS" endtime="20150709 15:19:35.280" starttime="20150709 15:19:35.268"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:35.283" starttime="20150709 15:19:35.240"></status>
</kw>
<msg timestamp="20150709 15:19:35.288" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20150709 15:19:35.286" starttime="20150709 15:19:34.718"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:19:35.305" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:19:35.307" starttime="20150709 15:19:35.291"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:35.351" starttime="20150709 15:19:35.346"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:19:35.365" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:19:35.364" starttime="20150709 15:19:35.354"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:19:35.375" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:19:35.377" starttime="20150709 15:19:35.368"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:35.403" starttime="20150709 15:19:35.399"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:19:35.409" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:19:35.446" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:35.449" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:19:35.448" starttime="20150709 15:19:35.406"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:35.457" starttime="20150709 15:19:35.452"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:35.464" starttime="20150709 15:19:35.459"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:35.471" starttime="20150709 15:19:35.466"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:19:35.480" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:19:35.523" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:35.526" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:19:35.528" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:19:35.525" starttime="20150709 15:19:35.473"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:35.541" starttime="20150709 15:19:35.531"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:35.547" starttime="20150709 15:19:35.543"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:35.554" starttime="20150709 15:19:35.549"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:35.562" starttime="20150709 15:19:35.557"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:35.569" starttime="20150709 15:19:35.564"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:35.578" starttime="20150709 15:19:35.572"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:35.587" starttime="20150709 15:19:35.581"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:35.595" starttime="20150709 15:19:35.590"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:35.602" starttime="20150709 15:19:35.597"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:35.608" starttime="20150709 15:19:35.604"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:35.615" starttime="20150709 15:19:35.611"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:35.617" starttime="20150709 15:19:35.381"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:35.624" level="INFO">Starting command 'cat tmpfilemonitor4.log'.</msg>
<status status="PASS" endtime="20150709 15:19:35.631" starttime="20150709 15:19:35.620"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:19:35.636" level="INFO">Reading output of command 'cat tmpfilemonitor4.log'.</msg>
<msg timestamp="20150709 15:19:35.669" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:35.672" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:19:35.671" starttime="20150709 15:19:35.633"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:35.679" level="INFO">Executing command 'rm tmpfilemonitor4.log'.</msg>
<msg timestamp="20150709 15:19:35.741" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:19:35.745" starttime="20150709 15:19:35.675"></status>
</kw>
<msg timestamp="20150709 15:19:35.749" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:35.748" starttime="20150709 15:19:35.330"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:35.762" starttime="20150709 15:19:35.752"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:35.785" starttime="20150709 15:19:35.781"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:19:35.791" starttime="20150709 15:19:35.788"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:35.796" starttime="20150709 15:19:35.765"></status>
</kw>
<msg timestamp="20150709 15:19:35.801" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:35.799" starttime="20150709 15:19:35.312"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:35.803" starttime="20150709 15:19:34.686"></status>
</kw>
<kw type="foritem" name="${i} = 5">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:19:35.811" level="INFO">
*********** Experiment: 5 ************</msg>
<status status="PASS" endtime="20150709 15:19:35.813" starttime="20150709 15:19:35.806"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:35.896" starttime="20150709 15:19:35.892"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:35.966" starttime="20150709 15:19:35.909"></status>
</kw>
<msg timestamp="20150709 15:19:35.970" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20150709 15:19:35.968" starttime="20150709 15:19:35.898"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:19:35.991" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:19:36.311" level="INFO">Read output: Last login: Thu Jul  9 13:19:35 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:19:36.314" starttime="20150709 15:19:35.985"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:36.317" starttime="20150709 15:19:35.973"></status>
</kw>
<msg timestamp="20150709 15:19:36.322" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20150709 15:19:36.321" starttime="20150709 15:19:35.871"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:36.334" starttime="20150709 15:19:36.332"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:36.338" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor5.log'.</msg>
<status status="PASS" endtime="20150709 15:19:36.341" starttime="20150709 15:19:36.335"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:36.342" starttime="20150709 15:19:36.324"></status>
</kw>
<msg timestamp="20150709 15:19:36.345" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20150709 15:19:36.344" starttime="20150709 15:19:35.844"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:19:36.357" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:19:36.357" starttime="20150709 15:19:36.346"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:36.375" starttime="20150709 15:19:36.373"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:19:36.381" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:19:36.380" starttime="20150709 15:19:36.376"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:19:36.386" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:19:36.387" starttime="20150709 15:19:36.382"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:36.398" starttime="20150709 15:19:36.395"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:19:36.400" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:19:36.432" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:36.433" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:19:36.433" starttime="20150709 15:19:36.399"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:36.437" starttime="20150709 15:19:36.435"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:36.439" starttime="20150709 15:19:36.438"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:36.442" starttime="20150709 15:19:36.440"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:19:36.447" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:19:36.501" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:36.503" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:19:36.504" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:19:36.502" starttime="20150709 15:19:36.443"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:36.512" starttime="20150709 15:19:36.506"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:36.516" starttime="20150709 15:19:36.513"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:36.520" starttime="20150709 15:19:36.517"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:36.524" starttime="20150709 15:19:36.521"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:36.528" starttime="20150709 15:19:36.525"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:36.532" starttime="20150709 15:19:36.529"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:36.537" starttime="20150709 15:19:36.533"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:36.541" starttime="20150709 15:19:36.538"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:36.545" starttime="20150709 15:19:36.542"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:36.549" starttime="20150709 15:19:36.546"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:36.552" starttime="20150709 15:19:36.550"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:36.554" starttime="20150709 15:19:36.388"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:36.558" level="INFO">Starting command 'cat tmpfilemonitor5.log'.</msg>
<status status="PASS" endtime="20150709 15:19:36.562" starttime="20150709 15:19:36.555"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:19:36.565" level="INFO">Reading output of command 'cat tmpfilemonitor5.log'.</msg>
<msg timestamp="20150709 15:19:36.590" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:36.593" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:19:36.592" starttime="20150709 15:19:36.563"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:36.600" level="INFO">Executing command 'rm tmpfilemonitor5.log'.</msg>
<msg timestamp="20150709 15:19:36.661" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:19:36.662" starttime="20150709 15:19:36.596"></status>
</kw>
<msg timestamp="20150709 15:19:36.667" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:36.665" starttime="20150709 15:19:36.367"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:36.679" starttime="20150709 15:19:36.669"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:36.705" starttime="20150709 15:19:36.701"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:19:36.713" starttime="20150709 15:19:36.708"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:36.717" starttime="20150709 15:19:36.682"></status>
</kw>
<msg timestamp="20150709 15:19:36.721" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:36.720" starttime="20150709 15:19:36.360"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:36.723" starttime="20150709 15:19:35.805"></status>
</kw>
<kw type="foritem" name="${i} = 6">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:19:36.732" level="INFO">
*********** Experiment: 6 ************</msg>
<status status="PASS" endtime="20150709 15:19:36.734" starttime="20150709 15:19:36.727"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:36.813" starttime="20150709 15:19:36.809"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:36.874" starttime="20150709 15:19:36.824"></status>
</kw>
<msg timestamp="20150709 15:19:36.878" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20150709 15:19:36.876" starttime="20150709 15:19:36.815"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:19:36.896" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:19:37.320" level="INFO">Read output: Last login: Thu Jul  9 13:19:36 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:19:37.322" starttime="20150709 15:19:36.891"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:37.324" starttime="20150709 15:19:36.880"></status>
</kw>
<msg timestamp="20150709 15:19:37.327" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20150709 15:19:37.326" starttime="20150709 15:19:36.788"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:37.338" starttime="20150709 15:19:37.336"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:37.342" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor6.log'.</msg>
<status status="PASS" endtime="20150709 15:19:37.346" starttime="20150709 15:19:37.339"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:37.347" starttime="20150709 15:19:37.329"></status>
</kw>
<msg timestamp="20150709 15:19:37.349" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20150709 15:19:37.348" starttime="20150709 15:19:36.762"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:19:37.362" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:19:37.362" starttime="20150709 15:19:37.350"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:37.380" starttime="20150709 15:19:37.378"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:19:37.385" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:19:37.384" starttime="20150709 15:19:37.381"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:19:37.391" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:19:37.392" starttime="20150709 15:19:37.386"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:37.402" starttime="20150709 15:19:37.400"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:19:37.404" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:19:37.439" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:37.440" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:19:37.440" starttime="20150709 15:19:37.403"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:37.443" starttime="20150709 15:19:37.441"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:37.446" starttime="20150709 15:19:37.444"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:37.450" starttime="20150709 15:19:37.448"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:19:37.456" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:19:37.515" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:37.517" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:19:37.518" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:19:37.516" starttime="20150709 15:19:37.452"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:37.526" starttime="20150709 15:19:37.519"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:37.530" starttime="20150709 15:19:37.527"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:37.534" starttime="20150709 15:19:37.531"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:37.538" starttime="20150709 15:19:37.535"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:37.542" starttime="20150709 15:19:37.539"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:37.546" starttime="20150709 15:19:37.543"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:37.551" starttime="20150709 15:19:37.547"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:37.556" starttime="20150709 15:19:37.552"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:37.559" starttime="20150709 15:19:37.557"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:37.563" starttime="20150709 15:19:37.561"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:37.567" starttime="20150709 15:19:37.565"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:37.569" starttime="20150709 15:19:37.393"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:37.577" level="INFO">Starting command 'cat tmpfilemonitor6.log'.</msg>
<status status="PASS" endtime="20150709 15:19:37.582" starttime="20150709 15:19:37.572"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:19:37.587" level="INFO">Reading output of command 'cat tmpfilemonitor6.log'.</msg>
<msg timestamp="20150709 15:19:37.619" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:37.622" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:19:37.621" starttime="20150709 15:19:37.584"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:37.629" level="INFO">Executing command 'rm tmpfilemonitor6.log'.</msg>
<msg timestamp="20150709 15:19:37.701" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:19:37.702" starttime="20150709 15:19:37.624"></status>
</kw>
<msg timestamp="20150709 15:19:37.706" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:37.705" starttime="20150709 15:19:37.372"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:37.718" starttime="20150709 15:19:37.708"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:37.739" starttime="20150709 15:19:37.734"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:19:37.746" starttime="20150709 15:19:37.741"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:37.749" starttime="20150709 15:19:37.721"></status>
</kw>
<msg timestamp="20150709 15:19:37.753" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:37.752" starttime="20150709 15:19:37.364"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:37.755" starttime="20150709 15:19:36.725"></status>
</kw>
<kw type="foritem" name="${i} = 7">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:19:37.763" level="INFO">
*********** Experiment: 7 ************</msg>
<status status="PASS" endtime="20150709 15:19:37.764" starttime="20150709 15:19:37.758"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:37.828" starttime="20150709 15:19:37.827"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:37.895" starttime="20150709 15:19:37.834"></status>
</kw>
<msg timestamp="20150709 15:19:37.899" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20150709 15:19:37.898" starttime="20150709 15:19:37.829"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:19:37.917" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:19:38.411" level="INFO">Read output: Last login: Thu Jul  9 13:19:37 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:19:38.414" starttime="20150709 15:19:37.913"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:38.418" starttime="20150709 15:19:37.901"></status>
</kw>
<msg timestamp="20150709 15:19:38.424" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20150709 15:19:38.422" starttime="20150709 15:19:37.815"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:38.448" starttime="20150709 15:19:38.445"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:38.451" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor7.log'.</msg>
<status status="PASS" endtime="20150709 15:19:38.454" starttime="20150709 15:19:38.449"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:38.455" starttime="20150709 15:19:38.428"></status>
</kw>
<msg timestamp="20150709 15:19:38.457" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20150709 15:19:38.456" starttime="20150709 15:19:37.791"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:19:38.470" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:19:38.470" starttime="20150709 15:19:38.458"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:38.487" starttime="20150709 15:19:38.485"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:19:38.492" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:19:38.491" starttime="20150709 15:19:38.488"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:19:38.497" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:19:38.497" starttime="20150709 15:19:38.493"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:38.507" starttime="20150709 15:19:38.505"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:19:38.509" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:19:38.549" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:38.552" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:19:38.551" starttime="20150709 15:19:38.508"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:38.558" starttime="20150709 15:19:38.554"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:38.564" starttime="20150709 15:19:38.560"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:38.569" starttime="20150709 15:19:38.565"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:19:38.576" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:19:38.631" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:38.635" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:19:38.637" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:19:38.634" starttime="20150709 15:19:38.571"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:38.648" starttime="20150709 15:19:38.639"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:38.653" starttime="20150709 15:19:38.650"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:38.659" starttime="20150709 15:19:38.655"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:38.664" starttime="20150709 15:19:38.661"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:38.670" starttime="20150709 15:19:38.666"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:38.676" starttime="20150709 15:19:38.672"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:38.683" starttime="20150709 15:19:38.678"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:38.689" starttime="20150709 15:19:38.685"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:38.695" starttime="20150709 15:19:38.691"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:38.701" starttime="20150709 15:19:38.697"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:38.706" starttime="20150709 15:19:38.702"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:38.708" starttime="20150709 15:19:38.499"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:38.714" level="INFO">Starting command 'cat tmpfilemonitor7.log'.</msg>
<status status="PASS" endtime="20150709 15:19:38.719" starttime="20150709 15:19:38.710"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:19:38.724" level="INFO">Reading output of command 'cat tmpfilemonitor7.log'.</msg>
<msg timestamp="20150709 15:19:38.752" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:38.755" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:19:38.754" starttime="20150709 15:19:38.721"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:38.761" level="INFO">Executing command 'rm tmpfilemonitor7.log'.</msg>
<msg timestamp="20150709 15:19:38.833" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:19:38.835" starttime="20150709 15:19:38.757"></status>
</kw>
<msg timestamp="20150709 15:19:38.839" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:38.838" starttime="20150709 15:19:38.479"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:38.851" starttime="20150709 15:19:38.842"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:38.871" starttime="20150709 15:19:38.867"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:19:38.877" starttime="20150709 15:19:38.873"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:38.881" starttime="20150709 15:19:38.854"></status>
</kw>
<msg timestamp="20150709 15:19:38.884" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:38.884" starttime="20150709 15:19:38.472"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:38.886" starttime="20150709 15:19:37.757"></status>
</kw>
<kw type="foritem" name="${i} = 8">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:19:38.894" level="INFO">
*********** Experiment: 8 ************</msg>
<status status="PASS" endtime="20150709 15:19:38.896" starttime="20150709 15:19:38.890"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:38.967" starttime="20150709 15:19:38.964"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:39.083" starttime="20150709 15:19:38.981"></status>
</kw>
<msg timestamp="20150709 15:19:39.090" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20150709 15:19:39.088" starttime="20150709 15:19:38.970"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:19:39.116" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:19:39.694" level="INFO">Read output: Last login: Thu Jul  9 13:19:38 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:19:39.697" starttime="20150709 15:19:39.110"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:39.698" starttime="20150709 15:19:39.094"></status>
</kw>
<msg timestamp="20150709 15:19:39.700" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20150709 15:19:39.699" starttime="20150709 15:19:38.943"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:39.710" starttime="20150709 15:19:39.709"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:39.713" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor8.log'.</msg>
<status status="PASS" endtime="20150709 15:19:39.717" starttime="20150709 15:19:39.711"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:39.718" starttime="20150709 15:19:39.702"></status>
</kw>
<msg timestamp="20150709 15:19:39.720" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20150709 15:19:39.719" starttime="20150709 15:19:38.920"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:19:39.733" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:19:39.733" starttime="20150709 15:19:39.721"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:39.749" starttime="20150709 15:19:39.748"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:19:39.755" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:19:39.754" starttime="20150709 15:19:39.750"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:19:39.760" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:19:39.760" starttime="20150709 15:19:39.756"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:39.770" starttime="20150709 15:19:39.768"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:19:39.772" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:19:39.815" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:39.817" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:19:39.816" starttime="20150709 15:19:39.771"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:39.824" starttime="20150709 15:19:39.820"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:39.829" starttime="20150709 15:19:39.826"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:39.835" starttime="20150709 15:19:39.831"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:19:39.842" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:19:39.899" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:39.902" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:19:39.903" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:19:39.901" starttime="20150709 15:19:39.837"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:39.913" starttime="20150709 15:19:39.905"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:39.919" starttime="20150709 15:19:39.915"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:39.924" starttime="20150709 15:19:39.920"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:39.930" starttime="20150709 15:19:39.926"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:39.936" starttime="20150709 15:19:39.932"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:39.941" starttime="20150709 15:19:39.937"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:39.948" starttime="20150709 15:19:39.943"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:39.954" starttime="20150709 15:19:39.950"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:39.959" starttime="20150709 15:19:39.956"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:39.964" starttime="20150709 15:19:39.961"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:39.970" starttime="20150709 15:19:39.966"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:39.971" starttime="20150709 15:19:39.762"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:39.977" level="INFO">Starting command 'cat tmpfilemonitor8.log'.</msg>
<status status="PASS" endtime="20150709 15:19:39.983" starttime="20150709 15:19:39.973"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:19:39.987" level="INFO">Reading output of command 'cat tmpfilemonitor8.log'.</msg>
<msg timestamp="20150709 15:19:40.012" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:40.016" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:19:40.014" starttime="20150709 15:19:39.985"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:40.022" level="INFO">Executing command 'rm tmpfilemonitor8.log'.</msg>
<msg timestamp="20150709 15:19:40.082" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:19:40.083" starttime="20150709 15:19:40.018"></status>
</kw>
<msg timestamp="20150709 15:19:40.091" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:40.089" starttime="20150709 15:19:39.742"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:40.103" starttime="20150709 15:19:40.093"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:40.122" starttime="20150709 15:19:40.118"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:19:40.127" starttime="20150709 15:19:40.124"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:40.132" starttime="20150709 15:19:40.105"></status>
</kw>
<msg timestamp="20150709 15:19:40.137" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:40.135" starttime="20150709 15:19:39.735"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:40.138" starttime="20150709 15:19:38.889"></status>
</kw>
<kw type="foritem" name="${i} = 9">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:19:40.145" level="INFO">
*********** Experiment: 9 ************</msg>
<status status="PASS" endtime="20150709 15:19:40.147" starttime="20150709 15:19:40.141"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:40.217" starttime="20150709 15:19:40.213"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:40.286" starttime="20150709 15:19:40.229"></status>
</kw>
<msg timestamp="20150709 15:19:40.289" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20150709 15:19:40.288" starttime="20150709 15:19:40.218"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:19:40.306" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:19:40.801" level="INFO">Read output: Last login: Thu Jul  9 13:19:39 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:19:40.803" starttime="20150709 15:19:40.301"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:40.804" starttime="20150709 15:19:40.291"></status>
</kw>
<msg timestamp="20150709 15:19:40.807" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20150709 15:19:40.806" starttime="20150709 15:19:40.195"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:40.817" starttime="20150709 15:19:40.815"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:40.820" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor9.log'.</msg>
<status status="PASS" endtime="20150709 15:19:40.824" starttime="20150709 15:19:40.818"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:40.824" starttime="20150709 15:19:40.809"></status>
</kw>
<msg timestamp="20150709 15:19:40.826" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20150709 15:19:40.825" starttime="20150709 15:19:40.172"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:19:40.839" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:19:40.839" starttime="20150709 15:19:40.827"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:40.855" starttime="20150709 15:19:40.853"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:19:40.860" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:19:40.859" starttime="20150709 15:19:40.855"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:19:40.864" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:19:40.865" starttime="20150709 15:19:40.861"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:40.874" starttime="20150709 15:19:40.873"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:19:40.877" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:19:40.907" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:40.910" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:19:40.909" starttime="20150709 15:19:40.875"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:40.915" starttime="20150709 15:19:40.912"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:40.920" starttime="20150709 15:19:40.917"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:40.925" starttime="20150709 15:19:40.922"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:19:40.932" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:19:40.995" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:40.998" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:19:40.999" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:19:40.996" starttime="20150709 15:19:40.927"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:41.009" starttime="20150709 15:19:41.001"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:41.013" starttime="20150709 15:19:41.011"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:41.018" starttime="20150709 15:19:41.015"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:41.023" starttime="20150709 15:19:41.020"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:41.028" starttime="20150709 15:19:41.025"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:41.034" starttime="20150709 15:19:41.030"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:41.039" starttime="20150709 15:19:41.035"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:41.045" starttime="20150709 15:19:41.041"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:41.049" starttime="20150709 15:19:41.046"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:41.054" starttime="20150709 15:19:41.051"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:41.059" starttime="20150709 15:19:41.056"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:41.061" starttime="20150709 15:19:40.866"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:41.067" level="INFO">Starting command 'cat tmpfilemonitor9.log'.</msg>
<status status="PASS" endtime="20150709 15:19:41.073" starttime="20150709 15:19:41.064"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:19:41.077" level="INFO">Reading output of command 'cat tmpfilemonitor9.log'.</msg>
<msg timestamp="20150709 15:19:41.129" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:41.132" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:19:41.131" starttime="20150709 15:19:41.075"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:41.137" level="INFO">Executing command 'rm tmpfilemonitor9.log'.</msg>
<msg timestamp="20150709 15:19:41.207" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:19:41.208" starttime="20150709 15:19:41.133"></status>
</kw>
<msg timestamp="20150709 15:19:41.213" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:41.211" starttime="20150709 15:19:40.847"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:41.223" starttime="20150709 15:19:41.215"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:41.241" starttime="20150709 15:19:41.237"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:19:41.246" starttime="20150709 15:19:41.243"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:41.250" starttime="20150709 15:19:41.226"></status>
</kw>
<msg timestamp="20150709 15:19:41.255" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:41.253" starttime="20150709 15:19:40.841"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:41.256" starttime="20150709 15:19:40.140"></status>
</kw>
<kw type="foritem" name="${i} = 10">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:19:41.263" level="INFO">
*********** Experiment: 10 ************</msg>
<status status="PASS" endtime="20150709 15:19:41.264" starttime="20150709 15:19:41.259"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:41.327" starttime="20150709 15:19:41.324"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:41.393" starttime="20150709 15:19:41.338"></status>
</kw>
<msg timestamp="20150709 15:19:41.396" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20150709 15:19:41.394" starttime="20150709 15:19:41.329"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:19:41.411" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:19:41.867" level="INFO">Read output: Last login: Thu Jul  9 13:19:40 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:19:41.870" starttime="20150709 15:19:41.407"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:41.872" starttime="20150709 15:19:41.397"></status>
</kw>
<msg timestamp="20150709 15:19:41.877" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20150709 15:19:41.876" starttime="20150709 15:19:41.307"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:41.900" starttime="20150709 15:19:41.896"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:41.906" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor10.log'.</msg>
<status status="PASS" endtime="20150709 15:19:41.911" starttime="20150709 15:19:41.902"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:41.913" starttime="20150709 15:19:41.883"></status>
</kw>
<msg timestamp="20150709 15:19:41.917" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20150709 15:19:41.916" starttime="20150709 15:19:41.287"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:19:41.932" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:19:41.933" starttime="20150709 15:19:41.919"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:41.964" starttime="20150709 15:19:41.961"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:19:41.975" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:19:41.973" starttime="20150709 15:19:41.966"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:19:41.982" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:19:41.983" starttime="20150709 15:19:41.976"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:42.004" starttime="20150709 15:19:42.000"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:19:42.009" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:19:42.055" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:42.058" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:19:42.056" starttime="20150709 15:19:42.006"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:42.064" starttime="20150709 15:19:42.061"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:42.069" starttime="20150709 15:19:42.066"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:42.074" starttime="20150709 15:19:42.071"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:19:42.081" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:19:42.131" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:42.133" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:19:42.134" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:19:42.132" starttime="20150709 15:19:42.076"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:42.144" starttime="20150709 15:19:42.136"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:42.148" starttime="20150709 15:19:42.146"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:42.154" starttime="20150709 15:19:42.150"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:42.159" starttime="20150709 15:19:42.155"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:42.163" starttime="20150709 15:19:42.160"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:42.169" starttime="20150709 15:19:42.165"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:42.174" starttime="20150709 15:19:42.170"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:42.179" starttime="20150709 15:19:42.176"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:42.184" starttime="20150709 15:19:42.181"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:42.189" starttime="20150709 15:19:42.186"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:42.194" starttime="20150709 15:19:42.190"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:42.196" starttime="20150709 15:19:41.986"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:42.202" level="INFO">Starting command 'cat tmpfilemonitor10.log'.</msg>
<status status="PASS" endtime="20150709 15:19:42.208" starttime="20150709 15:19:42.199"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:19:42.212" level="INFO">Reading output of command 'cat tmpfilemonitor10.log'.</msg>
<msg timestamp="20150709 15:19:42.237" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:42.239" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:19:42.238" starttime="20150709 15:19:42.210"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:42.244" level="INFO">Executing command 'rm tmpfilemonitor10.log'.</msg>
<msg timestamp="20150709 15:19:42.325" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:19:42.326" starttime="20150709 15:19:42.241"></status>
</kw>
<msg timestamp="20150709 15:19:42.331" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:42.329" starttime="20150709 15:19:41.950"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:42.341" starttime="20150709 15:19:42.332"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:42.356" starttime="20150709 15:19:42.353"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:19:42.361" starttime="20150709 15:19:42.358"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:42.366" starttime="20150709 15:19:42.343"></status>
</kw>
<msg timestamp="20150709 15:19:42.371" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:42.369" starttime="20150709 15:19:41.937"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:42.372" starttime="20150709 15:19:41.258"></status>
</kw>
<kw type="foritem" name="${i} = 11">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:19:42.378" level="INFO">
*********** Experiment: 11 ************</msg>
<status status="PASS" endtime="20150709 15:19:42.380" starttime="20150709 15:19:42.375"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:42.437" starttime="20150709 15:19:42.434"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:42.504" starttime="20150709 15:19:42.447"></status>
</kw>
<msg timestamp="20150709 15:19:42.507" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20150709 15:19:42.506" starttime="20150709 15:19:42.438"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:19:42.522" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:19:42.919" level="INFO">Read output: Last login: Thu Jul  9 13:19:41 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:19:42.921" starttime="20150709 15:19:42.518"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:42.922" starttime="20150709 15:19:42.509"></status>
</kw>
<msg timestamp="20150709 15:19:42.926" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20150709 15:19:42.925" starttime="20150709 15:19:42.420"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:42.945" starttime="20150709 15:19:42.941"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:42.948" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor11.log'.</msg>
<status status="PASS" endtime="20150709 15:19:42.951" starttime="20150709 15:19:42.946"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:42.952" starttime="20150709 15:19:42.931"></status>
</kw>
<msg timestamp="20150709 15:19:42.954" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20150709 15:19:42.953" starttime="20150709 15:19:42.402"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:19:42.966" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:19:42.967" starttime="20150709 15:19:42.954"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:42.979" starttime="20150709 15:19:42.977"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:19:42.984" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:19:42.983" starttime="20150709 15:19:42.980"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:19:42.989" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:19:42.989" starttime="20150709 15:19:42.984"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:42.996" starttime="20150709 15:19:42.995"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:19:42.998" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:19:43.031" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:43.033" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:19:43.032" starttime="20150709 15:19:42.997"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:43.035" starttime="20150709 15:19:43.034"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:43.037" starttime="20150709 15:19:43.036"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:43.040" starttime="20150709 15:19:43.038"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:19:43.043" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:19:43.115" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:43.118" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:19:43.119" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:19:43.117" starttime="20150709 15:19:43.040"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:43.128" starttime="20150709 15:19:43.120"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:43.132" starttime="20150709 15:19:43.129"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:43.136" starttime="20150709 15:19:43.133"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:43.140" starttime="20150709 15:19:43.137"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:43.145" starttime="20150709 15:19:43.142"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:43.149" starttime="20150709 15:19:43.146"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:43.154" starttime="20150709 15:19:43.150"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:43.159" starttime="20150709 15:19:43.155"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:43.163" starttime="20150709 15:19:43.160"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:43.167" starttime="20150709 15:19:43.164"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:43.171" starttime="20150709 15:19:43.168"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:43.172" starttime="20150709 15:19:42.990"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:43.178" level="INFO">Starting command 'cat tmpfilemonitor11.log'.</msg>
<status status="PASS" endtime="20150709 15:19:43.182" starttime="20150709 15:19:43.175"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:19:43.186" level="INFO">Reading output of command 'cat tmpfilemonitor11.log'.</msg>
<msg timestamp="20150709 15:19:43.213" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:43.215" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:19:43.214" starttime="20150709 15:19:43.184"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:43.220" level="INFO">Executing command 'rm tmpfilemonitor11.log'.</msg>
<msg timestamp="20150709 15:19:43.293" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:19:43.294" starttime="20150709 15:19:43.217"></status>
</kw>
<msg timestamp="20150709 15:19:43.298" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:43.296" starttime="20150709 15:19:42.973"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:43.361" starttime="20150709 15:19:43.300"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:43.381" starttime="20150709 15:19:43.376"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:19:43.388" starttime="20150709 15:19:43.383"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:43.392" starttime="20150709 15:19:43.366"></status>
</kw>
<msg timestamp="20150709 15:19:43.397" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:43.395" starttime="20150709 15:19:42.969"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:43.399" starttime="20150709 15:19:42.374"></status>
</kw>
<kw type="foritem" name="${i} = 12">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:19:43.405" level="INFO">
*********** Experiment: 12 ************</msg>
<status status="PASS" endtime="20150709 15:19:43.407" starttime="20150709 15:19:43.402"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:43.463" starttime="20150709 15:19:43.460"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:43.545" starttime="20150709 15:19:43.474"></status>
</kw>
<msg timestamp="20150709 15:19:43.548" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20150709 15:19:43.547" starttime="20150709 15:19:43.465"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:19:43.563" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:19:43.900" level="INFO">Read output: Last login: Thu Jul  9 13:19:42 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:19:43.902" starttime="20150709 15:19:43.559"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:43.903" starttime="20150709 15:19:43.550"></status>
</kw>
<msg timestamp="20150709 15:19:43.907" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20150709 15:19:43.906" starttime="20150709 15:19:43.447"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:43.925" starttime="20150709 15:19:43.922"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:43.931" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor12.log'.</msg>
<status status="PASS" endtime="20150709 15:19:43.935" starttime="20150709 15:19:43.927"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:43.937" starttime="20150709 15:19:43.910"></status>
</kw>
<msg timestamp="20150709 15:19:43.940" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20150709 15:19:43.939" starttime="20150709 15:19:43.429"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:19:43.955" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:19:43.955" starttime="20150709 15:19:43.942"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:43.966" starttime="20150709 15:19:43.965"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:19:43.971" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:19:43.970" starttime="20150709 15:19:43.967"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:19:43.977" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:19:43.977" starttime="20150709 15:19:43.971"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:43.987" starttime="20150709 15:19:43.986"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:19:43.989" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:19:44.018" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:44.020" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:19:44.019" starttime="20150709 15:19:43.988"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:44.023" starttime="20150709 15:19:44.021"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:44.025" starttime="20150709 15:19:44.023"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:44.027" starttime="20150709 15:19:44.025"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:19:44.030" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:19:44.091" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:44.094" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:19:44.095" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:19:44.093" starttime="20150709 15:19:44.027"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:44.104" starttime="20150709 15:19:44.096"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:44.109" starttime="20150709 15:19:44.106"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:44.113" starttime="20150709 15:19:44.110"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:44.118" starttime="20150709 15:19:44.115"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:44.122" starttime="20150709 15:19:44.119"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:44.127" starttime="20150709 15:19:44.124"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:44.132" starttime="20150709 15:19:44.129"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:44.137" starttime="20150709 15:19:44.134"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:44.141" starttime="20150709 15:19:44.138"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:44.145" starttime="20150709 15:19:44.143"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:44.150" starttime="20150709 15:19:44.147"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:44.151" starttime="20150709 15:19:43.982"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:44.157" level="INFO">Starting command 'cat tmpfilemonitor12.log'.</msg>
<status status="PASS" endtime="20150709 15:19:44.162" starttime="20150709 15:19:44.154"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:19:44.165" level="INFO">Reading output of command 'cat tmpfilemonitor12.log'.</msg>
<msg timestamp="20150709 15:19:44.189" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:44.191" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:19:44.190" starttime="20150709 15:19:44.163"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:44.196" level="INFO">Executing command 'rm tmpfilemonitor12.log'.</msg>
<msg timestamp="20150709 15:19:44.257" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:19:44.258" starttime="20150709 15:19:44.192"></status>
</kw>
<msg timestamp="20150709 15:19:44.262" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:44.260" starttime="20150709 15:19:43.961"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:44.272" starttime="20150709 15:19:44.264"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:44.286" starttime="20150709 15:19:44.282"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:19:44.294" starttime="20150709 15:19:44.287"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:44.296" starttime="20150709 15:19:44.274"></status>
</kw>
<msg timestamp="20150709 15:19:44.300" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:44.298" starttime="20150709 15:19:43.957"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:44.301" starttime="20150709 15:19:43.401"></status>
</kw>
<kw type="foritem" name="${i} = 13">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:19:44.307" level="INFO">
*********** Experiment: 13 ************</msg>
<status status="PASS" endtime="20150709 15:19:44.309" starttime="20150709 15:19:44.304"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:44.362" starttime="20150709 15:19:44.359"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:44.430" starttime="20150709 15:19:44.372"></status>
</kw>
<msg timestamp="20150709 15:19:44.432" level="INFO">${ssh_connection} = 13</msg>
<status status="PASS" endtime="20150709 15:19:44.431" starttime="20150709 15:19:44.364"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:19:44.447" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:19:44.856" level="INFO">Read output: Last login: Thu Jul  9 13:19:43 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:19:44.858" starttime="20150709 15:19:44.443"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:44.861" starttime="20150709 15:19:44.434"></status>
</kw>
<msg timestamp="20150709 15:19:44.865" level="INFO">${ssh_connection} = 13</msg>
<status status="PASS" endtime="20150709 15:19:44.864" starttime="20150709 15:19:44.347"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:44.885" starttime="20150709 15:19:44.881"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:44.890" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor13.log'.</msg>
<status status="PASS" endtime="20150709 15:19:44.895" starttime="20150709 15:19:44.886"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:44.897" starttime="20150709 15:19:44.871"></status>
</kw>
<msg timestamp="20150709 15:19:44.900" level="INFO">${ssh_connection} = 13</msg>
<status status="PASS" endtime="20150709 15:19:44.899" starttime="20150709 15:19:44.331"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:19:44.914" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:19:44.915" starttime="20150709 15:19:44.902"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:44.938" starttime="20150709 15:19:44.935"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:19:44.948" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:19:44.947" starttime="20150709 15:19:44.940"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:19:44.956" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:19:44.957" starttime="20150709 15:19:44.950"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:44.971" starttime="20150709 15:19:44.968"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:19:44.975" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:19:45.011" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:45.015" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:19:45.013" starttime="20150709 15:19:44.972"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:45.019" starttime="20150709 15:19:45.017"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:45.023" starttime="20150709 15:19:45.021"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:45.027" starttime="20150709 15:19:45.025"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:19:45.033" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:19:45.076" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:45.077" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:19:45.077" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:19:45.076" starttime="20150709 15:19:45.029"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:45.082" starttime="20150709 15:19:45.078"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:45.083" starttime="20150709 15:19:45.082"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:45.085" starttime="20150709 15:19:45.084"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:45.087" starttime="20150709 15:19:45.086"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:45.089" starttime="20150709 15:19:45.088"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:45.091" starttime="20150709 15:19:45.090"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:45.093" starttime="20150709 15:19:45.092"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:45.098" starttime="20150709 15:19:45.095"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:45.101" starttime="20150709 15:19:45.099"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:45.105" starttime="20150709 15:19:45.103"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:45.111" starttime="20150709 15:19:45.107"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:45.112" starttime="20150709 15:19:44.959"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:45.119" level="INFO">Starting command 'cat tmpfilemonitor13.log'.</msg>
<status status="PASS" endtime="20150709 15:19:45.124" starttime="20150709 15:19:45.116"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:19:45.127" level="INFO">Reading output of command 'cat tmpfilemonitor13.log'.</msg>
<msg timestamp="20150709 15:19:45.147" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:45.149" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:19:45.148" starttime="20150709 15:19:45.125"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:45.154" level="INFO">Executing command 'rm tmpfilemonitor13.log'.</msg>
<msg timestamp="20150709 15:19:45.213" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:19:45.215" starttime="20150709 15:19:45.151"></status>
</kw>
<msg timestamp="20150709 15:19:45.219" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:45.217" starttime="20150709 15:19:44.928"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:45.228" starttime="20150709 15:19:45.220"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:45.241" starttime="20150709 15:19:45.238"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:19:45.249" starttime="20150709 15:19:45.247"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:45.253" starttime="20150709 15:19:45.230"></status>
</kw>
<msg timestamp="20150709 15:19:45.257" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:45.256" starttime="20150709 15:19:44.918"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:45.259" starttime="20150709 15:19:44.303"></status>
</kw>
<kw type="foritem" name="${i} = 14">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:19:45.265" level="INFO">
*********** Experiment: 14 ************</msg>
<status status="PASS" endtime="20150709 15:19:45.266" starttime="20150709 15:19:45.261"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:45.317" starttime="20150709 15:19:45.314"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:45.383" starttime="20150709 15:19:45.327"></status>
</kw>
<msg timestamp="20150709 15:19:45.386" level="INFO">${ssh_connection} = 14</msg>
<status status="PASS" endtime="20150709 15:19:45.385" starttime="20150709 15:19:45.319"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:19:45.400" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:19:45.847" level="INFO">Read output: Last login: Thu Jul  9 13:19:44 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:19:45.848" starttime="20150709 15:19:45.396"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:45.849" starttime="20150709 15:19:45.388"></status>
</kw>
<msg timestamp="20150709 15:19:45.850" level="INFO">${ssh_connection} = 14</msg>
<status status="PASS" endtime="20150709 15:19:45.850" starttime="20150709 15:19:45.303"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:45.857" starttime="20150709 15:19:45.856"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:45.860" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor14.log'.</msg>
<status status="PASS" endtime="20150709 15:19:45.863" starttime="20150709 15:19:45.858"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:45.863" starttime="20150709 15:19:45.852"></status>
</kw>
<msg timestamp="20150709 15:19:45.865" level="INFO">${ssh_connection} = 14</msg>
<status status="PASS" endtime="20150709 15:19:45.864" starttime="20150709 15:19:45.287"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:19:45.876" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:19:45.876" starttime="20150709 15:19:45.865"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:45.886" starttime="20150709 15:19:45.885"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:19:45.891" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:19:45.890" starttime="20150709 15:19:45.887"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:19:45.894" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:19:45.895" starttime="20150709 15:19:45.891"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:45.901" starttime="20150709 15:19:45.900"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:19:45.903" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:19:45.930" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:45.931" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:19:45.930" starttime="20150709 15:19:45.902"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:45.933" starttime="20150709 15:19:45.932"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:45.935" starttime="20150709 15:19:45.934"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:45.936" starttime="20150709 15:19:45.935"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:19:45.939" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:19:46.017" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:46.019" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:19:46.020" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:19:46.018" starttime="20150709 15:19:45.937"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:46.025" starttime="20150709 15:19:46.021"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:46.028" starttime="20150709 15:19:46.026"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:46.031" starttime="20150709 15:19:46.029"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:46.033" starttime="20150709 15:19:46.032"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:46.036" starttime="20150709 15:19:46.034"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:46.038" starttime="20150709 15:19:46.037"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:46.041" starttime="20150709 15:19:46.039"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:46.044" starttime="20150709 15:19:46.042"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:46.046" starttime="20150709 15:19:46.045"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:46.049" starttime="20150709 15:19:46.047"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:46.051" starttime="20150709 15:19:46.050"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:46.052" starttime="20150709 15:19:45.896"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:46.055" level="INFO">Starting command 'cat tmpfilemonitor14.log'.</msg>
<status status="PASS" endtime="20150709 15:19:46.059" starttime="20150709 15:19:46.054"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:19:46.061" level="INFO">Reading output of command 'cat tmpfilemonitor14.log'.</msg>
<msg timestamp="20150709 15:19:46.096" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:46.098" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:19:46.097" starttime="20150709 15:19:46.060"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:46.103" level="INFO">Executing command 'rm tmpfilemonitor14.log'.</msg>
<msg timestamp="20150709 15:19:46.183" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:19:46.185" starttime="20150709 15:19:46.100"></status>
</kw>
<msg timestamp="20150709 15:19:46.189" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:46.187" starttime="20150709 15:19:45.882"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:46.197" starttime="20150709 15:19:46.191"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:46.205" starttime="20150709 15:19:46.202"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:19:46.212" starttime="20150709 15:19:46.206"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:46.214" starttime="20150709 15:19:46.198"></status>
</kw>
<msg timestamp="20150709 15:19:46.219" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:46.217" starttime="20150709 15:19:45.878"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:46.220" starttime="20150709 15:19:45.260"></status>
</kw>
<kw type="foritem" name="${i} = 15">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:19:46.226" level="INFO">
*********** Experiment: 15 ************</msg>
<status status="PASS" endtime="20150709 15:19:46.227" starttime="20150709 15:19:46.222"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:46.274" starttime="20150709 15:19:46.272"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:46.336" starttime="20150709 15:19:46.284"></status>
</kw>
<msg timestamp="20150709 15:19:46.339" level="INFO">${ssh_connection} = 15</msg>
<status status="PASS" endtime="20150709 15:19:46.338" starttime="20150709 15:19:46.276"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:19:46.374" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:19:46.785" level="INFO">Read output: Last login: Thu Jul  9 13:19:45 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:19:46.787" starttime="20150709 15:19:46.368"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:46.788" starttime="20150709 15:19:46.341"></status>
</kw>
<msg timestamp="20150709 15:19:46.790" level="INFO">${ssh_connection} = 15</msg>
<status status="PASS" endtime="20150709 15:19:46.789" starttime="20150709 15:19:46.261"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:46.798" starttime="20150709 15:19:46.797"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:46.801" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor15.log'.</msg>
<status status="PASS" endtime="20150709 15:19:46.805" starttime="20150709 15:19:46.799"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:46.806" starttime="20150709 15:19:46.793"></status>
</kw>
<msg timestamp="20150709 15:19:46.807" level="INFO">${ssh_connection} = 15</msg>
<status status="PASS" endtime="20150709 15:19:46.807" starttime="20150709 15:19:46.246"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:19:46.819" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:19:46.819" starttime="20150709 15:19:46.808"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:46.830" starttime="20150709 15:19:46.828"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:19:46.834" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:19:46.833" starttime="20150709 15:19:46.830"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:19:46.839" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:19:46.839" starttime="20150709 15:19:46.835"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:46.845" starttime="20150709 15:19:46.844"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:19:46.847" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:19:46.890" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:46.893" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:19:46.892" starttime="20150709 15:19:46.846"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:46.897" starttime="20150709 15:19:46.894"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:46.901" starttime="20150709 15:19:46.899"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:46.905" starttime="20150709 15:19:46.903"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:19:46.911" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:19:46.964" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:46.966" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:19:46.967" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:19:46.965" starttime="20150709 15:19:46.907"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:46.976" starttime="20150709 15:19:46.969"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:46.980" starttime="20150709 15:19:46.977"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:46.984" starttime="20150709 15:19:46.981"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:46.988" starttime="20150709 15:19:46.985"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:46.992" starttime="20150709 15:19:46.989"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:46.996" starttime="20150709 15:19:46.993"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:47.000" starttime="20150709 15:19:46.997"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:47.006" starttime="20150709 15:19:47.003"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:47.010" starttime="20150709 15:19:47.007"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:47.013" starttime="20150709 15:19:47.011"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:47.017" starttime="20150709 15:19:47.015"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:47.019" starttime="20150709 15:19:46.840"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:47.024" level="INFO">Starting command 'cat tmpfilemonitor15.log'.</msg>
<status status="PASS" endtime="20150709 15:19:47.031" starttime="20150709 15:19:47.021"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:19:47.035" level="INFO">Reading output of command 'cat tmpfilemonitor15.log'.</msg>
<msg timestamp="20150709 15:19:47.070" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:47.073" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:19:47.072" starttime="20150709 15:19:47.033"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:47.077" level="INFO">Executing command 'rm tmpfilemonitor15.log'.</msg>
<msg timestamp="20150709 15:19:47.149" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:19:47.151" starttime="20150709 15:19:47.074"></status>
</kw>
<msg timestamp="20150709 15:19:47.155" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:47.153" starttime="20150709 15:19:46.825"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:47.165" starttime="20150709 15:19:47.157"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:47.177" starttime="20150709 15:19:47.174"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:19:47.182" starttime="20150709 15:19:47.179"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:47.186" starttime="20150709 15:19:47.167"></status>
</kw>
<msg timestamp="20150709 15:19:47.190" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:47.188" starttime="20150709 15:19:46.821"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:47.191" starttime="20150709 15:19:46.221"></status>
</kw>
<kw type="foritem" name="${i} = 16">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:19:47.196" level="INFO">
*********** Experiment: 16 ************</msg>
<status status="PASS" endtime="20150709 15:19:47.198" starttime="20150709 15:19:47.193"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:47.245" starttime="20150709 15:19:47.243"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:47.315" starttime="20150709 15:19:47.255"></status>
</kw>
<msg timestamp="20150709 15:19:47.318" level="INFO">${ssh_connection} = 16</msg>
<status status="PASS" endtime="20150709 15:19:47.317" starttime="20150709 15:19:47.247"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:19:47.331" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:19:47.761" level="INFO">Read output: Last login: Thu Jul  9 13:19:46 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:19:47.763" starttime="20150709 15:19:47.328"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:47.766" starttime="20150709 15:19:47.320"></status>
</kw>
<msg timestamp="20150709 15:19:47.770" level="INFO">${ssh_connection} = 16</msg>
<status status="PASS" endtime="20150709 15:19:47.769" starttime="20150709 15:19:47.232"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:47.787" starttime="20150709 15:19:47.784"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:47.792" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor16.log'.</msg>
<status status="PASS" endtime="20150709 15:19:47.797" starttime="20150709 15:19:47.789"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:47.798" starttime="20150709 15:19:47.775"></status>
</kw>
<msg timestamp="20150709 15:19:47.801" level="INFO">${ssh_connection} = 16</msg>
<status status="PASS" endtime="20150709 15:19:47.800" starttime="20150709 15:19:47.217"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:19:47.816" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:19:47.817" starttime="20150709 15:19:47.802"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:47.838" starttime="20150709 15:19:47.835"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:19:47.847" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:19:47.846" starttime="20150709 15:19:47.839"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:19:47.854" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:19:47.855" starttime="20150709 15:19:47.848"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:47.868" starttime="20150709 15:19:47.865"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:19:47.871" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:19:47.912" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:47.914" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:19:47.913" starttime="20150709 15:19:47.869"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:47.918" starttime="20150709 15:19:47.916"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:47.922" starttime="20150709 15:19:47.920"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:47.925" starttime="20150709 15:19:47.923"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:19:47.930" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:19:47.991" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:47.993" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:19:47.994" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:19:47.992" starttime="20150709 15:19:47.927"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:48.002" starttime="20150709 15:19:47.995"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:48.007" starttime="20150709 15:19:48.005"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:48.011" starttime="20150709 15:19:48.008"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:48.014" starttime="20150709 15:19:48.012"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:48.018" starttime="20150709 15:19:48.016"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:48.022" starttime="20150709 15:19:48.020"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:48.026" starttime="20150709 15:19:48.023"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:48.030" starttime="20150709 15:19:48.028"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:48.034" starttime="20150709 15:19:48.031"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:48.037" starttime="20150709 15:19:48.035"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:48.041" starttime="20150709 15:19:48.039"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:48.042" starttime="20150709 15:19:47.857"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:48.047" level="INFO">Starting command 'cat tmpfilemonitor16.log'.</msg>
<status status="PASS" endtime="20150709 15:19:48.052" starttime="20150709 15:19:48.045"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:19:48.055" level="INFO">Reading output of command 'cat tmpfilemonitor16.log'.</msg>
<msg timestamp="20150709 15:19:48.087" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:48.089" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:19:48.088" starttime="20150709 15:19:48.053"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:48.094" level="INFO">Executing command 'rm tmpfilemonitor16.log'.</msg>
<msg timestamp="20150709 15:19:48.157" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:19:48.158" starttime="20150709 15:19:48.091"></status>
</kw>
<msg timestamp="20150709 15:19:48.162" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:48.160" starttime="20150709 15:19:47.828"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:48.172" starttime="20150709 15:19:48.164"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:48.185" starttime="20150709 15:19:48.182"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:19:48.190" starttime="20150709 15:19:48.186"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:48.195" starttime="20150709 15:19:48.174"></status>
</kw>
<msg timestamp="20150709 15:19:48.199" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:48.197" starttime="20150709 15:19:47.820"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:48.200" starttime="20150709 15:19:47.192"></status>
</kw>
<kw type="foritem" name="${i} = 17">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:19:48.205" level="INFO">
*********** Experiment: 17 ************</msg>
<status status="PASS" endtime="20150709 15:19:48.206" starttime="20150709 15:19:48.202"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:48.252" starttime="20150709 15:19:48.249"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:48.321" starttime="20150709 15:19:48.261"></status>
</kw>
<msg timestamp="20150709 15:19:48.323" level="INFO">${ssh_connection} = 17</msg>
<status status="PASS" endtime="20150709 15:19:48.322" starttime="20150709 15:19:48.253"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:19:48.329" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:19:48.677" level="INFO">Read output: Last login: Thu Jul  9 13:19:47 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:19:48.679" starttime="20150709 15:19:48.328"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:48.680" starttime="20150709 15:19:48.323"></status>
</kw>
<msg timestamp="20150709 15:19:48.683" level="INFO">${ssh_connection} = 17</msg>
<status status="PASS" endtime="20150709 15:19:48.682" starttime="20150709 15:19:48.239"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:48.698" starttime="20150709 15:19:48.694"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:48.700" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor17.log'.</msg>
<status status="PASS" endtime="20150709 15:19:48.703" starttime="20150709 15:19:48.698"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:48.704" starttime="20150709 15:19:48.686"></status>
</kw>
<msg timestamp="20150709 15:19:48.705" level="INFO">${ssh_connection} = 17</msg>
<status status="PASS" endtime="20150709 15:19:48.704" starttime="20150709 15:19:48.225"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:19:48.716" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:19:48.716" starttime="20150709 15:19:48.705"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:48.726" starttime="20150709 15:19:48.724"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:19:48.730" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:19:48.729" starttime="20150709 15:19:48.726"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:19:48.734" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:19:48.734" starttime="20150709 15:19:48.730"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:48.740" starttime="20150709 15:19:48.739"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:19:48.742" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:19:48.775" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:48.778" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:19:48.776" starttime="20150709 15:19:48.741"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:48.782" starttime="20150709 15:19:48.779"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:48.785" starttime="20150709 15:19:48.783"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:48.789" starttime="20150709 15:19:48.787"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:19:48.794" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:19:48.851" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:48.853" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:19:48.854" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:19:48.852" starttime="20150709 15:19:48.790"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:48.862" starttime="20150709 15:19:48.855"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:48.865" starttime="20150709 15:19:48.863"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:48.887" starttime="20150709 15:19:48.882"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:48.894" starttime="20150709 15:19:48.890"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:48.898" starttime="20150709 15:19:48.896"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:48.903" starttime="20150709 15:19:48.901"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:48.907" starttime="20150709 15:19:48.905"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:48.911" starttime="20150709 15:19:48.909"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:48.916" starttime="20150709 15:19:48.913"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:48.919" starttime="20150709 15:19:48.917"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:48.923" starttime="20150709 15:19:48.920"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:48.924" starttime="20150709 15:19:48.735"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:48.928" level="INFO">Starting command 'cat tmpfilemonitor17.log'.</msg>
<status status="PASS" endtime="20150709 15:19:48.933" starttime="20150709 15:19:48.925"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:19:48.936" level="INFO">Reading output of command 'cat tmpfilemonitor17.log'.</msg>
<msg timestamp="20150709 15:19:48.962" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:48.964" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:19:48.963" starttime="20150709 15:19:48.934"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:48.968" level="INFO">Executing command 'rm tmpfilemonitor17.log'.</msg>
<msg timestamp="20150709 15:19:49.032" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:19:49.034" starttime="20150709 15:19:48.965"></status>
</kw>
<msg timestamp="20150709 15:19:49.038" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:49.037" starttime="20150709 15:19:48.721"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:49.047" starttime="20150709 15:19:49.040"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:49.060" starttime="20150709 15:19:49.057"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:19:49.064" starttime="20150709 15:19:49.061"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:49.068" starttime="20150709 15:19:49.050"></status>
</kw>
<msg timestamp="20150709 15:19:49.072" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:49.069" starttime="20150709 15:19:48.718"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:49.073" starttime="20150709 15:19:48.201"></status>
</kw>
<kw type="foritem" name="${i} = 18">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:19:49.078" level="INFO">
*********** Experiment: 18 ************</msg>
<status status="PASS" endtime="20150709 15:19:49.079" starttime="20150709 15:19:49.075"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:49.125" starttime="20150709 15:19:49.123"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:49.187" starttime="20150709 15:19:49.134"></status>
</kw>
<msg timestamp="20150709 15:19:49.190" level="INFO">${ssh_connection} = 18</msg>
<status status="PASS" endtime="20150709 15:19:49.188" starttime="20150709 15:19:49.127"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:19:49.202" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:19:49.531" level="INFO">Read output: Last login: Thu Jul  9 13:19:48 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:19:49.533" starttime="20150709 15:19:49.199"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:49.534" starttime="20150709 15:19:49.191"></status>
</kw>
<msg timestamp="20150709 15:19:49.537" level="INFO">${ssh_connection} = 18</msg>
<status status="PASS" endtime="20150709 15:19:49.536" starttime="20150709 15:19:49.113"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:49.550" starttime="20150709 15:19:49.548"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:49.555" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor18.log'.</msg>
<status status="PASS" endtime="20150709 15:19:49.559" starttime="20150709 15:19:49.552"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:49.560" starttime="20150709 15:19:49.540"></status>
</kw>
<msg timestamp="20150709 15:19:49.563" level="INFO">${ssh_connection} = 18</msg>
<status status="PASS" endtime="20150709 15:19:49.562" starttime="20150709 15:19:49.098"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:19:49.577" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:19:49.577" starttime="20150709 15:19:49.564"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:49.586" starttime="20150709 15:19:49.585"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:19:49.591" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:19:49.590" starttime="20150709 15:19:49.587"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:19:49.595" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:19:49.596" starttime="20150709 15:19:49.591"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:49.602" starttime="20150709 15:19:49.600"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:19:49.603" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:19:49.633" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:49.636" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:19:49.635" starttime="20150709 15:19:49.602"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:49.639" starttime="20150709 15:19:49.637"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:49.643" starttime="20150709 15:19:49.641"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:49.646" starttime="20150709 15:19:49.644"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:19:49.651" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:19:49.711" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:49.713" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:19:49.714" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:19:49.712" starttime="20150709 15:19:49.648"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:49.723" starttime="20150709 15:19:49.716"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:49.727" starttime="20150709 15:19:49.724"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:49.730" starttime="20150709 15:19:49.728"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:49.734" starttime="20150709 15:19:49.732"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:49.737" starttime="20150709 15:19:49.735"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:49.741" starttime="20150709 15:19:49.739"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:49.745" starttime="20150709 15:19:49.742"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:49.749" starttime="20150709 15:19:49.746"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:49.752" starttime="20150709 15:19:49.750"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:49.756" starttime="20150709 15:19:49.754"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:49.759" starttime="20150709 15:19:49.757"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:49.761" starttime="20150709 15:19:49.597"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:49.765" level="INFO">Starting command 'cat tmpfilemonitor18.log'.</msg>
<status status="PASS" endtime="20150709 15:19:49.769" starttime="20150709 15:19:49.762"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:19:49.772" level="INFO">Reading output of command 'cat tmpfilemonitor18.log'.</msg>
<msg timestamp="20150709 15:19:49.797" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:49.799" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:19:49.798" starttime="20150709 15:19:49.770"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:49.803" level="INFO">Executing command 'rm tmpfilemonitor18.log'.</msg>
<msg timestamp="20150709 15:19:49.860" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:19:49.861" starttime="20150709 15:19:49.800"></status>
</kw>
<msg timestamp="20150709 15:19:49.862" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:49.862" starttime="20150709 15:19:49.582"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:49.867" starttime="20150709 15:19:49.863"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:49.872" starttime="20150709 15:19:49.871"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:19:49.877" starttime="20150709 15:19:49.873"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:49.878" starttime="20150709 15:19:49.868"></status>
</kw>
<msg timestamp="20150709 15:19:49.879" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:49.878" starttime="20150709 15:19:49.578"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:49.879" starttime="20150709 15:19:49.074"></status>
</kw>
<kw type="foritem" name="${i} = 19">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:19:49.881" level="INFO">
*********** Experiment: 19 ************</msg>
<status status="PASS" endtime="20150709 15:19:49.882" starttime="20150709 15:19:49.880"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:49.902" starttime="20150709 15:19:49.901"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:49.937" starttime="20150709 15:19:49.907"></status>
</kw>
<msg timestamp="20150709 15:19:49.939" level="INFO">${ssh_connection} = 19</msg>
<status status="PASS" endtime="20150709 15:19:49.938" starttime="20150709 15:19:49.903"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:19:49.945" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:19:50.281" level="INFO">Read output: Last login: Thu Jul  9 13:19:49 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:19:50.285" starttime="20150709 15:19:49.943"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:50.287" starttime="20150709 15:19:49.939"></status>
</kw>
<msg timestamp="20150709 15:19:50.292" level="INFO">${ssh_connection} = 19</msg>
<status status="PASS" endtime="20150709 15:19:50.290" starttime="20150709 15:19:49.897"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:50.308" starttime="20150709 15:19:50.303"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:50.312" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor19.log'.</msg>
<status status="PASS" endtime="20150709 15:19:50.319" starttime="20150709 15:19:50.309"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:50.320" starttime="20150709 15:19:50.295"></status>
</kw>
<msg timestamp="20150709 15:19:50.322" level="INFO">${ssh_connection} = 19</msg>
<status status="PASS" endtime="20150709 15:19:50.322" starttime="20150709 15:19:49.890"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:19:50.334" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:19:50.334" starttime="20150709 15:19:50.323"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:50.343" starttime="20150709 15:19:50.342"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:19:50.365" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:19:50.365" starttime="20150709 15:19:50.344"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:19:50.371" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:19:50.372" starttime="20150709 15:19:50.367"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:50.379" starttime="20150709 15:19:50.378"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:19:50.380" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:19:50.415" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:50.416" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:19:50.415" starttime="20150709 15:19:50.379"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:50.417" starttime="20150709 15:19:50.416"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:50.419" starttime="20150709 15:19:50.418"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:50.421" starttime="20150709 15:19:50.420"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:19:50.423" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:19:50.487" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:50.489" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:19:50.489" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:19:50.488" starttime="20150709 15:19:50.421"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:50.499" starttime="20150709 15:19:50.491"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:50.502" starttime="20150709 15:19:50.500"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:50.506" starttime="20150709 15:19:50.503"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:50.509" starttime="20150709 15:19:50.507"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:50.513" starttime="20150709 15:19:50.511"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:50.516" starttime="20150709 15:19:50.514"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:50.520" starttime="20150709 15:19:50.518"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:50.524" starttime="20150709 15:19:50.522"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:50.528" starttime="20150709 15:19:50.526"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:50.532" starttime="20150709 15:19:50.529"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:50.535" starttime="20150709 15:19:50.533"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:50.537" starttime="20150709 15:19:50.373"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:50.541" level="INFO">Starting command 'cat tmpfilemonitor19.log'.</msg>
<status status="PASS" endtime="20150709 15:19:50.545" starttime="20150709 15:19:50.538"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:19:50.548" level="INFO">Reading output of command 'cat tmpfilemonitor19.log'.</msg>
<msg timestamp="20150709 15:19:50.568" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:50.570" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:19:50.569" starttime="20150709 15:19:50.546"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:50.574" level="INFO">Executing command 'rm tmpfilemonitor19.log'.</msg>
<msg timestamp="20150709 15:19:50.632" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:19:50.633" starttime="20150709 15:19:50.571"></status>
</kw>
<msg timestamp="20150709 15:19:50.635" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:50.634" starttime="20150709 15:19:50.339"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:50.643" starttime="20150709 15:19:50.637"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:50.655" starttime="20150709 15:19:50.653"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:19:50.662" starttime="20150709 15:19:50.657"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:50.664" starttime="20150709 15:19:50.645"></status>
</kw>
<msg timestamp="20150709 15:19:50.666" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:50.665" starttime="20150709 15:19:50.335"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:50.667" starttime="20150709 15:19:49.880"></status>
</kw>
<kw type="foritem" name="${i} = 20">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:19:50.672" level="INFO">
*********** Experiment: 20 ************</msg>
<status status="PASS" endtime="20150709 15:19:50.674" starttime="20150709 15:19:50.670"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:50.718" starttime="20150709 15:19:50.716"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:50.772" starttime="20150709 15:19:50.727"></status>
</kw>
<msg timestamp="20150709 15:19:50.774" level="INFO">${ssh_connection} = 20</msg>
<status status="PASS" endtime="20150709 15:19:50.773" starttime="20150709 15:19:50.720"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:19:50.786" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:19:51.153" level="INFO">Read output: Last login: Thu Jul  9 13:19:50 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:19:51.155" starttime="20150709 15:19:50.784"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:51.157" starttime="20150709 15:19:50.776"></status>
</kw>
<msg timestamp="20150709 15:19:51.161" level="INFO">${ssh_connection} = 20</msg>
<status status="PASS" endtime="20150709 15:19:51.160" starttime="20150709 15:19:50.706"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:51.175" starttime="20150709 15:19:51.172"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:51.179" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor20.log'.</msg>
<status status="PASS" endtime="20150709 15:19:51.184" starttime="20150709 15:19:51.176"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:51.185" starttime="20150709 15:19:51.164"></status>
</kw>
<msg timestamp="20150709 15:19:51.188" level="INFO">${ssh_connection} = 20</msg>
<status status="PASS" endtime="20150709 15:19:51.187" starttime="20150709 15:19:50.693"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:19:51.202" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:19:51.203" starttime="20150709 15:19:51.190"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:51.223" starttime="20150709 15:19:51.220"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:19:51.231" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:19:51.230" starttime="20150709 15:19:51.224"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:19:51.237" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:19:51.238" starttime="20150709 15:19:51.232"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:51.250" starttime="20150709 15:19:51.247"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:19:51.253" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:19:51.286" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:51.288" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:19:51.287" starttime="20150709 15:19:51.252"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:51.292" starttime="20150709 15:19:51.289"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:51.296" starttime="20150709 15:19:51.294"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:51.299" starttime="20150709 15:19:51.297"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:19:51.304" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:19:51.368" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:51.370" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:19:51.371" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:19:51.369" starttime="20150709 15:19:51.301"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:51.379" starttime="20150709 15:19:51.372"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:51.382" starttime="20150709 15:19:51.380"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:51.386" starttime="20150709 15:19:51.384"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:51.389" starttime="20150709 15:19:51.387"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:51.393" starttime="20150709 15:19:51.391"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:51.397" starttime="20150709 15:19:51.395"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:51.401" starttime="20150709 15:19:51.398"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:51.405" starttime="20150709 15:19:51.403"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:51.409" starttime="20150709 15:19:51.407"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:51.412" starttime="20150709 15:19:51.410"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:51.416" starttime="20150709 15:19:51.414"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:51.417" starttime="20150709 15:19:51.240"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:51.421" level="INFO">Starting command 'cat tmpfilemonitor20.log'.</msg>
<status status="PASS" endtime="20150709 15:19:51.425" starttime="20150709 15:19:51.418"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:19:51.428" level="INFO">Reading output of command 'cat tmpfilemonitor20.log'.</msg>
<msg timestamp="20150709 15:19:51.451" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:51.453" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:19:51.452" starttime="20150709 15:19:51.426"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:51.457" level="INFO">Executing command 'rm tmpfilemonitor20.log'.</msg>
<msg timestamp="20150709 15:19:51.529" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:19:51.530" starttime="20150709 15:19:51.455"></status>
</kw>
<msg timestamp="20150709 15:19:51.533" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:51.532" starttime="20150709 15:19:51.213"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:51.541" starttime="20150709 15:19:51.535"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:51.553" starttime="20150709 15:19:51.551"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:19:51.557" starttime="20150709 15:19:51.555"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:51.565" starttime="20150709 15:19:51.543"></status>
</kw>
<msg timestamp="20150709 15:19:51.568" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:51.567" starttime="20150709 15:19:51.206"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:51.568" starttime="20150709 15:19:50.669"></status>
</kw>
<kw type="foritem" name="${i} = 21">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:19:51.580" level="INFO">
*********** Experiment: 21 ************</msg>
<status status="PASS" endtime="20150709 15:19:51.582" starttime="20150709 15:19:51.576"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:51.626" starttime="20150709 15:19:51.624"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:51.686" starttime="20150709 15:19:51.635"></status>
</kw>
<msg timestamp="20150709 15:19:51.689" level="INFO">${ssh_connection} = 21</msg>
<status status="PASS" endtime="20150709 15:19:51.688" starttime="20150709 15:19:51.628"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:19:51.701" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:19:52.092" level="INFO">Read output: Last login: Thu Jul  9 13:19:50 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:19:52.094" starttime="20150709 15:19:51.698"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:52.096" starttime="20150709 15:19:51.690"></status>
</kw>
<msg timestamp="20150709 15:19:52.102" level="INFO">${ssh_connection} = 21</msg>
<status status="PASS" endtime="20150709 15:19:52.100" starttime="20150709 15:19:51.614"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:52.117" starttime="20150709 15:19:52.114"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:52.121" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor21.log'.</msg>
<status status="PASS" endtime="20150709 15:19:52.127" starttime="20150709 15:19:52.118"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:52.128" starttime="20150709 15:19:52.105"></status>
</kw>
<msg timestamp="20150709 15:19:52.132" level="INFO">${ssh_connection} = 21</msg>
<status status="PASS" endtime="20150709 15:19:52.130" starttime="20150709 15:19:51.601"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:19:52.145" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:19:52.146" starttime="20150709 15:19:52.133"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:52.166" starttime="20150709 15:19:52.164"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:19:52.175" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:19:52.174" starttime="20150709 15:19:52.168"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:19:52.182" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:19:52.183" starttime="20150709 15:19:52.177"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:52.195" starttime="20150709 15:19:52.193"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:19:52.199" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:19:52.243" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:52.245" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:19:52.244" starttime="20150709 15:19:52.197"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:52.249" starttime="20150709 15:19:52.247"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:52.253" starttime="20150709 15:19:52.251"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:52.256" starttime="20150709 15:19:52.254"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:19:52.261" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:19:52.328" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:52.330" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:19:52.331" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:19:52.329" starttime="20150709 15:19:52.258"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:52.339" starttime="20150709 15:19:52.333"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:52.343" starttime="20150709 15:19:52.341"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:52.347" starttime="20150709 15:19:52.344"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:52.350" starttime="20150709 15:19:52.348"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:52.354" starttime="20150709 15:19:52.352"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:52.357" starttime="20150709 15:19:52.355"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:52.361" starttime="20150709 15:19:52.359"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:52.365" starttime="20150709 15:19:52.363"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:52.369" starttime="20150709 15:19:52.366"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:52.372" starttime="20150709 15:19:52.370"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:52.376" starttime="20150709 15:19:52.374"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:52.377" starttime="20150709 15:19:52.185"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:52.381" level="INFO">Starting command 'cat tmpfilemonitor21.log'.</msg>
<status status="PASS" endtime="20150709 15:19:52.386" starttime="20150709 15:19:52.379"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:19:52.389" level="INFO">Reading output of command 'cat tmpfilemonitor21.log'.</msg>
<msg timestamp="20150709 15:19:52.423" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:52.425" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:19:52.424" starttime="20150709 15:19:52.387"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:52.430" level="INFO">Executing command 'rm tmpfilemonitor21.log'.</msg>
<msg timestamp="20150709 15:19:52.504" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:19:52.505" starttime="20150709 15:19:52.427"></status>
</kw>
<msg timestamp="20150709 15:19:52.507" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:52.506" starttime="20150709 15:19:52.157"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:52.515" starttime="20150709 15:19:52.509"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:52.527" starttime="20150709 15:19:52.525"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:19:52.535" starttime="20150709 15:19:52.529"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:52.536" starttime="20150709 15:19:52.518"></status>
</kw>
<msg timestamp="20150709 15:19:52.539" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:52.538" starttime="20150709 15:19:52.149"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:52.539" starttime="20150709 15:19:51.570"></status>
</kw>
<kw type="foritem" name="${i} = 22">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:19:52.545" level="INFO">
*********** Experiment: 22 ************</msg>
<status status="PASS" endtime="20150709 15:19:52.546" starttime="20150709 15:19:52.542"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:52.592" starttime="20150709 15:19:52.587"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:52.661" starttime="20150709 15:19:52.602"></status>
</kw>
<msg timestamp="20150709 15:19:52.663" level="INFO">${ssh_connection} = 22</msg>
<status status="PASS" endtime="20150709 15:19:52.662" starttime="20150709 15:19:52.594"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:19:52.675" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:19:52.997" level="INFO">Read output: Last login: Thu Jul  9 13:19:51 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:19:52.998" starttime="20150709 15:19:52.672"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:52.999" starttime="20150709 15:19:52.665"></status>
</kw>
<msg timestamp="20150709 15:19:53.004" level="INFO">${ssh_connection} = 22</msg>
<status status="PASS" endtime="20150709 15:19:53.002" starttime="20150709 15:19:52.578"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:53.017" starttime="20150709 15:19:53.014"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:53.021" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor22.log'.</msg>
<status status="PASS" endtime="20150709 15:19:53.025" starttime="20150709 15:19:53.019"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:53.034" starttime="20150709 15:19:53.006"></status>
</kw>
<msg timestamp="20150709 15:19:53.038" level="INFO">${ssh_connection} = 22</msg>
<status status="PASS" endtime="20150709 15:19:53.036" starttime="20150709 15:19:52.565"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:19:53.052" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:19:53.053" starttime="20150709 15:19:53.039"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:53.073" starttime="20150709 15:19:53.070"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:19:53.082" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:19:53.081" starttime="20150709 15:19:53.075"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:19:53.089" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:19:53.090" starttime="20150709 15:19:53.083"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:53.103" starttime="20150709 15:19:53.100"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:19:53.106" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:19:53.138" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:53.140" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:19:53.139" starttime="20150709 15:19:53.104"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:53.144" starttime="20150709 15:19:53.142"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:53.148" starttime="20150709 15:19:53.145"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:53.151" starttime="20150709 15:19:53.149"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:19:53.156" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:19:53.216" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:53.218" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:19:53.219" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:19:53.217" starttime="20150709 15:19:53.152"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:53.227" starttime="20150709 15:19:53.220"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:53.231" starttime="20150709 15:19:53.229"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:53.234" starttime="20150709 15:19:53.232"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:53.237" starttime="20150709 15:19:53.235"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:53.241" starttime="20150709 15:19:53.239"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:53.244" starttime="20150709 15:19:53.242"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:53.248" starttime="20150709 15:19:53.246"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:53.251" starttime="20150709 15:19:53.249"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:53.255" starttime="20150709 15:19:53.253"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:53.258" starttime="20150709 15:19:53.256"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:53.261" starttime="20150709 15:19:53.259"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:53.263" starttime="20150709 15:19:53.092"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:53.267" level="INFO">Starting command 'cat tmpfilemonitor22.log'.</msg>
<status status="PASS" endtime="20150709 15:19:53.271" starttime="20150709 15:19:53.264"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:19:53.274" level="INFO">Reading output of command 'cat tmpfilemonitor22.log'.</msg>
<msg timestamp="20150709 15:19:53.313" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:53.316" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:19:53.315" starttime="20150709 15:19:53.273"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:53.320" level="INFO">Executing command 'rm tmpfilemonitor22.log'.</msg>
<msg timestamp="20150709 15:19:53.386" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:19:53.387" starttime="20150709 15:19:53.317"></status>
</kw>
<msg timestamp="20150709 15:19:53.390" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:53.389" starttime="20150709 15:19:53.063"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:53.398" starttime="20150709 15:19:53.391"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:53.409" starttime="20150709 15:19:53.407"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:19:53.416" starttime="20150709 15:19:53.411"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:53.418" starttime="20150709 15:19:53.400"></status>
</kw>
<msg timestamp="20150709 15:19:53.420" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:53.419" starttime="20150709 15:19:53.056"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:53.421" starttime="20150709 15:19:52.541"></status>
</kw>
<kw type="foritem" name="${i} = 23">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:19:53.426" level="INFO">
*********** Experiment: 23 ************</msg>
<status status="PASS" endtime="20150709 15:19:53.427" starttime="20150709 15:19:53.424"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:53.471" starttime="20150709 15:19:53.468"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:53.533" starttime="20150709 15:19:53.479"></status>
</kw>
<msg timestamp="20150709 15:19:53.535" level="INFO">${ssh_connection} = 23</msg>
<status status="PASS" endtime="20150709 15:19:53.534" starttime="20150709 15:19:53.472"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:19:53.546" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:19:54.020" level="INFO">Read output: Last login: Thu Jul  9 13:19:52 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:19:54.022" starttime="20150709 15:19:53.544"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:54.024" starttime="20150709 15:19:53.537"></status>
</kw>
<msg timestamp="20150709 15:19:54.029" level="INFO">${ssh_connection} = 23</msg>
<status status="PASS" endtime="20150709 15:19:54.027" starttime="20150709 15:19:53.459"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:54.043" starttime="20150709 15:19:54.040"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:54.047" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor23.log'.</msg>
<status status="PASS" endtime="20150709 15:19:54.051" starttime="20150709 15:19:54.044"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:54.053" starttime="20150709 15:19:54.032"></status>
</kw>
<msg timestamp="20150709 15:19:54.056" level="INFO">${ssh_connection} = 23</msg>
<status status="PASS" endtime="20150709 15:19:54.054" starttime="20150709 15:19:53.446"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:19:54.070" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:19:54.071" starttime="20150709 15:19:54.057"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:54.091" starttime="20150709 15:19:54.089"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:19:54.101" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:19:54.099" starttime="20150709 15:19:54.093"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:19:54.108" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:19:54.109" starttime="20150709 15:19:54.102"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:54.122" starttime="20150709 15:19:54.119"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:19:54.125" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:19:54.166" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:54.168" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:19:54.167" starttime="20150709 15:19:54.123"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:54.172" starttime="20150709 15:19:54.170"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:54.175" starttime="20150709 15:19:54.173"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:54.179" starttime="20150709 15:19:54.177"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:19:54.184" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:19:54.236" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:54.238" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:19:54.239" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:19:54.237" starttime="20150709 15:19:54.180"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:54.247" starttime="20150709 15:19:54.240"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:54.251" starttime="20150709 15:19:54.249"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:54.254" starttime="20150709 15:19:54.252"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:54.258" starttime="20150709 15:19:54.255"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:54.261" starttime="20150709 15:19:54.259"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:54.264" starttime="20150709 15:19:54.262"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:54.268" starttime="20150709 15:19:54.266"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:54.271" starttime="20150709 15:19:54.269"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:54.275" starttime="20150709 15:19:54.273"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:54.278" starttime="20150709 15:19:54.276"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:54.281" starttime="20150709 15:19:54.279"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:54.283" starttime="20150709 15:19:54.111"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:54.286" level="INFO">Starting command 'cat tmpfilemonitor23.log'.</msg>
<status status="PASS" endtime="20150709 15:19:54.291" starttime="20150709 15:19:54.284"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:19:54.294" level="INFO">Reading output of command 'cat tmpfilemonitor23.log'.</msg>
<msg timestamp="20150709 15:19:54.320" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:54.322" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:19:54.321" starttime="20150709 15:19:54.292"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:54.326" level="INFO">Executing command 'rm tmpfilemonitor23.log'.</msg>
<msg timestamp="20150709 15:19:54.404" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:19:54.405" starttime="20150709 15:19:54.324"></status>
</kw>
<msg timestamp="20150709 15:19:54.408" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:54.407" starttime="20150709 15:19:54.082"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:54.416" starttime="20150709 15:19:54.410"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:54.428" starttime="20150709 15:19:54.425"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:19:54.435" starttime="20150709 15:19:54.430"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:54.436" starttime="20150709 15:19:54.419"></status>
</kw>
<msg timestamp="20150709 15:19:54.439" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:54.438" starttime="20150709 15:19:54.074"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:54.440" starttime="20150709 15:19:53.423"></status>
</kw>
<kw type="foritem" name="${i} = 24">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:19:54.445" level="INFO">
*********** Experiment: 24 ************</msg>
<status status="PASS" endtime="20150709 15:19:54.447" starttime="20150709 15:19:54.442"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:54.490" starttime="20150709 15:19:54.488"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:54.549" starttime="20150709 15:19:54.498"></status>
</kw>
<msg timestamp="20150709 15:19:54.551" level="INFO">${ssh_connection} = 24</msg>
<status status="PASS" endtime="20150709 15:19:54.550" starttime="20150709 15:19:54.491"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:19:54.563" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:19:54.894" level="INFO">Read output: Last login: Thu Jul  9 13:19:53 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:19:54.895" starttime="20150709 15:19:54.561"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:54.897" starttime="20150709 15:19:54.553"></status>
</kw>
<msg timestamp="20150709 15:19:54.900" level="INFO">${ssh_connection} = 24</msg>
<status status="PASS" endtime="20150709 15:19:54.899" starttime="20150709 15:19:54.478"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:54.913" starttime="20150709 15:19:54.910"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:54.917" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor24.log'.</msg>
<status status="PASS" endtime="20150709 15:19:54.921" starttime="20150709 15:19:54.914"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:54.922" starttime="20150709 15:19:54.902"></status>
</kw>
<msg timestamp="20150709 15:19:54.925" level="INFO">${ssh_connection} = 24</msg>
<status status="PASS" endtime="20150709 15:19:54.924" starttime="20150709 15:19:54.465"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:19:54.938" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:19:54.939" starttime="20150709 15:19:54.926"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:54.959" starttime="20150709 15:19:54.956"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:19:54.967" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:19:54.966" starttime="20150709 15:19:54.960"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:19:54.973" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:19:54.974" starttime="20150709 15:19:54.968"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:54.986" starttime="20150709 15:19:54.983"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:19:54.989" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:19:55.031" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:55.034" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:19:55.032" starttime="20150709 15:19:54.987"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:55.037" starttime="20150709 15:19:55.035"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:55.041" starttime="20150709 15:19:55.039"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:55.044" starttime="20150709 15:19:55.042"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:19:55.049" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:19:55.110" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:55.112" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:19:55.112" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:19:55.111" starttime="20150709 15:19:55.045"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:55.120" starttime="20150709 15:19:55.114"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:55.124" starttime="20150709 15:19:55.122"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:55.127" starttime="20150709 15:19:55.125"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:55.131" starttime="20150709 15:19:55.129"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:55.134" starttime="20150709 15:19:55.132"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:55.137" starttime="20150709 15:19:55.135"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:55.141" starttime="20150709 15:19:55.139"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:55.144" starttime="20150709 15:19:55.142"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:55.148" starttime="20150709 15:19:55.146"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:55.151" starttime="20150709 15:19:55.149"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:55.171" starttime="20150709 15:19:55.169"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:55.173" starttime="20150709 15:19:54.976"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:55.178" level="INFO">Starting command 'cat tmpfilemonitor24.log'.</msg>
<status status="PASS" endtime="20150709 15:19:55.183" starttime="20150709 15:19:55.175"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:19:55.186" level="INFO">Reading output of command 'cat tmpfilemonitor24.log'.</msg>
<msg timestamp="20150709 15:19:55.209" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:55.211" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:19:55.210" starttime="20150709 15:19:55.184"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:55.215" level="INFO">Executing command 'rm tmpfilemonitor24.log'.</msg>
<msg timestamp="20150709 15:19:55.285" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:19:55.286" starttime="20150709 15:19:55.213"></status>
</kw>
<msg timestamp="20150709 15:19:55.290" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:55.288" starttime="20150709 15:19:54.950"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:55.299" starttime="20150709 15:19:55.291"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:55.312" starttime="20150709 15:19:55.309"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:19:55.318" starttime="20150709 15:19:55.313"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:55.320" starttime="20150709 15:19:55.302"></status>
</kw>
<msg timestamp="20150709 15:19:55.324" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:55.322" starttime="20150709 15:19:54.942"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:55.325" starttime="20150709 15:19:54.441"></status>
</kw>
<kw type="foritem" name="${i} = 25">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:19:55.330" level="INFO">
*********** Experiment: 25 ************</msg>
<status status="PASS" endtime="20150709 15:19:55.331" starttime="20150709 15:19:55.327"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:55.373" starttime="20150709 15:19:55.371"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:55.438" starttime="20150709 15:19:55.381"></status>
</kw>
<msg timestamp="20150709 15:19:55.440" level="INFO">${ssh_connection} = 25</msg>
<status status="PASS" endtime="20150709 15:19:55.439" starttime="20150709 15:19:55.375"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:19:55.451" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:19:55.878" level="INFO">Read output: Last login: Thu Jul  9 13:19:54 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:19:55.879" starttime="20150709 15:19:55.449"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:55.880" starttime="20150709 15:19:55.441"></status>
</kw>
<msg timestamp="20150709 15:19:55.882" level="INFO">${ssh_connection} = 25</msg>
<status status="PASS" endtime="20150709 15:19:55.881" starttime="20150709 15:19:55.362"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:55.888" starttime="20150709 15:19:55.886"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:55.890" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor25.log'.</msg>
<status status="PASS" endtime="20150709 15:19:55.894" starttime="20150709 15:19:55.888"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:55.894" starttime="20150709 15:19:55.883"></status>
</kw>
<msg timestamp="20150709 15:19:55.895" level="INFO">${ssh_connection} = 25</msg>
<status status="PASS" endtime="20150709 15:19:55.895" starttime="20150709 15:19:55.349"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:19:55.907" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:19:55.908" starttime="20150709 15:19:55.896"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:55.917" starttime="20150709 15:19:55.916"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:19:55.921" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:19:55.920" starttime="20150709 15:19:55.917"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:19:55.925" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:19:55.925" starttime="20150709 15:19:55.921"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:55.931" starttime="20150709 15:19:55.929"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:19:55.932" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:19:55.971" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:55.973" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:19:55.972" starttime="20150709 15:19:55.931"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:55.976" starttime="20150709 15:19:55.974"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:55.980" starttime="20150709 15:19:55.978"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:55.983" starttime="20150709 15:19:55.981"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:19:55.988" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:19:56.050" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:56.053" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:19:56.054" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:19:56.051" starttime="20150709 15:19:55.984"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:56.062" starttime="20150709 15:19:56.055"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:56.065" starttime="20150709 15:19:56.063"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:56.069" starttime="20150709 15:19:56.067"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:56.072" starttime="20150709 15:19:56.070"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:56.075" starttime="20150709 15:19:56.073"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:56.079" starttime="20150709 15:19:56.077"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:56.083" starttime="20150709 15:19:56.080"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:56.086" starttime="20150709 15:19:56.084"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:56.089" starttime="20150709 15:19:56.087"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:56.093" starttime="20150709 15:19:56.091"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:56.096" starttime="20150709 15:19:56.094"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:56.097" starttime="20150709 15:19:55.926"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:56.102" level="INFO">Starting command 'cat tmpfilemonitor25.log'.</msg>
<status status="PASS" endtime="20150709 15:19:56.107" starttime="20150709 15:19:56.099"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:19:56.110" level="INFO">Reading output of command 'cat tmpfilemonitor25.log'.</msg>
<msg timestamp="20150709 15:19:56.146" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:56.148" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:19:56.147" starttime="20150709 15:19:56.108"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:56.152" level="INFO">Executing command 'rm tmpfilemonitor25.log'.</msg>
<msg timestamp="20150709 15:19:56.213" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:19:56.214" starttime="20150709 15:19:56.150"></status>
</kw>
<msg timestamp="20150709 15:19:56.218" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:56.216" starttime="20150709 15:19:55.913"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:56.226" starttime="20150709 15:19:56.219"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:56.237" starttime="20150709 15:19:56.235"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:19:56.244" starttime="20150709 15:19:56.239"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:56.246" starttime="20150709 15:19:56.228"></status>
</kw>
<msg timestamp="20150709 15:19:56.249" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:56.247" starttime="20150709 15:19:55.909"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:56.250" starttime="20150709 15:19:55.326"></status>
</kw>
<kw type="foritem" name="${i} = 26">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:19:56.255" level="INFO">
*********** Experiment: 26 ************</msg>
<status status="PASS" endtime="20150709 15:19:56.256" starttime="20150709 15:19:56.252"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:56.299" starttime="20150709 15:19:56.297"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:56.361" starttime="20150709 15:19:56.307"></status>
</kw>
<msg timestamp="20150709 15:19:56.364" level="INFO">${ssh_connection} = 26</msg>
<status status="PASS" endtime="20150709 15:19:56.363" starttime="20150709 15:19:56.300"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:19:56.374" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:19:56.728" level="INFO">Read output: Last login: Thu Jul  9 13:19:55 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:19:56.730" starttime="20150709 15:19:56.372"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:56.731" starttime="20150709 15:19:56.365"></status>
</kw>
<msg timestamp="20150709 15:19:56.734" level="INFO">${ssh_connection} = 26</msg>
<status status="PASS" endtime="20150709 15:19:56.733" starttime="20150709 15:19:56.287"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:56.747" starttime="20150709 15:19:56.745"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:56.751" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor26.log'.</msg>
<status status="PASS" endtime="20150709 15:19:56.756" starttime="20150709 15:19:56.749"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:56.757" starttime="20150709 15:19:56.737"></status>
</kw>
<msg timestamp="20150709 15:19:56.760" level="INFO">${ssh_connection} = 26</msg>
<status status="PASS" endtime="20150709 15:19:56.759" starttime="20150709 15:19:56.275"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:19:56.773" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:19:56.774" starttime="20150709 15:19:56.761"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:56.794" starttime="20150709 15:19:56.792"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:19:56.803" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:19:56.802" starttime="20150709 15:19:56.796"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:19:56.811" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:19:56.812" starttime="20150709 15:19:56.805"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:56.824" starttime="20150709 15:19:56.822"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:19:56.828" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:19:56.867" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:56.869" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:19:56.868" starttime="20150709 15:19:56.826"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:56.872" starttime="20150709 15:19:56.870"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:56.875" starttime="20150709 15:19:56.873"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:56.879" starttime="20150709 15:19:56.877"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:19:56.883" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:19:56.947" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:56.949" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:19:56.950" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:19:56.948" starttime="20150709 15:19:56.880"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:56.958" starttime="20150709 15:19:56.951"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:56.961" starttime="20150709 15:19:56.959"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:56.965" starttime="20150709 15:19:56.963"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:56.968" starttime="20150709 15:19:56.966"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:56.972" starttime="20150709 15:19:56.969"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:56.975" starttime="20150709 15:19:56.973"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:56.979" starttime="20150709 15:19:56.976"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:56.982" starttime="20150709 15:19:56.980"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:56.985" starttime="20150709 15:19:56.983"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:56.989" starttime="20150709 15:19:56.987"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:56.992" starttime="20150709 15:19:56.990"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:56.993" starttime="20150709 15:19:56.814"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:56.997" level="INFO">Starting command 'cat tmpfilemonitor26.log'.</msg>
<status status="PASS" endtime="20150709 15:19:57.001" starttime="20150709 15:19:56.994"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:19:57.005" level="INFO">Reading output of command 'cat tmpfilemonitor26.log'.</msg>
<msg timestamp="20150709 15:19:57.033" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:57.035" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:19:57.034" starttime="20150709 15:19:57.004"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:57.039" level="INFO">Executing command 'rm tmpfilemonitor26.log'.</msg>
<msg timestamp="20150709 15:19:57.110" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:19:57.111" starttime="20150709 15:19:57.037"></status>
</kw>
<msg timestamp="20150709 15:19:57.114" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:57.112" starttime="20150709 15:19:56.785"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:57.122" starttime="20150709 15:19:57.116"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:57.134" starttime="20150709 15:19:57.131"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:19:57.139" starttime="20150709 15:19:57.135"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:57.141" starttime="20150709 15:19:57.124"></status>
</kw>
<msg timestamp="20150709 15:19:57.144" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:57.142" starttime="20150709 15:19:56.777"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:57.145" starttime="20150709 15:19:56.252"></status>
</kw>
<kw type="foritem" name="${i} = 27">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:19:57.151" level="INFO">
*********** Experiment: 27 ************</msg>
<status status="PASS" endtime="20150709 15:19:57.153" starttime="20150709 15:19:57.149"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:57.196" starttime="20150709 15:19:57.193"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:57.261" starttime="20150709 15:19:57.205"></status>
</kw>
<msg timestamp="20150709 15:19:57.264" level="INFO">${ssh_connection} = 27</msg>
<status status="PASS" endtime="20150709 15:19:57.263" starttime="20150709 15:19:57.197"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:19:57.274" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:19:57.724" level="INFO">Read output: Last login: Thu Jul  9 13:19:56 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:19:57.725" starttime="20150709 15:19:57.272"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:57.726" starttime="20150709 15:19:57.265"></status>
</kw>
<msg timestamp="20150709 15:19:57.727" level="INFO">${ssh_connection} = 27</msg>
<status status="PASS" endtime="20150709 15:19:57.727" starttime="20150709 15:19:57.184"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:57.733" starttime="20150709 15:19:57.732"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:57.735" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor27.log'.</msg>
<status status="PASS" endtime="20150709 15:19:57.738" starttime="20150709 15:19:57.734"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:57.739" starttime="20150709 15:19:57.728"></status>
</kw>
<msg timestamp="20150709 15:19:57.740" level="INFO">${ssh_connection} = 27</msg>
<status status="PASS" endtime="20150709 15:19:57.739" starttime="20150709 15:19:57.171"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:19:57.751" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:19:57.751" starttime="20150709 15:19:57.740"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:57.776" starttime="20150709 15:19:57.774"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:19:57.780" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:19:57.780" starttime="20150709 15:19:57.776"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:19:57.784" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:19:57.784" starttime="20150709 15:19:57.781"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:57.789" starttime="20150709 15:19:57.788"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:19:57.791" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:19:57.818" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:57.820" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:19:57.819" starttime="20150709 15:19:57.790"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:57.824" starttime="20150709 15:19:57.822"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:57.827" starttime="20150709 15:19:57.825"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:57.830" starttime="20150709 15:19:57.828"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:19:57.835" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:19:57.892" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:57.894" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:19:57.894" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:19:57.893" starttime="20150709 15:19:57.832"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:57.902" starttime="20150709 15:19:57.896"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:57.905" starttime="20150709 15:19:57.903"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:57.908" starttime="20150709 15:19:57.906"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:57.912" starttime="20150709 15:19:57.910"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:57.915" starttime="20150709 15:19:57.913"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:57.918" starttime="20150709 15:19:57.916"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:57.922" starttime="20150709 15:19:57.920"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:57.925" starttime="20150709 15:19:57.923"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:57.928" starttime="20150709 15:19:57.926"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:57.932" starttime="20150709 15:19:57.930"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:57.935" starttime="20150709 15:19:57.933"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:57.936" starttime="20150709 15:19:57.785"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:57.940" level="INFO">Starting command 'cat tmpfilemonitor27.log'.</msg>
<status status="PASS" endtime="20150709 15:19:57.944" starttime="20150709 15:19:57.937"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:19:57.947" level="INFO">Reading output of command 'cat tmpfilemonitor27.log'.</msg>
<msg timestamp="20150709 15:19:57.978" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:57.980" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:19:57.979" starttime="20150709 15:19:57.945"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:57.984" level="INFO">Executing command 'rm tmpfilemonitor27.log'.</msg>
<msg timestamp="20150709 15:19:58.046" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:19:58.048" starttime="20150709 15:19:57.981"></status>
</kw>
<msg timestamp="20150709 15:19:58.052" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:58.051" starttime="20150709 15:19:57.771"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:58.061" starttime="20150709 15:19:58.054"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:58.072" starttime="20150709 15:19:58.069"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:19:58.076" starttime="20150709 15:19:58.074"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:58.080" starttime="20150709 15:19:58.063"></status>
</kw>
<msg timestamp="20150709 15:19:58.084" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:58.082" starttime="20150709 15:19:57.752"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:58.084" starttime="20150709 15:19:57.148"></status>
</kw>
<kw type="foritem" name="${i} = 28">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:19:58.089" level="INFO">
*********** Experiment: 28 ************</msg>
<status status="PASS" endtime="20150709 15:19:58.090" starttime="20150709 15:19:58.087"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:58.133" starttime="20150709 15:19:58.131"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:58.200" starttime="20150709 15:19:58.142"></status>
</kw>
<msg timestamp="20150709 15:19:58.202" level="INFO">${ssh_connection} = 28</msg>
<status status="PASS" endtime="20150709 15:19:58.201" starttime="20150709 15:19:58.135"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:19:58.214" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:19:58.652" level="INFO">Read output: Last login: Thu Jul  9 13:19:57 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:19:58.653" starttime="20150709 15:19:58.211"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:58.654" starttime="20150709 15:19:58.204"></status>
</kw>
<msg timestamp="20150709 15:19:58.655" level="INFO">${ssh_connection} = 28</msg>
<status status="PASS" endtime="20150709 15:19:58.655" starttime="20150709 15:19:58.121"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:58.661" starttime="20150709 15:19:58.660"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:58.663" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor28.log'.</msg>
<status status="PASS" endtime="20150709 15:19:58.666" starttime="20150709 15:19:58.662"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:58.667" starttime="20150709 15:19:58.656"></status>
</kw>
<msg timestamp="20150709 15:19:58.668" level="INFO">${ssh_connection} = 28</msg>
<status status="PASS" endtime="20150709 15:19:58.668" starttime="20150709 15:19:58.109"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:19:58.680" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:19:58.681" starttime="20150709 15:19:58.669"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:58.690" starttime="20150709 15:19:58.688"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:19:58.693" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:19:58.693" starttime="20150709 15:19:58.690"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:19:58.698" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:19:58.698" starttime="20150709 15:19:58.694"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:58.704" starttime="20150709 15:19:58.703"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:19:58.705" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:19:58.745" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:58.746" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:19:58.745" starttime="20150709 15:19:58.705"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:58.747" starttime="20150709 15:19:58.746"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:58.749" starttime="20150709 15:19:58.748"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:58.750" starttime="20150709 15:19:58.749"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:19:58.752" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:19:58.829" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:58.831" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:19:58.832" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:19:58.830" starttime="20150709 15:19:58.751"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:58.840" starttime="20150709 15:19:58.833"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:58.843" starttime="20150709 15:19:58.841"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:58.846" starttime="20150709 15:19:58.844"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:58.850" starttime="20150709 15:19:58.848"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:58.853" starttime="20150709 15:19:58.851"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:58.856" starttime="20150709 15:19:58.854"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:58.860" starttime="20150709 15:19:58.858"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:58.863" starttime="20150709 15:19:58.861"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:58.867" starttime="20150709 15:19:58.865"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:58.870" starttime="20150709 15:19:58.868"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:58.873" starttime="20150709 15:19:58.871"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:58.875" starttime="20150709 15:19:58.699"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:58.878" level="INFO">Starting command 'cat tmpfilemonitor28.log'.</msg>
<status status="PASS" endtime="20150709 15:19:58.883" starttime="20150709 15:19:58.876"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:19:58.886" level="INFO">Reading output of command 'cat tmpfilemonitor28.log'.</msg>
<msg timestamp="20150709 15:19:58.909" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:58.911" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:19:58.910" starttime="20150709 15:19:58.884"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:58.915" level="INFO">Executing command 'rm tmpfilemonitor28.log'.</msg>
<msg timestamp="20150709 15:19:58.988" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:19:58.990" starttime="20150709 15:19:58.912"></status>
</kw>
<msg timestamp="20150709 15:19:58.993" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:58.992" starttime="20150709 15:19:58.685"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:59.002" starttime="20150709 15:19:58.994"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:59.015" starttime="20150709 15:19:59.012"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:19:59.021" starttime="20150709 15:19:59.016"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:59.023" starttime="20150709 15:19:59.005"></status>
</kw>
<msg timestamp="20150709 15:19:59.026" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:59.025" starttime="20150709 15:19:58.682"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:59.027" starttime="20150709 15:19:58.086"></status>
</kw>
<kw type="foritem" name="${i} = 29">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:19:59.032" level="INFO">
*********** Experiment: 29 ************</msg>
<status status="PASS" endtime="20150709 15:19:59.033" starttime="20150709 15:19:59.029"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:59.076" starttime="20150709 15:19:59.074"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:59.147" starttime="20150709 15:19:59.085"></status>
</kw>
<msg timestamp="20150709 15:19:59.150" level="INFO">${ssh_connection} = 29</msg>
<status status="PASS" endtime="20150709 15:19:59.149" starttime="20150709 15:19:59.078"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:19:59.161" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:19:59.514" level="INFO">Read output: Last login: Thu Jul  9 13:19:58 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:19:59.515" starttime="20150709 15:19:59.158"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:59.517" starttime="20150709 15:19:59.151"></status>
</kw>
<msg timestamp="20150709 15:19:59.519" level="INFO">${ssh_connection} = 29</msg>
<status status="PASS" endtime="20150709 15:19:59.519" starttime="20150709 15:19:59.064"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:59.532" starttime="20150709 15:19:59.530"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:59.536" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor29.log'.</msg>
<status status="PASS" endtime="20150709 15:19:59.541" starttime="20150709 15:19:59.534"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:59.542" starttime="20150709 15:19:59.522"></status>
</kw>
<msg timestamp="20150709 15:19:59.545" level="INFO">${ssh_connection} = 29</msg>
<status status="PASS" endtime="20150709 15:19:59.544" starttime="20150709 15:19:59.052"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:19:59.558" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:19:59.559" starttime="20150709 15:19:59.546"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:59.579" starttime="20150709 15:19:59.576"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:19:59.587" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:19:59.586" starttime="20150709 15:19:59.580"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:19:59.593" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:19:59.594" starttime="20150709 15:19:59.588"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:59.605" starttime="20150709 15:19:59.603"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:19:59.609" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:19:59.645" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:59.648" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:19:59.647" starttime="20150709 15:19:59.607"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:59.653" starttime="20150709 15:19:59.651"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:59.656" starttime="20150709 15:19:59.654"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:59.660" starttime="20150709 15:19:59.658"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:19:59.664" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:19:59.721" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:59.723" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:19:59.725" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:19:59.722" starttime="20150709 15:19:59.661"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:59.732" starttime="20150709 15:19:59.726"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:59.736" starttime="20150709 15:19:59.734"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:59.739" starttime="20150709 15:19:59.737"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:59.743" starttime="20150709 15:19:59.740"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:59.746" starttime="20150709 15:19:59.744"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:59.749" starttime="20150709 15:19:59.747"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:59.753" starttime="20150709 15:19:59.751"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:59.756" starttime="20150709 15:19:59.754"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:59.760" starttime="20150709 15:19:59.758"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:59.763" starttime="20150709 15:19:59.761"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:59.766" starttime="20150709 15:19:59.764"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:59.768" starttime="20150709 15:19:59.596"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:59.772" level="INFO">Starting command 'cat tmpfilemonitor29.log'.</msg>
<status status="PASS" endtime="20150709 15:19:59.776" starttime="20150709 15:19:59.769"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:19:59.780" level="INFO">Reading output of command 'cat tmpfilemonitor29.log'.</msg>
<msg timestamp="20150709 15:19:59.808" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:19:59.810" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:19:59.809" starttime="20150709 15:19:59.778"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:19:59.814" level="INFO">Executing command 'rm tmpfilemonitor29.log'.</msg>
<msg timestamp="20150709 15:19:59.878" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:19:59.879" starttime="20150709 15:19:59.811"></status>
</kw>
<msg timestamp="20150709 15:19:59.882" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:59.881" starttime="20150709 15:19:59.569"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:59.890" starttime="20150709 15:19:59.883"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:59.902" starttime="20150709 15:19:59.899"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:19:59.905" starttime="20150709 15:19:59.903"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:59.909" starttime="20150709 15:19:59.892"></status>
</kw>
<msg timestamp="20150709 15:19:59.912" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:19:59.911" starttime="20150709 15:19:59.562"></status>
</kw>
<status status="PASS" endtime="20150709 15:19:59.913" starttime="20150709 15:19:59.028"></status>
</kw>
<kw type="foritem" name="${i} = 30">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:19:59.917" level="INFO">
*********** Experiment: 30 ************</msg>
<status status="PASS" endtime="20150709 15:19:59.918" starttime="20150709 15:19:59.914"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:19:59.962" starttime="20150709 15:19:59.960"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:00.020" starttime="20150709 15:19:59.971"></status>
</kw>
<msg timestamp="20150709 15:20:00.025" level="INFO">${ssh_connection} = 30</msg>
<status status="PASS" endtime="20150709 15:20:00.023" starttime="20150709 15:19:59.964"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:00.036" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:00.469" level="INFO">Read output: Last login: Thu Jul  9 13:19:59 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:00.472" starttime="20150709 15:20:00.033"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:00.475" starttime="20150709 15:20:00.026"></status>
</kw>
<msg timestamp="20150709 15:20:00.479" level="INFO">${ssh_connection} = 30</msg>
<status status="PASS" endtime="20150709 15:20:00.478" starttime="20150709 15:19:59.950"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:00.493" starttime="20150709 15:20:00.490"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:00.497" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor30.log'.</msg>
<status status="PASS" endtime="20150709 15:20:00.501" starttime="20150709 15:20:00.494"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:00.503" starttime="20150709 15:20:00.483"></status>
</kw>
<msg timestamp="20150709 15:20:00.506" level="INFO">${ssh_connection} = 30</msg>
<status status="PASS" endtime="20150709 15:20:00.505" starttime="20150709 15:19:59.937"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:00.520" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:00.521" starttime="20150709 15:20:00.508"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:00.541" starttime="20150709 15:20:00.538"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:00.550" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:00.549" starttime="20150709 15:20:00.542"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:00.556" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:00.557" starttime="20150709 15:20:00.551"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:00.569" starttime="20150709 15:20:00.566"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:00.572" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:00.610" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:00.612" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:00.611" starttime="20150709 15:20:00.570"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:00.616" starttime="20150709 15:20:00.614"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:00.619" starttime="20150709 15:20:00.617"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:00.622" starttime="20150709 15:20:00.620"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:00.627" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:00.690" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:00.692" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:00.693" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:00.691" starttime="20150709 15:20:00.624"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:00.701" starttime="20150709 15:20:00.694"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:00.705" starttime="20150709 15:20:00.703"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:00.708" starttime="20150709 15:20:00.706"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:00.711" starttime="20150709 15:20:00.709"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:00.715" starttime="20150709 15:20:00.713"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:00.718" starttime="20150709 15:20:00.716"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:00.722" starttime="20150709 15:20:00.719"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:00.725" starttime="20150709 15:20:00.723"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:00.729" starttime="20150709 15:20:00.727"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:00.732" starttime="20150709 15:20:00.730"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:00.735" starttime="20150709 15:20:00.733"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:00.736" starttime="20150709 15:20:00.559"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:00.740" level="INFO">Starting command 'cat tmpfilemonitor30.log'.</msg>
<status status="PASS" endtime="20150709 15:20:00.744" starttime="20150709 15:20:00.738"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:00.748" level="INFO">Reading output of command 'cat tmpfilemonitor30.log'.</msg>
<msg timestamp="20150709 15:20:00.778" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:00.780" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:00.780" starttime="20150709 15:20:00.746"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:00.784" level="INFO">Executing command 'rm tmpfilemonitor30.log'.</msg>
<msg timestamp="20150709 15:20:00.859" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:00.861" starttime="20150709 15:20:00.782"></status>
</kw>
<msg timestamp="20150709 15:20:00.863" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:00.862" starttime="20150709 15:20:00.532"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:00.871" starttime="20150709 15:20:00.864"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:00.883" starttime="20150709 15:20:00.880"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:00.886" starttime="20150709 15:20:00.884"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:00.891" starttime="20150709 15:20:00.873"></status>
</kw>
<msg timestamp="20150709 15:20:00.893" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:00.892" starttime="20150709 15:20:00.524"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:00.894" starttime="20150709 15:19:59.913"></status>
</kw>
<kw type="foritem" name="${i} = 31">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:00.899" level="INFO">
*********** Experiment: 31 ************</msg>
<status status="PASS" endtime="20150709 15:20:00.900" starttime="20150709 15:20:00.896"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:00.943" starttime="20150709 15:20:00.941"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:01.011" starttime="20150709 15:20:00.952"></status>
</kw>
<msg timestamp="20150709 15:20:01.015" level="INFO">${ssh_connection} = 31</msg>
<status status="PASS" endtime="20150709 15:20:01.014" starttime="20150709 15:20:00.945"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:01.027" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:01.592" level="INFO">Read output: Last login: Thu Jul  9 13:20:00 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:01.593" starttime="20150709 15:20:01.024"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:01.594" starttime="20150709 15:20:01.017"></status>
</kw>
<msg timestamp="20150709 15:20:01.596" level="INFO">${ssh_connection} = 31</msg>
<status status="PASS" endtime="20150709 15:20:01.595" starttime="20150709 15:20:00.931"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:01.602" starttime="20150709 15:20:01.601"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:01.604" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor31.log'.</msg>
<status status="PASS" endtime="20150709 15:20:01.607" starttime="20150709 15:20:01.602"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:01.608" starttime="20150709 15:20:01.597"></status>
</kw>
<msg timestamp="20150709 15:20:01.610" level="INFO">${ssh_connection} = 31</msg>
<status status="PASS" endtime="20150709 15:20:01.609" starttime="20150709 15:20:00.919"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:01.623" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:01.624" starttime="20150709 15:20:01.611"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:01.643" starttime="20150709 15:20:01.641"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:01.651" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:01.650" starttime="20150709 15:20:01.645"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:01.657" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:01.658" starttime="20150709 15:20:01.652"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:01.670" starttime="20150709 15:20:01.667"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:01.673" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:01.712" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:01.714" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:01.713" starttime="20150709 15:20:01.671"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:01.717" starttime="20150709 15:20:01.715"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:01.721" starttime="20150709 15:20:01.719"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:01.724" starttime="20150709 15:20:01.722"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:01.729" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:01.798" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:01.801" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:01.802" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:01.800" starttime="20150709 15:20:01.725"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:01.810" starttime="20150709 15:20:01.803"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:01.814" starttime="20150709 15:20:01.811"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:01.817" starttime="20150709 15:20:01.815"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:01.820" starttime="20150709 15:20:01.818"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:01.824" starttime="20150709 15:20:01.822"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:01.828" starttime="20150709 15:20:01.825"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:01.831" starttime="20150709 15:20:01.829"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:01.835" starttime="20150709 15:20:01.832"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:01.838" starttime="20150709 15:20:01.836"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:01.841" starttime="20150709 15:20:01.839"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:01.844" starttime="20150709 15:20:01.842"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:01.846" starttime="20150709 15:20:01.660"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:01.849" level="INFO">Starting command 'cat tmpfilemonitor31.log'.</msg>
<status status="PASS" endtime="20150709 15:20:01.854" starttime="20150709 15:20:01.847"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:01.857" level="INFO">Reading output of command 'cat tmpfilemonitor31.log'.</msg>
<msg timestamp="20150709 15:20:01.891" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:01.893" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:01.892" starttime="20150709 15:20:01.855"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:01.897" level="INFO">Executing command 'rm tmpfilemonitor31.log'.</msg>
<msg timestamp="20150709 15:20:01.968" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:01.970" starttime="20150709 15:20:01.895"></status>
</kw>
<msg timestamp="20150709 15:20:01.973" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:01.972" starttime="20150709 15:20:01.634"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:01.981" starttime="20150709 15:20:01.974"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:01.993" starttime="20150709 15:20:01.990"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:01.996" starttime="20150709 15:20:01.994"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:02.001" starttime="20150709 15:20:01.983"></status>
</kw>
<msg timestamp="20150709 15:20:02.006" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:02.004" starttime="20150709 15:20:01.627"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:02.007" starttime="20150709 15:20:00.896"></status>
</kw>
<kw type="foritem" name="${i} = 32">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:02.012" level="INFO">
*********** Experiment: 32 ************</msg>
<status status="PASS" endtime="20150709 15:20:02.013" starttime="20150709 15:20:02.009"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:02.062" starttime="20150709 15:20:02.059"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:02.136" starttime="20150709 15:20:02.071"></status>
</kw>
<msg timestamp="20150709 15:20:02.138" level="INFO">${ssh_connection} = 32</msg>
<status status="PASS" endtime="20150709 15:20:02.137" starttime="20150709 15:20:02.064"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:02.149" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:07.341" level="INFO">Read output: Last login: Thu Jul  9 13:20:01 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:07.343" starttime="20150709 15:20:02.146"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:07.345" starttime="20150709 15:20:02.140"></status>
</kw>
<msg timestamp="20150709 15:20:07.347" level="INFO">${ssh_connection} = 32</msg>
<status status="PASS" endtime="20150709 15:20:07.346" starttime="20150709 15:20:02.045"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:07.354" starttime="20150709 15:20:07.352"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:07.355" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor32.log'.</msg>
<status status="PASS" endtime="20150709 15:20:07.359" starttime="20150709 15:20:07.354"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:07.360" starttime="20150709 15:20:07.349"></status>
</kw>
<msg timestamp="20150709 15:20:07.361" level="INFO">${ssh_connection} = 32</msg>
<status status="PASS" endtime="20150709 15:20:07.360" starttime="20150709 15:20:02.032"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:07.373" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:07.373" starttime="20150709 15:20:07.362"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:07.382" starttime="20150709 15:20:07.381"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:07.386" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:07.386" starttime="20150709 15:20:07.383"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:07.390" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:07.391" starttime="20150709 15:20:07.387"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:07.396" starttime="20150709 15:20:07.395"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:07.397" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:07.430" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:07.432" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:07.431" starttime="20150709 15:20:07.397"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:07.435" starttime="20150709 15:20:07.433"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:07.438" starttime="20150709 15:20:07.436"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:07.442" starttime="20150709 15:20:07.440"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:07.447" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:07.511" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:07.513" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:07.514" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:07.512" starttime="20150709 15:20:07.443"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:07.522" starttime="20150709 15:20:07.515"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:07.525" starttime="20150709 15:20:07.523"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:07.528" starttime="20150709 15:20:07.526"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:07.532" starttime="20150709 15:20:07.530"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:07.535" starttime="20150709 15:20:07.533"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:07.538" starttime="20150709 15:20:07.536"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:07.542" starttime="20150709 15:20:07.540"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:07.546" starttime="20150709 15:20:07.543"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:07.549" starttime="20150709 15:20:07.547"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:07.552" starttime="20150709 15:20:07.550"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:07.555" starttime="20150709 15:20:07.553"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:07.557" starttime="20150709 15:20:07.391"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:07.560" level="INFO">Starting command 'cat tmpfilemonitor32.log'.</msg>
<status status="PASS" endtime="20150709 15:20:07.565" starttime="20150709 15:20:07.558"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:07.568" level="INFO">Reading output of command 'cat tmpfilemonitor32.log'.</msg>
<msg timestamp="20150709 15:20:07.598" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:07.600" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:07.599" starttime="20150709 15:20:07.566"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:07.603" level="INFO">Executing command 'rm tmpfilemonitor32.log'.</msg>
<msg timestamp="20150709 15:20:07.676" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:07.678" starttime="20150709 15:20:07.601"></status>
</kw>
<msg timestamp="20150709 15:20:07.680" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:07.679" starttime="20150709 15:20:07.378"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:07.688" starttime="20150709 15:20:07.681"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:07.700" starttime="20150709 15:20:07.697"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:07.704" starttime="20150709 15:20:07.701"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:07.708" starttime="20150709 15:20:07.690"></status>
</kw>
<msg timestamp="20150709 15:20:07.710" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:07.710" starttime="20150709 15:20:07.374"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:07.711" starttime="20150709 15:20:02.008"></status>
</kw>
<kw type="foritem" name="${i} = 33">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:07.716" level="INFO">
*********** Experiment: 33 ************</msg>
<status status="PASS" endtime="20150709 15:20:07.717" starttime="20150709 15:20:07.714"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:07.760" starttime="20150709 15:20:07.758"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:07.824" starttime="20150709 15:20:07.768"></status>
</kw>
<msg timestamp="20150709 15:20:07.826" level="INFO">${ssh_connection} = 33</msg>
<status status="PASS" endtime="20150709 15:20:07.826" starttime="20150709 15:20:07.762"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:07.837" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:08.206" level="INFO">Read output: Last login: Thu Jul  9 13:20:07 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:08.208" starttime="20150709 15:20:07.835"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:08.209" starttime="20150709 15:20:07.828"></status>
</kw>
<msg timestamp="20150709 15:20:08.228" level="INFO">${ssh_connection} = 33</msg>
<status status="PASS" endtime="20150709 15:20:08.226" starttime="20150709 15:20:07.748"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:08.242" starttime="20150709 15:20:08.239"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:08.245" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor33.log'.</msg>
<status status="PASS" endtime="20150709 15:20:08.249" starttime="20150709 15:20:08.243"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:08.251" starttime="20150709 15:20:08.231"></status>
</kw>
<msg timestamp="20150709 15:20:08.254" level="INFO">${ssh_connection} = 33</msg>
<status status="PASS" endtime="20150709 15:20:08.252" starttime="20150709 15:20:07.736"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:08.268" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:08.268" starttime="20150709 15:20:08.255"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:08.277" starttime="20150709 15:20:08.276"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:08.282" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:08.281" starttime="20150709 15:20:08.278"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:08.286" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:08.286" starttime="20150709 15:20:08.282"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:08.292" starttime="20150709 15:20:08.290"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:08.293" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:08.330" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:08.332" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:08.331" starttime="20150709 15:20:08.292"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:08.335" starttime="20150709 15:20:08.333"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:08.339" starttime="20150709 15:20:08.337"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:08.342" starttime="20150709 15:20:08.340"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:08.347" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:08.415" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:08.417" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:08.418" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:08.416" starttime="20150709 15:20:08.343"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:08.425" starttime="20150709 15:20:08.419"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:08.428" starttime="20150709 15:20:08.426"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:08.432" starttime="20150709 15:20:08.430"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:08.435" starttime="20150709 15:20:08.433"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:08.438" starttime="20150709 15:20:08.436"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:08.442" starttime="20150709 15:20:08.440"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:08.445" starttime="20150709 15:20:08.443"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:08.449" starttime="20150709 15:20:08.447"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:08.452" starttime="20150709 15:20:08.450"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:08.456" starttime="20150709 15:20:08.454"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:08.459" starttime="20150709 15:20:08.457"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:08.460" starttime="20150709 15:20:08.287"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:08.464" level="INFO">Starting command 'cat tmpfilemonitor33.log'.</msg>
<status status="PASS" endtime="20150709 15:20:08.468" starttime="20150709 15:20:08.462"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:08.471" level="INFO">Reading output of command 'cat tmpfilemonitor33.log'.</msg>
<msg timestamp="20150709 15:20:08.504" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:08.506" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:08.505" starttime="20150709 15:20:08.470"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:08.509" level="INFO">Executing command 'rm tmpfilemonitor33.log'.</msg>
<msg timestamp="20150709 15:20:08.590" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:08.591" starttime="20150709 15:20:08.507"></status>
</kw>
<msg timestamp="20150709 15:20:08.594" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:08.593" starttime="20150709 15:20:08.273"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:08.602" starttime="20150709 15:20:08.595"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:08.613" starttime="20150709 15:20:08.610"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:08.620" starttime="20150709 15:20:08.614"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:08.624" starttime="20150709 15:20:08.604"></status>
</kw>
<msg timestamp="20150709 15:20:08.627" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:08.626" starttime="20150709 15:20:08.270"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:08.627" starttime="20150709 15:20:07.713"></status>
</kw>
<kw type="foritem" name="${i} = 34">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:08.633" level="INFO">
*********** Experiment: 34 ************</msg>
<status status="PASS" endtime="20150709 15:20:08.634" starttime="20150709 15:20:08.630"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:08.676" starttime="20150709 15:20:08.674"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:08.739" starttime="20150709 15:20:08.685"></status>
</kw>
<msg timestamp="20150709 15:20:08.741" level="INFO">${ssh_connection} = 34</msg>
<status status="PASS" endtime="20150709 15:20:08.740" starttime="20150709 15:20:08.678"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:08.752" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:09.081" level="INFO">Read output: Last login: Thu Jul  9 13:20:08 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:09.083" starttime="20150709 15:20:08.749"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:09.084" starttime="20150709 15:20:08.742"></status>
</kw>
<msg timestamp="20150709 15:20:09.086" level="INFO">${ssh_connection} = 34</msg>
<status status="PASS" endtime="20150709 15:20:09.085" starttime="20150709 15:20:08.664"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:09.092" starttime="20150709 15:20:09.091"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:09.094" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor34.log'.</msg>
<status status="PASS" endtime="20150709 15:20:09.096" starttime="20150709 15:20:09.092"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:09.097" starttime="20150709 15:20:09.087"></status>
</kw>
<msg timestamp="20150709 15:20:09.098" level="INFO">${ssh_connection} = 34</msg>
<status status="PASS" endtime="20150709 15:20:09.098" starttime="20150709 15:20:08.651"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:09.110" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:09.110" starttime="20150709 15:20:09.099"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:09.119" starttime="20150709 15:20:09.118"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:09.123" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:09.123" starttime="20150709 15:20:09.120"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:09.126" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:09.127" starttime="20150709 15:20:09.124"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:09.132" starttime="20150709 15:20:09.131"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:09.134" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:09.163" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:09.164" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:09.163" starttime="20150709 15:20:09.133"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:09.166" starttime="20150709 15:20:09.164"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:09.167" starttime="20150709 15:20:09.166"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:09.169" starttime="20150709 15:20:09.168"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:09.171" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:09.231" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:09.233" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:09.233" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:09.232" starttime="20150709 15:20:09.169"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:09.240" starttime="20150709 15:20:09.234"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:09.242" starttime="20150709 15:20:09.241"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:09.245" starttime="20150709 15:20:09.243"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:09.248" starttime="20150709 15:20:09.246"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:09.251" starttime="20150709 15:20:09.249"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:09.253" starttime="20150709 15:20:09.252"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:09.256" starttime="20150709 15:20:09.254"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:09.259" starttime="20150709 15:20:09.257"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:09.261" starttime="20150709 15:20:09.260"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:09.264" starttime="20150709 15:20:09.262"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:09.266" starttime="20150709 15:20:09.265"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:09.267" starttime="20150709 15:20:09.128"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:09.270" level="INFO">Starting command 'cat tmpfilemonitor34.log'.</msg>
<status status="PASS" endtime="20150709 15:20:09.274" starttime="20150709 15:20:09.268"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:09.276" level="INFO">Reading output of command 'cat tmpfilemonitor34.log'.</msg>
<msg timestamp="20150709 15:20:09.302" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:09.303" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:09.303" starttime="20150709 15:20:09.275"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:09.306" level="INFO">Executing command 'rm tmpfilemonitor34.log'.</msg>
<msg timestamp="20150709 15:20:09.376" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:09.377" starttime="20150709 15:20:09.304"></status>
</kw>
<msg timestamp="20150709 15:20:09.379" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:09.378" starttime="20150709 15:20:09.115"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:09.387" starttime="20150709 15:20:09.381"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:09.398" starttime="20150709 15:20:09.396"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:09.406" starttime="20150709 15:20:09.400"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:09.407" starttime="20150709 15:20:09.389"></status>
</kw>
<msg timestamp="20150709 15:20:09.410" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:09.409" starttime="20150709 15:20:09.111"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:09.411" starttime="20150709 15:20:08.629"></status>
</kw>
<kw type="foritem" name="${i} = 35">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:09.416" level="INFO">
*********** Experiment: 35 ************</msg>
<status status="PASS" endtime="20150709 15:20:09.417" starttime="20150709 15:20:09.413"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:09.458" starttime="20150709 15:20:09.456"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:09.523" starttime="20150709 15:20:09.467"></status>
</kw>
<msg timestamp="20150709 15:20:09.526" level="INFO">${ssh_connection} = 35</msg>
<status status="PASS" endtime="20150709 15:20:09.525" starttime="20150709 15:20:09.460"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:09.537" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:09.898" level="INFO">Read output: Last login: Thu Jul  9 13:20:08 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:09.899" starttime="20150709 15:20:09.534"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:09.901" starttime="20150709 15:20:09.527"></status>
</kw>
<msg timestamp="20150709 15:20:09.904" level="INFO">${ssh_connection} = 35</msg>
<status status="PASS" endtime="20150709 15:20:09.903" starttime="20150709 15:20:09.447"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:09.917" starttime="20150709 15:20:09.914"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:09.921" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor35.log'.</msg>
<status status="PASS" endtime="20150709 15:20:09.925" starttime="20150709 15:20:09.918"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:09.927" starttime="20150709 15:20:09.907"></status>
</kw>
<msg timestamp="20150709 15:20:09.929" level="INFO">${ssh_connection} = 35</msg>
<status status="PASS" endtime="20150709 15:20:09.929" starttime="20150709 15:20:09.434"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:09.944" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:09.945" starttime="20150709 15:20:09.931"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:09.964" starttime="20150709 15:20:09.962"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:09.973" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:09.972" starttime="20150709 15:20:09.966"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:09.979" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:09.980" starttime="20150709 15:20:09.974"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:09.991" starttime="20150709 15:20:09.989"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:09.994" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:10.028" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:10.032" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:10.030" starttime="20150709 15:20:09.993"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:10.035" starttime="20150709 15:20:10.033"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:10.038" starttime="20150709 15:20:10.036"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:10.042" starttime="20150709 15:20:10.040"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:10.046" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:10.104" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:10.106" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:10.107" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:10.105" starttime="20150709 15:20:10.043"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:10.115" starttime="20150709 15:20:10.108"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:10.118" starttime="20150709 15:20:10.116"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:10.121" starttime="20150709 15:20:10.119"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:10.124" starttime="20150709 15:20:10.122"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:10.128" starttime="20150709 15:20:10.126"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:10.131" starttime="20150709 15:20:10.129"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:10.135" starttime="20150709 15:20:10.132"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:10.138" starttime="20150709 15:20:10.136"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:10.141" starttime="20150709 15:20:10.139"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:10.145" starttime="20150709 15:20:10.143"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:10.148" starttime="20150709 15:20:10.146"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:10.149" starttime="20150709 15:20:09.982"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:10.154" level="INFO">Starting command 'cat tmpfilemonitor35.log'.</msg>
<status status="PASS" endtime="20150709 15:20:10.160" starttime="20150709 15:20:10.151"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:10.163" level="INFO">Reading output of command 'cat tmpfilemonitor35.log'.</msg>
<msg timestamp="20150709 15:20:10.186" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:10.188" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:10.187" starttime="20150709 15:20:10.161"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:10.192" level="INFO">Executing command 'rm tmpfilemonitor35.log'.</msg>
<msg timestamp="20150709 15:20:10.256" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:10.257" starttime="20150709 15:20:10.189"></status>
</kw>
<msg timestamp="20150709 15:20:10.261" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:10.259" starttime="20150709 15:20:09.955"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:10.268" starttime="20150709 15:20:10.262"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:10.280" starttime="20150709 15:20:10.277"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:10.286" starttime="20150709 15:20:10.281"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:10.287" starttime="20150709 15:20:10.270"></status>
</kw>
<msg timestamp="20150709 15:20:10.292" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:10.290" starttime="20150709 15:20:09.948"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:10.293" starttime="20150709 15:20:09.412"></status>
</kw>
<kw type="foritem" name="${i} = 36">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:10.297" level="INFO">
*********** Experiment: 36 ************</msg>
<status status="PASS" endtime="20150709 15:20:10.299" starttime="20150709 15:20:10.295"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:10.345" starttime="20150709 15:20:10.342"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:10.403" starttime="20150709 15:20:10.353"></status>
</kw>
<msg timestamp="20150709 15:20:10.405" level="INFO">${ssh_connection} = 36</msg>
<status status="PASS" endtime="20150709 15:20:10.404" starttime="20150709 15:20:10.346"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:10.416" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:10.754" level="INFO">Read output: Last login: Thu Jul  9 13:20:09 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:10.756" starttime="20150709 15:20:10.414"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:10.757" starttime="20150709 15:20:10.407"></status>
</kw>
<msg timestamp="20150709 15:20:10.760" level="INFO">${ssh_connection} = 36</msg>
<status status="PASS" endtime="20150709 15:20:10.759" starttime="20150709 15:20:10.333"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:10.772" starttime="20150709 15:20:10.770"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:10.776" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor36.log'.</msg>
<status status="PASS" endtime="20150709 15:20:10.781" starttime="20150709 15:20:10.774"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:10.782" starttime="20150709 15:20:10.762"></status>
</kw>
<msg timestamp="20150709 15:20:10.785" level="INFO">${ssh_connection} = 36</msg>
<status status="PASS" endtime="20150709 15:20:10.784" starttime="20150709 15:20:10.316"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:10.799" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:10.800" starttime="20150709 15:20:10.786"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:10.820" starttime="20150709 15:20:10.817"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:10.828" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:10.827" starttime="20150709 15:20:10.821"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:10.834" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:10.835" starttime="20150709 15:20:10.829"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:10.847" starttime="20150709 15:20:10.844"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:10.850" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:10.888" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:10.890" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:10.890" starttime="20150709 15:20:10.848"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:10.894" starttime="20150709 15:20:10.892"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:10.897" starttime="20150709 15:20:10.895"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:10.900" starttime="20150709 15:20:10.898"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:10.905" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:10.969" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:10.972" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:10.972" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:10.971" starttime="20150709 15:20:10.901"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:10.981" starttime="20150709 15:20:10.974"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:10.985" starttime="20150709 15:20:10.982"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:10.988" starttime="20150709 15:20:10.986"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:10.991" starttime="20150709 15:20:10.989"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:10.994" starttime="20150709 15:20:10.992"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:10.997" starttime="20150709 15:20:10.995"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:11.001" starttime="20150709 15:20:10.999"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:11.006" starttime="20150709 15:20:11.004"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:11.009" starttime="20150709 15:20:11.007"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:11.012" starttime="20150709 15:20:11.010"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:11.015" starttime="20150709 15:20:11.013"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:11.017" starttime="20150709 15:20:10.837"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:11.021" level="INFO">Starting command 'cat tmpfilemonitor36.log'.</msg>
<status status="PASS" endtime="20150709 15:20:11.025" starttime="20150709 15:20:11.019"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:11.028" level="INFO">Reading output of command 'cat tmpfilemonitor36.log'.</msg>
<msg timestamp="20150709 15:20:11.053" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:11.055" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:11.054" starttime="20150709 15:20:11.027"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:11.058" level="INFO">Executing command 'rm tmpfilemonitor36.log'.</msg>
<msg timestamp="20150709 15:20:11.122" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:11.123" starttime="20150709 15:20:11.056"></status>
</kw>
<msg timestamp="20150709 15:20:11.127" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:11.125" starttime="20150709 15:20:10.810"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:11.134" starttime="20150709 15:20:11.128"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:11.146" starttime="20150709 15:20:11.143"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:11.153" starttime="20150709 15:20:11.147"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:11.154" starttime="20150709 15:20:11.136"></status>
</kw>
<msg timestamp="20150709 15:20:11.157" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:11.156" starttime="20150709 15:20:10.803"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:11.158" starttime="20150709 15:20:10.294"></status>
</kw>
<kw type="foritem" name="${i} = 37">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:11.163" level="INFO">
*********** Experiment: 37 ************</msg>
<status status="PASS" endtime="20150709 15:20:11.164" starttime="20150709 15:20:11.161"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:11.206" starttime="20150709 15:20:11.204"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:11.261" starttime="20150709 15:20:11.214"></status>
</kw>
<msg timestamp="20150709 15:20:11.263" level="INFO">${ssh_connection} = 37</msg>
<status status="PASS" endtime="20150709 15:20:11.262" starttime="20150709 15:20:11.207"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:11.274" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:11.617" level="INFO">Read output: Last login: Thu Jul  9 13:20:10 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:11.618" starttime="20150709 15:20:11.271"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:11.620" starttime="20150709 15:20:11.264"></status>
</kw>
<msg timestamp="20150709 15:20:11.623" level="INFO">${ssh_connection} = 37</msg>
<status status="PASS" endtime="20150709 15:20:11.622" starttime="20150709 15:20:11.194"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:11.636" starttime="20150709 15:20:11.633"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:11.640" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor37.log'.</msg>
<status status="PASS" endtime="20150709 15:20:11.644" starttime="20150709 15:20:11.637"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:11.645" starttime="20150709 15:20:11.626"></status>
</kw>
<msg timestamp="20150709 15:20:11.648" level="INFO">${ssh_connection} = 37</msg>
<status status="PASS" endtime="20150709 15:20:11.647" starttime="20150709 15:20:11.182"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:11.661" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:11.662" starttime="20150709 15:20:11.649"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:11.681" starttime="20150709 15:20:11.679"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:11.690" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:11.689" starttime="20150709 15:20:11.682"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:11.696" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:11.697" starttime="20150709 15:20:11.691"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:11.709" starttime="20150709 15:20:11.707"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:11.712" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:11.740" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:11.742" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:11.741" starttime="20150709 15:20:11.710"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:11.745" starttime="20150709 15:20:11.743"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:11.749" starttime="20150709 15:20:11.747"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:11.752" starttime="20150709 15:20:11.750"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:11.756" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:11.815" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:11.817" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:11.817" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:11.816" starttime="20150709 15:20:11.753"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:11.826" starttime="20150709 15:20:11.819"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:11.829" starttime="20150709 15:20:11.827"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:11.833" starttime="20150709 15:20:11.831"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:11.836" starttime="20150709 15:20:11.834"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:11.839" starttime="20150709 15:20:11.837"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:11.842" starttime="20150709 15:20:11.840"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:11.846" starttime="20150709 15:20:11.843"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:11.849" starttime="20150709 15:20:11.847"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:11.852" starttime="20150709 15:20:11.850"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:11.855" starttime="20150709 15:20:11.853"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:11.858" starttime="20150709 15:20:11.856"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:11.860" starttime="20150709 15:20:11.699"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:11.863" level="INFO">Starting command 'cat tmpfilemonitor37.log'.</msg>
<status status="PASS" endtime="20150709 15:20:11.867" starttime="20150709 15:20:11.861"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:11.870" level="INFO">Reading output of command 'cat tmpfilemonitor37.log'.</msg>
<msg timestamp="20150709 15:20:11.892" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:11.894" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:11.893" starttime="20150709 15:20:11.868"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:11.898" level="INFO">Executing command 'rm tmpfilemonitor37.log'.</msg>
<msg timestamp="20150709 15:20:11.961" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:11.962" starttime="20150709 15:20:11.895"></status>
</kw>
<msg timestamp="20150709 15:20:11.965" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:11.964" starttime="20150709 15:20:11.672"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:11.973" starttime="20150709 15:20:11.966"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:11.984" starttime="20150709 15:20:11.981"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:11.992" starttime="20150709 15:20:11.985"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:11.993" starttime="20150709 15:20:11.974"></status>
</kw>
<msg timestamp="20150709 15:20:11.996" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:11.995" starttime="20150709 15:20:11.664"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:11.997" starttime="20150709 15:20:11.160"></status>
</kw>
<kw type="foritem" name="${i} = 38">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:12.001" level="INFO">
*********** Experiment: 38 ************</msg>
<status status="PASS" endtime="20150709 15:20:12.002" starttime="20150709 15:20:11.998"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:12.045" starttime="20150709 15:20:12.043"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:12.106" starttime="20150709 15:20:12.054"></status>
</kw>
<msg timestamp="20150709 15:20:12.108" level="INFO">${ssh_connection} = 38</msg>
<status status="PASS" endtime="20150709 15:20:12.107" starttime="20150709 15:20:12.047"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:12.119" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:12.479" level="INFO">Read output: Last login: Thu Jul  9 13:20:11 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:12.480" starttime="20150709 15:20:12.116"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:12.482" starttime="20150709 15:20:12.110"></status>
</kw>
<msg timestamp="20150709 15:20:12.484" level="INFO">${ssh_connection} = 38</msg>
<status status="PASS" endtime="20150709 15:20:12.483" starttime="20150709 15:20:12.034"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:12.497" starttime="20150709 15:20:12.494"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:12.501" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor38.log'.</msg>
<status status="PASS" endtime="20150709 15:20:12.506" starttime="20150709 15:20:12.498"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:12.507" starttime="20150709 15:20:12.487"></status>
</kw>
<msg timestamp="20150709 15:20:12.510" level="INFO">${ssh_connection} = 38</msg>
<status status="PASS" endtime="20150709 15:20:12.509" starttime="20150709 15:20:12.021"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:12.523" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:12.524" starttime="20150709 15:20:12.511"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:12.543" starttime="20150709 15:20:12.540"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:12.551" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:12.550" starttime="20150709 15:20:12.544"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:12.557" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:12.558" starttime="20150709 15:20:12.552"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:12.569" starttime="20150709 15:20:12.567"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:12.573" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:12.597" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:12.599" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:12.598" starttime="20150709 15:20:12.571"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:12.602" starttime="20150709 15:20:12.600"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:12.605" starttime="20150709 15:20:12.603"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:12.609" starttime="20150709 15:20:12.607"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:12.613" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:12.665" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:12.667" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:12.668" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:12.666" starttime="20150709 15:20:12.610"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:12.675" starttime="20150709 15:20:12.669"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:12.678" starttime="20150709 15:20:12.676"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:12.681" starttime="20150709 15:20:12.679"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:12.684" starttime="20150709 15:20:12.682"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:12.688" starttime="20150709 15:20:12.686"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:12.691" starttime="20150709 15:20:12.689"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:12.694" starttime="20150709 15:20:12.692"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:12.698" starttime="20150709 15:20:12.695"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:12.701" starttime="20150709 15:20:12.699"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:12.704" starttime="20150709 15:20:12.702"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:12.707" starttime="20150709 15:20:12.705"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:12.708" starttime="20150709 15:20:12.560"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:12.712" level="INFO">Starting command 'cat tmpfilemonitor38.log'.</msg>
<status status="PASS" endtime="20150709 15:20:12.716" starttime="20150709 15:20:12.710"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:12.718" level="INFO">Reading output of command 'cat tmpfilemonitor38.log'.</msg>
<msg timestamp="20150709 15:20:12.738" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:12.740" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:12.739" starttime="20150709 15:20:12.717"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:12.743" level="INFO">Executing command 'rm tmpfilemonitor38.log'.</msg>
<msg timestamp="20150709 15:20:12.809" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:12.810" starttime="20150709 15:20:12.741"></status>
</kw>
<msg timestamp="20150709 15:20:12.813" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:12.812" starttime="20150709 15:20:12.534"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:12.820" starttime="20150709 15:20:12.814"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:12.832" starttime="20150709 15:20:12.829"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:12.835" starttime="20150709 15:20:12.833"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:12.839" starttime="20150709 15:20:12.823"></status>
</kw>
<msg timestamp="20150709 15:20:12.841" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:12.840" starttime="20150709 15:20:12.526"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:12.842" starttime="20150709 15:20:11.997"></status>
</kw>
<kw type="foritem" name="${i} = 39">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:12.847" level="INFO">
*********** Experiment: 39 ************</msg>
<status status="PASS" endtime="20150709 15:20:12.848" starttime="20150709 15:20:12.844"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:12.889" starttime="20150709 15:20:12.887"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:12.948" starttime="20150709 15:20:12.897"></status>
</kw>
<msg timestamp="20150709 15:20:12.950" level="INFO">${ssh_connection} = 39</msg>
<status status="PASS" endtime="20150709 15:20:12.949" starttime="20150709 15:20:12.890"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:12.961" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:13.447" level="INFO">Read output: Last login: Thu Jul  9 13:20:12 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:13.449" starttime="20150709 15:20:12.958"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:13.450" starttime="20150709 15:20:12.951"></status>
</kw>
<msg timestamp="20150709 15:20:13.452" level="INFO">${ssh_connection} = 39</msg>
<status status="PASS" endtime="20150709 15:20:13.451" starttime="20150709 15:20:12.878"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:13.458" starttime="20150709 15:20:13.457"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:13.460" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor39.log'.</msg>
<status status="PASS" endtime="20150709 15:20:13.464" starttime="20150709 15:20:13.459"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:13.465" starttime="20150709 15:20:13.453"></status>
</kw>
<msg timestamp="20150709 15:20:13.466" level="INFO">${ssh_connection} = 39</msg>
<status status="PASS" endtime="20150709 15:20:13.465" starttime="20150709 15:20:12.865"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:13.478" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:13.478" starttime="20150709 15:20:13.467"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:13.487" starttime="20150709 15:20:13.486"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:13.491" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:13.491" starttime="20150709 15:20:13.487"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:13.496" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:13.496" starttime="20150709 15:20:13.492"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:13.502" starttime="20150709 15:20:13.501"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:13.503" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:13.539" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:13.540" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:13.539" starttime="20150709 15:20:13.502"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:13.541" starttime="20150709 15:20:13.540"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:13.543" starttime="20150709 15:20:13.542"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:13.544" starttime="20150709 15:20:13.543"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:13.546" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:13.619" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:13.621" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:13.622" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:13.620" starttime="20150709 15:20:13.544"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:13.628" starttime="20150709 15:20:13.623"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:13.631" starttime="20150709 15:20:13.630"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:13.634" starttime="20150709 15:20:13.633"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:13.637" starttime="20150709 15:20:13.635"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:13.640" starttime="20150709 15:20:13.638"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:13.643" starttime="20150709 15:20:13.642"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:13.647" starttime="20150709 15:20:13.644"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:13.649" starttime="20150709 15:20:13.648"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:13.652" starttime="20150709 15:20:13.651"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:13.655" starttime="20150709 15:20:13.653"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:13.658" starttime="20150709 15:20:13.656"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:13.659" starttime="20150709 15:20:13.497"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:13.662" level="INFO">Starting command 'cat tmpfilemonitor39.log'.</msg>
<status status="PASS" endtime="20150709 15:20:13.667" starttime="20150709 15:20:13.660"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:13.669" level="INFO">Reading output of command 'cat tmpfilemonitor39.log'.</msg>
<msg timestamp="20150709 15:20:13.702" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:13.704" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:13.703" starttime="20150709 15:20:13.668"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:13.707" level="INFO">Executing command 'rm tmpfilemonitor39.log'.</msg>
<msg timestamp="20150709 15:20:13.779" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:13.780" starttime="20150709 15:20:13.705"></status>
</kw>
<msg timestamp="20150709 15:20:13.783" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:13.782" starttime="20150709 15:20:13.483"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:13.790" starttime="20150709 15:20:13.784"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:13.801" starttime="20150709 15:20:13.799"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:13.805" starttime="20150709 15:20:13.803"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:13.810" starttime="20150709 15:20:13.792"></status>
</kw>
<msg timestamp="20150709 15:20:13.813" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:13.812" starttime="20150709 15:20:13.479"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:13.814" starttime="20150709 15:20:12.843"></status>
</kw>
<kw type="foritem" name="${i} = 40">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:13.819" level="INFO">
*********** Experiment: 40 ************</msg>
<status status="PASS" endtime="20150709 15:20:13.820" starttime="20150709 15:20:13.816"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:13.861" starttime="20150709 15:20:13.859"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:13.919" starttime="20150709 15:20:13.869"></status>
</kw>
<msg timestamp="20150709 15:20:13.921" level="INFO">${ssh_connection} = 40</msg>
<status status="PASS" endtime="20150709 15:20:13.920" starttime="20150709 15:20:13.863"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:13.933" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:14.322" level="INFO">Read output: Last login: Thu Jul  9 13:20:13 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:14.323" starttime="20150709 15:20:13.930"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:14.324" starttime="20150709 15:20:13.923"></status>
</kw>
<msg timestamp="20150709 15:20:14.326" level="INFO">${ssh_connection} = 40</msg>
<status status="PASS" endtime="20150709 15:20:14.325" starttime="20150709 15:20:13.850"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:14.332" starttime="20150709 15:20:14.330"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:14.333" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor40.log'.</msg>
<status status="PASS" endtime="20150709 15:20:14.338" starttime="20150709 15:20:14.332"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:14.338" starttime="20150709 15:20:14.327"></status>
</kw>
<msg timestamp="20150709 15:20:14.340" level="INFO">${ssh_connection} = 40</msg>
<status status="PASS" endtime="20150709 15:20:14.339" starttime="20150709 15:20:13.837"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:14.352" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:14.352" starttime="20150709 15:20:14.340"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:14.362" starttime="20150709 15:20:14.360"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:14.369" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:14.366" starttime="20150709 15:20:14.363"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:14.377" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:14.378" starttime="20150709 15:20:14.371"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:14.390" starttime="20150709 15:20:14.387"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:14.393" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:14.428" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:14.430" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:14.429" starttime="20150709 15:20:14.391"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:14.433" starttime="20150709 15:20:14.431"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:14.437" starttime="20150709 15:20:14.435"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:14.440" starttime="20150709 15:20:14.438"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:14.444" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:14.499" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:14.501" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:14.502" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:14.500" starttime="20150709 15:20:14.441"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:14.509" starttime="20150709 15:20:14.503"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:14.512" starttime="20150709 15:20:14.511"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:14.516" starttime="20150709 15:20:14.514"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:14.519" starttime="20150709 15:20:14.517"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:14.522" starttime="20150709 15:20:14.520"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:14.525" starttime="20150709 15:20:14.523"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:14.529" starttime="20150709 15:20:14.526"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:14.532" starttime="20150709 15:20:14.530"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:14.535" starttime="20150709 15:20:14.533"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:14.538" starttime="20150709 15:20:14.536"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:14.541" starttime="20150709 15:20:14.539"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:14.542" starttime="20150709 15:20:14.380"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:14.546" level="INFO">Starting command 'cat tmpfilemonitor40.log'.</msg>
<status status="PASS" endtime="20150709 15:20:14.551" starttime="20150709 15:20:14.544"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:14.554" level="INFO">Reading output of command 'cat tmpfilemonitor40.log'.</msg>
<msg timestamp="20150709 15:20:14.590" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:14.592" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:14.591" starttime="20150709 15:20:14.552"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:14.595" level="INFO">Executing command 'rm tmpfilemonitor40.log'.</msg>
<msg timestamp="20150709 15:20:14.673" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:14.674" starttime="20150709 15:20:14.593"></status>
</kw>
<msg timestamp="20150709 15:20:14.676" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:14.675" starttime="20150709 15:20:14.357"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:14.683" starttime="20150709 15:20:14.677"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:14.694" starttime="20150709 15:20:14.692"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:14.698" starttime="20150709 15:20:14.696"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:14.702" starttime="20150709 15:20:14.685"></status>
</kw>
<msg timestamp="20150709 15:20:14.704" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:14.704" starttime="20150709 15:20:14.353"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:14.705" starttime="20150709 15:20:13.815"></status>
</kw>
<kw type="foritem" name="${i} = 41">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:14.710" level="INFO">
*********** Experiment: 41 ************</msg>
<status status="PASS" endtime="20150709 15:20:14.711" starttime="20150709 15:20:14.708"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:14.752" starttime="20150709 15:20:14.750"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:14.813" starttime="20150709 15:20:14.760"></status>
</kw>
<msg timestamp="20150709 15:20:14.815" level="INFO">${ssh_connection} = 41</msg>
<status status="PASS" endtime="20150709 15:20:14.814" starttime="20150709 15:20:14.753"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:14.848" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:15.158" level="INFO">Read output: Last login: Thu Jul  9 13:20:14 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:15.160" starttime="20150709 15:20:14.825"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:15.162" starttime="20150709 15:20:14.817"></status>
</kw>
<msg timestamp="20150709 15:20:15.167" level="INFO">${ssh_connection} = 41</msg>
<status status="PASS" endtime="20150709 15:20:15.165" starttime="20150709 15:20:14.741"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:15.180" starttime="20150709 15:20:15.177"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:15.183" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor41.log'.</msg>
<status status="PASS" endtime="20150709 15:20:15.187" starttime="20150709 15:20:15.181"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:15.189" starttime="20150709 15:20:15.169"></status>
</kw>
<msg timestamp="20150709 15:20:15.192" level="INFO">${ssh_connection} = 41</msg>
<status status="PASS" endtime="20150709 15:20:15.191" starttime="20150709 15:20:14.728"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:15.206" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:15.207" starttime="20150709 15:20:15.193"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:15.226" starttime="20150709 15:20:15.224"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:15.239" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:15.238" starttime="20150709 15:20:15.232"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:15.245" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:15.246" starttime="20150709 15:20:15.241"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:15.257" starttime="20150709 15:20:15.255"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:15.260" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:15.294" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:15.296" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:15.295" starttime="20150709 15:20:15.258"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:15.299" starttime="20150709 15:20:15.297"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:15.302" starttime="20150709 15:20:15.300"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:15.305" starttime="20150709 15:20:15.303"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:15.310" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:15.368" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:15.370" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:15.371" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:15.369" starttime="20150709 15:20:15.306"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:15.378" starttime="20150709 15:20:15.372"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:15.382" starttime="20150709 15:20:15.380"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:15.385" starttime="20150709 15:20:15.383"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:15.388" starttime="20150709 15:20:15.386"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:15.391" starttime="20150709 15:20:15.389"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:15.394" starttime="20150709 15:20:15.392"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:15.398" starttime="20150709 15:20:15.395"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:15.401" starttime="20150709 15:20:15.399"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:15.404" starttime="20150709 15:20:15.402"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:15.407" starttime="20150709 15:20:15.405"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:15.410" starttime="20150709 15:20:15.408"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:15.411" starttime="20150709 15:20:15.248"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:15.415" level="INFO">Starting command 'cat tmpfilemonitor41.log'.</msg>
<status status="PASS" endtime="20150709 15:20:15.419" starttime="20150709 15:20:15.413"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:15.422" level="INFO">Reading output of command 'cat tmpfilemonitor41.log'.</msg>
<msg timestamp="20150709 15:20:15.447" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:15.449" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:15.448" starttime="20150709 15:20:15.420"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:15.453" level="INFO">Executing command 'rm tmpfilemonitor41.log'.</msg>
<msg timestamp="20150709 15:20:15.523" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:15.524" starttime="20150709 15:20:15.450"></status>
</kw>
<msg timestamp="20150709 15:20:15.527" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:15.526" starttime="20150709 15:20:15.217"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:15.535" starttime="20150709 15:20:15.528"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:15.546" starttime="20150709 15:20:15.543"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:15.549" starttime="20150709 15:20:15.547"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:15.550" starttime="20150709 15:20:15.536"></status>
</kw>
<msg timestamp="20150709 15:20:15.553" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:15.552" starttime="20150709 15:20:15.210"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:15.554" starttime="20150709 15:20:14.707"></status>
</kw>
<kw type="foritem" name="${i} = 42">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:15.558" level="INFO">
*********** Experiment: 42 ************</msg>
<status status="PASS" endtime="20150709 15:20:15.560" starttime="20150709 15:20:15.556"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:15.601" starttime="20150709 15:20:15.599"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:15.675" starttime="20150709 15:20:15.609"></status>
</kw>
<msg timestamp="20150709 15:20:15.677" level="INFO">${ssh_connection} = 42</msg>
<status status="PASS" endtime="20150709 15:20:15.677" starttime="20150709 15:20:15.602"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:15.690" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:16.063" level="INFO">Read output: Last login: Thu Jul  9 13:20:15 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:16.065" starttime="20150709 15:20:15.687"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:16.067" starttime="20150709 15:20:15.679"></status>
</kw>
<msg timestamp="20150709 15:20:16.071" level="INFO">${ssh_connection} = 42</msg>
<status status="PASS" endtime="20150709 15:20:16.069" starttime="20150709 15:20:15.589"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:16.077" starttime="20150709 15:20:16.076"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:16.079" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor42.log'.</msg>
<status status="PASS" endtime="20150709 15:20:16.082" starttime="20150709 15:20:16.078"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:16.083" starttime="20150709 15:20:16.072"></status>
</kw>
<msg timestamp="20150709 15:20:16.084" level="INFO">${ssh_connection} = 42</msg>
<status status="PASS" endtime="20150709 15:20:16.083" starttime="20150709 15:20:15.577"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:16.096" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:16.097" starttime="20150709 15:20:16.085"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:16.116" starttime="20150709 15:20:16.114"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:16.124" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:16.123" starttime="20150709 15:20:16.117"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:16.130" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:16.131" starttime="20150709 15:20:16.125"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:16.142" starttime="20150709 15:20:16.140"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:16.145" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:16.183" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:16.185" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:16.184" starttime="20150709 15:20:16.143"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:16.188" starttime="20150709 15:20:16.186"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:16.191" starttime="20150709 15:20:16.189"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:16.194" starttime="20150709 15:20:16.192"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:16.199" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:16.267" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:16.268" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:16.269" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:16.268" starttime="20150709 15:20:16.195"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:16.277" starttime="20150709 15:20:16.270"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:16.280" starttime="20150709 15:20:16.278"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:16.283" starttime="20150709 15:20:16.281"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:16.286" starttime="20150709 15:20:16.284"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:16.289" starttime="20150709 15:20:16.287"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:16.292" starttime="20150709 15:20:16.290"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:16.296" starttime="20150709 15:20:16.293"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:16.299" starttime="20150709 15:20:16.297"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:16.302" starttime="20150709 15:20:16.300"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:16.305" starttime="20150709 15:20:16.303"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:16.308" starttime="20150709 15:20:16.306"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:16.309" starttime="20150709 15:20:16.133"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:16.312" level="INFO">Starting command 'cat tmpfilemonitor42.log'.</msg>
<status status="PASS" endtime="20150709 15:20:16.317" starttime="20150709 15:20:16.310"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:16.319" level="INFO">Reading output of command 'cat tmpfilemonitor42.log'.</msg>
<msg timestamp="20150709 15:20:16.353" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:16.355" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:16.354" starttime="20150709 15:20:16.318"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:16.359" level="INFO">Executing command 'rm tmpfilemonitor42.log'.</msg>
<msg timestamp="20150709 15:20:16.431" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:16.433" starttime="20150709 15:20:16.356"></status>
</kw>
<msg timestamp="20150709 15:20:16.435" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:16.434" starttime="20150709 15:20:16.107"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:16.442" starttime="20150709 15:20:16.436"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:16.454" starttime="20150709 15:20:16.451"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:16.458" starttime="20150709 15:20:16.455"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:16.460" starttime="20150709 15:20:16.444"></status>
</kw>
<msg timestamp="20150709 15:20:16.462" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:16.461" starttime="20150709 15:20:16.100"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:16.463" starttime="20150709 15:20:15.555"></status>
</kw>
<kw type="foritem" name="${i} = 43">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:16.468" level="INFO">
*********** Experiment: 43 ************</msg>
<status status="PASS" endtime="20150709 15:20:16.469" starttime="20150709 15:20:16.465"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:16.510" starttime="20150709 15:20:16.507"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:16.574" starttime="20150709 15:20:16.518"></status>
</kw>
<msg timestamp="20150709 15:20:16.577" level="INFO">${ssh_connection} = 43</msg>
<status status="PASS" endtime="20150709 15:20:16.576" starttime="20150709 15:20:16.511"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:16.588" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:16.967" level="INFO">Read output: Last login: Thu Jul  9 13:20:15 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:16.969" starttime="20150709 15:20:16.586"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:16.970" starttime="20150709 15:20:16.578"></status>
</kw>
<msg timestamp="20150709 15:20:16.973" level="INFO">${ssh_connection} = 43</msg>
<status status="PASS" endtime="20150709 15:20:16.972" starttime="20150709 15:20:16.498"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:16.986" starttime="20150709 15:20:16.983"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:16.990" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor43.log'.</msg>
<status status="PASS" endtime="20150709 15:20:16.994" starttime="20150709 15:20:16.987"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:16.995" starttime="20150709 15:20:16.976"></status>
</kw>
<msg timestamp="20150709 15:20:16.998" level="INFO">${ssh_connection} = 43</msg>
<status status="PASS" endtime="20150709 15:20:16.997" starttime="20150709 15:20:16.486"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:17.011" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:17.012" starttime="20150709 15:20:16.999"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:17.032" starttime="20150709 15:20:17.030"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:17.041" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:17.040" starttime="20150709 15:20:17.034"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:17.047" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:17.048" starttime="20150709 15:20:17.042"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:17.059" starttime="20150709 15:20:17.057"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:17.062" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:17.092" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:17.094" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:17.093" starttime="20150709 15:20:17.060"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:17.098" starttime="20150709 15:20:17.096"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:17.101" starttime="20150709 15:20:17.099"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:17.104" starttime="20150709 15:20:17.102"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:17.108" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:17.169" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:17.171" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:17.171" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:17.170" starttime="20150709 15:20:17.105"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:17.179" starttime="20150709 15:20:17.173"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:17.182" starttime="20150709 15:20:17.180"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:17.185" starttime="20150709 15:20:17.183"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:17.188" starttime="20150709 15:20:17.187"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:17.192" starttime="20150709 15:20:17.190"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:17.195" starttime="20150709 15:20:17.193"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:17.198" starttime="20150709 15:20:17.196"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:17.202" starttime="20150709 15:20:17.200"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:17.205" starttime="20150709 15:20:17.203"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:17.208" starttime="20150709 15:20:17.206"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:17.211" starttime="20150709 15:20:17.209"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:17.212" starttime="20150709 15:20:17.050"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:17.215" level="INFO">Starting command 'cat tmpfilemonitor43.log'.</msg>
<status status="PASS" endtime="20150709 15:20:17.219" starttime="20150709 15:20:17.213"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:17.222" level="INFO">Reading output of command 'cat tmpfilemonitor43.log'.</msg>
<msg timestamp="20150709 15:20:17.244" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:17.246" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:17.245" starttime="20150709 15:20:17.220"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:17.250" level="INFO">Executing command 'rm tmpfilemonitor43.log'.</msg>
<msg timestamp="20150709 15:20:17.320" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:17.322" starttime="20150709 15:20:17.247"></status>
</kw>
<msg timestamp="20150709 15:20:17.325" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:17.324" starttime="20150709 15:20:17.023"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:17.333" starttime="20150709 15:20:17.326"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:17.344" starttime="20150709 15:20:17.341"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:17.349" starttime="20150709 15:20:17.345"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:17.350" starttime="20150709 15:20:17.334"></status>
</kw>
<msg timestamp="20150709 15:20:17.353" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:17.352" starttime="20150709 15:20:17.015"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:17.354" starttime="20150709 15:20:16.464"></status>
</kw>
<kw type="foritem" name="${i} = 44">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:17.358" level="INFO">
*********** Experiment: 44 ************</msg>
<status status="PASS" endtime="20150709 15:20:17.360" starttime="20150709 15:20:17.356"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:17.401" starttime="20150709 15:20:17.398"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:17.465" starttime="20150709 15:20:17.409"></status>
</kw>
<msg timestamp="20150709 15:20:17.467" level="INFO">${ssh_connection} = 44</msg>
<status status="PASS" endtime="20150709 15:20:17.466" starttime="20150709 15:20:17.402"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:17.478" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:17.854" level="INFO">Read output: Last login: Thu Jul  9 13:20:16 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:17.855" starttime="20150709 15:20:17.476"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:17.856" starttime="20150709 15:20:17.468"></status>
</kw>
<msg timestamp="20150709 15:20:17.859" level="INFO">${ssh_connection} = 44</msg>
<status status="PASS" endtime="20150709 15:20:17.858" starttime="20150709 15:20:17.389"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:17.871" starttime="20150709 15:20:17.869"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:17.876" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor44.log'.</msg>
<status status="PASS" endtime="20150709 15:20:17.880" starttime="20150709 15:20:17.874"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:17.882" starttime="20150709 15:20:17.862"></status>
</kw>
<msg timestamp="20150709 15:20:17.884" level="INFO">${ssh_connection} = 44</msg>
<status status="PASS" endtime="20150709 15:20:17.883" starttime="20150709 15:20:17.377"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:17.898" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:17.899" starttime="20150709 15:20:17.885"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:17.918" starttime="20150709 15:20:17.915"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:17.925" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:17.925" starttime="20150709 15:20:17.919"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:17.931" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:17.932" starttime="20150709 15:20:17.927"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:17.943" starttime="20150709 15:20:17.941"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:17.947" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:17.982" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:17.983" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:17.982" starttime="20150709 15:20:17.945"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:17.984" starttime="20150709 15:20:17.983"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:17.986" starttime="20150709 15:20:17.985"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:17.987" starttime="20150709 15:20:17.986"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:17.989" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:18.055" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:18.057" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:18.057" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:18.056" starttime="20150709 15:20:17.988"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:18.061" starttime="20150709 15:20:18.058"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:18.062" starttime="20150709 15:20:18.062"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:18.064" starttime="20150709 15:20:18.063"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:18.065" starttime="20150709 15:20:18.064"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:18.067" starttime="20150709 15:20:18.066"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:18.068" starttime="20150709 15:20:18.067"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:18.070" starttime="20150709 15:20:18.069"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:18.072" starttime="20150709 15:20:18.070"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:18.074" starttime="20150709 15:20:18.073"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:18.076" starttime="20150709 15:20:18.075"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:18.079" starttime="20150709 15:20:18.077"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:18.080" starttime="20150709 15:20:17.934"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:18.083" level="INFO">Starting command 'cat tmpfilemonitor44.log'.</msg>
<status status="PASS" endtime="20150709 15:20:18.087" starttime="20150709 15:20:18.081"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:18.089" level="INFO">Reading output of command 'cat tmpfilemonitor44.log'.</msg>
<msg timestamp="20150709 15:20:18.119" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:18.120" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:18.119" starttime="20150709 15:20:18.088"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:18.123" level="INFO">Executing command 'rm tmpfilemonitor44.log'.</msg>
<msg timestamp="20150709 15:20:18.198" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:18.199" starttime="20150709 15:20:18.121"></status>
</kw>
<msg timestamp="20150709 15:20:18.203" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:18.201" starttime="20150709 15:20:17.909"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:18.210" starttime="20150709 15:20:18.204"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:18.225" starttime="20150709 15:20:18.222"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:18.228" starttime="20150709 15:20:18.226"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:18.230" starttime="20150709 15:20:18.213"></status>
</kw>
<msg timestamp="20150709 15:20:18.234" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:18.232" starttime="20150709 15:20:17.902"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:18.234" starttime="20150709 15:20:17.355"></status>
</kw>
<kw type="foritem" name="${i} = 45">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:18.243" level="INFO">
*********** Experiment: 45 ************</msg>
<status status="PASS" endtime="20150709 15:20:18.244" starttime="20150709 15:20:18.240"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:18.284" starttime="20150709 15:20:18.282"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:18.341" starttime="20150709 15:20:18.292"></status>
</kw>
<msg timestamp="20150709 15:20:18.343" level="INFO">${ssh_connection} = 45</msg>
<status status="PASS" endtime="20150709 15:20:18.343" starttime="20150709 15:20:18.286"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:18.355" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:18.687" level="INFO">Read output: Last login: Thu Jul  9 13:20:17 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:18.688" starttime="20150709 15:20:18.352"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:18.690" starttime="20150709 15:20:18.345"></status>
</kw>
<msg timestamp="20150709 15:20:18.693" level="INFO">${ssh_connection} = 45</msg>
<status status="PASS" endtime="20150709 15:20:18.692" starttime="20150709 15:20:18.273"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:18.706" starttime="20150709 15:20:18.703"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:18.709" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor45.log'.</msg>
<status status="PASS" endtime="20150709 15:20:18.714" starttime="20150709 15:20:18.707"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:18.715" starttime="20150709 15:20:18.695"></status>
</kw>
<msg timestamp="20150709 15:20:18.718" level="INFO">${ssh_connection} = 45</msg>
<status status="PASS" endtime="20150709 15:20:18.717" starttime="20150709 15:20:18.261"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:18.731" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:18.732" starttime="20150709 15:20:18.719"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:18.750" starttime="20150709 15:20:18.748"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:18.759" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:18.758" starttime="20150709 15:20:18.752"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:18.765" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:18.766" starttime="20150709 15:20:18.760"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:18.777" starttime="20150709 15:20:18.775"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:18.780" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:18.810" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:18.812" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:18.811" starttime="20150709 15:20:18.779"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:18.815" starttime="20150709 15:20:18.813"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:18.818" starttime="20150709 15:20:18.816"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:18.821" starttime="20150709 15:20:18.819"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:18.825" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:18.891" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:18.893" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:18.893" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:18.892" starttime="20150709 15:20:18.822"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:18.901" starttime="20150709 15:20:18.895"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:18.904" starttime="20150709 15:20:18.902"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:18.907" starttime="20150709 15:20:18.905"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:18.910" starttime="20150709 15:20:18.908"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:18.913" starttime="20150709 15:20:18.911"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:18.916" starttime="20150709 15:20:18.914"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:18.920" starttime="20150709 15:20:18.917"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:18.923" starttime="20150709 15:20:18.921"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:18.926" starttime="20150709 15:20:18.924"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:18.929" starttime="20150709 15:20:18.927"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:18.932" starttime="20150709 15:20:18.930"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:18.933" starttime="20150709 15:20:18.768"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:18.937" level="INFO">Starting command 'cat tmpfilemonitor45.log'.</msg>
<status status="PASS" endtime="20150709 15:20:18.941" starttime="20150709 15:20:18.934"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:18.944" level="INFO">Reading output of command 'cat tmpfilemonitor45.log'.</msg>
<msg timestamp="20150709 15:20:18.975" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:18.977" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:18.976" starttime="20150709 15:20:18.942"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:18.981" level="INFO">Executing command 'rm tmpfilemonitor45.log'.</msg>
<msg timestamp="20150709 15:20:19.049" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:19.050" starttime="20150709 15:20:18.978"></status>
</kw>
<msg timestamp="20150709 15:20:19.055" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:19.053" starttime="20150709 15:20:18.742"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:19.062" starttime="20150709 15:20:19.056"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:19.073" starttime="20150709 15:20:19.070"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:19.078" starttime="20150709 15:20:19.074"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:19.079" starttime="20150709 15:20:19.064"></status>
</kw>
<msg timestamp="20150709 15:20:19.082" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:19.081" starttime="20150709 15:20:18.734"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:19.083" starttime="20150709 15:20:18.239"></status>
</kw>
<kw type="foritem" name="${i} = 46">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:19.088" level="INFO">
*********** Experiment: 46 ************</msg>
<status status="PASS" endtime="20150709 15:20:19.089" starttime="20150709 15:20:19.085"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:19.129" starttime="20150709 15:20:19.127"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:19.191" starttime="20150709 15:20:19.137"></status>
</kw>
<msg timestamp="20150709 15:20:19.193" level="INFO">${ssh_connection} = 46</msg>
<status status="PASS" endtime="20150709 15:20:19.192" starttime="20150709 15:20:19.131"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:19.204" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:19.539" level="INFO">Read output: Last login: Thu Jul  9 13:20:18 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:19.540" starttime="20150709 15:20:19.202"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:19.542" starttime="20150709 15:20:19.195"></status>
</kw>
<msg timestamp="20150709 15:20:19.544" level="INFO">${ssh_connection} = 46</msg>
<status status="PASS" endtime="20150709 15:20:19.543" starttime="20150709 15:20:19.118"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:19.557" starttime="20150709 15:20:19.554"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:19.560" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor46.log'.</msg>
<status status="PASS" endtime="20150709 15:20:19.565" starttime="20150709 15:20:19.558"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:19.567" starttime="20150709 15:20:19.547"></status>
</kw>
<msg timestamp="20150709 15:20:19.569" level="INFO">${ssh_connection} = 46</msg>
<status status="PASS" endtime="20150709 15:20:19.568" starttime="20150709 15:20:19.106"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:19.582" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:19.582" starttime="20150709 15:20:19.570"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:19.590" starttime="20150709 15:20:19.589"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:19.594" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:19.594" starttime="20150709 15:20:19.591"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:19.598" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:19.599" starttime="20150709 15:20:19.595"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:19.604" starttime="20150709 15:20:19.603"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:19.606" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:19.631" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:19.632" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:19.631" starttime="20150709 15:20:19.605"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:19.634" starttime="20150709 15:20:19.632"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:19.636" starttime="20150709 15:20:19.635"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:19.637" starttime="20150709 15:20:19.636"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:19.639" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:19.701" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:19.703" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:19.704" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:19.702" starttime="20150709 15:20:19.638"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:19.711" starttime="20150709 15:20:19.705"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:19.714" starttime="20150709 15:20:19.712"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:19.717" starttime="20150709 15:20:19.715"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:19.720" starttime="20150709 15:20:19.718"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:19.723" starttime="20150709 15:20:19.721"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:19.726" starttime="20150709 15:20:19.725"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:19.730" starttime="20150709 15:20:19.728"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:19.733" starttime="20150709 15:20:19.731"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:19.736" starttime="20150709 15:20:19.734"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:19.739" starttime="20150709 15:20:19.737"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:19.742" starttime="20150709 15:20:19.740"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:19.743" starttime="20150709 15:20:19.600"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:19.747" level="INFO">Starting command 'cat tmpfilemonitor46.log'.</msg>
<status status="PASS" endtime="20150709 15:20:19.751" starttime="20150709 15:20:19.744"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:19.754" level="INFO">Reading output of command 'cat tmpfilemonitor46.log'.</msg>
<msg timestamp="20150709 15:20:19.777" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:19.779" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:19.778" starttime="20150709 15:20:19.752"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:19.782" level="INFO">Executing command 'rm tmpfilemonitor46.log'.</msg>
<msg timestamp="20150709 15:20:19.845" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:19.846" starttime="20150709 15:20:19.780"></status>
</kw>
<msg timestamp="20150709 15:20:19.848" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:19.848" starttime="20150709 15:20:19.586"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:19.856" starttime="20150709 15:20:19.849"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:19.867" starttime="20150709 15:20:19.864"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:19.872" starttime="20150709 15:20:19.868"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:19.873" starttime="20150709 15:20:19.857"></status>
</kw>
<msg timestamp="20150709 15:20:19.875" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:19.875" starttime="20150709 15:20:19.583"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:19.876" starttime="20150709 15:20:19.085"></status>
</kw>
<kw type="foritem" name="${i} = 47">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:19.880" level="INFO">
*********** Experiment: 47 ************</msg>
<status status="PASS" endtime="20150709 15:20:19.881" starttime="20150709 15:20:19.877"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:19.921" starttime="20150709 15:20:19.919"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:19.977" starttime="20150709 15:20:19.929"></status>
</kw>
<msg timestamp="20150709 15:20:19.979" level="INFO">${ssh_connection} = 47</msg>
<status status="PASS" endtime="20150709 15:20:19.978" starttime="20150709 15:20:19.923"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:19.989" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:20.395" level="INFO">Read output: Last login: Thu Jul  9 13:20:19 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:20.397" starttime="20150709 15:20:19.986"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:20.399" starttime="20150709 15:20:19.980"></status>
</kw>
<msg timestamp="20150709 15:20:20.404" level="INFO">${ssh_connection} = 47</msg>
<status status="PASS" endtime="20150709 15:20:20.402" starttime="20150709 15:20:19.910"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:20.417" starttime="20150709 15:20:20.414"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:20.421" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor47.log'.</msg>
<status status="PASS" endtime="20150709 15:20:20.425" starttime="20150709 15:20:20.418"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:20.426" starttime="20150709 15:20:20.407"></status>
</kw>
<msg timestamp="20150709 15:20:20.429" level="INFO">${ssh_connection} = 47</msg>
<status status="PASS" endtime="20150709 15:20:20.428" starttime="20150709 15:20:19.898"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:20.442" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:20.443" starttime="20150709 15:20:20.430"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:20.462" starttime="20150709 15:20:20.460"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:20.471" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:20.470" starttime="20150709 15:20:20.463"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:20.477" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:20.478" starttime="20150709 15:20:20.472"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:20.489" starttime="20150709 15:20:20.487"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:20.492" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:20.526" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:20.528" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:20.527" starttime="20150709 15:20:20.491"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:20.531" starttime="20150709 15:20:20.529"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:20.534" starttime="20150709 15:20:20.532"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:20.537" starttime="20150709 15:20:20.535"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:20.541" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:20.611" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:20.612" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:20.613" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:20.612" starttime="20150709 15:20:20.538"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:20.621" starttime="20150709 15:20:20.614"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:20.624" starttime="20150709 15:20:20.622"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:20.627" starttime="20150709 15:20:20.625"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:20.630" starttime="20150709 15:20:20.628"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:20.633" starttime="20150709 15:20:20.631"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:20.636" starttime="20150709 15:20:20.634"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:20.639" starttime="20150709 15:20:20.637"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:20.642" starttime="20150709 15:20:20.640"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:20.645" starttime="20150709 15:20:20.643"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:20.648" starttime="20150709 15:20:20.646"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:20.651" starttime="20150709 15:20:20.649"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:20.652" starttime="20150709 15:20:20.480"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:20.655" level="INFO">Starting command 'cat tmpfilemonitor47.log'.</msg>
<status status="PASS" endtime="20150709 15:20:20.660" starttime="20150709 15:20:20.653"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:20.663" level="INFO">Reading output of command 'cat tmpfilemonitor47.log'.</msg>
<msg timestamp="20150709 15:20:20.694" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:20.696" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:20.695" starttime="20150709 15:20:20.662"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:20.699" level="INFO">Executing command 'rm tmpfilemonitor47.log'.</msg>
<msg timestamp="20150709 15:20:20.769" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:20.769" starttime="20150709 15:20:20.697"></status>
</kw>
<msg timestamp="20150709 15:20:20.772" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:20.771" starttime="20150709 15:20:20.453"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:20.779" starttime="20150709 15:20:20.773"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:20.790" starttime="20150709 15:20:20.787"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:20.795" starttime="20150709 15:20:20.791"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:20.796" starttime="20150709 15:20:20.781"></status>
</kw>
<msg timestamp="20150709 15:20:20.798" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:20.798" starttime="20150709 15:20:20.446"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:20.799" starttime="20150709 15:20:19.877"></status>
</kw>
<kw type="foritem" name="${i} = 48">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:20.808" level="INFO">
*********** Experiment: 48 ************</msg>
<status status="PASS" endtime="20150709 15:20:20.809" starttime="20150709 15:20:20.806"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:20.850" starttime="20150709 15:20:20.848"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:20.909" starttime="20150709 15:20:20.858"></status>
</kw>
<msg timestamp="20150709 15:20:20.912" level="INFO">${ssh_connection} = 48</msg>
<status status="PASS" endtime="20150709 15:20:20.911" starttime="20150709 15:20:20.851"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:20.923" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:21.350" level="INFO">Read output: Last login: Thu Jul  9 13:20:20 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:21.351" starttime="20150709 15:20:20.920"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:21.354" starttime="20150709 15:20:20.913"></status>
</kw>
<msg timestamp="20150709 15:20:21.356" level="INFO">${ssh_connection} = 48</msg>
<status status="PASS" endtime="20150709 15:20:21.355" starttime="20150709 15:20:20.839"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:21.370" starttime="20150709 15:20:21.367"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:21.373" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor48.log'.</msg>
<status status="PASS" endtime="20150709 15:20:21.378" starttime="20150709 15:20:21.371"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:21.379" starttime="20150709 15:20:21.357"></status>
</kw>
<msg timestamp="20150709 15:20:21.382" level="INFO">${ssh_connection} = 48</msg>
<status status="PASS" endtime="20150709 15:20:21.381" starttime="20150709 15:20:20.827"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:21.396" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:21.397" starttime="20150709 15:20:21.384"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:21.415" starttime="20150709 15:20:21.413"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:21.423" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:21.422" starttime="20150709 15:20:21.416"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:21.429" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:21.430" starttime="20150709 15:20:21.424"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:21.441" starttime="20150709 15:20:21.439"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:21.444" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:21.485" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:21.486" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:21.485" starttime="20150709 15:20:21.442"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:21.489" starttime="20150709 15:20:21.487"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:21.492" starttime="20150709 15:20:21.490"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:21.495" starttime="20150709 15:20:21.493"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:21.499" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:21.566" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:21.568" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:21.569" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:21.567" starttime="20150709 15:20:21.496"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:21.576" starttime="20150709 15:20:21.570"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:21.580" starttime="20150709 15:20:21.578"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:21.583" starttime="20150709 15:20:21.581"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:21.586" starttime="20150709 15:20:21.584"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:21.589" starttime="20150709 15:20:21.587"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:21.592" starttime="20150709 15:20:21.590"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:21.595" starttime="20150709 15:20:21.593"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:21.598" starttime="20150709 15:20:21.596"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:21.601" starttime="20150709 15:20:21.599"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:21.604" starttime="20150709 15:20:21.602"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:21.607" starttime="20150709 15:20:21.605"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:21.608" starttime="20150709 15:20:21.432"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:21.612" level="INFO">Starting command 'cat tmpfilemonitor48.log'.</msg>
<status status="PASS" endtime="20150709 15:20:21.616" starttime="20150709 15:20:21.610"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:21.619" level="INFO">Reading output of command 'cat tmpfilemonitor48.log'.</msg>
<msg timestamp="20150709 15:20:21.651" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:21.653" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:21.652" starttime="20150709 15:20:21.617"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:21.657" level="INFO">Executing command 'rm tmpfilemonitor48.log'.</msg>
<msg timestamp="20150709 15:20:21.729" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:21.730" starttime="20150709 15:20:21.654"></status>
</kw>
<msg timestamp="20150709 15:20:21.733" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:21.732" starttime="20150709 15:20:21.406"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:21.740" starttime="20150709 15:20:21.734"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:21.751" starttime="20150709 15:20:21.749"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:21.756" starttime="20150709 15:20:21.752"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:21.757" starttime="20150709 15:20:21.742"></status>
</kw>
<msg timestamp="20150709 15:20:21.759" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:21.759" starttime="20150709 15:20:21.399"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:21.760" starttime="20150709 15:20:20.805"></status>
</kw>
<kw type="foritem" name="${i} = 49">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:21.765" level="INFO">
*********** Experiment: 49 ************</msg>
<status status="PASS" endtime="20150709 15:20:21.766" starttime="20150709 15:20:21.762"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:21.825" starttime="20150709 15:20:21.823"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:21.885" starttime="20150709 15:20:21.834"></status>
</kw>
<msg timestamp="20150709 15:20:21.887" level="INFO">${ssh_connection} = 49</msg>
<status status="PASS" endtime="20150709 15:20:21.886" starttime="20150709 15:20:21.827"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:21.897" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:22.347" level="INFO">Read output: Last login: Thu Jul  9 13:20:21 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:22.348" starttime="20150709 15:20:21.895"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:22.349" starttime="20150709 15:20:21.889"></status>
</kw>
<msg timestamp="20150709 15:20:22.351" level="INFO">${ssh_connection} = 49</msg>
<status status="PASS" endtime="20150709 15:20:22.350" starttime="20150709 15:20:21.795"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:22.357" starttime="20150709 15:20:22.356"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:22.359" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor49.log'.</msg>
<status status="PASS" endtime="20150709 15:20:22.363" starttime="20150709 15:20:22.358"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:22.364" starttime="20150709 15:20:22.352"></status>
</kw>
<msg timestamp="20150709 15:20:22.365" level="INFO">${ssh_connection} = 49</msg>
<status status="PASS" endtime="20150709 15:20:22.364" starttime="20150709 15:20:21.783"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:22.376" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:22.376" starttime="20150709 15:20:22.365"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:22.384" starttime="20150709 15:20:22.383"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:22.388" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:22.388" starttime="20150709 15:20:22.385"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:22.394" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:22.395" starttime="20150709 15:20:22.389"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:22.400" starttime="20150709 15:20:22.399"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:22.401" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:22.448" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:22.451" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:22.450" starttime="20150709 15:20:22.400"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:22.454" starttime="20150709 15:20:22.452"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:22.457" starttime="20150709 15:20:22.455"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:22.460" starttime="20150709 15:20:22.458"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:22.464" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:22.524" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:22.526" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:22.527" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:22.525" starttime="20150709 15:20:22.461"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:22.534" starttime="20150709 15:20:22.528"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:22.537" starttime="20150709 15:20:22.535"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:22.540" starttime="20150709 15:20:22.538"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:22.543" starttime="20150709 15:20:22.541"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:22.546" starttime="20150709 15:20:22.544"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:22.550" starttime="20150709 15:20:22.548"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:22.553" starttime="20150709 15:20:22.551"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:22.556" starttime="20150709 15:20:22.554"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:22.559" starttime="20150709 15:20:22.557"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:22.562" starttime="20150709 15:20:22.560"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:22.565" starttime="20150709 15:20:22.563"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:22.566" starttime="20150709 15:20:22.395"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:22.570" level="INFO">Starting command 'cat tmpfilemonitor49.log'.</msg>
<status status="PASS" endtime="20150709 15:20:22.574" starttime="20150709 15:20:22.567"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:22.577" level="INFO">Reading output of command 'cat tmpfilemonitor49.log'.</msg>
<msg timestamp="20150709 15:20:22.600" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:22.602" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:22.601" starttime="20150709 15:20:22.575"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:22.606" level="INFO">Executing command 'rm tmpfilemonitor49.log'.</msg>
<msg timestamp="20150709 15:20:22.681" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:22.682" starttime="20150709 15:20:22.603"></status>
</kw>
<msg timestamp="20150709 15:20:22.684" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:22.683" starttime="20150709 15:20:22.381"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:22.692" starttime="20150709 15:20:22.685"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:22.703" starttime="20150709 15:20:22.700"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:22.706" starttime="20150709 15:20:22.704"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:22.707" starttime="20150709 15:20:22.693"></status>
</kw>
<msg timestamp="20150709 15:20:22.710" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:22.709" starttime="20150709 15:20:22.377"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:22.710" starttime="20150709 15:20:21.761"></status>
</kw>
<kw type="foritem" name="${i} = 50">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:22.715" level="INFO">
*********** Experiment: 50 ************</msg>
<status status="PASS" endtime="20150709 15:20:22.716" starttime="20150709 15:20:22.712"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:22.756" starttime="20150709 15:20:22.754"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:22.816" starttime="20150709 15:20:22.764"></status>
</kw>
<msg timestamp="20150709 15:20:22.818" level="INFO">${ssh_connection} = 50</msg>
<status status="PASS" endtime="20150709 15:20:22.817" starttime="20150709 15:20:22.758"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:22.830" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:23.240" level="INFO">Read output: Last login: Thu Jul  9 13:20:22 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:23.242" starttime="20150709 15:20:22.827"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:23.243" starttime="20150709 15:20:22.820"></status>
</kw>
<msg timestamp="20150709 15:20:23.248" level="INFO">${ssh_connection} = 50</msg>
<status status="PASS" endtime="20150709 15:20:23.246" starttime="20150709 15:20:22.745"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:23.259" starttime="20150709 15:20:23.257"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:23.263" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor50.log'.</msg>
<status status="PASS" endtime="20150709 15:20:23.267" starttime="20150709 15:20:23.260"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:23.268" starttime="20150709 15:20:23.250"></status>
</kw>
<msg timestamp="20150709 15:20:23.271" level="INFO">${ssh_connection} = 50</msg>
<status status="PASS" endtime="20150709 15:20:23.270" starttime="20150709 15:20:22.733"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:23.286" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:23.287" starttime="20150709 15:20:23.273"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:23.305" starttime="20150709 15:20:23.303"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:23.309" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:23.309" starttime="20150709 15:20:23.305"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:23.316" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:23.317" starttime="20150709 15:20:23.310"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:23.328" starttime="20150709 15:20:23.326"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:23.331" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:23.364" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:23.365" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:23.365" starttime="20150709 15:20:23.330"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:23.370" starttime="20150709 15:20:23.366"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:23.374" starttime="20150709 15:20:23.372"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:23.377" starttime="20150709 15:20:23.375"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:23.381" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:23.445" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:23.447" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:23.448" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:23.446" starttime="20150709 15:20:23.378"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:23.455" starttime="20150709 15:20:23.449"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:23.458" starttime="20150709 15:20:23.457"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:23.461" starttime="20150709 15:20:23.460"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:23.464" starttime="20150709 15:20:23.462"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:23.467" starttime="20150709 15:20:23.465"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:23.470" starttime="20150709 15:20:23.468"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:23.474" starttime="20150709 15:20:23.471"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:23.477" starttime="20150709 15:20:23.475"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:23.480" starttime="20150709 15:20:23.478"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:23.482" starttime="20150709 15:20:23.481"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:23.485" starttime="20150709 15:20:23.483"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:23.486" starttime="20150709 15:20:23.319"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:23.490" level="INFO">Starting command 'cat tmpfilemonitor50.log'.</msg>
<status status="PASS" endtime="20150709 15:20:23.494" starttime="20150709 15:20:23.488"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:23.497" level="INFO">Reading output of command 'cat tmpfilemonitor50.log'.</msg>
<msg timestamp="20150709 15:20:23.532" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:23.533" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:23.533" starttime="20150709 15:20:23.496"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:23.537" level="INFO">Executing command 'rm tmpfilemonitor50.log'.</msg>
<msg timestamp="20150709 15:20:23.610" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:23.611" starttime="20150709 15:20:23.535"></status>
</kw>
<msg timestamp="20150709 15:20:23.613" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:23.612" starttime="20150709 15:20:23.297"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:23.620" starttime="20150709 15:20:23.614"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:23.631" starttime="20150709 15:20:23.628"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:23.634" starttime="20150709 15:20:23.632"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:23.635" starttime="20150709 15:20:23.622"></status>
</kw>
<msg timestamp="20150709 15:20:23.637" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:23.637" starttime="20150709 15:20:23.290"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:23.638" starttime="20150709 15:20:22.712"></status>
</kw>
<kw type="foritem" name="${i} = 51">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:23.643" level="INFO">
*********** Experiment: 51 ************</msg>
<status status="PASS" endtime="20150709 15:20:23.644" starttime="20150709 15:20:23.640"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:23.683" starttime="20150709 15:20:23.681"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:23.741" starttime="20150709 15:20:23.690"></status>
</kw>
<msg timestamp="20150709 15:20:23.744" level="INFO">${ssh_connection} = 51</msg>
<status status="PASS" endtime="20150709 15:20:23.743" starttime="20150709 15:20:23.684"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:23.755" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:24.120" level="INFO">Read output: Last login: Thu Jul  9 13:20:23 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:24.122" starttime="20150709 15:20:23.753"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:24.124" starttime="20150709 15:20:23.745"></status>
</kw>
<msg timestamp="20150709 15:20:24.128" level="INFO">${ssh_connection} = 51</msg>
<status status="PASS" endtime="20150709 15:20:24.126" starttime="20150709 15:20:23.672"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:24.140" starttime="20150709 15:20:24.137"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:24.143" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor51.log'.</msg>
<status status="PASS" endtime="20150709 15:20:24.147" starttime="20150709 15:20:24.141"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:24.149" starttime="20150709 15:20:24.130"></status>
</kw>
<msg timestamp="20150709 15:20:24.152" level="INFO">${ssh_connection} = 51</msg>
<status status="PASS" endtime="20150709 15:20:24.150" starttime="20150709 15:20:23.661"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:24.165" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:24.166" starttime="20150709 15:20:24.153"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:24.183" starttime="20150709 15:20:24.181"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:24.191" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:24.190" starttime="20150709 15:20:24.185"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:24.197" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:24.198" starttime="20150709 15:20:24.192"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:24.210" starttime="20150709 15:20:24.207"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:24.213" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:24.250" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:24.251" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:24.250" starttime="20150709 15:20:24.211"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:24.254" starttime="20150709 15:20:24.252"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:24.257" starttime="20150709 15:20:24.255"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:24.260" starttime="20150709 15:20:24.258"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:24.264" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:24.323" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:24.325" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:24.325" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:24.324" starttime="20150709 15:20:24.261"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:24.333" starttime="20150709 15:20:24.327"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:24.336" starttime="20150709 15:20:24.334"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:24.339" starttime="20150709 15:20:24.337"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:24.341" starttime="20150709 15:20:24.340"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:24.344" starttime="20150709 15:20:24.343"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:24.347" starttime="20150709 15:20:24.345"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:24.351" starttime="20150709 15:20:24.349"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:24.354" starttime="20150709 15:20:24.352"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:24.357" starttime="20150709 15:20:24.355"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:24.359" starttime="20150709 15:20:24.358"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:24.362" starttime="20150709 15:20:24.361"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:24.364" starttime="20150709 15:20:24.201"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:24.367" level="INFO">Starting command 'cat tmpfilemonitor51.log'.</msg>
<status status="PASS" endtime="20150709 15:20:24.372" starttime="20150709 15:20:24.365"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:24.374" level="INFO">Reading output of command 'cat tmpfilemonitor51.log'.</msg>
<msg timestamp="20150709 15:20:24.399" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:24.401" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:24.400" starttime="20150709 15:20:24.373"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:24.404" level="INFO">Executing command 'rm tmpfilemonitor51.log'.</msg>
<msg timestamp="20150709 15:20:24.481" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:24.482" starttime="20150709 15:20:24.402"></status>
</kw>
<msg timestamp="20150709 15:20:24.485" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:24.484" starttime="20150709 15:20:24.175"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:24.492" starttime="20150709 15:20:24.486"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:24.503" starttime="20150709 15:20:24.501"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:24.507" starttime="20150709 15:20:24.505"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:24.508" starttime="20150709 15:20:24.494"></status>
</kw>
<msg timestamp="20150709 15:20:24.510" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:24.510" starttime="20150709 15:20:24.168"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:24.511" starttime="20150709 15:20:23.640"></status>
</kw>
<kw type="foritem" name="${i} = 52">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:24.516" level="INFO">
*********** Experiment: 52 ************</msg>
<status status="PASS" endtime="20150709 15:20:24.517" starttime="20150709 15:20:24.513"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:24.556" starttime="20150709 15:20:24.554"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:24.610" starttime="20150709 15:20:24.564"></status>
</kw>
<msg timestamp="20150709 15:20:24.612" level="INFO">${ssh_connection} = 52</msg>
<status status="PASS" endtime="20150709 15:20:24.611" starttime="20150709 15:20:24.557"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:24.622" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:25.026" level="INFO">Read output: Last login: Thu Jul  9 13:20:23 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:25.028" starttime="20150709 15:20:24.619"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:25.030" starttime="20150709 15:20:24.613"></status>
</kw>
<msg timestamp="20150709 15:20:25.034" level="INFO">${ssh_connection} = 52</msg>
<status status="PASS" endtime="20150709 15:20:25.033" starttime="20150709 15:20:24.545"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:25.047" starttime="20150709 15:20:25.044"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:25.050" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor52.log'.</msg>
<status status="PASS" endtime="20150709 15:20:25.054" starttime="20150709 15:20:25.048"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:25.056" starttime="20150709 15:20:25.037"></status>
</kw>
<msg timestamp="20150709 15:20:25.059" level="INFO">${ssh_connection} = 52</msg>
<status status="PASS" endtime="20150709 15:20:25.057" starttime="20150709 15:20:24.533"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:25.072" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:25.073" starttime="20150709 15:20:25.060"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:25.091" starttime="20150709 15:20:25.088"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:25.099" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:25.098" starttime="20150709 15:20:25.092"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:25.105" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:25.106" starttime="20150709 15:20:25.100"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:25.116" starttime="20150709 15:20:25.114"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:25.119" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:25.141" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:25.143" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:25.142" starttime="20150709 15:20:25.117"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:25.146" starttime="20150709 15:20:25.145"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:25.149" starttime="20150709 15:20:25.148"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:25.152" starttime="20150709 15:20:25.150"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:25.156" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:25.211" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:25.213" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:25.213" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:25.212" starttime="20150709 15:20:25.153"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:25.220" starttime="20150709 15:20:25.214"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:25.223" starttime="20150709 15:20:25.221"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:25.226" starttime="20150709 15:20:25.224"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:25.229" starttime="20150709 15:20:25.227"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:25.232" starttime="20150709 15:20:25.230"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:25.235" starttime="20150709 15:20:25.233"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:25.238" starttime="20150709 15:20:25.236"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:25.241" starttime="20150709 15:20:25.239"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:25.244" starttime="20150709 15:20:25.242"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:25.247" starttime="20150709 15:20:25.245"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:25.250" starttime="20150709 15:20:25.248"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:25.251" starttime="20150709 15:20:25.107"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:25.254" level="INFO">Starting command 'cat tmpfilemonitor52.log'.</msg>
<status status="PASS" endtime="20150709 15:20:25.260" starttime="20150709 15:20:25.252"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:25.263" level="INFO">Reading output of command 'cat tmpfilemonitor52.log'.</msg>
<msg timestamp="20150709 15:20:25.294" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:25.296" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:25.295" starttime="20150709 15:20:25.261"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:25.299" level="INFO">Executing command 'rm tmpfilemonitor52.log'.</msg>
<msg timestamp="20150709 15:20:25.369" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:25.370" starttime="20150709 15:20:25.297"></status>
</kw>
<msg timestamp="20150709 15:20:25.373" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:25.372" starttime="20150709 15:20:25.082"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:25.380" starttime="20150709 15:20:25.374"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:25.390" starttime="20150709 15:20:25.388"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:25.393" starttime="20150709 15:20:25.391"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:25.395" starttime="20150709 15:20:25.382"></status>
</kw>
<msg timestamp="20150709 15:20:25.397" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:25.396" starttime="20150709 15:20:25.075"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:25.398" starttime="20150709 15:20:24.513"></status>
</kw>
<kw type="foritem" name="${i} = 53">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:25.402" level="INFO">
*********** Experiment: 53 ************</msg>
<status status="PASS" endtime="20150709 15:20:25.403" starttime="20150709 15:20:25.400"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:25.442" starttime="20150709 15:20:25.440"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:25.500" starttime="20150709 15:20:25.450"></status>
</kw>
<msg timestamp="20150709 15:20:25.506" level="INFO">${ssh_connection} = 53</msg>
<status status="PASS" endtime="20150709 15:20:25.503" starttime="20150709 15:20:25.443"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:25.517" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:26.017" level="INFO">Read output: Last login: Thu Jul  9 13:20:24 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:26.018" starttime="20150709 15:20:25.514"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:26.019" starttime="20150709 15:20:25.507"></status>
</kw>
<msg timestamp="20150709 15:20:26.021" level="INFO">${ssh_connection} = 53</msg>
<status status="PASS" endtime="20150709 15:20:26.020" starttime="20150709 15:20:25.431"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:26.028" starttime="20150709 15:20:26.027"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:26.030" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor53.log'.</msg>
<status status="PASS" endtime="20150709 15:20:26.035" starttime="20150709 15:20:26.028"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:26.035" starttime="20150709 15:20:26.022"></status>
</kw>
<msg timestamp="20150709 15:20:26.037" level="INFO">${ssh_connection} = 53</msg>
<status status="PASS" endtime="20150709 15:20:26.036" starttime="20150709 15:20:25.420"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:26.048" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:26.048" starttime="20150709 15:20:26.037"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:26.056" starttime="20150709 15:20:26.055"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:26.060" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:26.059" starttime="20150709 15:20:26.057"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:26.064" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:26.064" starttime="20150709 15:20:26.060"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:26.069" starttime="20150709 15:20:26.068"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:26.071" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:26.105" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:26.106" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:26.105" starttime="20150709 15:20:26.070"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:26.107" starttime="20150709 15:20:26.106"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:26.109" starttime="20150709 15:20:26.108"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:26.110" starttime="20150709 15:20:26.109"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:26.112" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:26.186" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:26.187" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:26.187" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:26.186" starttime="20150709 15:20:26.111"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:26.191" starttime="20150709 15:20:26.188"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:26.192" starttime="20150709 15:20:26.191"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:26.194" starttime="20150709 15:20:26.193"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:26.195" starttime="20150709 15:20:26.194"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:26.198" starttime="20150709 15:20:26.196"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:26.201" starttime="20150709 15:20:26.199"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:26.204" starttime="20150709 15:20:26.202"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:26.207" starttime="20150709 15:20:26.205"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:26.210" starttime="20150709 15:20:26.209"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:26.213" starttime="20150709 15:20:26.211"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:26.216" starttime="20150709 15:20:26.214"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:26.217" starttime="20150709 15:20:26.065"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:26.221" level="INFO">Starting command 'cat tmpfilemonitor53.log'.</msg>
<status status="PASS" endtime="20150709 15:20:26.224" starttime="20150709 15:20:26.218"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:26.227" level="INFO">Reading output of command 'cat tmpfilemonitor53.log'.</msg>
<msg timestamp="20150709 15:20:26.251" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:26.253" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:26.252" starttime="20150709 15:20:26.226"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:26.256" level="INFO">Executing command 'rm tmpfilemonitor53.log'.</msg>
<msg timestamp="20150709 15:20:26.320" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:26.321" starttime="20150709 15:20:26.254"></status>
</kw>
<msg timestamp="20150709 15:20:26.324" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:26.323" starttime="20150709 15:20:26.052"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:26.331" starttime="20150709 15:20:26.325"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:26.341" starttime="20150709 15:20:26.339"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:26.346" starttime="20150709 15:20:26.342"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:26.347" starttime="20150709 15:20:26.333"></status>
</kw>
<msg timestamp="20150709 15:20:26.349" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:26.348" starttime="20150709 15:20:26.049"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:26.350" starttime="20150709 15:20:25.399"></status>
</kw>
<kw type="foritem" name="${i} = 54">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:26.354" level="INFO">
*********** Experiment: 54 ************</msg>
<status status="PASS" endtime="20150709 15:20:26.355" starttime="20150709 15:20:26.352"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:26.394" starttime="20150709 15:20:26.392"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:26.460" starttime="20150709 15:20:26.402"></status>
</kw>
<msg timestamp="20150709 15:20:26.462" level="INFO">${ssh_connection} = 54</msg>
<status status="PASS" endtime="20150709 15:20:26.461" starttime="20150709 15:20:26.395"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:26.473" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:26.880" level="INFO">Read output: Last login: Thu Jul  9 13:20:25 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:26.881" starttime="20150709 15:20:26.470"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:26.882" starttime="20150709 15:20:26.463"></status>
</kw>
<msg timestamp="20150709 15:20:26.885" level="INFO">${ssh_connection} = 54</msg>
<status status="PASS" endtime="20150709 15:20:26.884" starttime="20150709 15:20:26.384"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:26.897" starttime="20150709 15:20:26.895"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:26.901" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor54.log'.</msg>
<status status="PASS" endtime="20150709 15:20:26.905" starttime="20150709 15:20:26.899"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:26.906" starttime="20150709 15:20:26.888"></status>
</kw>
<msg timestamp="20150709 15:20:26.909" level="INFO">${ssh_connection} = 54</msg>
<status status="PASS" endtime="20150709 15:20:26.908" starttime="20150709 15:20:26.372"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:26.922" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:26.923" starttime="20150709 15:20:26.910"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:26.940" starttime="20150709 15:20:26.938"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:26.949" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:26.948" starttime="20150709 15:20:26.941"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:26.955" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:26.956" starttime="20150709 15:20:26.950"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:26.966" starttime="20150709 15:20:26.964"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:26.969" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:27.008" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:27.011" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:27.010" starttime="20150709 15:20:26.968"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:27.015" starttime="20150709 15:20:27.013"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:27.017" starttime="20150709 15:20:27.016"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:27.020" starttime="20150709 15:20:27.019"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:27.025" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:27.086" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:27.088" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:27.089" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:27.087" starttime="20150709 15:20:27.021"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:27.096" starttime="20150709 15:20:27.090"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:27.099" starttime="20150709 15:20:27.097"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:27.102" starttime="20150709 15:20:27.100"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:27.105" starttime="20150709 15:20:27.103"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:27.108" starttime="20150709 15:20:27.106"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:27.111" starttime="20150709 15:20:27.109"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:27.114" starttime="20150709 15:20:27.112"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:27.117" starttime="20150709 15:20:27.115"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:27.120" starttime="20150709 15:20:27.118"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:27.123" starttime="20150709 15:20:27.121"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:27.126" starttime="20150709 15:20:27.124"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:27.127" starttime="20150709 15:20:26.958"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:27.131" level="INFO">Starting command 'cat tmpfilemonitor54.log'.</msg>
<status status="PASS" endtime="20150709 15:20:27.136" starttime="20150709 15:20:27.129"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:27.139" level="INFO">Reading output of command 'cat tmpfilemonitor54.log'.</msg>
<msg timestamp="20150709 15:20:27.170" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:27.172" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:27.171" starttime="20150709 15:20:27.137"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:27.176" level="INFO">Executing command 'rm tmpfilemonitor54.log'.</msg>
<msg timestamp="20150709 15:20:27.240" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:27.241" starttime="20150709 15:20:27.174"></status>
</kw>
<msg timestamp="20150709 15:20:27.245" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:27.243" starttime="20150709 15:20:26.932"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:27.252" starttime="20150709 15:20:27.246"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:27.263" starttime="20150709 15:20:27.260"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:27.267" starttime="20150709 15:20:27.264"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:27.268" starttime="20150709 15:20:27.254"></status>
</kw>
<msg timestamp="20150709 15:20:27.272" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:27.270" starttime="20150709 15:20:26.925"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:27.272" starttime="20150709 15:20:26.351"></status>
</kw>
<kw type="foritem" name="${i} = 55">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:27.277" level="INFO">
*********** Experiment: 55 ************</msg>
<status status="PASS" endtime="20150709 15:20:27.278" starttime="20150709 15:20:27.274"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:27.317" starttime="20150709 15:20:27.315"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:27.372" starttime="20150709 15:20:27.325"></status>
</kw>
<msg timestamp="20150709 15:20:27.374" level="INFO">${ssh_connection} = 55</msg>
<status status="PASS" endtime="20150709 15:20:27.373" starttime="20150709 15:20:27.318"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:27.384" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:27.738" level="INFO">Read output: Last login: Thu Jul  9 13:20:26 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:27.739" starttime="20150709 15:20:27.381"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:27.740" starttime="20150709 15:20:27.375"></status>
</kw>
<msg timestamp="20150709 15:20:27.743" level="INFO">${ssh_connection} = 55</msg>
<status status="PASS" endtime="20150709 15:20:27.742" starttime="20150709 15:20:27.306"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:27.755" starttime="20150709 15:20:27.752"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:27.758" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor55.log'.</msg>
<status status="PASS" endtime="20150709 15:20:27.762" starttime="20150709 15:20:27.756"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:27.763" starttime="20150709 15:20:27.745"></status>
</kw>
<msg timestamp="20150709 15:20:27.765" level="INFO">${ssh_connection} = 55</msg>
<status status="PASS" endtime="20150709 15:20:27.765" starttime="20150709 15:20:27.294"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:27.778" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:27.779" starttime="20150709 15:20:27.766"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:27.796" starttime="20150709 15:20:27.794"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:27.804" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:27.803" starttime="20150709 15:20:27.797"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:27.810" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:27.811" starttime="20150709 15:20:27.805"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:27.822" starttime="20150709 15:20:27.819"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:27.825" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:27.858" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:27.860" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:27.859" starttime="20150709 15:20:27.823"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:27.863" starttime="20150709 15:20:27.861"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:27.866" starttime="20150709 15:20:27.864"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:27.869" starttime="20150709 15:20:27.867"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:27.873" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:27.939" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:27.940" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:27.941" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:27.940" starttime="20150709 15:20:27.870"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:27.949" starttime="20150709 15:20:27.942"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:27.952" starttime="20150709 15:20:27.950"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:27.955" starttime="20150709 15:20:27.953"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:27.958" starttime="20150709 15:20:27.956"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:27.961" starttime="20150709 15:20:27.959"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:27.964" starttime="20150709 15:20:27.962"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:27.967" starttime="20150709 15:20:27.965"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:27.970" starttime="20150709 15:20:27.968"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:27.973" starttime="20150709 15:20:27.971"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:27.976" starttime="20150709 15:20:27.974"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:27.979" starttime="20150709 15:20:27.977"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:27.980" starttime="20150709 15:20:27.813"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:27.983" level="INFO">Starting command 'cat tmpfilemonitor55.log'.</msg>
<status status="PASS" endtime="20150709 15:20:27.987" starttime="20150709 15:20:27.981"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:27.990" level="INFO">Reading output of command 'cat tmpfilemonitor55.log'.</msg>
<msg timestamp="20150709 15:20:28.014" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:28.016" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:28.015" starttime="20150709 15:20:27.988"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:28.020" level="INFO">Executing command 'rm tmpfilemonitor55.log'.</msg>
<msg timestamp="20150709 15:20:28.082" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:28.083" starttime="20150709 15:20:28.018"></status>
</kw>
<msg timestamp="20150709 15:20:28.086" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:28.085" starttime="20150709 15:20:27.788"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:28.094" starttime="20150709 15:20:28.087"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:28.104" starttime="20150709 15:20:28.102"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:28.109" starttime="20150709 15:20:28.105"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:28.110" starttime="20150709 15:20:28.095"></status>
</kw>
<msg timestamp="20150709 15:20:28.113" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:28.112" starttime="20150709 15:20:27.781"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:28.114" starttime="20150709 15:20:27.274"></status>
</kw>
<kw type="foritem" name="${i} = 56">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:28.118" level="INFO">
*********** Experiment: 56 ************</msg>
<status status="PASS" endtime="20150709 15:20:28.119" starttime="20150709 15:20:28.116"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:28.158" starttime="20150709 15:20:28.156"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:28.214" starttime="20150709 15:20:28.166"></status>
</kw>
<msg timestamp="20150709 15:20:28.216" level="INFO">${ssh_connection} = 56</msg>
<status status="PASS" endtime="20150709 15:20:28.215" starttime="20150709 15:20:28.159"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:28.227" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:28.656" level="INFO">Read output: Last login: Thu Jul  9 13:20:27 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:28.657" starttime="20150709 15:20:28.225"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:28.659" starttime="20150709 15:20:28.217"></status>
</kw>
<msg timestamp="20150709 15:20:28.661" level="INFO">${ssh_connection} = 56</msg>
<status status="PASS" endtime="20150709 15:20:28.661" starttime="20150709 15:20:28.148"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:28.674" starttime="20150709 15:20:28.671"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:28.677" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor56.log'.</msg>
<status status="PASS" endtime="20150709 15:20:28.682" starttime="20150709 15:20:28.675"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:28.683" starttime="20150709 15:20:28.664"></status>
</kw>
<msg timestamp="20150709 15:20:28.685" level="INFO">${ssh_connection} = 56</msg>
<status status="PASS" endtime="20150709 15:20:28.684" starttime="20150709 15:20:28.136"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:28.698" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:28.699" starttime="20150709 15:20:28.686"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:28.716" starttime="20150709 15:20:28.714"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:28.725" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:28.724" starttime="20150709 15:20:28.717"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:28.732" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:28.733" starttime="20150709 15:20:28.726"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:28.744" starttime="20150709 15:20:28.741"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:28.746" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:28.787" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:28.789" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:28.788" starttime="20150709 15:20:28.745"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:28.792" starttime="20150709 15:20:28.790"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:28.795" starttime="20150709 15:20:28.793"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:28.798" starttime="20150709 15:20:28.796"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:28.802" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:28.866" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:28.868" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:28.868" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:28.867" starttime="20150709 15:20:28.799"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:28.876" starttime="20150709 15:20:28.869"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:28.879" starttime="20150709 15:20:28.877"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:28.881" starttime="20150709 15:20:28.880"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:28.884" starttime="20150709 15:20:28.883"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:28.887" starttime="20150709 15:20:28.885"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:28.890" starttime="20150709 15:20:28.888"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:28.893" starttime="20150709 15:20:28.891"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:28.896" starttime="20150709 15:20:28.895"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:28.899" starttime="20150709 15:20:28.897"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:28.902" starttime="20150709 15:20:28.900"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:28.905" starttime="20150709 15:20:28.903"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:28.906" starttime="20150709 15:20:28.734"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:28.909" level="INFO">Starting command 'cat tmpfilemonitor56.log'.</msg>
<status status="PASS" endtime="20150709 15:20:28.914" starttime="20150709 15:20:28.907"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:28.916" level="INFO">Reading output of command 'cat tmpfilemonitor56.log'.</msg>
<msg timestamp="20150709 15:20:28.948" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:28.950" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:28.949" starttime="20150709 15:20:28.915"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:28.954" level="INFO">Executing command 'rm tmpfilemonitor56.log'.</msg>
<msg timestamp="20150709 15:20:29.022" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:29.024" starttime="20150709 15:20:28.951"></status>
</kw>
<msg timestamp="20150709 15:20:29.028" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:29.026" starttime="20150709 15:20:28.708"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:29.035" starttime="20150709 15:20:29.029"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:29.046" starttime="20150709 15:20:29.043"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:29.049" starttime="20150709 15:20:29.047"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:29.050" starttime="20150709 15:20:29.037"></status>
</kw>
<msg timestamp="20150709 15:20:29.053" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:29.052" starttime="20150709 15:20:28.701"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:29.054" starttime="20150709 15:20:28.115"></status>
</kw>
<kw type="foritem" name="${i} = 57">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:29.059" level="INFO">
*********** Experiment: 57 ************</msg>
<status status="PASS" endtime="20150709 15:20:29.060" starttime="20150709 15:20:29.056"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:29.104" starttime="20150709 15:20:29.102"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:29.165" starttime="20150709 15:20:29.112"></status>
</kw>
<msg timestamp="20150709 15:20:29.167" level="INFO">${ssh_connection} = 57</msg>
<status status="PASS" endtime="20150709 15:20:29.167" starttime="20150709 15:20:29.105"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:29.177" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:29.616" level="INFO">Read output: Last login: Thu Jul  9 13:20:28 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:29.618" starttime="20150709 15:20:29.175"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:29.619" starttime="20150709 15:20:29.169"></status>
</kw>
<msg timestamp="20150709 15:20:29.621" level="INFO">${ssh_connection} = 57</msg>
<status status="PASS" endtime="20150709 15:20:29.621" starttime="20150709 15:20:29.093"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:29.633" starttime="20150709 15:20:29.631"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:29.637" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor57.log'.</msg>
<status status="PASS" endtime="20150709 15:20:29.641" starttime="20150709 15:20:29.634"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:29.643" starttime="20150709 15:20:29.624"></status>
</kw>
<msg timestamp="20150709 15:20:29.645" level="INFO">${ssh_connection} = 57</msg>
<status status="PASS" endtime="20150709 15:20:29.644" starttime="20150709 15:20:29.081"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:29.658" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:29.659" starttime="20150709 15:20:29.646"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:29.676" starttime="20150709 15:20:29.674"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:29.684" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:29.683" starttime="20150709 15:20:29.677"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:29.690" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:29.691" starttime="20150709 15:20:29.685"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:29.702" starttime="20150709 15:20:29.699"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:29.704" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:29.735" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:29.736" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:29.736" starttime="20150709 15:20:29.703"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:29.739" starttime="20150709 15:20:29.738"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:29.742" starttime="20150709 15:20:29.740"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:29.745" starttime="20150709 15:20:29.743"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:29.750" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:29.811" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:29.813" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:29.813" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:29.812" starttime="20150709 15:20:29.746"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:29.821" starttime="20150709 15:20:29.815"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:29.824" starttime="20150709 15:20:29.823"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:29.827" starttime="20150709 15:20:29.825"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:29.830" starttime="20150709 15:20:29.828"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:29.833" starttime="20150709 15:20:29.831"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:29.836" starttime="20150709 15:20:29.834"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:29.839" starttime="20150709 15:20:29.837"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:29.842" starttime="20150709 15:20:29.840"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:29.845" starttime="20150709 15:20:29.843"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:29.848" starttime="20150709 15:20:29.846"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:29.851" starttime="20150709 15:20:29.849"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:29.852" starttime="20150709 15:20:29.692"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:29.855" level="INFO">Starting command 'cat tmpfilemonitor57.log'.</msg>
<status status="PASS" endtime="20150709 15:20:29.860" starttime="20150709 15:20:29.853"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:29.862" level="INFO">Reading output of command 'cat tmpfilemonitor57.log'.</msg>
<msg timestamp="20150709 15:20:29.894" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:29.896" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:29.895" starttime="20150709 15:20:29.861"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:29.899" level="INFO">Executing command 'rm tmpfilemonitor57.log'.</msg>
<msg timestamp="20150709 15:20:29.960" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:29.961" starttime="20150709 15:20:29.897"></status>
</kw>
<msg timestamp="20150709 15:20:29.964" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:29.963" starttime="20150709 15:20:29.668"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:29.971" starttime="20150709 15:20:29.965"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:29.981" starttime="20150709 15:20:29.979"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:29.986" starttime="20150709 15:20:29.982"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:29.987" starttime="20150709 15:20:29.973"></status>
</kw>
<msg timestamp="20150709 15:20:29.989" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:29.989" starttime="20150709 15:20:29.661"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:29.990" starttime="20150709 15:20:29.055"></status>
</kw>
<kw type="foritem" name="${i} = 58">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:29.994" level="INFO">
*********** Experiment: 58 ************</msg>
<status status="PASS" endtime="20150709 15:20:29.995" starttime="20150709 15:20:29.991"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:30.036" starttime="20150709 15:20:30.034"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:30.088" starttime="20150709 15:20:30.043"></status>
</kw>
<msg timestamp="20150709 15:20:30.090" level="INFO">${ssh_connection} = 58</msg>
<status status="PASS" endtime="20150709 15:20:30.089" starttime="20150709 15:20:30.037"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:30.100" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:30.517" level="INFO">Read output: Last login: Thu Jul  9 13:20:29 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:30.518" starttime="20150709 15:20:30.097"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:30.519" starttime="20150709 15:20:30.091"></status>
</kw>
<msg timestamp="20150709 15:20:30.522" level="INFO">${ssh_connection} = 58</msg>
<status status="PASS" endtime="20150709 15:20:30.521" starttime="20150709 15:20:30.025"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:30.534" starttime="20150709 15:20:30.532"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:30.538" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor58.log'.</msg>
<status status="PASS" endtime="20150709 15:20:30.542" starttime="20150709 15:20:30.535"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:30.543" starttime="20150709 15:20:30.525"></status>
</kw>
<msg timestamp="20150709 15:20:30.545" level="INFO">${ssh_connection} = 58</msg>
<status status="PASS" endtime="20150709 15:20:30.545" starttime="20150709 15:20:30.013"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:30.558" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:30.559" starttime="20150709 15:20:30.546"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:30.577" starttime="20150709 15:20:30.574"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:30.585" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:30.584" starttime="20150709 15:20:30.578"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:30.591" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:30.592" starttime="20150709 15:20:30.586"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:30.602" starttime="20150709 15:20:30.600"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:30.605" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:30.642" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:30.644" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:30.643" starttime="20150709 15:20:30.604"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:30.647" starttime="20150709 15:20:30.645"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:30.649" starttime="20150709 15:20:30.648"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:30.652" starttime="20150709 15:20:30.650"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:30.656" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:30.725" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:30.727" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:30.727" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:30.726" starttime="20150709 15:20:30.653"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:30.735" starttime="20150709 15:20:30.729"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:30.738" starttime="20150709 15:20:30.736"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:30.741" starttime="20150709 15:20:30.739"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:30.744" starttime="20150709 15:20:30.742"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:30.747" starttime="20150709 15:20:30.745"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:30.750" starttime="20150709 15:20:30.748"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:30.753" starttime="20150709 15:20:30.751"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:30.756" starttime="20150709 15:20:30.754"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:30.759" starttime="20150709 15:20:30.757"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:30.762" starttime="20150709 15:20:30.760"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:30.765" starttime="20150709 15:20:30.763"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:30.766" starttime="20150709 15:20:30.594"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:30.769" level="INFO">Starting command 'cat tmpfilemonitor58.log'.</msg>
<status status="PASS" endtime="20150709 15:20:30.773" starttime="20150709 15:20:30.767"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:30.776" level="INFO">Reading output of command 'cat tmpfilemonitor58.log'.</msg>
<msg timestamp="20150709 15:20:30.799" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:30.801" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:30.800" starttime="20150709 15:20:30.774"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:30.804" level="INFO">Executing command 'rm tmpfilemonitor58.log'.</msg>
<msg timestamp="20150709 15:20:30.866" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:30.867" starttime="20150709 15:20:30.802"></status>
</kw>
<msg timestamp="20150709 15:20:30.870" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:30.869" starttime="20150709 15:20:30.568"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:30.877" starttime="20150709 15:20:30.871"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:30.887" starttime="20150709 15:20:30.885"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:30.892" starttime="20150709 15:20:30.889"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:30.893" starttime="20150709 15:20:30.879"></status>
</kw>
<msg timestamp="20150709 15:20:30.895" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:30.895" starttime="20150709 15:20:30.561"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:30.896" starttime="20150709 15:20:29.991"></status>
</kw>
<kw type="foritem" name="${i} = 59">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:30.901" level="INFO">
*********** Experiment: 59 ************</msg>
<status status="PASS" endtime="20150709 15:20:30.902" starttime="20150709 15:20:30.898"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:30.941" starttime="20150709 15:20:30.939"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:31.001" starttime="20150709 15:20:30.949"></status>
</kw>
<msg timestamp="20150709 15:20:31.005" level="INFO">${ssh_connection} = 59</msg>
<status status="PASS" endtime="20150709 15:20:31.003" starttime="20150709 15:20:30.942"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:31.015" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:31.447" level="INFO">Read output: Last login: Thu Jul  9 13:20:30 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:31.448" starttime="20150709 15:20:31.012"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:31.449" starttime="20150709 15:20:31.006"></status>
</kw>
<msg timestamp="20150709 15:20:31.451" level="INFO">${ssh_connection} = 59</msg>
<status status="PASS" endtime="20150709 15:20:31.450" starttime="20150709 15:20:30.930"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:31.456" starttime="20150709 15:20:31.455"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:31.458" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor59.log'.</msg>
<status status="PASS" endtime="20150709 15:20:31.461" starttime="20150709 15:20:31.456"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:31.461" starttime="20150709 15:20:31.452"></status>
</kw>
<msg timestamp="20150709 15:20:31.462" level="INFO">${ssh_connection} = 59</msg>
<status status="PASS" endtime="20150709 15:20:31.462" starttime="20150709 15:20:30.918"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:31.474" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:31.475" starttime="20150709 15:20:31.463"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:31.492" starttime="20150709 15:20:31.490"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:31.500" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:31.499" starttime="20150709 15:20:31.493"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:31.506" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:31.507" starttime="20150709 15:20:31.501"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:31.519" starttime="20150709 15:20:31.516"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:31.522" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:31.553" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:31.555" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:31.554" starttime="20150709 15:20:31.520"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:31.557" starttime="20150709 15:20:31.556"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:31.560" starttime="20150709 15:20:31.559"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:31.563" starttime="20150709 15:20:31.561"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:31.567" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:31.626" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:31.628" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:31.629" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:31.627" starttime="20150709 15:20:31.564"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:31.636" starttime="20150709 15:20:31.630"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:31.639" starttime="20150709 15:20:31.637"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:31.642" starttime="20150709 15:20:31.640"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:31.644" starttime="20150709 15:20:31.643"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:31.647" starttime="20150709 15:20:31.646"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:31.650" starttime="20150709 15:20:31.648"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:31.653" starttime="20150709 15:20:31.651"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:31.656" starttime="20150709 15:20:31.654"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:31.659" starttime="20150709 15:20:31.657"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:31.662" starttime="20150709 15:20:31.660"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:31.665" starttime="20150709 15:20:31.663"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:31.666" starttime="20150709 15:20:31.509"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:31.669" level="INFO">Starting command 'cat tmpfilemonitor59.log'.</msg>
<status status="PASS" endtime="20150709 15:20:31.673" starttime="20150709 15:20:31.667"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:31.676" level="INFO">Reading output of command 'cat tmpfilemonitor59.log'.</msg>
<msg timestamp="20150709 15:20:31.708" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:31.710" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:31.709" starttime="20150709 15:20:31.675"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:31.714" level="INFO">Executing command 'rm tmpfilemonitor59.log'.</msg>
<msg timestamp="20150709 15:20:31.787" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:31.788" starttime="20150709 15:20:31.711"></status>
</kw>
<msg timestamp="20150709 15:20:31.791" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:31.790" starttime="20150709 15:20:31.484"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:31.798" starttime="20150709 15:20:31.792"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:31.808" starttime="20150709 15:20:31.805"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:31.811" starttime="20150709 15:20:31.809"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:31.812" starttime="20150709 15:20:31.799"></status>
</kw>
<msg timestamp="20150709 15:20:31.814" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:31.814" starttime="20150709 15:20:31.477"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:31.815" starttime="20150709 15:20:30.898"></status>
</kw>
<kw type="foritem" name="${i} = 60">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:31.820" level="INFO">
*********** Experiment: 60 ************</msg>
<status status="PASS" endtime="20150709 15:20:31.821" starttime="20150709 15:20:31.817"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:31.859" starttime="20150709 15:20:31.857"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:31.920" starttime="20150709 15:20:31.867"></status>
</kw>
<msg timestamp="20150709 15:20:31.922" level="INFO">${ssh_connection} = 60</msg>
<status status="PASS" endtime="20150709 15:20:31.921" starttime="20150709 15:20:31.860"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:31.933" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:32.483" level="INFO">Read output: Last login: Thu Jul  9 13:20:31 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:32.485" starttime="20150709 15:20:31.930"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:32.487" starttime="20150709 15:20:31.923"></status>
</kw>
<msg timestamp="20150709 15:20:32.491" level="INFO">${ssh_connection} = 60</msg>
<status status="PASS" endtime="20150709 15:20:32.490" starttime="20150709 15:20:31.849"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:32.503" starttime="20150709 15:20:32.501"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:32.507" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor60.log'.</msg>
<status status="PASS" endtime="20150709 15:20:32.513" starttime="20150709 15:20:32.504"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:32.514" starttime="20150709 15:20:32.494"></status>
</kw>
<msg timestamp="20150709 15:20:32.517" level="INFO">${ssh_connection} = 60</msg>
<status status="PASS" endtime="20150709 15:20:32.515" starttime="20150709 15:20:31.837"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:32.530" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:32.531" starttime="20150709 15:20:32.518"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:32.548" starttime="20150709 15:20:32.546"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:32.556" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:32.556" starttime="20150709 15:20:32.549"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:32.562" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:32.563" starttime="20150709 15:20:32.558"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:32.574" starttime="20150709 15:20:32.571"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:32.576" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:32.621" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:32.622" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:32.622" starttime="20150709 15:20:32.575"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:32.625" starttime="20150709 15:20:32.623"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:32.628" starttime="20150709 15:20:32.626"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:32.631" starttime="20150709 15:20:32.629"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:32.635" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:32.700" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:32.702" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:32.702" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:32.701" starttime="20150709 15:20:32.632"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:32.709" starttime="20150709 15:20:32.703"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:32.712" starttime="20150709 15:20:32.711"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:32.715" starttime="20150709 15:20:32.713"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:32.718" starttime="20150709 15:20:32.716"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:32.721" starttime="20150709 15:20:32.719"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:32.724" starttime="20150709 15:20:32.722"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:32.727" starttime="20150709 15:20:32.725"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:32.730" starttime="20150709 15:20:32.728"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:32.733" starttime="20150709 15:20:32.731"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:32.735" starttime="20150709 15:20:32.734"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:32.738" starttime="20150709 15:20:32.736"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:32.739" starttime="20150709 15:20:32.565"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:32.742" level="INFO">Starting command 'cat tmpfilemonitor60.log'.</msg>
<status status="PASS" endtime="20150709 15:20:32.747" starttime="20150709 15:20:32.740"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:32.749" level="INFO">Reading output of command 'cat tmpfilemonitor60.log'.</msg>
<msg timestamp="20150709 15:20:32.786" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:32.788" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:32.787" starttime="20150709 15:20:32.748"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:32.791" level="INFO">Executing command 'rm tmpfilemonitor60.log'.</msg>
<msg timestamp="20150709 15:20:32.865" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:32.866" starttime="20150709 15:20:32.789"></status>
</kw>
<msg timestamp="20150709 15:20:32.869" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:32.868" starttime="20150709 15:20:32.540"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:32.876" starttime="20150709 15:20:32.870"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:32.886" starttime="20150709 15:20:32.884"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:32.889" starttime="20150709 15:20:32.887"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:32.891" starttime="20150709 15:20:32.878"></status>
</kw>
<msg timestamp="20150709 15:20:32.893" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:32.892" starttime="20150709 15:20:32.533"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:32.893" starttime="20150709 15:20:31.817"></status>
</kw>
<kw type="foritem" name="${i} = 61">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:32.898" level="INFO">
*********** Experiment: 61 ************</msg>
<status status="PASS" endtime="20150709 15:20:32.899" starttime="20150709 15:20:32.895"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:32.937" starttime="20150709 15:20:32.935"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:32.999" starttime="20150709 15:20:32.944"></status>
</kw>
<msg timestamp="20150709 15:20:33.002" level="INFO">${ssh_connection} = 61</msg>
<status status="PASS" endtime="20150709 15:20:33.000" starttime="20150709 15:20:32.938"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:33.013" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:33.431" level="INFO">Read output: Last login: Thu Jul  9 13:20:32 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:33.432" starttime="20150709 15:20:33.011"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:33.433" starttime="20150709 15:20:33.004"></status>
</kw>
<msg timestamp="20150709 15:20:33.437" level="INFO">${ssh_connection} = 61</msg>
<status status="PASS" endtime="20150709 15:20:33.435" starttime="20150709 15:20:32.926"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:33.448" starttime="20150709 15:20:33.446"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:33.449" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor61.log'.</msg>
<status status="PASS" endtime="20150709 15:20:33.453" starttime="20150709 15:20:33.448"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:33.453" starttime="20150709 15:20:33.439"></status>
</kw>
<msg timestamp="20150709 15:20:33.455" level="INFO">${ssh_connection} = 61</msg>
<status status="PASS" endtime="20150709 15:20:33.454" starttime="20150709 15:20:32.915"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:33.467" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:33.467" starttime="20150709 15:20:33.456"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:33.479" starttime="20150709 15:20:33.478"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:33.483" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:33.482" starttime="20150709 15:20:33.479"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:33.487" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:33.487" starttime="20150709 15:20:33.483"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:33.492" starttime="20150709 15:20:33.491"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:33.493" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:33.537" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:33.538" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:33.538" starttime="20150709 15:20:33.493"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:33.541" starttime="20150709 15:20:33.539"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:33.544" starttime="20150709 15:20:33.542"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:33.547" starttime="20150709 15:20:33.545"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:33.551" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:33.611" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:33.613" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:33.614" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:33.612" starttime="20150709 15:20:33.548"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:33.621" starttime="20150709 15:20:33.615"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:33.624" starttime="20150709 15:20:33.622"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:33.627" starttime="20150709 15:20:33.625"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:33.630" starttime="20150709 15:20:33.628"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:33.633" starttime="20150709 15:20:33.631"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:33.636" starttime="20150709 15:20:33.634"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:33.639" starttime="20150709 15:20:33.637"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:33.642" starttime="20150709 15:20:33.640"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:33.645" starttime="20150709 15:20:33.643"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:33.648" starttime="20150709 15:20:33.646"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:33.650" starttime="20150709 15:20:33.649"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:33.652" starttime="20150709 15:20:33.488"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:33.655" level="INFO">Starting command 'cat tmpfilemonitor61.log'.</msg>
<status status="PASS" endtime="20150709 15:20:33.660" starttime="20150709 15:20:33.653"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:33.662" level="INFO">Reading output of command 'cat tmpfilemonitor61.log'.</msg>
<msg timestamp="20150709 15:20:33.691" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:33.692" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:33.692" starttime="20150709 15:20:33.661"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:33.696" level="INFO">Executing command 'rm tmpfilemonitor61.log'.</msg>
<msg timestamp="20150709 15:20:33.766" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:33.767" starttime="20150709 15:20:33.693"></status>
</kw>
<msg timestamp="20150709 15:20:33.769" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:33.769" starttime="20150709 15:20:33.475"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:33.776" starttime="20150709 15:20:33.770"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:33.787" starttime="20150709 15:20:33.784"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:33.791" starttime="20150709 15:20:33.788"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:33.792" starttime="20150709 15:20:33.778"></status>
</kw>
<msg timestamp="20150709 15:20:33.795" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:33.794" starttime="20150709 15:20:33.468"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:33.795" starttime="20150709 15:20:32.895"></status>
</kw>
<kw type="foritem" name="${i} = 62">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:33.800" level="INFO">
*********** Experiment: 62 ************</msg>
<status status="PASS" endtime="20150709 15:20:33.801" starttime="20150709 15:20:33.797"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:33.840" starttime="20150709 15:20:33.838"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:33.900" starttime="20150709 15:20:33.847"></status>
</kw>
<msg timestamp="20150709 15:20:33.902" level="INFO">${ssh_connection} = 62</msg>
<status status="PASS" endtime="20150709 15:20:33.901" starttime="20150709 15:20:33.841"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:33.912" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:34.498" level="INFO">Read output: Last login: Thu Jul  9 13:20:33 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:34.500" starttime="20150709 15:20:33.910"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:34.502" starttime="20150709 15:20:33.903"></status>
</kw>
<msg timestamp="20150709 15:20:34.506" level="INFO">${ssh_connection} = 62</msg>
<status status="PASS" endtime="20150709 15:20:34.504" starttime="20150709 15:20:33.829"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:34.518" starttime="20150709 15:20:34.515"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:34.521" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor62.log'.</msg>
<status status="PASS" endtime="20150709 15:20:34.526" starttime="20150709 15:20:34.519"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:34.527" starttime="20150709 15:20:34.508"></status>
</kw>
<msg timestamp="20150709 15:20:34.530" level="INFO">${ssh_connection} = 62</msg>
<status status="PASS" endtime="20150709 15:20:34.528" starttime="20150709 15:20:33.817"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:34.544" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:34.545" starttime="20150709 15:20:34.531"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:34.562" starttime="20150709 15:20:34.560"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:34.571" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:34.570" starttime="20150709 15:20:34.564"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:34.578" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:34.579" starttime="20150709 15:20:34.572"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:34.589" starttime="20150709 15:20:34.587"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:34.592" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:34.635" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:34.637" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:34.636" starttime="20150709 15:20:34.590"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:34.640" starttime="20150709 15:20:34.638"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:34.642" starttime="20150709 15:20:34.641"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:34.655" starttime="20150709 15:20:34.644"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:34.659" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:34.721" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:34.723" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:34.724" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:34.722" starttime="20150709 15:20:34.656"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:34.730" starttime="20150709 15:20:34.725"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:34.733" starttime="20150709 15:20:34.732"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:34.736" starttime="20150709 15:20:34.734"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:34.739" starttime="20150709 15:20:34.737"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:34.742" starttime="20150709 15:20:34.740"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:34.745" starttime="20150709 15:20:34.743"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:34.748" starttime="20150709 15:20:34.746"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:34.751" starttime="20150709 15:20:34.749"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:34.754" starttime="20150709 15:20:34.752"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:34.757" starttime="20150709 15:20:34.755"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:34.759" starttime="20150709 15:20:34.758"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:34.761" starttime="20150709 15:20:34.581"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:34.764" level="INFO">Starting command 'cat tmpfilemonitor62.log'.</msg>
<status status="PASS" endtime="20150709 15:20:34.768" starttime="20150709 15:20:34.762"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:34.771" level="INFO">Reading output of command 'cat tmpfilemonitor62.log'.</msg>
<msg timestamp="20150709 15:20:34.796" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:34.798" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:34.797" starttime="20150709 15:20:34.769"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:34.801" level="INFO">Executing command 'rm tmpfilemonitor62.log'.</msg>
<msg timestamp="20150709 15:20:34.866" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:34.867" starttime="20150709 15:20:34.799"></status>
</kw>
<msg timestamp="20150709 15:20:34.870" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:34.869" starttime="20150709 15:20:34.554"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:34.877" starttime="20150709 15:20:34.871"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:34.888" starttime="20150709 15:20:34.885"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:34.891" starttime="20150709 15:20:34.889"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:34.892" starttime="20150709 15:20:34.879"></status>
</kw>
<msg timestamp="20150709 15:20:34.894" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:34.894" starttime="20150709 15:20:34.547"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:34.895" starttime="20150709 15:20:33.797"></status>
</kw>
<kw type="foritem" name="${i} = 63">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:34.899" level="INFO">
*********** Experiment: 63 ************</msg>
<status status="PASS" endtime="20150709 15:20:34.901" starttime="20150709 15:20:34.897"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:34.939" starttime="20150709 15:20:34.937"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:34.993" starttime="20150709 15:20:34.947"></status>
</kw>
<msg timestamp="20150709 15:20:34.995" level="INFO">${ssh_connection} = 63</msg>
<status status="PASS" endtime="20150709 15:20:34.994" starttime="20150709 15:20:34.940"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:35.006" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:35.421" level="INFO">Read output: Last login: Thu Jul  9 13:20:34 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:35.422" starttime="20150709 15:20:35.003"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:35.423" starttime="20150709 15:20:34.996"></status>
</kw>
<msg timestamp="20150709 15:20:35.427" level="INFO">${ssh_connection} = 63</msg>
<status status="PASS" endtime="20150709 15:20:35.426" starttime="20150709 15:20:34.928"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:35.439" starttime="20150709 15:20:35.437"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:35.443" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor63.log'.</msg>
<status status="PASS" endtime="20150709 15:20:35.447" starttime="20150709 15:20:35.441"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:35.448" starttime="20150709 15:20:35.430"></status>
</kw>
<msg timestamp="20150709 15:20:35.450" level="INFO">${ssh_connection} = 63</msg>
<status status="PASS" endtime="20150709 15:20:35.449" starttime="20150709 15:20:34.917"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:35.461" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:35.461" starttime="20150709 15:20:35.450"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:35.469" starttime="20150709 15:20:35.468"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:35.473" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:35.473" starttime="20150709 15:20:35.470"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:35.477" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:35.477" starttime="20150709 15:20:35.474"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:35.482" starttime="20150709 15:20:35.481"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:35.483" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:35.520" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:35.522" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:35.521" starttime="20150709 15:20:35.482"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:35.525" starttime="20150709 15:20:35.523"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:35.528" starttime="20150709 15:20:35.526"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:35.531" starttime="20150709 15:20:35.529"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:35.535" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:35.600" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:35.601" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:35.602" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:35.601" starttime="20150709 15:20:35.532"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:35.609" starttime="20150709 15:20:35.603"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:35.613" starttime="20150709 15:20:35.611"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:35.615" starttime="20150709 15:20:35.614"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:35.618" starttime="20150709 15:20:35.617"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:35.621" starttime="20150709 15:20:35.620"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:35.624" starttime="20150709 15:20:35.622"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:35.628" starttime="20150709 15:20:35.626"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:35.631" starttime="20150709 15:20:35.629"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:35.634" starttime="20150709 15:20:35.632"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:35.636" starttime="20150709 15:20:35.635"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:35.639" starttime="20150709 15:20:35.637"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:35.640" starttime="20150709 15:20:35.478"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:35.644" level="INFO">Starting command 'cat tmpfilemonitor63.log'.</msg>
<status status="PASS" endtime="20150709 15:20:35.648" starttime="20150709 15:20:35.641"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:35.651" level="INFO">Reading output of command 'cat tmpfilemonitor63.log'.</msg>
<msg timestamp="20150709 15:20:35.685" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:35.686" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:35.685" starttime="20150709 15:20:35.649"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:35.689" level="INFO">Executing command 'rm tmpfilemonitor63.log'.</msg>
<msg timestamp="20150709 15:20:35.761" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:35.762" starttime="20150709 15:20:35.687"></status>
</kw>
<msg timestamp="20150709 15:20:35.764" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:35.763" starttime="20150709 15:20:35.466"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:35.772" starttime="20150709 15:20:35.765"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:35.782" starttime="20150709 15:20:35.780"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:35.787" starttime="20150709 15:20:35.784"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:35.788" starttime="20150709 15:20:35.773"></status>
</kw>
<msg timestamp="20150709 15:20:35.790" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:35.789" starttime="20150709 15:20:35.462"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:35.791" starttime="20150709 15:20:34.896"></status>
</kw>
<kw type="foritem" name="${i} = 64">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:35.795" level="INFO">
*********** Experiment: 64 ************</msg>
<status status="PASS" endtime="20150709 15:20:35.796" starttime="20150709 15:20:35.793"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:35.836" starttime="20150709 15:20:35.834"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:35.896" starttime="20150709 15:20:35.843"></status>
</kw>
<msg timestamp="20150709 15:20:35.898" level="INFO">${ssh_connection} = 64</msg>
<status status="PASS" endtime="20150709 15:20:35.897" starttime="20150709 15:20:35.837"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:35.909" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:36.320" level="INFO">Read output: Last login: Thu Jul  9 13:20:35 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:36.322" starttime="20150709 15:20:35.907"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:36.324" starttime="20150709 15:20:35.899"></status>
</kw>
<msg timestamp="20150709 15:20:36.328" level="INFO">${ssh_connection} = 64</msg>
<status status="PASS" endtime="20150709 15:20:36.327" starttime="20150709 15:20:35.825"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:36.341" starttime="20150709 15:20:36.338"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:36.344" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor64.log'.</msg>
<status status="PASS" endtime="20150709 15:20:36.349" starttime="20150709 15:20:36.342"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:36.350" starttime="20150709 15:20:36.331"></status>
</kw>
<msg timestamp="20150709 15:20:36.353" level="INFO">${ssh_connection} = 64</msg>
<status status="PASS" endtime="20150709 15:20:36.352" starttime="20150709 15:20:35.813"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:36.366" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:36.367" starttime="20150709 15:20:36.354"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:36.384" starttime="20150709 15:20:36.382"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:36.393" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:36.392" starttime="20150709 15:20:36.386"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:36.398" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:36.399" starttime="20150709 15:20:36.394"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:36.410" starttime="20150709 15:20:36.407"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:36.413" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:36.449" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:36.451" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:36.450" starttime="20150709 15:20:36.411"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:36.454" starttime="20150709 15:20:36.452"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:36.457" starttime="20150709 15:20:36.455"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:36.459" starttime="20150709 15:20:36.458"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:36.463" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:36.530" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:36.532" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:36.533" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:36.531" starttime="20150709 15:20:36.460"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:36.540" starttime="20150709 15:20:36.534"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:36.543" starttime="20150709 15:20:36.541"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:36.546" starttime="20150709 15:20:36.544"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:36.549" starttime="20150709 15:20:36.547"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:36.551" starttime="20150709 15:20:36.550"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:36.554" starttime="20150709 15:20:36.552"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:36.557" starttime="20150709 15:20:36.555"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:36.560" starttime="20150709 15:20:36.558"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:36.563" starttime="20150709 15:20:36.561"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:36.566" starttime="20150709 15:20:36.564"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:36.568" starttime="20150709 15:20:36.567"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:36.569" starttime="20150709 15:20:36.400"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:36.573" level="INFO">Starting command 'cat tmpfilemonitor64.log'.</msg>
<status status="PASS" endtime="20150709 15:20:36.577" starttime="20150709 15:20:36.571"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:36.580" level="INFO">Reading output of command 'cat tmpfilemonitor64.log'.</msg>
<msg timestamp="20150709 15:20:36.603" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:36.604" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:36.603" starttime="20150709 15:20:36.578"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:36.607" level="INFO">Executing command 'rm tmpfilemonitor64.log'.</msg>
<msg timestamp="20150709 15:20:36.671" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:36.672" starttime="20150709 15:20:36.605"></status>
</kw>
<msg timestamp="20150709 15:20:36.674" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:36.673" starttime="20150709 15:20:36.376"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:36.681" starttime="20150709 15:20:36.675"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:36.691" starttime="20150709 15:20:36.689"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:36.696" starttime="20150709 15:20:36.692"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:36.697" starttime="20150709 15:20:36.683"></status>
</kw>
<msg timestamp="20150709 15:20:36.700" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:36.699" starttime="20150709 15:20:36.369"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:36.700" starttime="20150709 15:20:35.792"></status>
</kw>
<kw type="foritem" name="${i} = 65">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:36.705" level="INFO">
*********** Experiment: 65 ************</msg>
<status status="PASS" endtime="20150709 15:20:36.706" starttime="20150709 15:20:36.703"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:36.744" starttime="20150709 15:20:36.742"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:36.797" starttime="20150709 15:20:36.751"></status>
</kw>
<msg timestamp="20150709 15:20:36.799" level="INFO">${ssh_connection} = 65</msg>
<status status="PASS" endtime="20150709 15:20:36.798" starttime="20150709 15:20:36.745"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:36.809" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:37.251" level="INFO">Read output: Last login: Thu Jul  9 13:20:36 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:37.252" starttime="20150709 15:20:36.807"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:37.253" starttime="20150709 15:20:36.800"></status>
</kw>
<msg timestamp="20150709 15:20:37.255" level="INFO">${ssh_connection} = 65</msg>
<status status="PASS" endtime="20150709 15:20:37.254" starttime="20150709 15:20:36.734"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:37.260" starttime="20150709 15:20:37.259"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:37.262" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor65.log'.</msg>
<status status="PASS" endtime="20150709 15:20:37.265" starttime="20150709 15:20:37.261"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:37.266" starttime="20150709 15:20:37.256"></status>
</kw>
<msg timestamp="20150709 15:20:37.267" level="INFO">${ssh_connection} = 65</msg>
<status status="PASS" endtime="20150709 15:20:37.267" starttime="20150709 15:20:36.722"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:37.279" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:37.279" starttime="20150709 15:20:37.268"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:37.287" starttime="20150709 15:20:37.286"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:37.291" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:37.290" starttime="20150709 15:20:37.287"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:37.295" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:37.296" starttime="20150709 15:20:37.291"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:37.301" starttime="20150709 15:20:37.299"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:37.302" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:37.338" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:37.340" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:37.340" starttime="20150709 15:20:37.301"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:37.343" starttime="20150709 15:20:37.341"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:37.346" starttime="20150709 15:20:37.344"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:37.349" starttime="20150709 15:20:37.347"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:37.353" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:37.419" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:37.421" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:37.422" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:37.420" starttime="20150709 15:20:37.350"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:37.430" starttime="20150709 15:20:37.424"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:37.433" starttime="20150709 15:20:37.431"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:37.436" starttime="20150709 15:20:37.434"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:37.439" starttime="20150709 15:20:37.437"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:37.442" starttime="20150709 15:20:37.440"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:37.445" starttime="20150709 15:20:37.443"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:37.448" starttime="20150709 15:20:37.446"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:37.451" starttime="20150709 15:20:37.449"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:37.454" starttime="20150709 15:20:37.452"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:37.456" starttime="20150709 15:20:37.455"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:37.459" starttime="20150709 15:20:37.457"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:37.460" starttime="20150709 15:20:37.297"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:37.463" level="INFO">Starting command 'cat tmpfilemonitor65.log'.</msg>
<status status="PASS" endtime="20150709 15:20:37.467" starttime="20150709 15:20:37.461"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:37.470" level="INFO">Reading output of command 'cat tmpfilemonitor65.log'.</msg>
<msg timestamp="20150709 15:20:37.511" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:37.514" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:37.513" starttime="20150709 15:20:37.468"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:37.518" level="INFO">Executing command 'rm tmpfilemonitor65.log'.</msg>
<msg timestamp="20150709 15:20:37.585" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:37.587" starttime="20150709 15:20:37.515"></status>
</kw>
<msg timestamp="20150709 15:20:37.589" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:37.589" starttime="20150709 15:20:37.283"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:37.598" starttime="20150709 15:20:37.591"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:37.609" starttime="20150709 15:20:37.606"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:37.612" starttime="20150709 15:20:37.610"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:37.613" starttime="20150709 15:20:37.600"></status>
</kw>
<msg timestamp="20150709 15:20:37.615" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:37.614" starttime="20150709 15:20:37.280"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:37.616" starttime="20150709 15:20:36.702"></status>
</kw>
<kw type="foritem" name="${i} = 66">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:37.620" level="INFO">
*********** Experiment: 66 ************</msg>
<status status="PASS" endtime="20150709 15:20:37.622" starttime="20150709 15:20:37.618"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:37.660" starttime="20150709 15:20:37.658"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:37.722" starttime="20150709 15:20:37.668"></status>
</kw>
<msg timestamp="20150709 15:20:37.724" level="INFO">${ssh_connection} = 66</msg>
<status status="PASS" endtime="20150709 15:20:37.723" starttime="20150709 15:20:37.662"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:37.735" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:38.202" level="INFO">Read output: Last login: Thu Jul  9 13:20:37 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:38.203" starttime="20150709 15:20:37.732"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:38.204" starttime="20150709 15:20:37.725"></status>
</kw>
<msg timestamp="20150709 15:20:38.206" level="INFO">${ssh_connection} = 66</msg>
<status status="PASS" endtime="20150709 15:20:38.205" starttime="20150709 15:20:37.650"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:38.211" starttime="20150709 15:20:38.210"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:38.213" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor66.log'.</msg>
<status status="PASS" endtime="20150709 15:20:38.219" starttime="20150709 15:20:38.212"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:38.220" starttime="20150709 15:20:38.207"></status>
</kw>
<msg timestamp="20150709 15:20:38.221" level="INFO">${ssh_connection} = 66</msg>
<status status="PASS" endtime="20150709 15:20:38.221" starttime="20150709 15:20:37.638"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:38.233" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:38.234" starttime="20150709 15:20:38.222"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:38.251" starttime="20150709 15:20:38.248"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:38.258" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:38.257" starttime="20150709 15:20:38.252"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:38.264" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:38.265" starttime="20150709 15:20:38.259"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:38.275" starttime="20150709 15:20:38.272"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:38.277" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:38.317" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:38.318" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:38.318" starttime="20150709 15:20:38.276"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:38.321" starttime="20150709 15:20:38.319"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:38.324" starttime="20150709 15:20:38.322"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:38.327" starttime="20150709 15:20:38.325"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:38.331" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:38.398" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:38.400" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:38.401" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:38.399" starttime="20150709 15:20:38.328"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:38.407" starttime="20150709 15:20:38.402"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:38.410" starttime="20150709 15:20:38.409"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:38.413" starttime="20150709 15:20:38.411"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:38.416" starttime="20150709 15:20:38.414"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:38.419" starttime="20150709 15:20:38.417"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:38.421" starttime="20150709 15:20:38.420"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:38.424" starttime="20150709 15:20:38.422"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:38.427" starttime="20150709 15:20:38.425"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:38.430" starttime="20150709 15:20:38.428"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:38.433" starttime="20150709 15:20:38.431"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:38.435" starttime="20150709 15:20:38.434"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:38.436" starttime="20150709 15:20:38.266"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:38.440" level="INFO">Starting command 'cat tmpfilemonitor66.log'.</msg>
<status status="PASS" endtime="20150709 15:20:38.444" starttime="20150709 15:20:38.437"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:38.447" level="INFO">Reading output of command 'cat tmpfilemonitor66.log'.</msg>
<msg timestamp="20150709 15:20:38.470" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:38.472" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:38.471" starttime="20150709 15:20:38.445"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:38.475" level="INFO">Executing command 'rm tmpfilemonitor66.log'.</msg>
<msg timestamp="20150709 15:20:38.540" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:38.541" starttime="20150709 15:20:38.473"></status>
</kw>
<msg timestamp="20150709 15:20:38.543" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:38.543" starttime="20150709 15:20:38.243"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:38.551" starttime="20150709 15:20:38.545"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:38.561" starttime="20150709 15:20:38.558"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:38.564" starttime="20150709 15:20:38.562"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:38.565" starttime="20150709 15:20:38.552"></status>
</kw>
<msg timestamp="20150709 15:20:38.567" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:38.566" starttime="20150709 15:20:38.236"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:38.568" starttime="20150709 15:20:37.617"></status>
</kw>
<kw type="foritem" name="${i} = 67">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:38.572" level="INFO">
*********** Experiment: 67 ************</msg>
<status status="PASS" endtime="20150709 15:20:38.574" starttime="20150709 15:20:38.570"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:38.611" starttime="20150709 15:20:38.609"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:38.671" starttime="20150709 15:20:38.619"></status>
</kw>
<msg timestamp="20150709 15:20:38.674" level="INFO">${ssh_connection} = 67</msg>
<status status="PASS" endtime="20150709 15:20:38.673" starttime="20150709 15:20:38.612"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:38.685" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:39.097" level="INFO">Read output: Last login: Thu Jul  9 13:20:38 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:39.099" starttime="20150709 15:20:38.683"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:39.099" starttime="20150709 15:20:38.675"></status>
</kw>
<msg timestamp="20150709 15:20:39.101" level="INFO">${ssh_connection} = 67</msg>
<status status="PASS" endtime="20150709 15:20:39.101" starttime="20150709 15:20:38.601"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:39.107" starttime="20150709 15:20:39.106"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:39.109" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor67.log'.</msg>
<status status="PASS" endtime="20150709 15:20:39.112" starttime="20150709 15:20:39.107"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:39.112" starttime="20150709 15:20:39.102"></status>
</kw>
<msg timestamp="20150709 15:20:39.114" level="INFO">${ssh_connection} = 67</msg>
<status status="PASS" endtime="20150709 15:20:39.113" starttime="20150709 15:20:38.590"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:39.125" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:39.125" starttime="20150709 15:20:39.114"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:39.133" starttime="20150709 15:20:39.132"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:39.136" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:39.136" starttime="20150709 15:20:39.133"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:39.140" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:39.141" starttime="20150709 15:20:39.137"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:39.145" starttime="20150709 15:20:39.144"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:39.146" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:39.198" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:39.200" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:39.199" starttime="20150709 15:20:39.146"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:39.202" starttime="20150709 15:20:39.201"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:39.205" starttime="20150709 15:20:39.203"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:39.207" starttime="20150709 15:20:39.206"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:39.210" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:39.278" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:39.280" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:39.280" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:39.279" starttime="20150709 15:20:39.208"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:39.287" starttime="20150709 15:20:39.281"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:39.289" starttime="20150709 15:20:39.288"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:39.292" starttime="20150709 15:20:39.290"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:39.294" starttime="20150709 15:20:39.292"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:39.296" starttime="20150709 15:20:39.295"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:39.298" starttime="20150709 15:20:39.297"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:39.300" starttime="20150709 15:20:39.299"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:39.303" starttime="20150709 15:20:39.301"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:39.305" starttime="20150709 15:20:39.303"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:39.307" starttime="20150709 15:20:39.306"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:39.309" starttime="20150709 15:20:39.308"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:39.310" starttime="20150709 15:20:39.141"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:39.312" level="INFO">Starting command 'cat tmpfilemonitor67.log'.</msg>
<status status="PASS" endtime="20150709 15:20:39.316" starttime="20150709 15:20:39.311"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:39.318" level="INFO">Reading output of command 'cat tmpfilemonitor67.log'.</msg>
<msg timestamp="20150709 15:20:39.348" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:39.350" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:39.349" starttime="20150709 15:20:39.317"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:39.353" level="INFO">Executing command 'rm tmpfilemonitor67.log'.</msg>
<msg timestamp="20150709 15:20:39.420" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:39.420" starttime="20150709 15:20:39.351"></status>
</kw>
<msg timestamp="20150709 15:20:39.423" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:39.422" starttime="20150709 15:20:39.129"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:39.429" starttime="20150709 15:20:39.424"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:39.440" starttime="20150709 15:20:39.437"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:39.444" starttime="20150709 15:20:39.441"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:39.445" starttime="20150709 15:20:39.431"></status>
</kw>
<msg timestamp="20150709 15:20:39.448" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:39.447" starttime="20150709 15:20:39.126"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:39.448" starttime="20150709 15:20:38.569"></status>
</kw>
<kw type="foritem" name="${i} = 68">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:39.453" level="INFO">
*********** Experiment: 68 ************</msg>
<status status="PASS" endtime="20150709 15:20:39.454" starttime="20150709 15:20:39.451"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:39.491" starttime="20150709 15:20:39.490"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:39.555" starttime="20150709 15:20:39.499"></status>
</kw>
<msg timestamp="20150709 15:20:39.557" level="INFO">${ssh_connection} = 68</msg>
<status status="PASS" endtime="20150709 15:20:39.556" starttime="20150709 15:20:39.492"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:39.566" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:39.940" level="INFO">Read output: Last login: Thu Jul  9 13:20:38 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:39.941" starttime="20150709 15:20:39.564"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:39.942" starttime="20150709 15:20:39.558"></status>
</kw>
<msg timestamp="20150709 15:20:39.945" level="INFO">${ssh_connection} = 68</msg>
<status status="PASS" endtime="20150709 15:20:39.944" starttime="20150709 15:20:39.481"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:39.951" starttime="20150709 15:20:39.950"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:39.952" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor68.log'.</msg>
<status status="PASS" endtime="20150709 15:20:39.956" starttime="20150709 15:20:39.951"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:39.956" starttime="20150709 15:20:39.947"></status>
</kw>
<msg timestamp="20150709 15:20:39.957" level="INFO">${ssh_connection} = 68</msg>
<status status="PASS" endtime="20150709 15:20:39.957" starttime="20150709 15:20:39.470"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:39.969" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:39.970" starttime="20150709 15:20:39.958"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:39.981" starttime="20150709 15:20:39.976"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:39.988" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:39.987" starttime="20150709 15:20:39.982"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:39.996" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:39.997" starttime="20150709 15:20:39.990"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:40.008" starttime="20150709 15:20:40.005"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:40.011" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:40.053" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:40.054" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:40.053" starttime="20150709 15:20:40.009"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:40.057" starttime="20150709 15:20:40.055"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:40.060" starttime="20150709 15:20:40.058"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:40.063" starttime="20150709 15:20:40.061"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:40.067" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:40.132" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:40.133" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:40.134" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:40.133" starttime="20150709 15:20:40.064"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:40.141" starttime="20150709 15:20:40.135"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:40.144" starttime="20150709 15:20:40.142"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:40.147" starttime="20150709 15:20:40.145"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:40.150" starttime="20150709 15:20:40.148"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:40.152" starttime="20150709 15:20:40.151"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:40.155" starttime="20150709 15:20:40.153"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:40.158" starttime="20150709 15:20:40.156"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:40.161" starttime="20150709 15:20:40.159"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:40.164" starttime="20150709 15:20:40.162"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:40.166" starttime="20150709 15:20:40.165"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:40.169" starttime="20150709 15:20:40.167"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:40.170" starttime="20150709 15:20:39.999"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:40.174" level="INFO">Starting command 'cat tmpfilemonitor68.log'.</msg>
<status status="PASS" endtime="20150709 15:20:40.178" starttime="20150709 15:20:40.172"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:40.181" level="INFO">Reading output of command 'cat tmpfilemonitor68.log'.</msg>
<msg timestamp="20150709 15:20:40.212" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:40.213" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:40.212" starttime="20150709 15:20:40.179"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:40.216" level="INFO">Executing command 'rm tmpfilemonitor68.log'.</msg>
<msg timestamp="20150709 15:20:40.291" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:40.292" starttime="20150709 15:20:40.214"></status>
</kw>
<msg timestamp="20150709 15:20:40.294" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:40.293" starttime="20150709 15:20:39.974"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:40.301" starttime="20150709 15:20:40.296"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:40.311" starttime="20150709 15:20:40.309"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:40.314" starttime="20150709 15:20:40.313"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:40.316" starttime="20150709 15:20:40.303"></status>
</kw>
<msg timestamp="20150709 15:20:40.318" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:40.317" starttime="20150709 15:20:39.971"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:40.319" starttime="20150709 15:20:39.450"></status>
</kw>
<kw type="foritem" name="${i} = 69">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:40.323" level="INFO">
*********** Experiment: 69 ************</msg>
<status status="PASS" endtime="20150709 15:20:40.324" starttime="20150709 15:20:40.321"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:40.361" starttime="20150709 15:20:40.359"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:40.422" starttime="20150709 15:20:40.368"></status>
</kw>
<msg timestamp="20150709 15:20:40.423" level="INFO">${ssh_connection} = 69</msg>
<status status="PASS" endtime="20150709 15:20:40.423" starttime="20150709 15:20:40.362"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:40.433" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:40.872" level="INFO">Read output: Last login: Thu Jul  9 13:20:39 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:40.873" starttime="20150709 15:20:40.431"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:40.875" starttime="20150709 15:20:40.424"></status>
</kw>
<msg timestamp="20150709 15:20:40.877" level="INFO">${ssh_connection} = 69</msg>
<status status="PASS" endtime="20150709 15:20:40.876" starttime="20150709 15:20:40.351"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:40.888" starttime="20150709 15:20:40.886"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:40.893" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor69.log'.</msg>
<status status="PASS" endtime="20150709 15:20:40.897" starttime="20150709 15:20:40.890"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:40.898" starttime="20150709 15:20:40.880"></status>
</kw>
<msg timestamp="20150709 15:20:40.900" level="INFO">${ssh_connection} = 69</msg>
<status status="PASS" endtime="20150709 15:20:40.899" starttime="20150709 15:20:40.340"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:40.914" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:40.915" starttime="20150709 15:20:40.901"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:40.932" starttime="20150709 15:20:40.929"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:40.939" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:40.939" starttime="20150709 15:20:40.933"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:40.946" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:40.947" starttime="20150709 15:20:40.940"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:40.957" starttime="20150709 15:20:40.954"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:40.959" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:40.994" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:40.996" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:40.995" starttime="20150709 15:20:40.958"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:41.000" starttime="20150709 15:20:40.998"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:41.004" starttime="20150709 15:20:41.002"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:41.007" starttime="20150709 15:20:41.005"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:41.012" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:41.079" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:41.081" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:41.082" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:41.080" starttime="20150709 15:20:41.008"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:41.089" starttime="20150709 15:20:41.083"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:41.092" starttime="20150709 15:20:41.090"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:41.095" starttime="20150709 15:20:41.093"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:41.097" starttime="20150709 15:20:41.096"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:41.100" starttime="20150709 15:20:41.098"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:41.103" starttime="20150709 15:20:41.101"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:41.106" starttime="20150709 15:20:41.104"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:41.108" starttime="20150709 15:20:41.107"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:41.111" starttime="20150709 15:20:41.109"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:41.114" starttime="20150709 15:20:41.112"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:41.116" starttime="20150709 15:20:41.115"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:41.117" starttime="20150709 15:20:40.949"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:41.121" level="INFO">Starting command 'cat tmpfilemonitor69.log'.</msg>
<status status="PASS" endtime="20150709 15:20:41.126" starttime="20150709 15:20:41.119"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:41.128" level="INFO">Reading output of command 'cat tmpfilemonitor69.log'.</msg>
<msg timestamp="20150709 15:20:41.161" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:41.162" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:41.162" starttime="20150709 15:20:41.127"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:41.166" level="INFO">Executing command 'rm tmpfilemonitor69.log'.</msg>
<msg timestamp="20150709 15:20:41.240" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:41.240" starttime="20150709 15:20:41.164"></status>
</kw>
<msg timestamp="20150709 15:20:41.243" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:41.242" starttime="20150709 15:20:40.923"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:41.251" starttime="20150709 15:20:41.245"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:41.260" starttime="20150709 15:20:41.258"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:41.264" starttime="20150709 15:20:41.262"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:41.265" starttime="20150709 15:20:41.252"></status>
</kw>
<msg timestamp="20150709 15:20:41.268" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:41.266" starttime="20150709 15:20:40.917"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:41.268" starttime="20150709 15:20:40.320"></status>
</kw>
<kw type="foritem" name="${i} = 70">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:41.273" level="INFO">
*********** Experiment: 70 ************</msg>
<status status="PASS" endtime="20150709 15:20:41.273" starttime="20150709 15:20:41.270"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:41.311" starttime="20150709 15:20:41.309"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:41.369" starttime="20150709 15:20:41.318"></status>
</kw>
<msg timestamp="20150709 15:20:41.371" level="INFO">${ssh_connection} = 70</msg>
<status status="PASS" endtime="20150709 15:20:41.370" starttime="20150709 15:20:41.312"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:41.381" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:41.842" level="INFO">Read output: Last login: Thu Jul  9 13:20:40 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:41.843" starttime="20150709 15:20:41.379"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:41.844" starttime="20150709 15:20:41.372"></status>
</kw>
<msg timestamp="20150709 15:20:41.845" level="INFO">${ssh_connection} = 70</msg>
<status status="PASS" endtime="20150709 15:20:41.845" starttime="20150709 15:20:41.300"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:41.850" starttime="20150709 15:20:41.849"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:41.852" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor70.log'.</msg>
<status status="PASS" endtime="20150709 15:20:41.855" starttime="20150709 15:20:41.851"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:41.855" starttime="20150709 15:20:41.846"></status>
</kw>
<msg timestamp="20150709 15:20:41.856" level="INFO">${ssh_connection} = 70</msg>
<status status="PASS" endtime="20150709 15:20:41.856" starttime="20150709 15:20:41.289"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:41.868" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:41.868" starttime="20150709 15:20:41.857"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:41.877" starttime="20150709 15:20:41.876"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:41.880" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:41.880" starttime="20150709 15:20:41.877"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:41.885" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:41.885" starttime="20150709 15:20:41.881"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:41.890" starttime="20150709 15:20:41.888"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:41.891" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:41.921" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:41.923" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:41.922" starttime="20150709 15:20:41.890"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:41.926" starttime="20150709 15:20:41.924"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:41.928" starttime="20150709 15:20:41.927"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:41.931" starttime="20150709 15:20:41.929"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:41.935" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:41.994" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:41.996" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:41.996" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:41.995" starttime="20150709 15:20:41.932"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:42.003" starttime="20150709 15:20:41.997"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:42.007" starttime="20150709 15:20:42.005"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:42.010" starttime="20150709 15:20:42.008"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:42.013" starttime="20150709 15:20:42.011"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:42.016" starttime="20150709 15:20:42.014"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:42.019" starttime="20150709 15:20:42.017"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:42.022" starttime="20150709 15:20:42.020"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:42.025" starttime="20150709 15:20:42.023"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:42.027" starttime="20150709 15:20:42.026"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:42.030" starttime="20150709 15:20:42.028"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:42.032" starttime="20150709 15:20:42.031"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:42.034" starttime="20150709 15:20:41.886"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:42.037" level="INFO">Starting command 'cat tmpfilemonitor70.log'.</msg>
<status status="PASS" endtime="20150709 15:20:42.042" starttime="20150709 15:20:42.035"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:42.045" level="INFO">Reading output of command 'cat tmpfilemonitor70.log'.</msg>
<msg timestamp="20150709 15:20:42.070" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:42.072" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:42.072" starttime="20150709 15:20:42.043"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:42.075" level="INFO">Executing command 'rm tmpfilemonitor70.log'.</msg>
<msg timestamp="20150709 15:20:42.153" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:42.154" starttime="20150709 15:20:42.073"></status>
</kw>
<msg timestamp="20150709 15:20:42.157" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:42.156" starttime="20150709 15:20:41.873"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:42.164" starttime="20150709 15:20:42.158"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:42.174" starttime="20150709 15:20:42.172"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:42.177" starttime="20150709 15:20:42.175"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:42.178" starttime="20150709 15:20:42.166"></status>
</kw>
<msg timestamp="20150709 15:20:42.181" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:42.180" starttime="20150709 15:20:41.869"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:42.182" starttime="20150709 15:20:41.270"></status>
</kw>
<kw type="foritem" name="${i} = 71">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:42.186" level="INFO">
*********** Experiment: 71 ************</msg>
<status status="PASS" endtime="20150709 15:20:42.187" starttime="20150709 15:20:42.184"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:42.224" starttime="20150709 15:20:42.223"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:42.282" starttime="20150709 15:20:42.232"></status>
</kw>
<msg timestamp="20150709 15:20:42.283" level="INFO">${ssh_connection} = 71</msg>
<status status="PASS" endtime="20150709 15:20:42.283" starttime="20150709 15:20:42.225"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:42.293" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:42.659" level="INFO">Read output: Last login: Thu Jul  9 13:20:41 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:42.660" starttime="20150709 15:20:42.291"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:42.662" starttime="20150709 15:20:42.284"></status>
</kw>
<msg timestamp="20150709 15:20:42.664" level="INFO">${ssh_connection} = 71</msg>
<status status="PASS" endtime="20150709 15:20:42.663" starttime="20150709 15:20:42.214"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:42.676" starttime="20150709 15:20:42.673"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:42.679" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor71.log'.</msg>
<status status="PASS" endtime="20150709 15:20:42.683" starttime="20150709 15:20:42.677"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:42.684" starttime="20150709 15:20:42.667"></status>
</kw>
<msg timestamp="20150709 15:20:42.686" level="INFO">${ssh_connection} = 71</msg>
<status status="PASS" endtime="20150709 15:20:42.686" starttime="20150709 15:20:42.203"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:42.699" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:42.700" starttime="20150709 15:20:42.687"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:42.717" starttime="20150709 15:20:42.714"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:42.725" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:42.724" starttime="20150709 15:20:42.718"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:42.730" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:42.731" starttime="20150709 15:20:42.726"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:42.741" starttime="20150709 15:20:42.738"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:42.743" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:42.774" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:42.775" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:42.775" starttime="20150709 15:20:42.742"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:42.778" starttime="20150709 15:20:42.776"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:42.781" starttime="20150709 15:20:42.779"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:42.783" starttime="20150709 15:20:42.782"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:42.787" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:42.849" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:42.850" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:42.851" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:42.850" starttime="20150709 15:20:42.784"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:42.858" starttime="20150709 15:20:42.852"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:42.861" starttime="20150709 15:20:42.859"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:42.864" starttime="20150709 15:20:42.862"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:42.866" starttime="20150709 15:20:42.865"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:42.869" starttime="20150709 15:20:42.867"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:42.872" starttime="20150709 15:20:42.870"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:42.875" starttime="20150709 15:20:42.873"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:42.877" starttime="20150709 15:20:42.876"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:42.880" starttime="20150709 15:20:42.878"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:42.882" starttime="20150709 15:20:42.881"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:42.885" starttime="20150709 15:20:42.883"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:42.886" starttime="20150709 15:20:42.732"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:42.889" level="INFO">Starting command 'cat tmpfilemonitor71.log'.</msg>
<status status="PASS" endtime="20150709 15:20:42.894" starttime="20150709 15:20:42.887"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:42.896" level="INFO">Reading output of command 'cat tmpfilemonitor71.log'.</msg>
<msg timestamp="20150709 15:20:42.932" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:42.933" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:42.933" starttime="20150709 15:20:42.895"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:42.937" level="INFO">Executing command 'rm tmpfilemonitor71.log'.</msg>
<msg timestamp="20150709 15:20:43.010" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:43.011" starttime="20150709 15:20:42.935"></status>
</kw>
<msg timestamp="20150709 15:20:43.015" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:43.013" starttime="20150709 15:20:42.708"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:43.021" starttime="20150709 15:20:43.016"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:43.031" starttime="20150709 15:20:43.029"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:43.036" starttime="20150709 15:20:43.032"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:43.038" starttime="20150709 15:20:43.023"></status>
</kw>
<msg timestamp="20150709 15:20:43.040" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:43.039" starttime="20150709 15:20:42.702"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:43.041" starttime="20150709 15:20:42.183"></status>
</kw>
<kw type="foritem" name="${i} = 72">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:43.045" level="INFO">
*********** Experiment: 72 ************</msg>
<status status="PASS" endtime="20150709 15:20:43.046" starttime="20150709 15:20:43.043"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:43.084" starttime="20150709 15:20:43.082"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:43.142" starttime="20150709 15:20:43.091"></status>
</kw>
<msg timestamp="20150709 15:20:43.144" level="INFO">${ssh_connection} = 72</msg>
<status status="PASS" endtime="20150709 15:20:43.143" starttime="20150709 15:20:43.085"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:43.155" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:43.600" level="INFO">Read output: Last login: Thu Jul  9 13:20:42 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:43.601" starttime="20150709 15:20:43.152"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:43.601" starttime="20150709 15:20:43.145"></status>
</kw>
<msg timestamp="20150709 15:20:43.603" level="INFO">${ssh_connection} = 72</msg>
<status status="PASS" endtime="20150709 15:20:43.602" starttime="20150709 15:20:43.074"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:43.608" starttime="20150709 15:20:43.607"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:43.609" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor72.log'.</msg>
<status status="PASS" endtime="20150709 15:20:43.613" starttime="20150709 15:20:43.608"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:43.613" starttime="20150709 15:20:43.604"></status>
</kw>
<msg timestamp="20150709 15:20:43.614" level="INFO">${ssh_connection} = 72</msg>
<status status="PASS" endtime="20150709 15:20:43.614" starttime="20150709 15:20:43.062"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:43.626" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:43.626" starttime="20150709 15:20:43.615"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:43.634" starttime="20150709 15:20:43.633"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:43.637" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:43.637" starttime="20150709 15:20:43.634"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:43.642" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:43.642" starttime="20150709 15:20:43.638"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:43.647" starttime="20150709 15:20:43.646"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:43.648" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:43.686" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:43.687" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:43.687" starttime="20150709 15:20:43.647"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:43.688" starttime="20150709 15:20:43.688"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:43.690" starttime="20150709 15:20:43.689"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:43.691" starttime="20150709 15:20:43.690"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:43.692" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:43.766" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:43.767" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:43.768" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:43.767" starttime="20150709 15:20:43.691"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:43.775" starttime="20150709 15:20:43.769"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:43.778" starttime="20150709 15:20:43.776"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:43.781" starttime="20150709 15:20:43.779"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:43.783" starttime="20150709 15:20:43.782"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:43.786" starttime="20150709 15:20:43.784"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:43.789" starttime="20150709 15:20:43.787"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:43.792" starttime="20150709 15:20:43.790"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:43.794" starttime="20150709 15:20:43.792"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:43.797" starttime="20150709 15:20:43.795"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:43.799" starttime="20150709 15:20:43.798"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:43.802" starttime="20150709 15:20:43.800"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:43.803" starttime="20150709 15:20:43.643"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:43.806" level="INFO">Starting command 'cat tmpfilemonitor72.log'.</msg>
<status status="PASS" endtime="20150709 15:20:43.810" starttime="20150709 15:20:43.804"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:43.813" level="INFO">Reading output of command 'cat tmpfilemonitor72.log'.</msg>
<msg timestamp="20150709 15:20:43.843" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:43.845" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:43.844" starttime="20150709 15:20:43.812"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:43.849" level="INFO">Executing command 'rm tmpfilemonitor72.log'.</msg>
<msg timestamp="20150709 15:20:43.919" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:43.920" starttime="20150709 15:20:43.846"></status>
</kw>
<msg timestamp="20150709 15:20:43.922" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:43.921" starttime="20150709 15:20:43.630"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:43.929" starttime="20150709 15:20:43.923"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:43.939" starttime="20150709 15:20:43.936"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:43.943" starttime="20150709 15:20:43.940"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:43.944" starttime="20150709 15:20:43.930"></status>
</kw>
<msg timestamp="20150709 15:20:43.947" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:43.946" starttime="20150709 15:20:43.627"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:43.948" starttime="20150709 15:20:43.042"></status>
</kw>
<kw type="foritem" name="${i} = 73">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:43.951" level="INFO">
*********** Experiment: 73 ************</msg>
<status status="PASS" endtime="20150709 15:20:43.952" starttime="20150709 15:20:43.949"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:43.989" starttime="20150709 15:20:43.988"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:44.048" starttime="20150709 15:20:43.997"></status>
</kw>
<msg timestamp="20150709 15:20:44.052" level="INFO">${ssh_connection} = 73</msg>
<status status="PASS" endtime="20150709 15:20:44.051" starttime="20150709 15:20:43.990"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:44.062" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:44.580" level="INFO">Read output: Last login: Thu Jul  9 13:20:43 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:44.581" starttime="20150709 15:20:44.060"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:44.582" starttime="20150709 15:20:44.053"></status>
</kw>
<msg timestamp="20150709 15:20:44.583" level="INFO">${ssh_connection} = 73</msg>
<status status="PASS" endtime="20150709 15:20:44.583" starttime="20150709 15:20:43.979"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:44.589" starttime="20150709 15:20:44.588"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:44.590" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor73.log'.</msg>
<status status="PASS" endtime="20150709 15:20:44.594" starttime="20150709 15:20:44.589"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:44.595" starttime="20150709 15:20:44.585"></status>
</kw>
<msg timestamp="20150709 15:20:44.596" level="INFO">${ssh_connection} = 73</msg>
<status status="PASS" endtime="20150709 15:20:44.595" starttime="20150709 15:20:43.968"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:44.607" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:44.608" starttime="20150709 15:20:44.596"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:44.624" starttime="20150709 15:20:44.622"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:44.632" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:44.631" starttime="20150709 15:20:44.625"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:44.638" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:44.639" starttime="20150709 15:20:44.633"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:44.648" starttime="20150709 15:20:44.646"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:44.651" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:44.693" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:44.694" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:44.693" starttime="20150709 15:20:44.649"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:44.695" starttime="20150709 15:20:44.694"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:44.697" starttime="20150709 15:20:44.696"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:44.700" starttime="20150709 15:20:44.698"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:44.704" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:44.788" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:44.789" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:44.790" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:44.789" starttime="20150709 15:20:44.701"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:44.797" starttime="20150709 15:20:44.791"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:44.800" starttime="20150709 15:20:44.798"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:44.802" starttime="20150709 15:20:44.801"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:44.805" starttime="20150709 15:20:44.803"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:44.807" starttime="20150709 15:20:44.806"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:44.810" starttime="20150709 15:20:44.808"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:44.813" starttime="20150709 15:20:44.811"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:44.816" starttime="20150709 15:20:44.814"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:44.818" starttime="20150709 15:20:44.817"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:44.821" starttime="20150709 15:20:44.819"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:44.824" starttime="20150709 15:20:44.822"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:44.825" starttime="20150709 15:20:44.640"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:44.828" level="INFO">Starting command 'cat tmpfilemonitor73.log'.</msg>
<status status="PASS" endtime="20150709 15:20:44.833" starttime="20150709 15:20:44.826"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:44.836" level="INFO">Reading output of command 'cat tmpfilemonitor73.log'.</msg>
<msg timestamp="20150709 15:20:44.858" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:44.860" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:44.859" starttime="20150709 15:20:44.834"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:44.864" level="INFO">Executing command 'rm tmpfilemonitor73.log'.</msg>
<msg timestamp="20150709 15:20:44.932" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:44.932" starttime="20150709 15:20:44.861"></status>
</kw>
<msg timestamp="20150709 15:20:44.935" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:44.934" starttime="20150709 15:20:44.616"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:44.942" starttime="20150709 15:20:44.936"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:44.952" starttime="20150709 15:20:44.950"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:44.955" starttime="20150709 15:20:44.953"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:44.956" starttime="20150709 15:20:44.944"></status>
</kw>
<msg timestamp="20150709 15:20:44.958" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:44.958" starttime="20150709 15:20:44.610"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:44.959" starttime="20150709 15:20:43.948"></status>
</kw>
<kw type="foritem" name="${i} = 74">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:44.963" level="INFO">
*********** Experiment: 74 ************</msg>
<status status="PASS" endtime="20150709 15:20:44.964" starttime="20150709 15:20:44.961"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:45.002" starttime="20150709 15:20:45.000"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:45.063" starttime="20150709 15:20:45.009"></status>
</kw>
<msg timestamp="20150709 15:20:45.066" level="INFO">${ssh_connection} = 74</msg>
<status status="PASS" endtime="20150709 15:20:45.065" starttime="20150709 15:20:45.003"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:45.076" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:45.535" level="INFO">Read output: Last login: Thu Jul  9 13:20:44 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:45.536" starttime="20150709 15:20:45.074"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:45.537" starttime="20150709 15:20:45.067"></status>
</kw>
<msg timestamp="20150709 15:20:45.541" level="INFO">${ssh_connection} = 74</msg>
<status status="PASS" endtime="20150709 15:20:45.539" starttime="20150709 15:20:44.991"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:45.552" starttime="20150709 15:20:45.549"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:45.555" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor74.log'.</msg>
<status status="PASS" endtime="20150709 15:20:45.559" starttime="20150709 15:20:45.553"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:45.560" starttime="20150709 15:20:45.543"></status>
</kw>
<msg timestamp="20150709 15:20:45.563" level="INFO">${ssh_connection} = 74</msg>
<status status="PASS" endtime="20150709 15:20:45.562" starttime="20150709 15:20:44.980"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:45.576" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:45.576" starttime="20150709 15:20:45.564"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:45.587" starttime="20150709 15:20:45.586"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:45.591" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:45.591" starttime="20150709 15:20:45.588"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:45.595" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:45.596" starttime="20150709 15:20:45.591"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:45.600" starttime="20150709 15:20:45.599"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:45.601" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:45.637" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:45.638" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:45.638" starttime="20150709 15:20:45.601"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:45.639" starttime="20150709 15:20:45.639"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:45.640" starttime="20150709 15:20:45.640"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:45.642" starttime="20150709 15:20:45.641"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:45.643" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:45.716" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:45.717" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:45.718" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:45.717" starttime="20150709 15:20:45.642"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:45.725" starttime="20150709 15:20:45.719"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:45.727" starttime="20150709 15:20:45.726"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:45.730" starttime="20150709 15:20:45.728"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:45.733" starttime="20150709 15:20:45.731"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:45.735" starttime="20150709 15:20:45.734"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:45.738" starttime="20150709 15:20:45.736"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:45.741" starttime="20150709 15:20:45.739"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:45.744" starttime="20150709 15:20:45.742"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:45.747" starttime="20150709 15:20:45.745"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:45.749" starttime="20150709 15:20:45.748"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:45.752" starttime="20150709 15:20:45.750"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:45.753" starttime="20150709 15:20:45.596"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:45.756" level="INFO">Starting command 'cat tmpfilemonitor74.log'.</msg>
<status status="PASS" endtime="20150709 15:20:45.761" starttime="20150709 15:20:45.754"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:45.764" level="INFO">Reading output of command 'cat tmpfilemonitor74.log'.</msg>
<msg timestamp="20150709 15:20:45.795" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:45.797" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:45.796" starttime="20150709 15:20:45.762"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:45.800" level="INFO">Executing command 'rm tmpfilemonitor74.log'.</msg>
<msg timestamp="20150709 15:20:45.878" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:45.879" starttime="20150709 15:20:45.798"></status>
</kw>
<msg timestamp="20150709 15:20:45.882" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:45.881" starttime="20150709 15:20:45.580"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:45.889" starttime="20150709 15:20:45.883"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:45.899" starttime="20150709 15:20:45.896"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:45.903" starttime="20150709 15:20:45.900"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:45.904" starttime="20150709 15:20:45.891"></status>
</kw>
<msg timestamp="20150709 15:20:45.906" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:45.906" starttime="20150709 15:20:45.577"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:45.907" starttime="20150709 15:20:44.961"></status>
</kw>
<kw type="foritem" name="${i} = 75">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:45.911" level="INFO">
*********** Experiment: 75 ************</msg>
<status status="PASS" endtime="20150709 15:20:45.913" starttime="20150709 15:20:45.909"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:45.948" starttime="20150709 15:20:45.947"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:45.990" starttime="20150709 15:20:45.951"></status>
</kw>
<msg timestamp="20150709 15:20:45.991" level="INFO">${ssh_connection} = 75</msg>
<status status="PASS" endtime="20150709 15:20:45.991" starttime="20150709 15:20:45.948"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:45.996" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:46.415" level="INFO">Read output: Last login: Thu Jul  9 13:20:45 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:46.417" starttime="20150709 15:20:45.995"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:46.419" starttime="20150709 15:20:45.992"></status>
</kw>
<msg timestamp="20150709 15:20:46.423" level="INFO">${ssh_connection} = 75</msg>
<status status="PASS" endtime="20150709 15:20:46.422" starttime="20150709 15:20:45.940"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:46.435" starttime="20150709 15:20:46.432"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:46.438" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor75.log'.</msg>
<status status="PASS" endtime="20150709 15:20:46.442" starttime="20150709 15:20:46.436"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:46.443" starttime="20150709 15:20:46.426"></status>
</kw>
<msg timestamp="20150709 15:20:46.446" level="INFO">${ssh_connection} = 75</msg>
<status status="PASS" endtime="20150709 15:20:46.445" starttime="20150709 15:20:45.928"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:46.458" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:46.458" starttime="20150709 15:20:46.447"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:46.466" starttime="20150709 15:20:46.465"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:46.470" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:46.469" starttime="20150709 15:20:46.466"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:46.474" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:46.474" starttime="20150709 15:20:46.470"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:46.478" starttime="20150709 15:20:46.477"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:46.480" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:46.519" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:46.520" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:46.520" starttime="20150709 15:20:46.479"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:46.523" starttime="20150709 15:20:46.522"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:46.526" starttime="20150709 15:20:46.524"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:46.528" starttime="20150709 15:20:46.527"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:46.533" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:46.601" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:46.602" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:46.603" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:46.602" starttime="20150709 15:20:46.530"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:46.610" starttime="20150709 15:20:46.604"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:46.613" starttime="20150709 15:20:46.611"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:46.615" starttime="20150709 15:20:46.614"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:46.618" starttime="20150709 15:20:46.616"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:46.621" starttime="20150709 15:20:46.619"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:46.623" starttime="20150709 15:20:46.622"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:46.626" starttime="20150709 15:20:46.624"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:46.629" starttime="20150709 15:20:46.627"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:46.631" starttime="20150709 15:20:46.630"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:46.634" starttime="20150709 15:20:46.632"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:46.637" starttime="20150709 15:20:46.635"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:46.638" starttime="20150709 15:20:46.475"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:46.641" level="INFO">Starting command 'cat tmpfilemonitor75.log'.</msg>
<status status="PASS" endtime="20150709 15:20:46.645" starttime="20150709 15:20:46.639"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:46.648" level="INFO">Reading output of command 'cat tmpfilemonitor75.log'.</msg>
<msg timestamp="20150709 15:20:46.682" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:46.683" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:46.683" starttime="20150709 15:20:46.646"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:46.686" level="INFO">Executing command 'rm tmpfilemonitor75.log'.</msg>
<msg timestamp="20150709 15:20:46.758" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:46.760" starttime="20150709 15:20:46.684"></status>
</kw>
<msg timestamp="20150709 15:20:46.762" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:46.761" starttime="20150709 15:20:46.462"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:46.769" starttime="20150709 15:20:46.763"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:46.780" starttime="20150709 15:20:46.777"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:46.784" starttime="20150709 15:20:46.781"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:46.785" starttime="20150709 15:20:46.771"></status>
</kw>
<msg timestamp="20150709 15:20:46.787" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:46.787" starttime="20150709 15:20:46.459"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:46.788" starttime="20150709 15:20:45.908"></status>
</kw>
<kw type="foritem" name="${i} = 76">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:46.793" level="INFO">
*********** Experiment: 76 ************</msg>
<status status="PASS" endtime="20150709 15:20:46.794" starttime="20150709 15:20:46.790"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:46.832" starttime="20150709 15:20:46.831"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:46.894" starttime="20150709 15:20:46.840"></status>
</kw>
<msg timestamp="20150709 15:20:46.896" level="INFO">${ssh_connection} = 76</msg>
<status status="PASS" endtime="20150709 15:20:46.895" starttime="20150709 15:20:46.834"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:46.907" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:47.334" level="INFO">Read output: Last login: Thu Jul  9 13:20:46 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:47.335" starttime="20150709 15:20:46.904"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:47.336" starttime="20150709 15:20:46.897"></status>
</kw>
<msg timestamp="20150709 15:20:47.338" level="INFO">${ssh_connection} = 76</msg>
<status status="PASS" endtime="20150709 15:20:47.337" starttime="20150709 15:20:46.822"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:47.343" starttime="20150709 15:20:47.342"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:47.345" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor76.log'.</msg>
<status status="PASS" endtime="20150709 15:20:47.348" starttime="20150709 15:20:47.344"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:47.348" starttime="20150709 15:20:47.339"></status>
</kw>
<msg timestamp="20150709 15:20:47.349" level="INFO">${ssh_connection} = 76</msg>
<status status="PASS" endtime="20150709 15:20:47.349" starttime="20150709 15:20:46.810"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:47.361" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:47.362" starttime="20150709 15:20:47.350"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:47.370" starttime="20150709 15:20:47.369"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:47.373" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:47.373" starttime="20150709 15:20:47.370"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:47.377" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:47.377" starttime="20150709 15:20:47.374"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:47.382" starttime="20150709 15:20:47.381"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:47.383" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:47.413" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:47.414" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:47.414" starttime="20150709 15:20:47.382"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:47.416" starttime="20150709 15:20:47.415"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:47.417" starttime="20150709 15:20:47.416"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:47.418" starttime="20150709 15:20:47.417"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:47.420" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:47.487" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:47.489" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:47.489" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:47.488" starttime="20150709 15:20:47.418"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:47.497" starttime="20150709 15:20:47.490"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:47.500" starttime="20150709 15:20:47.498"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:47.503" starttime="20150709 15:20:47.501"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:47.505" starttime="20150709 15:20:47.504"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:47.508" starttime="20150709 15:20:47.506"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:47.511" starttime="20150709 15:20:47.509"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:47.513" starttime="20150709 15:20:47.512"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:47.516" starttime="20150709 15:20:47.514"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:47.519" starttime="20150709 15:20:47.517"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:47.521" starttime="20150709 15:20:47.520"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:47.524" starttime="20150709 15:20:47.522"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:47.525" starttime="20150709 15:20:47.378"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:47.528" level="INFO">Starting command 'cat tmpfilemonitor76.log'.</msg>
<status status="PASS" endtime="20150709 15:20:47.532" starttime="20150709 15:20:47.526"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:47.534" level="INFO">Reading output of command 'cat tmpfilemonitor76.log'.</msg>
<msg timestamp="20150709 15:20:47.568" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:47.569" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:47.568" starttime="20150709 15:20:47.533"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:47.573" level="INFO">Executing command 'rm tmpfilemonitor76.log'.</msg>
<msg timestamp="20150709 15:20:47.645" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:47.645" starttime="20150709 15:20:47.570"></status>
</kw>
<msg timestamp="20150709 15:20:47.648" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:47.647" starttime="20150709 15:20:47.366"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:47.655" starttime="20150709 15:20:47.649"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:47.665" starttime="20150709 15:20:47.662"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:47.669" starttime="20150709 15:20:47.666"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:47.670" starttime="20150709 15:20:47.657"></status>
</kw>
<msg timestamp="20150709 15:20:47.672" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:47.672" starttime="20150709 15:20:47.363"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:47.673" starttime="20150709 15:20:46.789"></status>
</kw>
<kw type="foritem" name="${i} = 77">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:47.677" level="INFO">
*********** Experiment: 77 ************</msg>
<status status="PASS" endtime="20150709 15:20:47.678" starttime="20150709 15:20:47.675"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:47.736" starttime="20150709 15:20:47.734"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:47.798" starttime="20150709 15:20:47.745"></status>
</kw>
<msg timestamp="20150709 15:20:47.800" level="INFO">${ssh_connection} = 77</msg>
<status status="PASS" endtime="20150709 15:20:47.799" starttime="20150709 15:20:47.738"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:47.811" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:48.221" level="INFO">Read output: Last login: Thu Jul  9 13:20:47 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:48.223" starttime="20150709 15:20:47.808"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:48.225" starttime="20150709 15:20:47.801"></status>
</kw>
<msg timestamp="20150709 15:20:48.228" level="INFO">${ssh_connection} = 77</msg>
<status status="PASS" endtime="20150709 15:20:48.227" starttime="20150709 15:20:47.705"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:48.240" starttime="20150709 15:20:48.237"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:48.243" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor77.log'.</msg>
<status status="PASS" endtime="20150709 15:20:48.248" starttime="20150709 15:20:48.241"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:48.249" starttime="20150709 15:20:48.231"></status>
</kw>
<msg timestamp="20150709 15:20:48.252" level="INFO">${ssh_connection} = 77</msg>
<status status="PASS" endtime="20150709 15:20:48.250" starttime="20150709 15:20:47.694"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:48.264" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:48.265" starttime="20150709 15:20:48.252"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:48.281" starttime="20150709 15:20:48.279"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:48.289" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:48.288" starttime="20150709 15:20:48.282"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:48.294" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:48.294" starttime="20150709 15:20:48.290"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:48.304" starttime="20150709 15:20:48.302"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:48.307" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:48.347" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:48.348" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:48.348" starttime="20150709 15:20:48.305"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:48.351" starttime="20150709 15:20:48.349"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:48.354" starttime="20150709 15:20:48.352"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:48.356" starttime="20150709 15:20:48.355"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:48.360" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:48.428" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:48.430" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:48.431" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:48.429" starttime="20150709 15:20:48.357"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:48.438" starttime="20150709 15:20:48.432"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:48.441" starttime="20150709 15:20:48.439"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:48.443" starttime="20150709 15:20:48.442"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:48.446" starttime="20150709 15:20:48.444"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:48.449" starttime="20150709 15:20:48.447"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:48.452" starttime="20150709 15:20:48.450"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:48.454" starttime="20150709 15:20:48.452"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:48.457" starttime="20150709 15:20:48.455"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:48.460" starttime="20150709 15:20:48.458"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:48.462" starttime="20150709 15:20:48.461"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:48.465" starttime="20150709 15:20:48.463"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:48.466" starttime="20150709 15:20:48.296"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:48.469" level="INFO">Starting command 'cat tmpfilemonitor77.log'.</msg>
<status status="PASS" endtime="20150709 15:20:48.473" starttime="20150709 15:20:48.467"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:48.476" level="INFO">Reading output of command 'cat tmpfilemonitor77.log'.</msg>
<msg timestamp="20150709 15:20:48.510" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:48.511" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:48.510" starttime="20150709 15:20:48.474"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:48.514" level="INFO">Executing command 'rm tmpfilemonitor77.log'.</msg>
<msg timestamp="20150709 15:20:48.586" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:48.587" starttime="20150709 15:20:48.512"></status>
</kw>
<msg timestamp="20150709 15:20:48.589" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:48.589" starttime="20150709 15:20:48.273"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:48.596" starttime="20150709 15:20:48.590"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:48.606" starttime="20150709 15:20:48.604"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:48.610" starttime="20150709 15:20:48.607"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:48.611" starttime="20150709 15:20:48.598"></status>
</kw>
<msg timestamp="20150709 15:20:48.613" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:48.613" starttime="20150709 15:20:48.267"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:48.614" starttime="20150709 15:20:47.674"></status>
</kw>
<kw type="foritem" name="${i} = 78">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:48.618" level="INFO">
*********** Experiment: 78 ************</msg>
<status status="PASS" endtime="20150709 15:20:48.619" starttime="20150709 15:20:48.616"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:48.656" starttime="20150709 15:20:48.654"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:48.709" starttime="20150709 15:20:48.663"></status>
</kw>
<msg timestamp="20150709 15:20:48.711" level="INFO">${ssh_connection} = 78</msg>
<status status="PASS" endtime="20150709 15:20:48.711" starttime="20150709 15:20:48.657"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:48.721" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:49.215" level="INFO">Read output: Last login: Thu Jul  9 13:20:48 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:49.216" starttime="20150709 15:20:48.719"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:49.217" starttime="20150709 15:20:48.712"></status>
</kw>
<msg timestamp="20150709 15:20:49.219" level="INFO">${ssh_connection} = 78</msg>
<status status="PASS" endtime="20150709 15:20:49.218" starttime="20150709 15:20:48.646"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:49.224" starttime="20150709 15:20:49.223"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:49.225" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor78.log'.</msg>
<status status="PASS" endtime="20150709 15:20:49.228" starttime="20150709 15:20:49.224"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:49.229" starttime="20150709 15:20:49.220"></status>
</kw>
<msg timestamp="20150709 15:20:49.230" level="INFO">${ssh_connection} = 78</msg>
<status status="PASS" endtime="20150709 15:20:49.230" starttime="20150709 15:20:48.635"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:49.242" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:49.242" starttime="20150709 15:20:49.231"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:49.250" starttime="20150709 15:20:49.249"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:49.253" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:49.253" starttime="20150709 15:20:49.250"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:49.257" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:49.257" starttime="20150709 15:20:49.254"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:49.262" starttime="20150709 15:20:49.261"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:49.263" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:49.292" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:49.293" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:49.293" starttime="20150709 15:20:49.262"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:49.294" starttime="20150709 15:20:49.294"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:49.295" starttime="20150709 15:20:49.295"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:49.297" starttime="20150709 15:20:49.296"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:49.298" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:49.366" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:49.368" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:49.369" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:49.367" starttime="20150709 15:20:49.297"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:49.376" starttime="20150709 15:20:49.370"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:49.379" starttime="20150709 15:20:49.377"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:49.381" starttime="20150709 15:20:49.380"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:49.384" starttime="20150709 15:20:49.382"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:49.387" starttime="20150709 15:20:49.385"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:49.389" starttime="20150709 15:20:49.388"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:49.392" starttime="20150709 15:20:49.390"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:49.395" starttime="20150709 15:20:49.393"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:49.397" starttime="20150709 15:20:49.396"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:49.400" starttime="20150709 15:20:49.398"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:49.403" starttime="20150709 15:20:49.401"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:49.404" starttime="20150709 15:20:49.258"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:49.407" level="INFO">Starting command 'cat tmpfilemonitor78.log'.</msg>
<status status="PASS" endtime="20150709 15:20:49.411" starttime="20150709 15:20:49.405"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:49.413" level="INFO">Reading output of command 'cat tmpfilemonitor78.log'.</msg>
<msg timestamp="20150709 15:20:49.445" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:49.447" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:49.447" starttime="20150709 15:20:49.412"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:49.450" level="INFO">Executing command 'rm tmpfilemonitor78.log'.</msg>
<msg timestamp="20150709 15:20:49.520" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:49.521" starttime="20150709 15:20:49.448"></status>
</kw>
<msg timestamp="20150709 15:20:49.523" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:49.522" starttime="20150709 15:20:49.246"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:49.529" starttime="20150709 15:20:49.524"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:49.539" starttime="20150709 15:20:49.537"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:49.544" starttime="20150709 15:20:49.540"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:49.545" starttime="20150709 15:20:49.531"></status>
</kw>
<msg timestamp="20150709 15:20:49.547" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:49.546" starttime="20150709 15:20:49.243"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:49.548" starttime="20150709 15:20:48.615"></status>
</kw>
<kw type="foritem" name="${i} = 79">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:49.552" level="INFO">
*********** Experiment: 79 ************</msg>
<status status="PASS" endtime="20150709 15:20:49.553" starttime="20150709 15:20:49.550"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:49.610" starttime="20150709 15:20:49.608"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:49.672" starttime="20150709 15:20:49.618"></status>
</kw>
<msg timestamp="20150709 15:20:49.674" level="INFO">${ssh_connection} = 79</msg>
<status status="PASS" endtime="20150709 15:20:49.673" starttime="20150709 15:20:49.611"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:49.683" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:50.169" level="INFO">Read output: Last login: Thu Jul  9 13:20:48 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:50.170" starttime="20150709 15:20:49.681"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:50.171" starttime="20150709 15:20:49.675"></status>
</kw>
<msg timestamp="20150709 15:20:50.173" level="INFO">${ssh_connection} = 79</msg>
<status status="PASS" endtime="20150709 15:20:50.172" starttime="20150709 15:20:49.599"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:50.178" starttime="20150709 15:20:50.177"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:50.180" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor79.log'.</msg>
<status status="PASS" endtime="20150709 15:20:50.183" starttime="20150709 15:20:50.179"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:50.184" starttime="20150709 15:20:50.174"></status>
</kw>
<msg timestamp="20150709 15:20:50.185" level="INFO">${ssh_connection} = 79</msg>
<status status="PASS" endtime="20150709 15:20:50.184" starttime="20150709 15:20:49.568"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:50.197" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:50.197" starttime="20150709 15:20:50.185"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:50.205" starttime="20150709 15:20:50.204"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:50.209" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:50.208" starttime="20150709 15:20:50.206"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:50.213" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:50.213" starttime="20150709 15:20:50.209"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:50.218" starttime="20150709 15:20:50.217"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:50.219" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:50.257" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:50.259" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:50.258" starttime="20150709 15:20:50.218"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:50.262" starttime="20150709 15:20:50.260"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:50.265" starttime="20150709 15:20:50.263"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:50.267" starttime="20150709 15:20:50.265"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:50.271" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:50.330" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:50.332" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:50.333" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:50.331" starttime="20150709 15:20:50.268"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:50.339" starttime="20150709 15:20:50.334"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:50.342" starttime="20150709 15:20:50.340"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:50.345" starttime="20150709 15:20:50.343"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:50.347" starttime="20150709 15:20:50.346"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:50.350" starttime="20150709 15:20:50.348"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:50.353" starttime="20150709 15:20:50.351"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:50.355" starttime="20150709 15:20:50.354"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:50.358" starttime="20150709 15:20:50.356"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:50.361" starttime="20150709 15:20:50.359"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:50.363" starttime="20150709 15:20:50.362"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:50.366" starttime="20150709 15:20:50.364"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:50.367" starttime="20150709 15:20:50.214"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:50.370" level="INFO">Starting command 'cat tmpfilemonitor79.log'.</msg>
<status status="PASS" endtime="20150709 15:20:50.374" starttime="20150709 15:20:50.368"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:50.377" level="INFO">Reading output of command 'cat tmpfilemonitor79.log'.</msg>
<msg timestamp="20150709 15:20:50.401" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:50.402" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:50.402" starttime="20150709 15:20:50.375"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:50.405" level="INFO">Executing command 'rm tmpfilemonitor79.log'.</msg>
<msg timestamp="20150709 15:20:50.474" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:50.475" starttime="20150709 15:20:50.403"></status>
</kw>
<msg timestamp="20150709 15:20:50.477" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:50.476" starttime="20150709 15:20:50.201"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:50.484" starttime="20150709 15:20:50.478"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:50.494" starttime="20150709 15:20:50.491"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:50.497" starttime="20150709 15:20:50.495"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:50.498" starttime="20150709 15:20:50.486"></status>
</kw>
<msg timestamp="20150709 15:20:50.500" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:50.499" starttime="20150709 15:20:50.198"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:50.501" starttime="20150709 15:20:49.549"></status>
</kw>
<kw type="foritem" name="${i} = 80">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:50.505" level="INFO">
*********** Experiment: 80 ************</msg>
<status status="PASS" endtime="20150709 15:20:50.506" starttime="20150709 15:20:50.503"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:50.542" starttime="20150709 15:20:50.540"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:50.600" starttime="20150709 15:20:50.549"></status>
</kw>
<msg timestamp="20150709 15:20:50.602" level="INFO">${ssh_connection} = 80</msg>
<status status="PASS" endtime="20150709 15:20:50.601" starttime="20150709 15:20:50.543"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:50.611" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:51.055" level="INFO">Read output: Last login: Thu Jul  9 13:20:49 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:51.057" starttime="20150709 15:20:50.609"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:51.059" starttime="20150709 15:20:50.603"></status>
</kw>
<msg timestamp="20150709 15:20:51.063" level="INFO">${ssh_connection} = 80</msg>
<status status="PASS" endtime="20150709 15:20:51.061" starttime="20150709 15:20:50.531"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:51.072" starttime="20150709 15:20:51.071"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:51.074" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor80.log'.</msg>
<status status="PASS" endtime="20150709 15:20:51.078" starttime="20150709 15:20:51.073"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:51.078" starttime="20150709 15:20:51.065"></status>
</kw>
<msg timestamp="20150709 15:20:51.080" level="INFO">${ssh_connection} = 80</msg>
<status status="PASS" endtime="20150709 15:20:51.079" starttime="20150709 15:20:50.520"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:51.092" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:51.092" starttime="20150709 15:20:51.080"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:51.100" starttime="20150709 15:20:51.099"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:51.104" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:51.103" starttime="20150709 15:20:51.100"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:51.108" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:51.108" starttime="20150709 15:20:51.104"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:51.112" starttime="20150709 15:20:51.111"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:51.114" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:51.156" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:51.156" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:51.156" starttime="20150709 15:20:51.113"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:51.157" starttime="20150709 15:20:51.157"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:51.159" starttime="20150709 15:20:51.158"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:51.160" starttime="20150709 15:20:51.159"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:51.161" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:51.236" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:51.238" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:51.238" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:51.237" starttime="20150709 15:20:51.160"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:51.245" starttime="20150709 15:20:51.240"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:51.248" starttime="20150709 15:20:51.246"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:51.250" starttime="20150709 15:20:51.249"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:51.253" starttime="20150709 15:20:51.251"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:51.256" starttime="20150709 15:20:51.254"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:51.258" starttime="20150709 15:20:51.257"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:51.261" starttime="20150709 15:20:51.259"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:51.264" starttime="20150709 15:20:51.262"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:51.266" starttime="20150709 15:20:51.265"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:51.269" starttime="20150709 15:20:51.267"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:51.271" starttime="20150709 15:20:51.270"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:51.272" starttime="20150709 15:20:51.109"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:51.276" level="INFO">Starting command 'cat tmpfilemonitor80.log'.</msg>
<status status="PASS" endtime="20150709 15:20:51.280" starttime="20150709 15:20:51.273"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:51.282" level="INFO">Reading output of command 'cat tmpfilemonitor80.log'.</msg>
<msg timestamp="20150709 15:20:51.312" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:51.313" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:51.312" starttime="20150709 15:20:51.281"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:51.316" level="INFO">Executing command 'rm tmpfilemonitor80.log'.</msg>
<msg timestamp="20150709 15:20:51.388" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:51.389" starttime="20150709 15:20:51.314"></status>
</kw>
<msg timestamp="20150709 15:20:51.391" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:51.390" starttime="20150709 15:20:51.096"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:51.398" starttime="20150709 15:20:51.392"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:51.407" starttime="20150709 15:20:51.405"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:51.410" starttime="20150709 15:20:51.408"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:51.411" starttime="20150709 15:20:51.399"></status>
</kw>
<msg timestamp="20150709 15:20:51.413" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:51.413" starttime="20150709 15:20:51.093"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:51.414" starttime="20150709 15:20:50.502"></status>
</kw>
<kw type="foritem" name="${i} = 81">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:51.418" level="INFO">
*********** Experiment: 81 ************</msg>
<status status="PASS" endtime="20150709 15:20:51.419" starttime="20150709 15:20:51.416"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:51.455" starttime="20150709 15:20:51.453"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:51.515" starttime="20150709 15:20:51.462"></status>
</kw>
<msg timestamp="20150709 15:20:51.517" level="INFO">${ssh_connection} = 81</msg>
<status status="PASS" endtime="20150709 15:20:51.517" starttime="20150709 15:20:51.456"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:51.528" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:51.957" level="INFO">Read output: Last login: Thu Jul  9 13:20:50 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:51.958" starttime="20150709 15:20:51.526"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:51.959" starttime="20150709 15:20:51.519"></status>
</kw>
<msg timestamp="20150709 15:20:51.960" level="INFO">${ssh_connection} = 81</msg>
<status status="PASS" endtime="20150709 15:20:51.960" starttime="20150709 15:20:51.445"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:51.965" starttime="20150709 15:20:51.964"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:51.967" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor81.log'.</msg>
<status status="PASS" endtime="20150709 15:20:51.970" starttime="20150709 15:20:51.965"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:51.972" starttime="20150709 15:20:51.961"></status>
</kw>
<msg timestamp="20150709 15:20:51.974" level="INFO">${ssh_connection} = 81</msg>
<status status="PASS" endtime="20150709 15:20:51.973" starttime="20150709 15:20:51.434"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:51.987" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:51.988" starttime="20150709 15:20:51.975"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:52.005" starttime="20150709 15:20:52.003"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:52.012" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:52.011" starttime="20150709 15:20:52.006"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:52.017" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:52.018" starttime="20150709 15:20:52.013"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:52.028" starttime="20150709 15:20:52.025"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:52.030" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:52.073" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:52.075" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:52.074" starttime="20150709 15:20:52.029"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:52.078" starttime="20150709 15:20:52.076"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:52.080" starttime="20150709 15:20:52.079"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:52.083" starttime="20150709 15:20:52.081"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:52.087" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:52.144" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:52.146" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:52.147" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:52.145" starttime="20150709 15:20:52.084"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:52.154" starttime="20150709 15:20:52.148"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:52.157" starttime="20150709 15:20:52.155"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:52.159" starttime="20150709 15:20:52.158"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:52.162" starttime="20150709 15:20:52.160"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:52.165" starttime="20150709 15:20:52.163"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:52.167" starttime="20150709 15:20:52.166"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:52.170" starttime="20150709 15:20:52.168"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:52.173" starttime="20150709 15:20:52.171"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:52.175" starttime="20150709 15:20:52.174"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:52.178" starttime="20150709 15:20:52.176"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:52.180" starttime="20150709 15:20:52.179"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:52.182" starttime="20150709 15:20:52.019"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:52.185" level="INFO">Starting command 'cat tmpfilemonitor81.log'.</msg>
<status status="PASS" endtime="20150709 15:20:52.188" starttime="20150709 15:20:52.182"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:52.191" level="INFO">Reading output of command 'cat tmpfilemonitor81.log'.</msg>
<msg timestamp="20150709 15:20:52.223" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:52.224" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:52.223" starttime="20150709 15:20:52.190"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:52.227" level="INFO">Executing command 'rm tmpfilemonitor81.log'.</msg>
<msg timestamp="20150709 15:20:52.299" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:52.299" starttime="20150709 15:20:52.225"></status>
</kw>
<msg timestamp="20150709 15:20:52.303" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:52.301" starttime="20150709 15:20:51.997"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:52.310" starttime="20150709 15:20:52.304"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:52.320" starttime="20150709 15:20:52.317"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:52.323" starttime="20150709 15:20:52.321"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:52.324" starttime="20150709 15:20:52.311"></status>
</kw>
<msg timestamp="20150709 15:20:52.327" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:52.326" starttime="20150709 15:20:51.990"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:52.328" starttime="20150709 15:20:51.415"></status>
</kw>
<kw type="foritem" name="${i} = 82">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:52.332" level="INFO">
*********** Experiment: 82 ************</msg>
<status status="PASS" endtime="20150709 15:20:52.333" starttime="20150709 15:20:52.329"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:52.368" starttime="20150709 15:20:52.366"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:52.420" starttime="20150709 15:20:52.376"></status>
</kw>
<msg timestamp="20150709 15:20:52.422" level="INFO">${ssh_connection} = 82</msg>
<status status="PASS" endtime="20150709 15:20:52.421" starttime="20150709 15:20:52.369"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:52.431" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:52.799" level="INFO">Read output: Last login: Thu Jul  9 13:20:51 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:52.800" starttime="20150709 15:20:52.429"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:52.802" starttime="20150709 15:20:52.423"></status>
</kw>
<msg timestamp="20150709 15:20:52.804" level="INFO">${ssh_connection} = 82</msg>
<status status="PASS" endtime="20150709 15:20:52.803" starttime="20150709 15:20:52.358"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:52.815" starttime="20150709 15:20:52.813"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:52.819" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor82.log'.</msg>
<status status="PASS" endtime="20150709 15:20:52.823" starttime="20150709 15:20:52.816"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:52.824" starttime="20150709 15:20:52.806"></status>
</kw>
<msg timestamp="20150709 15:20:52.826" level="INFO">${ssh_connection} = 82</msg>
<status status="PASS" endtime="20150709 15:20:52.826" starttime="20150709 15:20:52.347"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:52.839" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:52.840" starttime="20150709 15:20:52.827"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:52.856" starttime="20150709 15:20:52.854"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:52.864" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:52.863" starttime="20150709 15:20:52.857"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:52.869" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:52.870" starttime="20150709 15:20:52.865"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:52.879" starttime="20150709 15:20:52.877"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:52.882" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:52.914" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:52.915" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:52.914" starttime="20150709 15:20:52.880"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:52.918" starttime="20150709 15:20:52.916"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:52.920" starttime="20150709 15:20:52.919"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:52.923" starttime="20150709 15:20:52.921"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:52.927" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:52.993" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:52.995" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:52.996" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:52.995" starttime="20150709 15:20:52.924"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:53.003" starttime="20150709 15:20:52.997"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:53.007" starttime="20150709 15:20:53.005"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:53.009" starttime="20150709 15:20:53.008"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:53.012" starttime="20150709 15:20:53.010"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:53.015" starttime="20150709 15:20:53.013"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:53.017" starttime="20150709 15:20:53.016"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:53.020" starttime="20150709 15:20:53.018"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:53.023" starttime="20150709 15:20:53.021"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:53.025" starttime="20150709 15:20:53.024"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:53.028" starttime="20150709 15:20:53.026"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:53.030" starttime="20150709 15:20:53.029"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:53.032" starttime="20150709 15:20:52.871"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:53.035" level="INFO">Starting command 'cat tmpfilemonitor82.log'.</msg>
<status status="PASS" endtime="20150709 15:20:53.040" starttime="20150709 15:20:53.033"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:53.042" level="INFO">Reading output of command 'cat tmpfilemonitor82.log'.</msg>
<msg timestamp="20150709 15:20:53.080" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:53.082" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:53.081" starttime="20150709 15:20:53.041"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:53.085" level="INFO">Executing command 'rm tmpfilemonitor82.log'.</msg>
<msg timestamp="20150709 15:20:53.160" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:53.161" starttime="20150709 15:20:53.083"></status>
</kw>
<msg timestamp="20150709 15:20:53.165" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:53.163" starttime="20150709 15:20:52.848"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:53.172" starttime="20150709 15:20:53.166"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:53.182" starttime="20150709 15:20:53.179"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:53.185" starttime="20150709 15:20:53.183"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:53.186" starttime="20150709 15:20:53.174"></status>
</kw>
<msg timestamp="20150709 15:20:53.188" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:53.187" starttime="20150709 15:20:52.842"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:53.189" starttime="20150709 15:20:52.329"></status>
</kw>
<kw type="foritem" name="${i} = 83">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:53.193" level="INFO">
*********** Experiment: 83 ************</msg>
<status status="PASS" endtime="20150709 15:20:53.194" starttime="20150709 15:20:53.191"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:53.230" starttime="20150709 15:20:53.228"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:53.301" starttime="20150709 15:20:53.237"></status>
</kw>
<msg timestamp="20150709 15:20:53.303" level="INFO">${ssh_connection} = 83</msg>
<status status="PASS" endtime="20150709 15:20:53.302" starttime="20150709 15:20:53.231"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:53.318" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:53.646" level="INFO">Read output: Last login: Thu Jul  9 13:20:52 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:53.647" starttime="20150709 15:20:53.311"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:53.648" starttime="20150709 15:20:53.304"></status>
</kw>
<msg timestamp="20150709 15:20:53.650" level="INFO">${ssh_connection} = 83</msg>
<status status="PASS" endtime="20150709 15:20:53.649" starttime="20150709 15:20:53.219"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:53.661" starttime="20150709 15:20:53.659"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:53.664" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor83.log'.</msg>
<status status="PASS" endtime="20150709 15:20:53.669" starttime="20150709 15:20:53.662"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:53.670" starttime="20150709 15:20:53.652"></status>
</kw>
<msg timestamp="20150709 15:20:53.672" level="INFO">${ssh_connection} = 83</msg>
<status status="PASS" endtime="20150709 15:20:53.671" starttime="20150709 15:20:53.208"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:53.685" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:53.686" starttime="20150709 15:20:53.673"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:53.703" starttime="20150709 15:20:53.701"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:53.710" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:53.710" starttime="20150709 15:20:53.704"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:53.716" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:53.717" starttime="20150709 15:20:53.711"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:53.728" starttime="20150709 15:20:53.724"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:53.731" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:53.769" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:53.770" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:53.770" starttime="20150709 15:20:53.729"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:53.773" starttime="20150709 15:20:53.771"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:53.776" starttime="20150709 15:20:53.774"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:53.778" starttime="20150709 15:20:53.776"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:53.782" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:53.849" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:53.851" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:53.851" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:53.850" starttime="20150709 15:20:53.779"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:53.858" starttime="20150709 15:20:53.852"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:53.860" starttime="20150709 15:20:53.859"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:53.863" starttime="20150709 15:20:53.861"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:53.866" starttime="20150709 15:20:53.864"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:53.868" starttime="20150709 15:20:53.867"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:53.871" starttime="20150709 15:20:53.869"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:53.874" starttime="20150709 15:20:53.872"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:53.876" starttime="20150709 15:20:53.875"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:53.879" starttime="20150709 15:20:53.877"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:53.882" starttime="20150709 15:20:53.880"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:53.884" starttime="20150709 15:20:53.883"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:53.885" starttime="20150709 15:20:53.719"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:53.888" level="INFO">Starting command 'cat tmpfilemonitor83.log'.</msg>
<status status="PASS" endtime="20150709 15:20:53.892" starttime="20150709 15:20:53.886"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:53.895" level="INFO">Reading output of command 'cat tmpfilemonitor83.log'.</msg>
<msg timestamp="20150709 15:20:53.924" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:53.925" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:53.924" starttime="20150709 15:20:53.894"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:53.928" level="INFO">Executing command 'rm tmpfilemonitor83.log'.</msg>
<msg timestamp="20150709 15:20:53.999" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:54.000" starttime="20150709 15:20:53.926"></status>
</kw>
<msg timestamp="20150709 15:20:54.004" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:54.002" starttime="20150709 15:20:53.695"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:54.011" starttime="20150709 15:20:54.005"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:54.020" starttime="20150709 15:20:54.018"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:54.023" starttime="20150709 15:20:54.021"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:54.024" starttime="20150709 15:20:54.012"></status>
</kw>
<msg timestamp="20150709 15:20:54.026" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:54.025" starttime="20150709 15:20:53.688"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:54.027" starttime="20150709 15:20:53.190"></status>
</kw>
<kw type="foritem" name="${i} = 84">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:54.031" level="INFO">
*********** Experiment: 84 ************</msg>
<status status="PASS" endtime="20150709 15:20:54.032" starttime="20150709 15:20:54.029"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:54.058" starttime="20150709 15:20:54.056"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:54.117" starttime="20150709 15:20:54.065"></status>
</kw>
<msg timestamp="20150709 15:20:54.119" level="INFO">${ssh_connection} = 84</msg>
<status status="PASS" endtime="20150709 15:20:54.118" starttime="20150709 15:20:54.059"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:54.130" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:54.544" level="INFO">Read output: Last login: Thu Jul  9 13:20:53 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:54.545" starttime="20150709 15:20:54.127"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:54.546" starttime="20150709 15:20:54.120"></status>
</kw>
<msg timestamp="20150709 15:20:54.547" level="INFO">${ssh_connection} = 84</msg>
<status status="PASS" endtime="20150709 15:20:54.547" starttime="20150709 15:20:54.050"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:54.552" starttime="20150709 15:20:54.551"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:54.554" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor84.log'.</msg>
<status status="PASS" endtime="20150709 15:20:54.557" starttime="20150709 15:20:54.553"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:54.557" starttime="20150709 15:20:54.548"></status>
</kw>
<msg timestamp="20150709 15:20:54.558" level="INFO">${ssh_connection} = 84</msg>
<status status="PASS" endtime="20150709 15:20:54.558" starttime="20150709 15:20:54.041"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:54.570" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:54.570" starttime="20150709 15:20:54.559"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:54.578" starttime="20150709 15:20:54.577"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:54.582" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:54.581" starttime="20150709 15:20:54.578"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:54.586" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:54.586" starttime="20150709 15:20:54.582"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:54.591" starttime="20150709 15:20:54.590"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:54.592" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:54.624" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:54.626" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:54.625" starttime="20150709 15:20:54.592"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:54.629" starttime="20150709 15:20:54.627"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:54.632" starttime="20150709 15:20:54.630"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:54.634" starttime="20150709 15:20:54.633"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:54.638" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:54.696" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:54.698" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:54.698" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:54.697" starttime="20150709 15:20:54.635"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:54.705" starttime="20150709 15:20:54.699"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:54.708" starttime="20150709 15:20:54.706"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:54.710" starttime="20150709 15:20:54.709"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:54.713" starttime="20150709 15:20:54.711"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:54.715" starttime="20150709 15:20:54.714"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:54.718" starttime="20150709 15:20:54.716"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:54.721" starttime="20150709 15:20:54.719"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:54.723" starttime="20150709 15:20:54.722"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:54.726" starttime="20150709 15:20:54.724"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:54.728" starttime="20150709 15:20:54.727"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:54.731" starttime="20150709 15:20:54.729"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:54.732" starttime="20150709 15:20:54.587"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:54.735" level="INFO">Starting command 'cat tmpfilemonitor84.log'.</msg>
<status status="PASS" endtime="20150709 15:20:54.739" starttime="20150709 15:20:54.733"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:54.742" level="INFO">Reading output of command 'cat tmpfilemonitor84.log'.</msg>
<msg timestamp="20150709 15:20:54.765" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:54.766" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:54.766" starttime="20150709 15:20:54.740"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:54.769" level="INFO">Executing command 'rm tmpfilemonitor84.log'.</msg>
<msg timestamp="20150709 15:20:54.834" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:54.835" starttime="20150709 15:20:54.767"></status>
</kw>
<msg timestamp="20150709 15:20:54.837" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:54.837" starttime="20150709 15:20:54.574"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:54.844" starttime="20150709 15:20:54.838"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:54.853" starttime="20150709 15:20:54.851"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:54.857" starttime="20150709 15:20:54.855"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:54.858" starttime="20150709 15:20:54.846"></status>
</kw>
<msg timestamp="20150709 15:20:54.860" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:54.859" starttime="20150709 15:20:54.571"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:54.860" starttime="20150709 15:20:54.028"></status>
</kw>
<kw type="foritem" name="${i} = 85">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:54.864" level="INFO">
*********** Experiment: 85 ************</msg>
<status status="PASS" endtime="20150709 15:20:54.865" starttime="20150709 15:20:54.861"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:54.899" starttime="20150709 15:20:54.898"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:54.952" starttime="20150709 15:20:54.906"></status>
</kw>
<msg timestamp="20150709 15:20:54.954" level="INFO">${ssh_connection} = 85</msg>
<status status="PASS" endtime="20150709 15:20:54.953" starttime="20150709 15:20:54.900"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:54.964" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:55.373" level="INFO">Read output: Last login: Thu Jul  9 13:20:54 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:55.374" starttime="20150709 15:20:54.962"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:55.375" starttime="20150709 15:20:54.955"></status>
</kw>
<msg timestamp="20150709 15:20:55.376" level="INFO">${ssh_connection} = 85</msg>
<status status="PASS" endtime="20150709 15:20:55.376" starttime="20150709 15:20:54.889"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:55.382" starttime="20150709 15:20:55.381"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:55.383" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor85.log'.</msg>
<status status="PASS" endtime="20150709 15:20:55.387" starttime="20150709 15:20:55.382"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:55.387" starttime="20150709 15:20:55.378"></status>
</kw>
<msg timestamp="20150709 15:20:55.388" level="INFO">${ssh_connection} = 85</msg>
<status status="PASS" endtime="20150709 15:20:55.388" starttime="20150709 15:20:54.878"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:55.401" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:55.401" starttime="20150709 15:20:55.389"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:55.410" starttime="20150709 15:20:55.408"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:55.413" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:55.413" starttime="20150709 15:20:55.410"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:55.418" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:55.418" starttime="20150709 15:20:55.413"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:55.422" starttime="20150709 15:20:55.421"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:55.423" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:55.469" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:55.471" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:55.470" starttime="20150709 15:20:55.423"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:55.473" starttime="20150709 15:20:55.472"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:55.476" starttime="20150709 15:20:55.474"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:55.479" starttime="20150709 15:20:55.477"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:55.482" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:55.548" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:55.550" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:55.550" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:55.549" starttime="20150709 15:20:55.480"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:55.557" starttime="20150709 15:20:55.551"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:55.560" starttime="20150709 15:20:55.558"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:55.563" starttime="20150709 15:20:55.561"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:55.565" starttime="20150709 15:20:55.563"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:55.568" starttime="20150709 15:20:55.566"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:55.570" starttime="20150709 15:20:55.569"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:55.573" starttime="20150709 15:20:55.572"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:55.576" starttime="20150709 15:20:55.574"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:55.578" starttime="20150709 15:20:55.577"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:55.581" starttime="20150709 15:20:55.579"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:55.583" starttime="20150709 15:20:55.582"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:55.585" starttime="20150709 15:20:55.419"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:55.588" level="INFO">Starting command 'cat tmpfilemonitor85.log'.</msg>
<status status="PASS" endtime="20150709 15:20:55.592" starttime="20150709 15:20:55.586"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:55.594" level="INFO">Reading output of command 'cat tmpfilemonitor85.log'.</msg>
<msg timestamp="20150709 15:20:55.618" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:55.619" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:55.618" starttime="20150709 15:20:55.593"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:55.622" level="INFO">Executing command 'rm tmpfilemonitor85.log'.</msg>
<msg timestamp="20150709 15:20:55.695" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:55.696" starttime="20150709 15:20:55.620"></status>
</kw>
<msg timestamp="20150709 15:20:55.698" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:55.697" starttime="20150709 15:20:55.406"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:55.705" starttime="20150709 15:20:55.699"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:55.715" starttime="20150709 15:20:55.712"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:55.719" starttime="20150709 15:20:55.716"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:55.720" starttime="20150709 15:20:55.707"></status>
</kw>
<msg timestamp="20150709 15:20:55.722" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:55.721" starttime="20150709 15:20:55.403"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:55.723" starttime="20150709 15:20:54.861"></status>
</kw>
<kw type="foritem" name="${i} = 86">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:55.727" level="INFO">
*********** Experiment: 86 ************</msg>
<status status="PASS" endtime="20150709 15:20:55.728" starttime="20150709 15:20:55.725"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:55.762" starttime="20150709 15:20:55.761"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:55.820" starttime="20150709 15:20:55.770"></status>
</kw>
<msg timestamp="20150709 15:20:55.822" level="INFO">${ssh_connection} = 86</msg>
<status status="PASS" endtime="20150709 15:20:55.821" starttime="20150709 15:20:55.764"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:55.832" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:56.390" level="INFO">Read output: Last login: Thu Jul  9 13:20:55 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:56.392" starttime="20150709 15:20:55.829"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:56.394" starttime="20150709 15:20:55.823"></status>
</kw>
<msg timestamp="20150709 15:20:56.397" level="INFO">${ssh_connection} = 86</msg>
<status status="PASS" endtime="20150709 15:20:56.396" starttime="20150709 15:20:55.753"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:56.409" starttime="20150709 15:20:56.407"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:56.413" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor86.log'.</msg>
<status status="PASS" endtime="20150709 15:20:56.417" starttime="20150709 15:20:56.410"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:56.418" starttime="20150709 15:20:56.400"></status>
</kw>
<msg timestamp="20150709 15:20:56.421" level="INFO">${ssh_connection} = 86</msg>
<status status="PASS" endtime="20150709 15:20:56.419" starttime="20150709 15:20:55.741"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:56.433" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:56.434" starttime="20150709 15:20:56.422"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:56.451" starttime="20150709 15:20:56.449"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:56.459" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:56.458" starttime="20150709 15:20:56.452"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:56.464" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:56.465" starttime="20150709 15:20:56.460"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:56.475" starttime="20150709 15:20:56.473"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:56.478" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:56.520" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:56.522" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:56.521" starttime="20150709 15:20:56.476"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:56.525" starttime="20150709 15:20:56.523"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:56.527" starttime="20150709 15:20:56.526"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:56.530" starttime="20150709 15:20:56.528"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:56.534" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:56.609" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:56.611" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:56.611" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:56.610" starttime="20150709 15:20:56.531"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:56.618" starttime="20150709 15:20:56.612"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:56.621" starttime="20150709 15:20:56.619"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:56.624" starttime="20150709 15:20:56.622"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:56.626" starttime="20150709 15:20:56.625"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:56.629" starttime="20150709 15:20:56.627"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:56.632" starttime="20150709 15:20:56.630"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:56.635" starttime="20150709 15:20:56.633"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:56.637" starttime="20150709 15:20:56.635"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:56.640" starttime="20150709 15:20:56.638"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:56.642" starttime="20150709 15:20:56.641"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:56.645" starttime="20150709 15:20:56.643"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:56.646" starttime="20150709 15:20:56.467"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:56.649" level="INFO">Starting command 'cat tmpfilemonitor86.log'.</msg>
<status status="PASS" endtime="20150709 15:20:56.654" starttime="20150709 15:20:56.647"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:56.656" level="INFO">Reading output of command 'cat tmpfilemonitor86.log'.</msg>
<msg timestamp="20150709 15:20:56.694" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:56.695" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:56.694" starttime="20150709 15:20:56.655"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:56.699" level="INFO">Executing command 'rm tmpfilemonitor86.log'.</msg>
<msg timestamp="20150709 15:20:56.765" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:56.766" starttime="20150709 15:20:56.697"></status>
</kw>
<msg timestamp="20150709 15:20:56.768" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:56.767" starttime="20150709 15:20:56.443"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:56.775" starttime="20150709 15:20:56.769"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:56.784" starttime="20150709 15:20:56.782"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:56.789" starttime="20150709 15:20:56.786"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:56.790" starttime="20150709 15:20:56.776"></status>
</kw>
<msg timestamp="20150709 15:20:56.792" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:56.791" starttime="20150709 15:20:56.436"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:56.793" starttime="20150709 15:20:55.724"></status>
</kw>
<kw type="foritem" name="${i} = 87">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:56.797" level="INFO">
*********** Experiment: 87 ************</msg>
<status status="PASS" endtime="20150709 15:20:56.798" starttime="20150709 15:20:56.795"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:56.833" starttime="20150709 15:20:56.831"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:56.891" starttime="20150709 15:20:56.840"></status>
</kw>
<msg timestamp="20150709 15:20:56.892" level="INFO">${ssh_connection} = 87</msg>
<status status="PASS" endtime="20150709 15:20:56.892" starttime="20150709 15:20:56.834"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:56.902" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:57.356" level="INFO">Read output: Last login: Thu Jul  9 13:20:56 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:57.357" starttime="20150709 15:20:56.900"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:57.358" starttime="20150709 15:20:56.894"></status>
</kw>
<msg timestamp="20150709 15:20:57.360" level="INFO">${ssh_connection} = 87</msg>
<status status="PASS" endtime="20150709 15:20:57.359" starttime="20150709 15:20:56.823"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:57.365" starttime="20150709 15:20:57.364"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:57.367" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor87.log'.</msg>
<status status="PASS" endtime="20150709 15:20:57.370" starttime="20150709 15:20:57.365"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:57.370" starttime="20150709 15:20:57.361"></status>
</kw>
<msg timestamp="20150709 15:20:57.372" level="INFO">${ssh_connection} = 87</msg>
<status status="PASS" endtime="20150709 15:20:57.371" starttime="20150709 15:20:56.812"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:57.383" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:57.383" starttime="20150709 15:20:57.372"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:57.391" starttime="20150709 15:20:57.390"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:57.394" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:57.394" starttime="20150709 15:20:57.391"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:57.398" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:57.399" starttime="20150709 15:20:57.394"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:57.403" starttime="20150709 15:20:57.402"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:57.404" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:57.442" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:57.443" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:57.443" starttime="20150709 15:20:57.404"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:57.446" starttime="20150709 15:20:57.444"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:57.449" starttime="20150709 15:20:57.447"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:57.452" starttime="20150709 15:20:57.450"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:57.456" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:57.520" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:57.521" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:57.522" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:57.521" starttime="20150709 15:20:57.453"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:57.529" starttime="20150709 15:20:57.523"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:57.532" starttime="20150709 15:20:57.530"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:57.534" starttime="20150709 15:20:57.533"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:57.537" starttime="20150709 15:20:57.535"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:57.539" starttime="20150709 15:20:57.538"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:57.542" starttime="20150709 15:20:57.540"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:57.545" starttime="20150709 15:20:57.543"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:57.569" starttime="20150709 15:20:57.567"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:57.573" starttime="20150709 15:20:57.570"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:57.575" starttime="20150709 15:20:57.574"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:57.578" starttime="20150709 15:20:57.576"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:57.579" starttime="20150709 15:20:57.399"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:57.582" level="INFO">Starting command 'cat tmpfilemonitor87.log'.</msg>
<status status="PASS" endtime="20150709 15:20:57.587" starttime="20150709 15:20:57.580"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:57.589" level="INFO">Reading output of command 'cat tmpfilemonitor87.log'.</msg>
<msg timestamp="20150709 15:20:57.625" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:57.626" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:57.626" starttime="20150709 15:20:57.588"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:57.629" level="INFO">Executing command 'rm tmpfilemonitor87.log'.</msg>
<msg timestamp="20150709 15:20:57.711" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:57.712" starttime="20150709 15:20:57.627"></status>
</kw>
<msg timestamp="20150709 15:20:57.714" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:57.714" starttime="20150709 15:20:57.387"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:57.722" starttime="20150709 15:20:57.715"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:57.731" starttime="20150709 15:20:57.729"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:57.734" starttime="20150709 15:20:57.733"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:57.735" starttime="20150709 15:20:57.723"></status>
</kw>
<msg timestamp="20150709 15:20:57.737" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:57.737" starttime="20150709 15:20:57.384"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:57.738" starttime="20150709 15:20:56.794"></status>
</kw>
<kw type="foritem" name="${i} = 88">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:57.742" level="INFO">
*********** Experiment: 88 ************</msg>
<status status="PASS" endtime="20150709 15:20:57.743" starttime="20150709 15:20:57.740"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:57.779" starttime="20150709 15:20:57.777"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:57.843" starttime="20150709 15:20:57.787"></status>
</kw>
<msg timestamp="20150709 15:20:57.845" level="INFO">${ssh_connection} = 88</msg>
<status status="PASS" endtime="20150709 15:20:57.844" starttime="20150709 15:20:57.780"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:57.855" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:58.299" level="INFO">Read output: Last login: Thu Jul  9 13:20:57 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:58.301" starttime="20150709 15:20:57.853"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:58.303" starttime="20150709 15:20:57.846"></status>
</kw>
<msg timestamp="20150709 15:20:58.306" level="INFO">${ssh_connection} = 88</msg>
<status status="PASS" endtime="20150709 15:20:58.305" starttime="20150709 15:20:57.768"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:58.317" starttime="20150709 15:20:58.315"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:58.320" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor88.log'.</msg>
<status status="PASS" endtime="20150709 15:20:58.324" starttime="20150709 15:20:58.318"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:58.325" starttime="20150709 15:20:58.309"></status>
</kw>
<msg timestamp="20150709 15:20:58.326" level="INFO">${ssh_connection} = 88</msg>
<status status="PASS" endtime="20150709 15:20:58.325" starttime="20150709 15:20:57.757"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:58.337" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:58.337" starttime="20150709 15:20:58.327"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:58.345" starttime="20150709 15:20:58.344"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:58.348" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:58.348" starttime="20150709 15:20:58.345"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:58.352" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:58.352" starttime="20150709 15:20:58.349"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:58.356" starttime="20150709 15:20:58.355"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:58.358" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:58.399" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:58.400" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:58.400" starttime="20150709 15:20:58.357"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:58.401" starttime="20150709 15:20:58.400"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:58.402" starttime="20150709 15:20:58.402"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:58.403" starttime="20150709 15:20:58.403"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:58.405" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:58.482" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:58.483" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:58.484" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:58.482" starttime="20150709 15:20:58.404"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:58.490" starttime="20150709 15:20:58.485"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:58.493" starttime="20150709 15:20:58.491"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:58.496" starttime="20150709 15:20:58.494"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:58.498" starttime="20150709 15:20:58.496"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:58.501" starttime="20150709 15:20:58.499"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:58.503" starttime="20150709 15:20:58.502"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:58.506" starttime="20150709 15:20:58.504"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:58.509" starttime="20150709 15:20:58.507"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:58.511" starttime="20150709 15:20:58.510"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:58.514" starttime="20150709 15:20:58.512"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:58.516" starttime="20150709 15:20:58.515"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:58.518" starttime="20150709 15:20:58.353"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:58.521" level="INFO">Starting command 'cat tmpfilemonitor88.log'.</msg>
<status status="PASS" endtime="20150709 15:20:58.526" starttime="20150709 15:20:58.519"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:58.528" level="INFO">Reading output of command 'cat tmpfilemonitor88.log'.</msg>
<msg timestamp="20150709 15:20:58.556" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:58.557" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:58.556" starttime="20150709 15:20:58.527"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:58.560" level="INFO">Executing command 'rm tmpfilemonitor88.log'.</msg>
<msg timestamp="20150709 15:20:58.646" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:58.647" starttime="20150709 15:20:58.558"></status>
</kw>
<msg timestamp="20150709 15:20:58.649" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:58.648" starttime="20150709 15:20:58.341"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:58.656" starttime="20150709 15:20:58.650"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:58.665" starttime="20150709 15:20:58.663"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:58.670" starttime="20150709 15:20:58.667"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:58.671" starttime="20150709 15:20:58.658"></status>
</kw>
<msg timestamp="20150709 15:20:58.673" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:58.672" starttime="20150709 15:20:58.338"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:58.673" starttime="20150709 15:20:57.739"></status>
</kw>
<kw type="foritem" name="${i} = 89">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:58.678" level="INFO">
*********** Experiment: 89 ************</msg>
<status status="PASS" endtime="20150709 15:20:58.679" starttime="20150709 15:20:58.675"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:58.714" starttime="20150709 15:20:58.712"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:58.777" starttime="20150709 15:20:58.721"></status>
</kw>
<msg timestamp="20150709 15:20:58.779" level="INFO">${ssh_connection} = 89</msg>
<status status="PASS" endtime="20150709 15:20:58.778" starttime="20150709 15:20:58.715"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:58.789" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:20:59.294" level="INFO">Read output: Last login: Thu Jul  9 13:20:58 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:20:59.295" starttime="20150709 15:20:58.786"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:59.297" starttime="20150709 15:20:58.780"></status>
</kw>
<msg timestamp="20150709 15:20:59.301" level="INFO">${ssh_connection} = 89</msg>
<status status="PASS" endtime="20150709 15:20:59.299" starttime="20150709 15:20:58.704"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:59.312" starttime="20150709 15:20:59.309"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:59.315" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor89.log'.</msg>
<status status="PASS" endtime="20150709 15:20:59.319" starttime="20150709 15:20:59.313"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:59.320" starttime="20150709 15:20:59.303"></status>
</kw>
<msg timestamp="20150709 15:20:59.323" level="INFO">${ssh_connection} = 89</msg>
<status status="PASS" endtime="20150709 15:20:59.322" starttime="20150709 15:20:58.692"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:20:59.336" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:20:59.337" starttime="20150709 15:20:59.324"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:59.353" starttime="20150709 15:20:59.351"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:20:59.361" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:20:59.360" starttime="20150709 15:20:59.354"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:20:59.367" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:20:59.368" starttime="20150709 15:20:59.362"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:59.377" starttime="20150709 15:20:59.375"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:20:59.380" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:20:59.424" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:59.426" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:20:59.425" starttime="20150709 15:20:59.378"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:59.428" starttime="20150709 15:20:59.427"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:59.431" starttime="20150709 15:20:59.429"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:59.433" starttime="20150709 15:20:59.432"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:20:59.437" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:20:59.497" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:59.498" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:20:59.499" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:20:59.498" starttime="20150709 15:20:59.434"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:59.506" starttime="20150709 15:20:59.500"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:59.508" starttime="20150709 15:20:59.507"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:59.511" starttime="20150709 15:20:59.509"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:59.514" starttime="20150709 15:20:59.512"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:59.516" starttime="20150709 15:20:59.515"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:59.519" starttime="20150709 15:20:59.517"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:59.522" starttime="20150709 15:20:59.520"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:59.524" starttime="20150709 15:20:59.522"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:59.527" starttime="20150709 15:20:59.525"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:59.529" starttime="20150709 15:20:59.528"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:59.532" starttime="20150709 15:20:59.530"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:59.533" starttime="20150709 15:20:59.369"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:59.536" level="INFO">Starting command 'cat tmpfilemonitor89.log'.</msg>
<status status="PASS" endtime="20150709 15:20:59.540" starttime="20150709 15:20:59.534"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:20:59.542" level="INFO">Reading output of command 'cat tmpfilemonitor89.log'.</msg>
<msg timestamp="20150709 15:20:59.577" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:20:59.579" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:20:59.578" starttime="20150709 15:20:59.541"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:20:59.582" level="INFO">Executing command 'rm tmpfilemonitor89.log'.</msg>
<msg timestamp="20150709 15:20:59.647" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:20:59.648" starttime="20150709 15:20:59.580"></status>
</kw>
<msg timestamp="20150709 15:20:59.650" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:59.650" starttime="20150709 15:20:59.345"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:59.657" starttime="20150709 15:20:59.651"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:59.667" starttime="20150709 15:20:59.665"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:20:59.671" starttime="20150709 15:20:59.668"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:59.672" starttime="20150709 15:20:59.659"></status>
</kw>
<msg timestamp="20150709 15:20:59.674" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:20:59.674" starttime="20150709 15:20:59.339"></status>
</kw>
<status status="PASS" endtime="20150709 15:20:59.675" starttime="20150709 15:20:58.675"></status>
</kw>
<kw type="foritem" name="${i} = 90">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:20:59.679" level="INFO">
*********** Experiment: 90 ************</msg>
<status status="PASS" endtime="20150709 15:20:59.680" starttime="20150709 15:20:59.677"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:59.715" starttime="20150709 15:20:59.713"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:20:59.765" starttime="20150709 15:20:59.722"></status>
</kw>
<msg timestamp="20150709 15:20:59.767" level="INFO">${ssh_connection} = 90</msg>
<status status="PASS" endtime="20150709 15:20:59.766" starttime="20150709 15:20:59.716"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:20:59.776" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:21:00.230" level="INFO">Read output: Last login: Thu Jul  9 13:20:59 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:21:00.231" starttime="20150709 15:20:59.774"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:00.232" starttime="20150709 15:20:59.768"></status>
</kw>
<msg timestamp="20150709 15:21:00.234" level="INFO">${ssh_connection} = 90</msg>
<status status="PASS" endtime="20150709 15:21:00.233" starttime="20150709 15:20:59.705"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:00.239" starttime="20150709 15:21:00.238"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:21:00.241" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor90.log'.</msg>
<status status="PASS" endtime="20150709 15:21:00.244" starttime="20150709 15:21:00.240"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:00.245" starttime="20150709 15:21:00.235"></status>
</kw>
<msg timestamp="20150709 15:21:00.246" level="INFO">${ssh_connection} = 90</msg>
<status status="PASS" endtime="20150709 15:21:00.245" starttime="20150709 15:20:59.693"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:21:00.257" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:21:00.257" starttime="20150709 15:21:00.246"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:00.264" starttime="20150709 15:21:00.264"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:21:00.268" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:21:00.268" starttime="20150709 15:21:00.265"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:21:00.273" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:21:00.273" starttime="20150709 15:21:00.268"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:00.278" starttime="20150709 15:21:00.277"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:21:00.279" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:21:00.311" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:21:00.312" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:21:00.312" starttime="20150709 15:21:00.278"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:00.315" starttime="20150709 15:21:00.313"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:00.317" starttime="20150709 15:21:00.316"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:00.320" starttime="20150709 15:21:00.318"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:21:00.324" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:21:00.386" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:21:00.387" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:21:00.387" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:21:00.386" starttime="20150709 15:21:00.321"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:00.392" starttime="20150709 15:21:00.388"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:00.393" starttime="20150709 15:21:00.392"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:00.396" starttime="20150709 15:21:00.394"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:00.397" starttime="20150709 15:21:00.396"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:00.399" starttime="20150709 15:21:00.398"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:00.401" starttime="20150709 15:21:00.400"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:00.403" starttime="20150709 15:21:00.401"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:00.405" starttime="20150709 15:21:00.403"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:00.406" starttime="20150709 15:21:00.405"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:00.408" starttime="20150709 15:21:00.407"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:00.410" starttime="20150709 15:21:00.409"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:00.411" starttime="20150709 15:21:00.274"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:21:00.413" level="INFO">Starting command 'cat tmpfilemonitor90.log'.</msg>
<status status="PASS" endtime="20150709 15:21:00.417" starttime="20150709 15:21:00.411"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:21:00.418" level="INFO">Reading output of command 'cat tmpfilemonitor90.log'.</msg>
<msg timestamp="20150709 15:21:00.444" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:21:00.445" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:21:00.445" starttime="20150709 15:21:00.417"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:21:00.448" level="INFO">Executing command 'rm tmpfilemonitor90.log'.</msg>
<msg timestamp="20150709 15:21:00.520" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:21:00.521" starttime="20150709 15:21:00.446"></status>
</kw>
<msg timestamp="20150709 15:21:00.523" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:21:00.523" starttime="20150709 15:21:00.261"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:00.530" starttime="20150709 15:21:00.524"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:00.539" starttime="20150709 15:21:00.537"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:21:00.544" starttime="20150709 15:21:00.541"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:00.545" starttime="20150709 15:21:00.531"></status>
</kw>
<msg timestamp="20150709 15:21:00.547" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:21:00.546" starttime="20150709 15:21:00.258"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:00.547" starttime="20150709 15:20:59.676"></status>
</kw>
<kw type="foritem" name="${i} = 91">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:21:00.552" level="INFO">
*********** Experiment: 91 ************</msg>
<status status="PASS" endtime="20150709 15:21:00.553" starttime="20150709 15:21:00.549"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:00.587" starttime="20150709 15:21:00.586"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:00.642" starttime="20150709 15:21:00.595"></status>
</kw>
<msg timestamp="20150709 15:21:00.644" level="INFO">${ssh_connection} = 91</msg>
<status status="PASS" endtime="20150709 15:21:00.644" starttime="20150709 15:21:00.589"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:21:00.654" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:21:01.098" level="INFO">Read output: Last login: Thu Jul  9 13:21:00 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:21:01.100" starttime="20150709 15:21:00.652"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:01.102" starttime="20150709 15:21:00.645"></status>
</kw>
<msg timestamp="20150709 15:21:01.106" level="INFO">${ssh_connection} = 91</msg>
<status status="PASS" endtime="20150709 15:21:01.104" starttime="20150709 15:21:00.578"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:01.117" starttime="20150709 15:21:01.115"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:21:01.120" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor91.log'.</msg>
<status status="PASS" endtime="20150709 15:21:01.124" starttime="20150709 15:21:01.118"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:01.126" starttime="20150709 15:21:01.108"></status>
</kw>
<msg timestamp="20150709 15:21:01.128" level="INFO">${ssh_connection} = 91</msg>
<status status="PASS" endtime="20150709 15:21:01.127" starttime="20150709 15:21:00.566"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:21:01.141" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:21:01.142" starttime="20150709 15:21:01.129"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:01.158" starttime="20150709 15:21:01.156"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:21:01.166" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:21:01.165" starttime="20150709 15:21:01.159"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:21:01.172" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:21:01.172" starttime="20150709 15:21:01.167"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:01.182" starttime="20150709 15:21:01.180"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:21:01.185" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:21:01.225" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:21:01.227" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:21:01.226" starttime="20150709 15:21:01.183"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:01.230" starttime="20150709 15:21:01.228"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:01.232" starttime="20150709 15:21:01.231"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:01.235" starttime="20150709 15:21:01.233"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:21:01.239" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:21:01.305" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:21:01.307" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:21:01.307" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:21:01.306" starttime="20150709 15:21:01.236"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:01.315" starttime="20150709 15:21:01.309"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:01.317" starttime="20150709 15:21:01.316"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:01.320" starttime="20150709 15:21:01.318"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:01.323" starttime="20150709 15:21:01.322"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:01.326" starttime="20150709 15:21:01.324"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:01.329" starttime="20150709 15:21:01.327"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:01.332" starttime="20150709 15:21:01.330"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:01.335" starttime="20150709 15:21:01.333"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:01.338" starttime="20150709 15:21:01.336"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:01.340" starttime="20150709 15:21:01.338"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:01.343" starttime="20150709 15:21:01.341"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:01.344" starttime="20150709 15:21:01.174"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:21:01.347" level="INFO">Starting command 'cat tmpfilemonitor91.log'.</msg>
<status status="PASS" endtime="20150709 15:21:01.351" starttime="20150709 15:21:01.345"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:21:01.353" level="INFO">Reading output of command 'cat tmpfilemonitor91.log'.</msg>
<msg timestamp="20150709 15:21:01.384" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:21:01.386" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:21:01.385" starttime="20150709 15:21:01.352"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:21:01.389" level="INFO">Executing command 'rm tmpfilemonitor91.log'.</msg>
<msg timestamp="20150709 15:21:01.462" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:21:01.463" starttime="20150709 15:21:01.387"></status>
</kw>
<msg timestamp="20150709 15:21:01.466" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:21:01.465" starttime="20150709 15:21:01.150"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:01.473" starttime="20150709 15:21:01.467"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:01.483" starttime="20150709 15:21:01.481"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:21:01.487" starttime="20150709 15:21:01.484"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:01.489" starttime="20150709 15:21:01.475"></status>
</kw>
<msg timestamp="20150709 15:21:01.491" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:21:01.490" starttime="20150709 15:21:01.144"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:01.491" starttime="20150709 15:21:00.549"></status>
</kw>
<kw type="foritem" name="${i} = 92">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:21:01.496" level="INFO">
*********** Experiment: 92 ************</msg>
<status status="PASS" endtime="20150709 15:21:01.497" starttime="20150709 15:21:01.494"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:01.531" starttime="20150709 15:21:01.529"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:01.593" starttime="20150709 15:21:01.539"></status>
</kw>
<msg timestamp="20150709 15:21:01.596" level="INFO">${ssh_connection} = 92</msg>
<status status="PASS" endtime="20150709 15:21:01.595" starttime="20150709 15:21:01.532"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:21:01.607" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:21:03.286" level="INFO">Read output: Last login: Thu Jul  9 13:21:00 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:21:03.287" starttime="20150709 15:21:01.604"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:03.288" starttime="20150709 15:21:01.597"></status>
</kw>
<msg timestamp="20150709 15:21:03.290" level="INFO">${ssh_connection} = 92</msg>
<status status="PASS" endtime="20150709 15:21:03.289" starttime="20150709 15:21:01.521"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:03.295" starttime="20150709 15:21:03.294"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:21:03.296" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor92.log'.</msg>
<status status="PASS" endtime="20150709 15:21:03.300" starttime="20150709 15:21:03.295"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:03.301" starttime="20150709 15:21:03.291"></status>
</kw>
<msg timestamp="20150709 15:21:03.302" level="INFO">${ssh_connection} = 92</msg>
<status status="PASS" endtime="20150709 15:21:03.301" starttime="20150709 15:21:01.510"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:21:03.313" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:21:03.313" starttime="20150709 15:21:03.302"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:03.321" starttime="20150709 15:21:03.320"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:21:03.324" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:21:03.324" starttime="20150709 15:21:03.321"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:21:03.330" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:21:03.330" starttime="20150709 15:21:03.325"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:03.335" starttime="20150709 15:21:03.334"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:21:03.336" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:21:03.382" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:21:03.382" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:21:03.382" starttime="20150709 15:21:03.335"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:03.384" starttime="20150709 15:21:03.383"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:03.385" starttime="20150709 15:21:03.384"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:03.386" starttime="20150709 15:21:03.385"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:21:03.388" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:21:03.468" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:21:03.469" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:21:03.470" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:21:03.469" starttime="20150709 15:21:03.386"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:03.477" starttime="20150709 15:21:03.471"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:03.480" starttime="20150709 15:21:03.478"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:03.482" starttime="20150709 15:21:03.480"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:03.485" starttime="20150709 15:21:03.483"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:03.487" starttime="20150709 15:21:03.486"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:03.490" starttime="20150709 15:21:03.488"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:03.493" starttime="20150709 15:21:03.491"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:03.496" starttime="20150709 15:21:03.494"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:03.498" starttime="20150709 15:21:03.497"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:03.501" starttime="20150709 15:21:03.499"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:03.503" starttime="20150709 15:21:03.501"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:03.504" starttime="20150709 15:21:03.331"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:21:03.507" level="INFO">Starting command 'cat tmpfilemonitor92.log'.</msg>
<status status="PASS" endtime="20150709 15:21:03.512" starttime="20150709 15:21:03.505"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:21:03.515" level="INFO">Reading output of command 'cat tmpfilemonitor92.log'.</msg>
<msg timestamp="20150709 15:21:03.555" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:21:03.557" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:21:03.556" starttime="20150709 15:21:03.513"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:21:03.560" level="INFO">Executing command 'rm tmpfilemonitor92.log'.</msg>
<msg timestamp="20150709 15:21:03.632" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:21:03.633" starttime="20150709 15:21:03.558"></status>
</kw>
<msg timestamp="20150709 15:21:03.635" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:21:03.634" starttime="20150709 15:21:03.317"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:03.642" starttime="20150709 15:21:03.636"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:03.652" starttime="20150709 15:21:03.650"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:21:03.657" starttime="20150709 15:21:03.654"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:03.658" starttime="20150709 15:21:03.644"></status>
</kw>
<msg timestamp="20150709 15:21:03.660" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:21:03.659" starttime="20150709 15:21:03.314"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:03.661" starttime="20150709 15:21:01.493"></status>
</kw>
<kw type="foritem" name="${i} = 93">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:21:03.665" level="INFO">
*********** Experiment: 93 ************</msg>
<status status="PASS" endtime="20150709 15:21:03.666" starttime="20150709 15:21:03.663"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:03.722" starttime="20150709 15:21:03.720"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:03.782" starttime="20150709 15:21:03.730"></status>
</kw>
<msg timestamp="20150709 15:21:03.784" level="INFO">${ssh_connection} = 93</msg>
<status status="PASS" endtime="20150709 15:21:03.783" starttime="20150709 15:21:03.723"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:21:03.793" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:21:04.228" level="INFO">Read output: Last login: Thu Jul  9 13:21:03 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:21:04.229" starttime="20150709 15:21:03.791"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:04.231" starttime="20150709 15:21:03.785"></status>
</kw>
<msg timestamp="20150709 15:21:04.235" level="INFO">${ssh_connection} = 93</msg>
<status status="PASS" endtime="20150709 15:21:04.233" starttime="20150709 15:21:03.711"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:04.246" starttime="20150709 15:21:04.244"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:21:04.249" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor93.log'.</msg>
<status status="PASS" endtime="20150709 15:21:04.253" starttime="20150709 15:21:04.247"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:04.254" starttime="20150709 15:21:04.237"></status>
</kw>
<msg timestamp="20150709 15:21:04.257" level="INFO">${ssh_connection} = 93</msg>
<status status="PASS" endtime="20150709 15:21:04.256" starttime="20150709 15:21:03.679"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:21:04.271" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:21:04.272" starttime="20150709 15:21:04.258"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:04.289" starttime="20150709 15:21:04.287"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:21:04.296" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:21:04.296" starttime="20150709 15:21:04.290"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:21:04.303" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:21:04.304" starttime="20150709 15:21:04.297"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:04.314" starttime="20150709 15:21:04.312"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:21:04.316" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:21:04.359" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:21:04.361" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:21:04.360" starttime="20150709 15:21:04.315"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:04.364" starttime="20150709 15:21:04.362"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:04.366" starttime="20150709 15:21:04.364"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:04.368" starttime="20150709 15:21:04.367"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:21:04.372" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:21:04.444" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:21:04.446" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:21:04.447" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:21:04.445" starttime="20150709 15:21:04.369"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:04.454" starttime="20150709 15:21:04.448"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:04.457" starttime="20150709 15:21:04.455"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:04.460" starttime="20150709 15:21:04.458"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:04.462" starttime="20150709 15:21:04.461"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:04.465" starttime="20150709 15:21:04.463"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:04.467" starttime="20150709 15:21:04.466"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:04.470" starttime="20150709 15:21:04.468"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:04.472" starttime="20150709 15:21:04.471"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:04.475" starttime="20150709 15:21:04.473"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:04.477" starttime="20150709 15:21:04.476"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:04.480" starttime="20150709 15:21:04.478"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:04.481" starttime="20150709 15:21:04.306"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:21:04.484" level="INFO">Starting command 'cat tmpfilemonitor93.log'.</msg>
<status status="PASS" endtime="20150709 15:21:04.488" starttime="20150709 15:21:04.482"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:21:04.490" level="INFO">Reading output of command 'cat tmpfilemonitor93.log'.</msg>
<msg timestamp="20150709 15:21:04.527" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:21:04.529" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:21:04.528" starttime="20150709 15:21:04.489"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:21:04.532" level="INFO">Executing command 'rm tmpfilemonitor93.log'.</msg>
<msg timestamp="20150709 15:21:04.601" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:21:04.601" starttime="20150709 15:21:04.530"></status>
</kw>
<msg timestamp="20150709 15:21:04.603" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:21:04.603" starttime="20150709 15:21:04.282"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:04.610" starttime="20150709 15:21:04.605"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:04.620" starttime="20150709 15:21:04.618"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:21:04.624" starttime="20150709 15:21:04.621"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:04.625" starttime="20150709 15:21:04.612"></status>
</kw>
<msg timestamp="20150709 15:21:04.627" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:21:04.627" starttime="20150709 15:21:04.275"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:04.628" starttime="20150709 15:21:03.662"></status>
</kw>
<kw type="foritem" name="${i} = 94">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:21:04.632" level="INFO">
*********** Experiment: 94 ************</msg>
<status status="PASS" endtime="20150709 15:21:04.633" starttime="20150709 15:21:04.630"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:04.667" starttime="20150709 15:21:04.665"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:04.722" starttime="20150709 15:21:04.674"></status>
</kw>
<msg timestamp="20150709 15:21:04.723" level="INFO">${ssh_connection} = 94</msg>
<status status="PASS" endtime="20150709 15:21:04.723" starttime="20150709 15:21:04.668"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:21:04.733" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:21:05.157" level="INFO">Read output: Last login: Thu Jul  9 13:21:04 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:21:05.158" starttime="20150709 15:21:04.730"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:05.160" starttime="20150709 15:21:04.724"></status>
</kw>
<msg timestamp="20150709 15:21:05.164" level="INFO">${ssh_connection} = 94</msg>
<status status="PASS" endtime="20150709 15:21:05.162" starttime="20150709 15:21:04.657"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:05.174" starttime="20150709 15:21:05.172"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:21:05.178" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor94.log'.</msg>
<status status="PASS" endtime="20150709 15:21:05.182" starttime="20150709 15:21:05.176"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:05.183" starttime="20150709 15:21:05.166"></status>
</kw>
<msg timestamp="20150709 15:21:05.186" level="INFO">${ssh_connection} = 94</msg>
<status status="PASS" endtime="20150709 15:21:05.184" starttime="20150709 15:21:04.646"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:21:05.199" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:21:05.199" starttime="20150709 15:21:05.187"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:05.216" starttime="20150709 15:21:05.214"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:21:05.223" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:21:05.222" starttime="20150709 15:21:05.217"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:21:05.228" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:21:05.229" starttime="20150709 15:21:05.224"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:05.238" starttime="20150709 15:21:05.236"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:21:05.241" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:21:05.281" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:21:05.282" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:21:05.282" starttime="20150709 15:21:05.239"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:05.285" starttime="20150709 15:21:05.284"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:05.288" starttime="20150709 15:21:05.286"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:05.291" starttime="20150709 15:21:05.289"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:21:05.295" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:21:05.359" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:21:05.361" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:21:05.362" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:21:05.361" starttime="20150709 15:21:05.292"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:05.369" starttime="20150709 15:21:05.363"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:05.372" starttime="20150709 15:21:05.370"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:05.374" starttime="20150709 15:21:05.373"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:05.377" starttime="20150709 15:21:05.375"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:05.380" starttime="20150709 15:21:05.378"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:05.382" starttime="20150709 15:21:05.380"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:05.385" starttime="20150709 15:21:05.383"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:05.388" starttime="20150709 15:21:05.386"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:05.390" starttime="20150709 15:21:05.388"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:05.392" starttime="20150709 15:21:05.391"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:05.395" starttime="20150709 15:21:05.393"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:05.396" starttime="20150709 15:21:05.230"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:21:05.399" level="INFO">Starting command 'cat tmpfilemonitor94.log'.</msg>
<status status="PASS" endtime="20150709 15:21:05.403" starttime="20150709 15:21:05.397"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:21:05.405" level="INFO">Reading output of command 'cat tmpfilemonitor94.log'.</msg>
<msg timestamp="20150709 15:21:05.444" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:21:05.445" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:21:05.444" starttime="20150709 15:21:05.404"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:21:05.449" level="INFO">Executing command 'rm tmpfilemonitor94.log'.</msg>
<msg timestamp="20150709 15:21:05.526" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:21:05.527" starttime="20150709 15:21:05.447"></status>
</kw>
<msg timestamp="20150709 15:21:05.529" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:21:05.528" starttime="20150709 15:21:05.208"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:05.536" starttime="20150709 15:21:05.530"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:05.546" starttime="20150709 15:21:05.544"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:21:05.549" starttime="20150709 15:21:05.547"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:05.550" starttime="20150709 15:21:05.538"></status>
</kw>
<msg timestamp="20150709 15:21:05.552" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:21:05.552" starttime="20150709 15:21:05.202"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:05.553" starttime="20150709 15:21:04.629"></status>
</kw>
<kw type="foritem" name="${i} = 95">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:21:05.557" level="INFO">
*********** Experiment: 95 ************</msg>
<status status="PASS" endtime="20150709 15:21:05.558" starttime="20150709 15:21:05.555"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:05.592" starttime="20150709 15:21:05.590"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:05.648" starttime="20150709 15:21:05.599"></status>
</kw>
<msg timestamp="20150709 15:21:05.650" level="INFO">${ssh_connection} = 95</msg>
<status status="PASS" endtime="20150709 15:21:05.649" starttime="20150709 15:21:05.593"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:21:05.660" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:21:06.045" level="INFO">Read output: Last login: Thu Jul  9 13:21:04 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:21:06.047" starttime="20150709 15:21:05.658"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:06.049" starttime="20150709 15:21:05.651"></status>
</kw>
<msg timestamp="20150709 15:21:06.052" level="INFO">${ssh_connection} = 95</msg>
<status status="PASS" endtime="20150709 15:21:06.051" starttime="20150709 15:21:05.582"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:06.064" starttime="20150709 15:21:06.062"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:21:06.067" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor95.log'.</msg>
<status status="PASS" endtime="20150709 15:21:06.071" starttime="20150709 15:21:06.065"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:06.072" starttime="20150709 15:21:06.055"></status>
</kw>
<msg timestamp="20150709 15:21:06.073" level="INFO">${ssh_connection} = 95</msg>
<status status="PASS" endtime="20150709 15:21:06.073" starttime="20150709 15:21:05.571"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:21:06.085" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:21:06.085" starttime="20150709 15:21:06.074"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:06.092" starttime="20150709 15:21:06.091"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:21:06.096" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:21:06.096" starttime="20150709 15:21:06.093"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:21:06.101" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:21:06.101" starttime="20150709 15:21:06.097"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:06.105" starttime="20150709 15:21:06.104"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:21:06.107" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:21:06.142" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:21:06.143" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:21:06.142" starttime="20150709 15:21:06.106"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:06.144" starttime="20150709 15:21:06.143"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:06.145" starttime="20150709 15:21:06.144"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:06.146" starttime="20150709 15:21:06.145"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:21:06.148" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:21:06.227" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:21:06.229" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:21:06.229" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:21:06.228" starttime="20150709 15:21:06.146"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:06.236" starttime="20150709 15:21:06.231"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:06.239" starttime="20150709 15:21:06.238"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:06.242" starttime="20150709 15:21:06.240"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:06.244" starttime="20150709 15:21:06.243"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:06.247" starttime="20150709 15:21:06.245"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:06.249" starttime="20150709 15:21:06.248"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:06.252" starttime="20150709 15:21:06.250"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:06.255" starttime="20150709 15:21:06.253"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:06.257" starttime="20150709 15:21:06.256"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:06.260" starttime="20150709 15:21:06.258"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:06.262" starttime="20150709 15:21:06.261"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:06.264" starttime="20150709 15:21:06.102"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:21:06.267" level="INFO">Starting command 'cat tmpfilemonitor95.log'.</msg>
<status status="PASS" endtime="20150709 15:21:06.271" starttime="20150709 15:21:06.265"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:21:06.273" level="INFO">Reading output of command 'cat tmpfilemonitor95.log'.</msg>
<msg timestamp="20150709 15:21:06.319" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:21:06.321" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:21:06.320" starttime="20150709 15:21:06.272"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:21:06.324" level="INFO">Executing command 'rm tmpfilemonitor95.log'.</msg>
<msg timestamp="20150709 15:21:06.389" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:21:06.391" starttime="20150709 15:21:06.322"></status>
</kw>
<msg timestamp="20150709 15:21:06.393" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:21:06.392" starttime="20150709 15:21:06.089"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:06.400" starttime="20150709 15:21:06.394"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:06.410" starttime="20150709 15:21:06.407"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:21:06.413" starttime="20150709 15:21:06.411"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:06.414" starttime="20150709 15:21:06.402"></status>
</kw>
<msg timestamp="20150709 15:21:06.416" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:21:06.415" starttime="20150709 15:21:06.086"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:06.416" starttime="20150709 15:21:05.554"></status>
</kw>
<kw type="foritem" name="${i} = 96">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:21:06.420" level="INFO">
*********** Experiment: 96 ************</msg>
<status status="PASS" endtime="20150709 15:21:06.421" starttime="20150709 15:21:06.418"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:06.457" starttime="20150709 15:21:06.455"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:06.516" starttime="20150709 15:21:06.465"></status>
</kw>
<msg timestamp="20150709 15:21:06.518" level="INFO">${ssh_connection} = 96</msg>
<status status="PASS" endtime="20150709 15:21:06.517" starttime="20150709 15:21:06.458"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:21:06.529" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:21:07.036" level="INFO">Read output: Last login: Thu Jul  9 13:21:05 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:21:07.038" starttime="20150709 15:21:06.526"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:07.039" starttime="20150709 15:21:06.519"></status>
</kw>
<msg timestamp="20150709 15:21:07.043" level="INFO">${ssh_connection} = 96</msg>
<status status="PASS" endtime="20150709 15:21:07.042" starttime="20150709 15:21:06.447"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:07.054" starttime="20150709 15:21:07.052"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:21:07.057" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor96.log'.</msg>
<status status="PASS" endtime="20150709 15:21:07.061" starttime="20150709 15:21:07.055"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:07.062" starttime="20150709 15:21:07.045"></status>
</kw>
<msg timestamp="20150709 15:21:07.065" level="INFO">${ssh_connection} = 96</msg>
<status status="PASS" endtime="20150709 15:21:07.063" starttime="20150709 15:21:06.435"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:21:07.078" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:21:07.079" starttime="20150709 15:21:07.066"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:07.086" starttime="20150709 15:21:07.085"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:21:07.090" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:21:07.089" starttime="20150709 15:21:07.086"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:21:07.094" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:21:07.094" starttime="20150709 15:21:07.090"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:07.099" starttime="20150709 15:21:07.098"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:21:07.100" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:21:07.126" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:21:07.128" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:21:07.127" starttime="20150709 15:21:07.099"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:07.131" starttime="20150709 15:21:07.129"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:07.133" starttime="20150709 15:21:07.131"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:07.135" starttime="20150709 15:21:07.134"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:21:07.139" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:21:07.191" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:21:07.193" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:21:07.193" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:21:07.192" starttime="20150709 15:21:07.136"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:07.200" starttime="20150709 15:21:07.194"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:07.203" starttime="20150709 15:21:07.201"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:07.205" starttime="20150709 15:21:07.204"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:07.208" starttime="20150709 15:21:07.206"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:07.210" starttime="20150709 15:21:07.209"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:07.213" starttime="20150709 15:21:07.211"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:07.216" starttime="20150709 15:21:07.214"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:07.218" starttime="20150709 15:21:07.217"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:07.221" starttime="20150709 15:21:07.219"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:07.223" starttime="20150709 15:21:07.222"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:07.226" starttime="20150709 15:21:07.224"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:07.227" starttime="20150709 15:21:07.095"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:21:07.230" level="INFO">Starting command 'cat tmpfilemonitor96.log'.</msg>
<status status="PASS" endtime="20150709 15:21:07.234" starttime="20150709 15:21:07.228"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:21:07.236" level="INFO">Reading output of command 'cat tmpfilemonitor96.log'.</msg>
<msg timestamp="20150709 15:21:07.261" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:21:07.262" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:21:07.262" starttime="20150709 15:21:07.235"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:21:07.265" level="INFO">Executing command 'rm tmpfilemonitor96.log'.</msg>
<msg timestamp="20150709 15:21:07.329" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:21:07.329" starttime="20150709 15:21:07.263"></status>
</kw>
<msg timestamp="20150709 15:21:07.332" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:21:07.331" starttime="20150709 15:21:07.083"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:07.338" starttime="20150709 15:21:07.333"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:07.348" starttime="20150709 15:21:07.346"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:21:07.352" starttime="20150709 15:21:07.349"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:07.353" starttime="20150709 15:21:07.340"></status>
</kw>
<msg timestamp="20150709 15:21:07.355" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:21:07.355" starttime="20150709 15:21:07.080"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:07.356" starttime="20150709 15:21:06.418"></status>
</kw>
<kw type="foritem" name="${i} = 97">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:21:07.360" level="INFO">
*********** Experiment: 97 ************</msg>
<status status="PASS" endtime="20150709 15:21:07.361" starttime="20150709 15:21:07.358"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:07.395" starttime="20150709 15:21:07.393"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:07.449" starttime="20150709 15:21:07.402"></status>
</kw>
<msg timestamp="20150709 15:21:07.452" level="INFO">${ssh_connection} = 97</msg>
<status status="PASS" endtime="20150709 15:21:07.451" starttime="20150709 15:21:07.396"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:21:07.462" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:21:07.857" level="INFO">Read output: Last login: Thu Jul  9 13:21:06 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:21:07.858" starttime="20150709 15:21:07.459"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:07.859" starttime="20150709 15:21:07.453"></status>
</kw>
<msg timestamp="20150709 15:21:07.862" level="INFO">${ssh_connection} = 97</msg>
<status status="PASS" endtime="20150709 15:21:07.861" starttime="20150709 15:21:07.385"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:07.873" starttime="20150709 15:21:07.871"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:21:07.877" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor97.log'.</msg>
<status status="PASS" endtime="20150709 15:21:07.881" starttime="20150709 15:21:07.874"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:07.882" starttime="20150709 15:21:07.864"></status>
</kw>
<msg timestamp="20150709 15:21:07.884" level="INFO">${ssh_connection} = 97</msg>
<status status="PASS" endtime="20150709 15:21:07.883" starttime="20150709 15:21:07.374"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:21:07.898" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:21:07.898" starttime="20150709 15:21:07.885"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:07.915" starttime="20150709 15:21:07.912"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:21:07.922" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:21:07.921" starttime="20150709 15:21:07.916"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:21:07.928" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:21:07.929" starttime="20150709 15:21:07.923"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:07.938" starttime="20150709 15:21:07.936"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:21:07.941" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:21:07.974" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:21:07.975" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:21:07.975" starttime="20150709 15:21:07.939"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:07.978" starttime="20150709 15:21:07.976"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:07.980" starttime="20150709 15:21:07.979"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:07.983" starttime="20150709 15:21:07.981"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:21:07.987" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:21:08.051" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:21:08.053" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:21:08.054" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:21:08.052" starttime="20150709 15:21:07.984"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:08.065" starttime="20150709 15:21:08.055"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:08.067" starttime="20150709 15:21:08.066"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:08.070" starttime="20150709 15:21:08.068"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:08.073" starttime="20150709 15:21:08.071"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:08.075" starttime="20150709 15:21:08.074"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:08.078" starttime="20150709 15:21:08.076"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:08.081" starttime="20150709 15:21:08.079"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:08.083" starttime="20150709 15:21:08.082"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:08.086" starttime="20150709 15:21:08.084"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:08.088" starttime="20150709 15:21:08.087"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:08.091" starttime="20150709 15:21:08.089"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:08.092" starttime="20150709 15:21:07.930"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:21:08.096" level="INFO">Starting command 'cat tmpfilemonitor97.log'.</msg>
<status status="PASS" endtime="20150709 15:21:08.100" starttime="20150709 15:21:08.094"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:21:08.102" level="INFO">Reading output of command 'cat tmpfilemonitor97.log'.</msg>
<msg timestamp="20150709 15:21:08.132" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:21:08.133" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:21:08.132" starttime="20150709 15:21:08.101"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:21:08.136" level="INFO">Executing command 'rm tmpfilemonitor97.log'.</msg>
<msg timestamp="20150709 15:21:08.215" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:21:08.215" starttime="20150709 15:21:08.134"></status>
</kw>
<msg timestamp="20150709 15:21:08.218" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:21:08.217" starttime="20150709 15:21:07.907"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:08.225" starttime="20150709 15:21:08.219"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:08.235" starttime="20150709 15:21:08.232"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:21:08.239" starttime="20150709 15:21:08.236"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:08.240" starttime="20150709 15:21:08.227"></status>
</kw>
<msg timestamp="20150709 15:21:08.243" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:21:08.241" starttime="20150709 15:21:07.901"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:08.243" starttime="20150709 15:21:07.357"></status>
</kw>
<kw type="foritem" name="${i} = 98">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:21:08.247" level="INFO">
*********** Experiment: 98 ************</msg>
<status status="PASS" endtime="20150709 15:21:08.248" starttime="20150709 15:21:08.245"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:08.282" starttime="20150709 15:21:08.280"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:08.349" starttime="20150709 15:21:08.289"></status>
</kw>
<msg timestamp="20150709 15:21:08.351" level="INFO">${ssh_connection} = 98</msg>
<status status="PASS" endtime="20150709 15:21:08.350" starttime="20150709 15:21:08.283"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:21:08.360" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:21:08.784" level="INFO">Read output: Last login: Thu Jul  9 13:21:07 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:21:08.785" starttime="20150709 15:21:08.358"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:08.786" starttime="20150709 15:21:08.352"></status>
</kw>
<msg timestamp="20150709 15:21:08.789" level="INFO">${ssh_connection} = 98</msg>
<status status="PASS" endtime="20150709 15:21:08.788" starttime="20150709 15:21:08.272"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:08.799" starttime="20150709 15:21:08.797"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:21:08.803" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor98.log'.</msg>
<status status="PASS" endtime="20150709 15:21:08.807" starttime="20150709 15:21:08.800"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:08.808" starttime="20150709 15:21:08.791"></status>
</kw>
<msg timestamp="20150709 15:21:08.810" level="INFO">${ssh_connection} = 98</msg>
<status status="PASS" endtime="20150709 15:21:08.809" starttime="20150709 15:21:08.261"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:21:08.823" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:21:08.823" starttime="20150709 15:21:08.811"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:08.840" starttime="20150709 15:21:08.838"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:21:08.847" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:21:08.846" starttime="20150709 15:21:08.841"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:21:08.853" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:21:08.853" starttime="20150709 15:21:08.848"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:08.863" starttime="20150709 15:21:08.861"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:21:08.866" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:21:08.908" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:21:08.909" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:21:08.908" starttime="20150709 15:21:08.864"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:08.912" starttime="20150709 15:21:08.910"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:08.914" starttime="20150709 15:21:08.913"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:08.917" starttime="20150709 15:21:08.915"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:21:08.921" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:21:08.985" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:21:08.987" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:21:08.988" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:21:08.986" starttime="20150709 15:21:08.918"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:08.995" starttime="20150709 15:21:08.989"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:08.997" starttime="20150709 15:21:08.996"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:09.000" starttime="20150709 15:21:08.998"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:09.003" starttime="20150709 15:21:09.002"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:09.006" starttime="20150709 15:21:09.004"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:09.009" starttime="20150709 15:21:09.007"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:09.011" starttime="20150709 15:21:09.010"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:09.014" starttime="20150709 15:21:09.012"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:09.016" starttime="20150709 15:21:09.015"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:09.019" starttime="20150709 15:21:09.017"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:09.022" starttime="20150709 15:21:09.020"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:09.023" starttime="20150709 15:21:08.855"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:21:09.026" level="INFO">Starting command 'cat tmpfilemonitor98.log'.</msg>
<status status="PASS" endtime="20150709 15:21:09.032" starttime="20150709 15:21:09.024"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:21:09.034" level="INFO">Reading output of command 'cat tmpfilemonitor98.log'.</msg>
<msg timestamp="20150709 15:21:09.073" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:21:09.074" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:21:09.073" starttime="20150709 15:21:09.033"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:21:09.077" level="INFO">Executing command 'rm tmpfilemonitor98.log'.</msg>
<msg timestamp="20150709 15:21:09.148" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:21:09.149" starttime="20150709 15:21:09.075"></status>
</kw>
<msg timestamp="20150709 15:21:09.152" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:21:09.150" starttime="20150709 15:21:08.832"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:09.159" starttime="20150709 15:21:09.153"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:09.169" starttime="20150709 15:21:09.166"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:21:09.173" starttime="20150709 15:21:09.170"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:09.174" starttime="20150709 15:21:09.160"></status>
</kw>
<msg timestamp="20150709 15:21:09.177" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:21:09.176" starttime="20150709 15:21:08.826"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:09.178" starttime="20150709 15:21:08.244"></status>
</kw>
<kw type="foritem" name="${i} = 99">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n*********** Experiment: ${i} ************</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:21:09.182" level="INFO">
*********** Experiment: 99 ************</msg>
<status status="PASS" endtime="20150709 15:21:09.183" starttime="20150709 15:21:09.179"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:09.216" starttime="20150709 15:21:09.215"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:09.267" starttime="20150709 15:21:09.223"></status>
</kw>
<msg timestamp="20150709 15:21:09.269" level="INFO">${ssh_connection} = 99</msg>
<status status="PASS" endtime="20150709 15:21:09.268" starttime="20150709 15:21:09.218"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:21:09.278" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:21:09.713" level="INFO">Read output: Last login: Thu Jul  9 13:21:08 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:21:09.714" starttime="20150709 15:21:09.276"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:09.715" starttime="20150709 15:21:09.270"></status>
</kw>
<msg timestamp="20150709 15:21:09.718" level="INFO">${ssh_connection} = 99</msg>
<status status="PASS" endtime="20150709 15:21:09.717" starttime="20150709 15:21:09.207"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:09.729" starttime="20150709 15:21:09.727"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:21:09.732" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor99.log'.</msg>
<status status="PASS" endtime="20150709 15:21:09.736" starttime="20150709 15:21:09.730"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:09.737" starttime="20150709 15:21:09.720"></status>
</kw>
<msg timestamp="20150709 15:21:09.739" level="INFO">${ssh_connection} = 99</msg>
<status status="PASS" endtime="20150709 15:21:09.739" starttime="20150709 15:21:09.195"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10ms</arg>
</arguments>
<msg timestamp="20150709 15:21:09.753" level="INFO">Slept 10 milliseconds</msg>
<status status="PASS" endtime="20150709 15:21:09.754" starttime="20150709 15:21:09.740"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:09.770" starttime="20150709 15:21:09.768"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:21:09.777" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:21:09.777" starttime="20150709 15:21:09.771"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:21:09.783" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:21:09.783" starttime="20150709 15:21:09.778"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:09.793" starttime="20150709 15:21:09.791"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:21:09.796" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:21:09.822" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:21:09.824" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:21:09.823" starttime="20150709 15:21:09.794"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:09.827" starttime="20150709 15:21:09.825"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:09.829" starttime="20150709 15:21:09.827"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:09.831" starttime="20150709 15:21:09.830"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:21:09.836" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:21:09.899" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:21:09.900" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:21:09.901" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:21:09.900" starttime="20150709 15:21:09.833"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:09.908" starttime="20150709 15:21:09.902"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent runs</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:09.911" starttime="20150709 15:21:09.909"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:09.913" starttime="20150709 15:21:09.912"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:09.916" starttime="20150709 15:21:09.914"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:09.918" starttime="20150709 15:21:09.917"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:09.921" starttime="20150709 15:21:09.919"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:09.924" starttime="20150709 15:21:09.922"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:09.926" starttime="20150709 15:21:09.925"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:09.929" starttime="20150709 15:21:09.927"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:09.931" starttime="20150709 15:21:09.930"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:09.934" starttime="20150709 15:21:09.932"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:09.935" starttime="20150709 15:21:09.785"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:21:09.938" level="INFO">Starting command 'cat tmpfilemonitor99.log'.</msg>
<status status="PASS" endtime="20150709 15:21:09.942" starttime="20150709 15:21:09.936"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:21:09.944" level="INFO">Reading output of command 'cat tmpfilemonitor99.log'.</msg>
<msg timestamp="20150709 15:21:09.972" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:21:09.973" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:21:09.973" starttime="20150709 15:21:09.943"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:21:09.976" level="INFO">Executing command 'rm tmpfilemonitor99.log'.</msg>
<msg timestamp="20150709 15:21:10.049" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:21:10.050" starttime="20150709 15:21:09.974"></status>
</kw>
<msg timestamp="20150709 15:21:10.054" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:21:10.052" starttime="20150709 15:21:09.762"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:10.060" starttime="20150709 15:21:10.055"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:21:10.070" starttime="20150709 15:21:10.068"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:21:10.075" starttime="20150709 15:21:10.072"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:10.076" starttime="20150709 15:21:10.062"></status>
</kw>
<msg timestamp="20150709 15:21:10.079" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:21:10.078" starttime="20150709 15:21:09.756"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:10.080" starttime="20150709 15:21:09.179"></status>
</kw>
<status status="PASS" endtime="20150709 15:21:10.081" starttime="20150709 15:19:31.091"></status>
</kw>
<doc>=========================================================</doc>
<tags>
<tag>TNZ_supported</tag>
<tag>walter.heincz</tag>
</tags>
<status status="PASS" critical="yes" endtime="20150709 15:21:10.083" starttime="20150709 15:19:31.073"></status>
</test>
<doc>---------------------------------------------------------------
Run SSH Tail-Kill Experiment

===============================================================================
Run with arguments:
--variable ROBOT_WORKSPACE_RESOURCE:/opt/robot/robotworkspace/robotworkspace-resource.txt
--variable SUT_RESOURCE:/opt/robot/robotworkspace/suts/MEX-resource.txt
============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20150709 15:21:10.091" starttime="20150709 15:19:29.756"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="0">Critical Tests</stat>
<stat pass="1" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="1" info="" doc="" combined="" fail="0" links="">TNZ_supported</stat>
<stat pass="1" info="" doc="" combined="" fail="0" links="">walter.heincz</stat>
</tag>
<suite>
<stat pass="1" id="s1" fail="0" name="SSH-tail-killing-experimental-robot-suite">SSH-tail-killing-experimental-robot-suite</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
