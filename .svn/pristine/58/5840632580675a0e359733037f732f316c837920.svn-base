<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 2.8.7 (Jython 2.7rc1 on java1.7.0_79)" generated="20151105 11:24:48.153">
<suite source="/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-ShortDuration/MOC_PREPAID_ONNET-ShortDuration-robot-suite.txt" id="s1" name="MOC PREPAID ONNET-ShortDuration-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20151105 11:24:50.820" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20151105 11:24:50.827" level="INFO">${date} = Thu Nov  5 11:24:50 CET 2015</msg>
<status status="PASS" endtime="20151105 11:24:50.824" starttime="20151105 11:24:50.791"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151105 11:24:50.840" level="INFO">Date and time: Thu Nov  5 11:24:50 CET 2015</msg>
<status status="PASS" endtime="20151105 11:24:50.843" starttime="20151105 11:24:50.832"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151105 11:24:50.856" level="INFO">Target IN machine: 10.105.121.135</msg>
<status status="PASS" endtime="20151105 11:24:50.859" starttime="20151105 11:24:50.848"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20151105 11:24:50.993" starttime="20151105 11:24:50.991"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20151105 11:24:51.193" starttime="20151105 11:24:51.007"></status>
</kw>
<msg timestamp="20151105 11:24:51.199" level="INFO">${ssh_connection} = 1</msg>
<status status="PASS" endtime="20151105 11:24:51.196" starttime="20151105 11:24:50.995"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20151105 11:24:51.217" level="INFO">Logging into '10.105.121.135:22' as 'qa_automation'.</msg>
<msg timestamp="20151105 11:24:51.472" level="INFO">Read output: Last login: Thu Nov  5 10:18:54 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb21 ~]$</msg>
<status status="PASS" endtime="20151105 11:24:51.475" starttime="20151105 11:24:51.213"></status>
</kw>
<status status="PASS" endtime="20151105 11:24:51.477" starttime="20151105 11:24:51.203"></status>
</kw>
<msg timestamp="20151105 11:24:51.484" level="INFO">${ssh_connection} = 1</msg>
<status status="PASS" endtime="20151105 11:24:51.482" starttime="20151105 11:24:50.975"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20151105 11:24:51.499" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20151105 11:24:51.498" starttime="20151105 11:24:51.488"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20151105 11:24:51.507" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20151105 11:24:51.736" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151105 11:24:51.739" level="INFO">${output} = I-New MVNA MTel - Core - Service 1.0.0 2015.10.12-15:37:03 is running PID: 4364 </msg>
<status status="PASS" endtime="20151105 11:24:51.738" starttime="20151105 11:24:51.503"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20151105 11:24:51.756" starttime="20151105 11:24:51.749"></status>
</kw>
<msg timestamp="20151105 11:24:51.760" level="INFO">${status} = PASS</msg>
<msg timestamp="20151105 11:24:51.761" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20151105 11:24:51.758" starttime="20151105 11:24:51.743"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20151105 11:24:51.781" starttime="20151105 11:24:51.777"></status>
</kw>
<msg timestamp="20151105 11:24:51.784" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151105 11:24:51.783" starttime="20151105 11:24:51.764"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20151105 11:24:51.793" level="INFO">${version_r} =  1.0.0 2015.10.12-15:37:03 is running PID: 4364 </msg>
<status status="PASS" endtime="20151105 11:24:51.792" starttime="20151105 11:24:51.787"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20151105 11:24:51.803" level="INFO">${version} =  1.0.0 2015.10.12-15:37:03 </msg>
<status status="PASS" endtime="20151105 11:24:51.802" starttime="20151105 11:24:51.797"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20151105 11:24:51.811" starttime="20151105 11:24:51.807"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151105 11:24:51.840" starttime="20151105 11:24:51.835"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20151105 11:24:51.852" starttime="20151105 11:24:51.844"></status>
</kw>
<status status="PASS" endtime="20151105 11:24:51.857" starttime="20151105 11:24:51.814"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20151105 11:24:51.876" starttime="20151105 11:24:51.871"></status>
</kw>
<msg timestamp="20151105 11:24:51.879" level="INFO">${ver} =  1.0.0 2015.10.12-15:37:03 </msg>
<status status="PASS" endtime="20151105 11:24:51.878" starttime="20151105 11:24:51.861"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20151105 11:24:51.887" starttime="20151105 11:24:51.882"></status>
</kw>
<msg timestamp="20151105 11:24:51.893" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20151105 11:24:51.895" level="INFO">${in_version} =  1.0.0 2015.10.12-15:37:03 </msg>
<status status="PASS" endtime="20151105 11:24:51.891" starttime="20151105 11:24:50.913"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20151105 11:24:52.027" starttime="20151105 11:24:52.023"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20151105 11:24:52.104" starttime="20151105 11:24:52.042"></status>
</kw>
<msg timestamp="20151105 11:24:52.108" level="INFO">${ssh_connection} = 2</msg>
<status status="PASS" endtime="20151105 11:24:52.106" starttime="20151105 11:24:52.030"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20151105 11:24:52.133" level="INFO">Logging into '10.105.121.171:22' as 'qa_automation'.</msg>
<msg timestamp="20151105 11:24:52.504" level="INFO">Read output: Last login: Thu Nov  5 10:18:55 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb21 ~]$</msg>
<status status="PASS" endtime="20151105 11:24:52.505" starttime="20151105 11:24:52.128"></status>
</kw>
<status status="PASS" endtime="20151105 11:24:52.506" starttime="20151105 11:24:52.111"></status>
</kw>
<msg timestamp="20151105 11:24:52.509" level="INFO">${ssh_connection} = 2</msg>
<status status="PASS" endtime="20151105 11:24:52.508" starttime="20151105 11:24:51.997"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20151105 11:24:52.516" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20151105 11:24:52.515" starttime="20151105 11:24:52.511"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20151105 11:24:52.519" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20151105 11:24:52.829" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151105 11:24:52.833" level="INFO">${output} = I-New UMS MVNO - XDR - Server 5.3.1.25202 is running PID: 29388 </msg>
<status status="PASS" endtime="20151105 11:24:52.831" starttime="20151105 11:24:52.517"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20151105 11:24:52.847" starttime="20151105 11:24:52.841"></status>
</kw>
<msg timestamp="20151105 11:24:52.851" level="INFO">${status} = PASS</msg>
<msg timestamp="20151105 11:24:52.852" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20151105 11:24:52.849" starttime="20151105 11:24:52.836"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20151105 11:24:52.870" starttime="20151105 11:24:52.866"></status>
</kw>
<msg timestamp="20151105 11:24:52.873" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151105 11:24:52.872" starttime="20151105 11:24:52.855"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20151105 11:24:52.882" level="INFO">${version_r} =  5.3.1.25202 is running PID: 29388 </msg>
<status status="PASS" endtime="20151105 11:24:52.881" starttime="20151105 11:24:52.876"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20151105 11:24:52.891" level="INFO">${version} =  5.3.1.25202 </msg>
<status status="PASS" endtime="20151105 11:24:52.889" starttime="20151105 11:24:52.885"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20151105 11:24:52.897" starttime="20151105 11:24:52.893"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151105 11:24:52.923" starttime="20151105 11:24:52.919"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20151105 11:24:52.933" starttime="20151105 11:24:52.926"></status>
</kw>
<status status="PASS" endtime="20151105 11:24:52.936" starttime="20151105 11:24:52.900"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20151105 11:24:52.953" starttime="20151105 11:24:52.949"></status>
</kw>
<msg timestamp="20151105 11:24:52.955" level="INFO">${ver} =  5.3.1.25202 </msg>
<status status="PASS" endtime="20151105 11:24:52.954" starttime="20151105 11:24:52.938"></status>
</kw>
<msg timestamp="20151105 11:24:52.958" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20151105 11:24:52.958" level="INFO">${xdr_version} =  5.3.1.25202 </msg>
<status status="PASS" endtime="20151105 11:24:52.957" starttime="20151105 11:24:51.933"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20151105 11:24:53.011" starttime="20151105 11:24:53.009"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20151105 11:24:53.108" starttime="20151105 11:24:53.018"></status>
</kw>
<msg timestamp="20151105 11:24:53.114" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20151105 11:24:53.112" starttime="20151105 11:24:53.012"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20151105 11:24:53.135" level="INFO">Logging into '10.105.121.159:22' as 'qa_automation'.</msg>
<msg timestamp="20151105 11:24:53.354" level="INFO">Read output: Last login: Thu Nov  5 10:18:56 2015 from 10.105.80.196
[1m[qa_automation@ocs01.tb21 ~]$</msg>
<status status="PASS" endtime="20151105 11:24:53.356" starttime="20151105 11:24:53.130"></status>
</kw>
<status status="PASS" endtime="20151105 11:24:53.359" starttime="20151105 11:24:53.117"></status>
</kw>
<msg timestamp="20151105 11:24:53.364" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20151105 11:24:53.362" starttime="20151105 11:24:52.998"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20151105 11:24:53.377" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20151105 11:24:53.376" starttime="20151105 11:24:53.367"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20151105 11:24:53.386" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20151105 11:24:53.544" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151105 11:24:53.547" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.3.15.28709
Negret Rating &amp; Charging Engine 5.3.15.28709 is running (PID:27779, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20151105 11:24:53.546" starttime="20151105 11:24:53.380"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20151105 11:24:53.562" starttime="20151105 11:24:53.556"></status>
</kw>
<msg timestamp="20151105 11:24:53.565" level="INFO">${status} = PASS</msg>
<msg timestamp="20151105 11:24:53.567" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20151105 11:24:53.564" starttime="20151105 11:24:53.550"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20151105 11:24:53.582" starttime="20151105 11:24:53.578"></status>
</kw>
<msg timestamp="20151105 11:24:53.585" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151105 11:24:53.584" starttime="20151105 11:24:53.569"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20151105 11:24:53.594" level="INFO">${version_r} =  5.3.15.28709 is running (PID:27779, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20151105 11:24:53.593" starttime="20151105 11:24:53.588"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20151105 11:24:53.603" level="INFO">${version} =  5.3.15.28709 </msg>
<status status="PASS" endtime="20151105 11:24:53.602" starttime="20151105 11:24:53.597"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20151105 11:24:53.609" starttime="20151105 11:24:53.606"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151105 11:24:53.639" starttime="20151105 11:24:53.635"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20151105 11:24:53.648" starttime="20151105 11:24:53.642"></status>
</kw>
<status status="PASS" endtime="20151105 11:24:53.650" starttime="20151105 11:24:53.617"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20151105 11:24:53.667" starttime="20151105 11:24:53.663"></status>
</kw>
<msg timestamp="20151105 11:24:53.670" level="INFO">${ver} =  5.3.15.28709 </msg>
<status status="PASS" endtime="20151105 11:24:53.669" starttime="20151105 11:24:53.653"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20151105 11:24:53.677" starttime="20151105 11:24:53.673"></status>
</kw>
<msg timestamp="20151105 11:24:53.683" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20151105 11:24:53.684" level="INFO">${crce_version} =  5.3.15.28709 </msg>
<status status="PASS" endtime="20151105 11:24:53.681" starttime="20151105 11:24:52.973"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151105 11:24:53.692" level="INFO">IN state= OK version= 1.0.0 2015.10.12-15:37:03 </msg>
<status status="PASS" endtime="20151105 11:24:53.694" starttime="20151105 11:24:53.687"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151105 11:24:53.702" level="INFO">XDR state= OK version= 5.3.1.25202 </msg>
<status status="PASS" endtime="20151105 11:24:53.704" starttime="20151105 11:24:53.697"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151105 11:24:53.708" level="INFO">CRCE state= OK version= 5.3.15.28709 </msg>
<status status="PASS" endtime="20151105 11:24:53.709" starttime="20151105 11:24:53.705"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20151105 11:24:53.712" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151105 11:24:53.713" starttime="20151105 11:24:53.710"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20151105 11:24:53.716" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151105 11:24:53.717" starttime="20151105 11:24:53.714"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20151105 11:24:53.720" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151105 11:24:53.721" starttime="20151105 11:24:53.718"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<msg timestamp="20151105 11:24:53.727" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/experimental/matko.sanseovic/reroute_changes</msg>
<status status="PASS" endtime="20151105 11:24:53.727" starttime="20151105 11:24:53.722"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20151105 11:24:53.731" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/experimental/matko.sanseovic/reroute_changes</msg>
<status status="PASS" endtime="20151105 11:24:53.732" starttime="20151105 11:24:53.729"></status>
</kw>
<status status="PASS" endtime="20151105 11:24:53.733" starttime="20151105 11:24:50.725"></status>
</kw>
<test id="s1-t1" name="Run MOC Short Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20151105 11:24:53.747" starttime="20151105 11:24:53.745"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20151105 11:24:53.750" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20151105 11:24:53.750" starttime="20151105 11:24:53.748"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20151105 11:24:53.768" level="INFO">msg=crce_host=10.105.121.159</msg>
<status status="PASS" endtime="20151105 11:24:53.769" starttime="20151105 11:24:53.766"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20151105 11:24:53.772" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20151105 11:24:53.773" starttime="20151105 11:24:53.770"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20151105 11:24:53.776" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20151105 11:24:53.777" starttime="20151105 11:24:53.774"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20151105 11:24:53.780" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20151105 11:24:53.780" starttime="20151105 11:24:53.778"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20151105 11:24:53.783" level="INFO">msg=imsiRangeStart=232201667770900</msg>
<status status="PASS" endtime="20151105 11:24:53.784" starttime="20151105 11:24:53.781"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20151105 11:24:53.787" level="INFO">msg=msisdnRangeStart=43667770900</msg>
<status status="PASS" endtime="20151105 11:24:53.788" starttime="20151105 11:24:53.785"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20151105 11:24:53.791" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20151105 11:24:53.791" starttime="20151105 11:24:53.789"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20151105 11:24:53.794" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20151105 11:24:53.795" starttime="20151105 11:24:53.793"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20151105 11:24:53.798" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20151105 11:24:53.799" starttime="20151105 11:24:53.796"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20151105 11:24:53.801" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20151105 11:24:53.802" starttime="20151105 11:24:53.800"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20151105 11:24:53.817" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-ShortDuration/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-ShortDuration/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151105 11:24:53.818" starttime="20151105 11:24:53.814"></status>
</kw>
<status status="PASS" endtime="20151105 11:24:53.819" starttime="20151105 11:24:53.812"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20151105 11:24:53.824" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-ShortDuration/soapui.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-ShortDuration/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151105 11:24:53.825" starttime="20151105 11:24:53.822"></status>
</kw>
<status status="PASS" endtime="20151105 11:24:53.826" starttime="20151105 11:24:53.820"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20151105 11:24:53.832" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-ShortDuration/soapui-errors.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-ShortDuration/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151105 11:24:53.833" starttime="20151105 11:24:53.830"></status>
</kw>
<status status="PASS" endtime="20151105 11:24:53.834" starttime="20151105 11:24:53.827"></status>
</kw>
<status status="PASS" endtime="20151105 11:24:53.835" starttime="20151105 11:24:53.805"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20151105 11:24:53.839" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20151105 11:24:53.840" starttime="20151105 11:24:53.836"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20151105 11:24:53.843" starttime="20151105 11:24:53.841"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20151105 11:24:53.846" starttime="20151105 11:24:53.844"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20151105 11:24:53.849" starttime="20151105 11:24:53.847"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20151105 11:24:53.852" starttime="20151105 11:24:53.851"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20151105 11:24:53.855" starttime="20151105 11:24:53.853"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20151105 11:24:53.858" starttime="20151105 11:24:53.856"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20151105 11:24:53.861" starttime="20151105 11:24:53.859"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20151105 11:24:53.864" starttime="20151105 11:24:53.862"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20151105 11:24:53.867" starttime="20151105 11:24:53.865"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20151105 11:24:53.870" starttime="20151105 11:24:53.868"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20151105 11:24:53.874" starttime="20151105 11:24:53.872"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20151105 11:24:53.877" starttime="20151105 11:24:53.875"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20151105 11:24:53.881" level="INFO">Running with the following project properties set: [u'crceHost=10.105.121.159', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=232201667770900', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=43667770900', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20151105 11:24:59.664" level="INFO">11:24:54,050 WARN  [SoapUI] Missing folder [/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-ShortDuration/ext] for external libraries
11:24:54,051 INFO  [DefaultSoapUICore] Creating new settings at [/root/soapui-settings.xml]
11:24:56,793 INFO  [WsdlProject] Loaded project from [file:/opt/robot/robotworkspace/libs/global-keyword-resources/crce-subscriberadmin/robot_crce_bridge-soapui-project.xml]
11:24:56,815 INFO  [SoapUITestCaseRunner] Setting project property [crceHost] to [10.105.121.159]
11:24:56,816 INFO  [SoapUITestCaseRunner] Setting project property [crcePort] to [8080]
11:24:56,816 INFO  [SoapUITestCaseRunner] Setting project property [crceWebservicesBasePath] to [/inew-mvno-crce-webservices/]
11:24:56,816 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.amount] to [2]
11:24:56,817 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.imsiRangeStart] to [232201667770900]
11:24:56,817 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.msisdnRangeStart] to [43667770900]
11:24:56,817 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.type] to [PREPAID]
11:24:56,818 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.languageid] to [1]
11:24:56,818 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.tariffId] to [101001]
11:24:56,818 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.balance] to [10000000]
11:24:56,819 INFO  [SoapUITestCaseRunner] Running SoapUI tests in project [Robotframework_CRCE-Bridge]
11:24:56,819 INFO  [SoapUITestCaseRunner] Running TestCase [createTestSubscribers]
11:24:56,839 INFO  [SoapUITestCaseRunner] Running SoapUI testcase [createTestSubscribers]
11:24:56,853 INFO  [SoapUITestCaseRunner] running step [init_repeat_counter]
11:24:57,466 INFO  [SoapUITestCaseRunner] running step [01_init_next_subscriber]
11:24:57,526 INFO  [SoapUITestCaseRunner] running step [getSubscriberProfileByImsi]
11:24:57,745 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
11:24:57,745 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
11:24:57,771 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
11:24:57,777 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
11:24:57,956 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
11:24:57,957 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
11:24:57,961 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
11:24:57,961 INFO  [SoapUITestCaseRunner] running step [cancel_on_SOAP_error]
11:24:58,021 INFO  [SoapUITestCaseRunner] running step [transfer_response_values]
11:24:58,290 INFO  [SoapUITestCaseRunner] running step [cancel_on_CRCE_error_OR_skip_delete_on_UnknownSubscriber]
11:24:58,316 INFO  [SoapUITestCaseRunner] running step [deleteSubscriber]
11:24:58,318 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
11:24:58,319 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
11:24:58,319 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
11:24:58,437 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
11:24:58,437 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
11:24:58,441 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
11:24:58,441 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
11:24:58,441 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
11:24:58,441 INFO  [SoapUITestCaseRunner] running step [2nd_cancel_on_SOAP_error]
11:24:58,497 INFO  [SoapUITestCaseRunner] running step [2nd_transfer_response_values]
11:24:58,503 INFO  [SoapUITestCaseRunner] running step [cancel_on_deletion_error]
11:24:58,551 INFO  [SoapUITestCaseRunner] running step [02_createSubscriber]
11:24:58,554 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
11:24:58,556 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
11:24:58,556 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
11:24:58,573 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
11:24:58,574 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
11:24:58,580 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
11:24:58,580 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
11:24:58,580 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
11:24:58,580 INFO  [SoapUITestCaseRunner] running step [3rd_cancel_on_SOAP_error]
11:24:58,646 INFO  [SoapUITestCaseRunner] running step [3rd_transfer_response_values]
11:24:58,657 INFO  [SoapUITestCaseRunner] running step [cancel_on_create_error]
11:24:58,699 INFO  [SoapUITestCaseRunner] running step [activateSubscriber]
11:24:58,702 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
11:24:58,704 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
11:24:58,704 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
11:24:58,740 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
11:24:58,740 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
11:24:58,743 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
11:24:58,743 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
11:24:58,743 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
11:24:58,743 INFO  [SoapUITestCaseRunner] running step [4th_cancel_on_SOAP_error]
11:24:58,773 INFO  [SoapUITestCaseRunner] running step [4th_transfer_response_values]
11:24:58,776 INFO  [SoapUITestCaseRunner] running step [cancel_on_activate_error]
11:24:58,819 INFO  [SoapUITestCaseRunner] running step [getMainAccount]
11:24:58,822 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
11:24:58,824 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
11:24:58,824 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/accounts HTTP/1.1
11:24:58,845 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
11:24:58,846 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
11:24:58,859 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
11:24:58,859 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
11:24:58,859 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
11:24:58,860 INFO  [SoapUITestCaseRunner] running step [5th_cancel_on_SOAP_error]
11:24:58,922 INFO  [SoapUITestCaseRunner] running step [5th_transfer_response_values]
11:24:58,942 INFO  [SoapUITestCaseRunner] running step [cancel_on_getmainaccount_error]
11:24:58,985 INFO  [SoapUITestCaseRunner] running step [setBalance]
11:24:58,989 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
11:24:58,991 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
11:24:58,991 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/account_administration HTTP/1.1
11:24:59,016 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
11:24:59,017 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
11:24:59,028 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
11:24:59,029 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
11:24:59,029 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
11:24:59,029 INFO  [SoapUITestCaseRunner] running step [6th_cancel_on_SOAP_error]
11:24:59,093 INFO  [SoapUITestCaseRunner] running step [6th_transfer_response_values]
11:24:59,102 INFO  [SoapUITestCaseRunner] running step [cancel_on_setbalance_error]
11:24:59,144 INFO  [SoapUITestCaseRunner] running step [repeat_01_amount_times]
11:24:59,204 INFO  [SoapUITestCaseRunner] running step [01_init_next_subscriber]
11:24:59,206 INFO  [SoapUITestCaseRunner] running step [getSubscriberProfileByImsi]
11:24:59,208 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
11:24:59,209 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
11:24:59,209 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
11:24:59,217 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
11:24:59,217 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
11:24:59,225 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
11:24:59,225 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
11:24:59,225 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
11:24:59,225 INFO  [SoapUITestCaseRunner] running step [cancel_on_SOAP_error]
11:24:59,225 INFO  [SoapUITestCaseRunner] running step [transfer_response_values]
11:24:59,237 INFO  [SoapUITestCaseRunner] running step [cancel_on_CRCE_error_OR_skip_delete_on_UnknownSubscriber]
11:24:59,237 INFO  [SoapUITestCaseRunner] running step [deleteSubscriber]
11:24:59,238 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
11:24:59,240 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
11:24:59,240 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
11:24:59,331 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
11:24:59,331 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
11:24:59,337 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
11:24:59,337 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
11:24:59,337 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
11:24:59,337 INFO  [SoapUITestCaseRunner] running step [2nd_cancel_on_SOAP_error]
11:24:59,338 INFO  [SoapUITestCaseRunner] running step [2nd_transfer_response_values]
11:24:59,343 INFO  [SoapUITestCaseRunner] running step [cancel_on_deletion_error]
11:24:59,344 INFO  [SoapUITestCaseRunner] running step [02_createSubscriber]
11:24:59,347 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
11:24:59,348 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
11:24:59,349 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
11:24:59,362 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
11:24:59,362 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
11:24:59,368 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
11:24:59,368 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
11:24:59,368 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
11:24:59,369 INFO  [SoapUITestCaseRunner] running step [3rd_cancel_on_SOAP_error]
11:24:59,369 INFO  [SoapUITestCaseRunner] running step [3rd_transfer_response_values]
11:24:59,379 INFO  [SoapUITestCaseRunner] running step [cancel_on_create_error]
11:24:59,380 INFO  [SoapUITestCaseRunner] running step [activateSubscriber]
11:24:59,382 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
11:24:59,384 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
11:24:59,384 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
11:24:59,419 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
11:24:59,420 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
11:24:59,425 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
11:24:59,425 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
11:24:59,425 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
11:24:59,425 INFO  [SoapUITestCaseRunner] running step [4th_cancel_on_SOAP_error]
11:24:59,426 INFO  [SoapUITestCaseRunner] running step [4th_transfer_response_values]
11:24:59,431 INFO  [SoapUITestCaseRunner] running step [cancel_on_activate_error]
11:24:59,431 INFO  [SoapUITestCaseRunner] running step [getMainAccount]
11:24:59,433 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
11:24:59,435 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
11:24:59,435 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/accounts HTTP/1.1
11:24:59,456 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
11:24:59,457 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
11:24:59,468 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
11:24:59,468 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
11:24:59,469 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
11:24:59,469 INFO  [SoapUITestCaseRunner] running step [5th_cancel_on_SOAP_error]
11:24:59,469 INFO  [SoapUITestCaseRunner] running step [5th_transfer_response_values]
11:24:59,489 INFO  [SoapUITestCaseRunner] running step [cancel_on_getmainaccount_error]
11:24:59,490 INFO  [SoapUITestCaseRunner] running step [setBalance]
11:24:59,492 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
11:24:59,494 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
11:24:59,494 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/account_administration HTTP/1.1
11:24:59,531 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
11:24:59,531 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
11:24:59,542 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
11:24:59,542 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
11:24:59,543 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
11:24:59,543 INFO  [SoapUITestCaseRunner] running step [6th_cancel_on_SOAP_error]
11:24:59,543 INFO  [SoapUITestCaseRunner] running step [6th_transfer_response_values]
11:24:59,552 INFO  [SoapUITestCaseRunner] running step [cancel_on_setbalance_error]
11:24:59,553 INFO  [SoapUITestCaseRunner] running step [repeat_01_amount_times]
11:24:59,554 INFO  [SoapUITestCaseRunner] running step [finish_successful]
11:24:59,653 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK
11:24:59,654 INFO  [SoapUITestCaseRunner] Finished running SoapUI testcase [createTestSubscribers], time taken: 2746ms, status: FINISHED
11:24:59,654 INFO  [SoapUITestCaseRunner] TestCase [createTestSubscribers] finished with status [FINISHED] in 2746ms</msg>
<status status="PASS" endtime="20151105 11:24:59.672" starttime="20151105 11:24:53.880"></status>
</kw>
<msg timestamp="20151105 11:24:59.680" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20151105 11:24:59.681" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20151105 11:24:59.676" starttime="20151105 11:24:53.878"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20151105 11:24:59.720" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20151105 11:24:59.718" starttime="20151105 11:24:59.712"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20151105 11:24:59.729" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20151105 11:24:59.728" starttime="20151105 11:24:59.723"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20151105 11:24:59.738" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20151105 11:24:59.737" starttime="20151105 11:24:59.732"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20151105 11:24:59.754" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-ShortDuration/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-ShortDuration/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20151105 11:24:59.765" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20151105 11:24:59.767" starttime="20151105 11:24:59.747"></status>
</kw>
<msg timestamp="20151105 11:24:59.771" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20151105 11:24:59.772" level="INFO">${return_log_entry} = 2015-11-05 11:24:59,653 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151105 11:24:59.769" starttime="20151105 11:24:59.742"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20151105 11:24:59.795" starttime="20151105 11:24:59.790"></status>
</kw>
<msg timestamp="20151105 11:24:59.798" level="INFO">${return_log_entry} = 2015-11-05 11:24:59,653 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151105 11:24:59.797" starttime="20151105 11:24:59.775"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20151105 11:24:59.818" starttime="20151105 11:24:59.814"></status>
</kw>
<msg timestamp="20151105 11:24:59.822" level="INFO">${return_log_entry} = 2015-11-05 11:24:59,653 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151105 11:24:59.820" starttime="20151105 11:24:59.802"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20151105 11:24:59.835" starttime="20151105 11:24:59.832"></status>
</kw>
<msg timestamp="20151105 11:24:59.836" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151105 11:24:59.836" starttime="20151105 11:24:59.825"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20151105 11:24:59.848" starttime="20151105 11:24:59.846"></status>
</kw>
<msg timestamp="20151105 11:24:59.849" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151105 11:24:59.849" starttime="20151105 11:24:59.838"></status>
</kw>
<msg timestamp="20151105 11:24:59.852" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151105 11:24:59.851" starttime="20151105 11:24:59.687"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20151105 11:24:59.866" starttime="20151105 11:24:59.864"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20151105 11:24:59.869" starttime="20151105 11:24:59.868"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20151105 11:24:59.872" starttime="20151105 11:24:59.871"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20151105 11:24:59.886" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-ShortDuration/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-ShortDuration/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20151105 11:24:59.887" starttime="20151105 11:24:59.880"></status>
</kw>
<status status="PASS" endtime="20151105 11:24:59.888" starttime="20151105 11:24:59.878"></status>
</kw>
<status status="PASS" endtime="20151105 11:24:59.889" starttime="20151105 11:24:59.874"></status>
</kw>
<status status="PASS" endtime="20151105 11:24:59.890" starttime="20151105 11:24:59.853"></status>
</kw>
<msg timestamp="20151105 11:24:59.892" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20151105 11:24:59.891" starttime="20151105 11:24:53.753"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20151105 11:24:59.895" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151105 11:24:59.896" starttime="20151105 11:24:59.893"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151105 11:24:59.899" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20151105 11:24:59.900" starttime="20151105 11:24:59.897"></status>
</kw>
<kw type="kw" name="${calling_int} = BuiltIn.Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<msg timestamp="20151105 11:24:59.903" level="INFO">Argument types are:
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20151105 11:24:59.905" level="INFO">${calling_int} = 43667770900</msg>
<status status="PASS" endtime="20151105 11:24:59.904" starttime="20151105 11:24:59.901"></status>
</kw>
<kw type="kw" name="${called_party} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${calling_int}+1</arg>
</arguments>
<msg timestamp="20151105 11:24:59.910" level="INFO">${called_party} = 43667770901</msg>
<status status="PASS" endtime="20151105 11:24:59.910" starttime="20151105 11:24:59.906"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MOC 1s *******</arg>
</arguments>
<status status="PASS" endtime="20151105 11:24:59.913" starttime="20151105 11:24:59.912"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MOC 1s">
<doc>Runs a standard MOC 1s session</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${called_party}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MOC CGS">
<doc>Runs a standard MOC session (meaning a session that needs only mscAddress and mocBPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>moc1s</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_moc_req}</arg>
<arg>${queue_moc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20151105 11:24:59.951" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv</msg>
<status status="PASS" endtime="20151105 11:24:59.950" starttime="20151105 11:24:59.948"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20151105 11:24:59.955" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv</msg>
<status status="PASS" endtime="20151105 11:24:59.954" starttime="20151105 11:24:59.952"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20151105 11:24:59.959" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini</msg>
<status status="PASS" endtime="20151105 11:24:59.958" starttime="20151105 11:24:59.956"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20151105 11:24:59.962" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc1s.cgs</msg>
<status status="PASS" endtime="20151105 11:24:59.962" starttime="20151105 11:24:59.960"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20151105 11:24:59.965" starttime="20151105 11:24:59.964"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20151105 11:24:59.970" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151105 11:24:59.971" starttime="20151105 11:24:59.966"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20151105 11:24:59.973" starttime="20151105 11:24:59.972"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mocBPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20151105 11:24:59.977" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151105 11:24:59.978" starttime="20151105 11:24:59.975"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20151105 11:24:59.983" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151105 11:24:59.984" starttime="20151105 11:24:59.979"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20151105 11:24:59.986" starttime="20151105 11:24:59.985"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20151105 11:24:59.991" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151105 11:24:59.991" starttime="20151105 11:24:59.988"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MOC;${queue_moc_req};${queue_moc_res};6;1;1</arg>
</arguments>
<msg timestamp="20151105 11:24:59.997" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151105 11:24:59.998" starttime="20151105 11:24:59.993"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20151105 11:25:00.000" starttime="20151105 11:24:59.999"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20151105 11:25:00.014" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc1s.cgs /opt/robot/robotworkspace/external_tests/experimental/matko.sanseovic/reroute_changes -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20151105 11:25:12.111" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20151105 11:25:12.108" starttime="20151105 11:25:00.002"></status>
</kw>
<msg timestamp="20151105 11:25:12.119" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20151105 11:25:12.116" starttime="20151105 11:24:59.932"></status>
</kw>
<msg timestamp="20151105 11:25:12.123" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20151105 11:25:12.121" starttime="20151105 11:24:59.916"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151105 11:25:12.131" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20151105 11:25:12.132" starttime="20151105 11:25:12.127"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20151105 11:25:12.140" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20151105 11:25:12.192" level="FAIL">CG Session ended with rc 1: 1.0 != 0.0</msg>
<status status="FAIL" endtime="20151105 11:25:12.195" starttime="20151105 11:25:12.135"></status>
</kw>
<doc>Test will make a MOC call, duration 1s.

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MOC_only</tag>
<tag>MTEL_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20151105 11:25:12.198" starttime="20151105 11:24:53.735">CG Session ended with rc 1: 1.0 != 0.0</status>
</test>
<doc>Testing the prepaid MOC call, duration is 1s - shorter than one slice (less than 60s)

============================================================</doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20151105 11:25:12.213" starttime="20151105 11:24:48.161"></status>
</suite>
<statistics>
<total>
<stat pass="0" fail="1">Critical Tests</stat>
<stat pass="0" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" info="" doc="" combined="" fail="1" links="">matko.sanseovic</stat>
<stat pass="0" info="" doc="" combined="" fail="1" links="">MOC_only</stat>
<stat pass="0" info="" doc="" combined="" fail="1" links="">MTEL_supported</stat>
<stat pass="0" info="" doc="" combined="" fail="1" links="">SMARTSPACE_supported</stat>
<stat pass="0" info="" doc="" combined="" fail="1" links="">TNZ_supported</stat>
</tag>
<suite>
<stat pass="0" id="s1" fail="1" name="MOC PREPAID ONNET-ShortDuration-robot-suite">MOC PREPAID ONNET-ShortDuration-robot-suite</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
