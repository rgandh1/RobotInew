<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 2.8.7 (Jython 2.7rc1 on java1.7.0_79)" generated="20150615 10:01:01.914">
<suite source="/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/regression-robot-suite.txt" id="s1" name="Regression-Robot-Suite">
<kw type="setup" name="Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20150615 10:01:03.896" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20150615 10:01:03.900" level="INFO">${date} = Mon Jun 15 10:01:03 CEST 2015</msg>
<status status="PASS" endtime="20150615 10:01:03.899" starttime="20150615 10:01:03.882"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150615 10:01:03.905" level="INFO">Date and time: Mon Jun 15 10:01:03 CEST 2015</msg>
<status status="PASS" endtime="20150615 10:01:03.906" starttime="20150615 10:01:03.902"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20150615 10:01:03.910" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20150615 10:01:03.910" starttime="20150615 10:01:03.908"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>1</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20150615 10:01:03.936" level="INFO">msg=crce_host=10.105.121.125</msg>
<status status="PASS" endtime="20150615 10:01:03.937" starttime="20150615 10:01:03.934"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20150615 10:01:03.941" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20150615 10:01:03.942" starttime="20150615 10:01:03.939"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20150615 10:01:03.947" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20150615 10:01:03.948" starttime="20150615 10:01:03.944"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20150615 10:01:03.952" level="INFO">msg=amount=1</msg>
<status status="PASS" endtime="20150615 10:01:03.953" starttime="20150615 10:01:03.949"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20150615 10:01:03.957" level="INFO">msg=imsiRangeStart=23220166777090000</msg>
<status status="PASS" endtime="20150615 10:01:03.958" starttime="20150615 10:01:03.954"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20150615 10:01:03.962" level="INFO">msg=msisdnRangeStart=4366777090000</msg>
<status status="PASS" endtime="20150615 10:01:03.963" starttime="20150615 10:01:03.960"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20150615 10:01:03.967" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20150615 10:01:03.968" starttime="20150615 10:01:03.965"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20150615 10:01:03.972" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20150615 10:01:03.973" starttime="20150615 10:01:03.969"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20150615 10:01:03.977" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20150615 10:01:03.978" starttime="20150615 10:01:03.974"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20150615 10:01:03.981" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20150615 10:01:03.982" starttime="20150615 10:01:03.979"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20150615 10:01:04.004" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150615 10:01:04.005" starttime="20150615 10:01:04.000"></status>
</kw>
<status status="PASS" endtime="20150615 10:01:04.007" starttime="20150615 10:01:03.998"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20150615 10:01:04.015" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/soapui.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150615 10:01:04.016" starttime="20150615 10:01:04.012"></status>
</kw>
<status status="PASS" endtime="20150615 10:01:04.017" starttime="20150615 10:01:04.009"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20150615 10:01:04.024" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/soapui-errors.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150615 10:01:04.025" starttime="20150615 10:01:04.021"></status>
</kw>
<status status="PASS" endtime="20150615 10:01:04.026" starttime="20150615 10:01:04.019"></status>
</kw>
<status status="PASS" endtime="20150615 10:01:04.028" starttime="20150615 10:01:03.985"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20150615 10:01:04.034" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20150615 10:01:04.034" starttime="20150615 10:01:04.030"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20150615 10:01:04.038" starttime="20150615 10:01:04.036"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20150615 10:01:04.042" starttime="20150615 10:01:04.040"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20150615 10:01:04.046" starttime="20150615 10:01:04.044"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20150615 10:01:04.049" starttime="20150615 10:01:04.047"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20150615 10:01:04.053" starttime="20150615 10:01:04.051"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20150615 10:01:04.056" starttime="20150615 10:01:04.054"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20150615 10:01:04.060" starttime="20150615 10:01:04.058"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20150615 10:01:04.064" starttime="20150615 10:01:04.061"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20150615 10:01:04.068" starttime="20150615 10:01:04.065"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20150615 10:01:04.071" starttime="20150615 10:01:04.069"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20150615 10:01:04.075" starttime="20150615 10:01:04.073"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20150615 10:01:04.079" starttime="20150615 10:01:04.076"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20150615 10:01:04.084" level="INFO">Running with the following project properties set: [u'crceHost=10.105.121.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=23220166777090000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=4366777090000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20150615 10:01:10.606" level="INFO">10:01:04,307 WARN  [SoapUI] Missing folder [/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/ext] for external libraries
10:01:04,310 INFO  [DefaultSoapUICore] Creating new settings at [/root/soapui-settings.xml]
10:01:06,238 INFO  [WsdlProject] Loaded project from [file:/opt/robot/robotworkspace/libs/global-keyword-resources/crce-subscriberadmin/robot_crce_bridge-soapui-project.xml]
10:01:06,256 INFO  [SoapUITestCaseRunner] Setting project property [crceHost] to [10.105.121.125]
10:01:06,256 INFO  [SoapUITestCaseRunner] Setting project property [crcePort] to [8080]
10:01:06,257 INFO  [SoapUITestCaseRunner] Setting project property [crceWebservicesBasePath] to [/inew-mvno-crce-webservices/]
10:01:06,257 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.amount] to [1]
10:01:06,257 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.imsiRangeStart] to [23220166777090000]
10:01:06,257 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.msisdnRangeStart] to [4366777090000]
10:01:06,257 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.type] to [PREPAID]
10:01:06,257 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.languageid] to [1]
10:01:06,257 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.tariffId] to [101001]
10:01:06,258 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.balance] to [10000000]
10:01:06,258 INFO  [SoapUITestCaseRunner] Running SoapUI tests in project [Robotframework_CRCE-Bridge]
10:01:06,258 INFO  [SoapUITestCaseRunner] Running TestCase [createTestSubscribers]
10:01:06,267 INFO  [SoapUITestCaseRunner] Running SoapUI testcase [createTestSubscribers]
10:01:06,273 INFO  [SoapUITestCaseRunner] running step [init_repeat_counter]
10:01:06,706 INFO  [SoapUITestCaseRunner] running step [01_init_next_subscriber]
10:01:06,767 INFO  [SoapUITestCaseRunner] running step [getSubscriberProfileByImsi]
10:01:06,954 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:01:06,955 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
10:01:07,047 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:01:07,055 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:01:07,245 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:01:07,245 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:01:07,250 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:01:07,250 INFO  [SoapUITestCaseRunner] running step [cancel_on_SOAP_error]
10:01:07,349 INFO  [SoapUITestCaseRunner] running step [transfer_response_values]
10:01:07,789 INFO  [SoapUITestCaseRunner] running step [cancel_on_CRCE_error_OR_skip_delete_on_UnknownSubscriber]
10:01:07,816 INFO  [SoapUITestCaseRunner] running step [deleteSubscriber]
10:01:07,819 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:01:07,821 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:01:07,821 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
10:01:08,072 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:01:08,072 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:01:08,081 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:01:08,081 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:01:08,082 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:01:08,082 INFO  [SoapUITestCaseRunner] running step [2nd_cancel_on_SOAP_error]
10:01:08,160 INFO  [SoapUITestCaseRunner] running step [2nd_transfer_response_values]
10:01:08,166 INFO  [SoapUITestCaseRunner] running step [cancel_on_deletion_error]
10:01:08,205 INFO  [SoapUITestCaseRunner] running step [02_createSubscriber]
10:01:08,207 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:01:08,208 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:01:08,208 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
10:01:08,250 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:01:08,250 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:01:08,253 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:01:08,253 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:01:08,253 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:01:08,253 INFO  [SoapUITestCaseRunner] running step [3rd_cancel_on_SOAP_error]
10:01:08,286 INFO  [SoapUITestCaseRunner] running step [3rd_transfer_response_values]
10:01:08,291 INFO  [SoapUITestCaseRunner] running step [cancel_on_create_error]
10:01:08,311 INFO  [SoapUITestCaseRunner] running step [activateSubscriber]
10:01:08,313 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:01:08,315 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:01:08,315 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
10:01:09,946 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:01:09,946 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:01:09,954 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:01:09,954 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:01:09,954 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:01:09,954 INFO  [SoapUITestCaseRunner] running step [4th_cancel_on_SOAP_error]
10:01:10,023 INFO  [SoapUITestCaseRunner] running step [4th_transfer_response_values]
10:01:10,029 INFO  [SoapUITestCaseRunner] running step [cancel_on_activate_error]
10:01:10,070 INFO  [SoapUITestCaseRunner] running step [getMainAccount]
10:01:10,072 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:01:10,073 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:01:10,073 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/accounts HTTP/1.1
10:01:10,172 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:01:10,172 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:01:10,178 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:01:10,178 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:01:10,178 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:01:10,179 INFO  [SoapUITestCaseRunner] running step [5th_cancel_on_SOAP_error]
10:01:10,231 INFO  [SoapUITestCaseRunner] running step [5th_transfer_response_values]
10:01:10,253 INFO  [SoapUITestCaseRunner] running step [cancel_on_getmainaccount_error]
10:01:10,298 INFO  [SoapUITestCaseRunner] running step [setBalance]
10:01:10,302 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:01:10,304 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:01:10,304 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/account_administration HTTP/1.1
10:01:10,377 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:01:10,377 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:01:10,389 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:01:10,390 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:01:10,390 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:01:10,390 INFO  [SoapUITestCaseRunner] running step [6th_cancel_on_SOAP_error]
10:01:10,456 INFO  [SoapUITestCaseRunner] running step [6th_transfer_response_values]
10:01:10,466 INFO  [SoapUITestCaseRunner] running step [cancel_on_setbalance_error]
10:01:10,510 INFO  [SoapUITestCaseRunner] running step [repeat_01_amount_times]
10:01:10,569 INFO  [SoapUITestCaseRunner] running step [finish_successful]
10:01:10,602 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK
10:01:10,602 INFO  [SoapUITestCaseRunner] Finished running SoapUI testcase [createTestSubscribers], time taken: 4292ms, status: FINISHED
10:01:10,602 INFO  [SoapUITestCaseRunner] TestCase [createTestSubscribers] finished with status [FINISHED] in 4292ms</msg>
<status status="PASS" endtime="20150615 10:01:10.608" starttime="20150615 10:01:04.082"></status>
</kw>
<msg timestamp="20150615 10:01:10.612" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20150615 10:01:10.613" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20150615 10:01:10.611" starttime="20150615 10:01:04.080"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20150615 10:01:10.632" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20150615 10:01:10.631" starttime="20150615 10:01:10.628"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20150615 10:01:10.637" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20150615 10:01:10.636" starttime="20150615 10:01:10.634"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20150615 10:01:10.641" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20150615 10:01:10.640" starttime="20150615 10:01:10.638"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20150615 10:01:10.649" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20150615 10:01:10.655" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20150615 10:01:10.656" starttime="20150615 10:01:10.646"></status>
</kw>
<msg timestamp="20150615 10:01:10.658" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20150615 10:01:10.658" level="INFO">${return_log_entry} = 2015-06-15 10:01:10,602 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20150615 10:01:10.657" starttime="20150615 10:01:10.643"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20150615 10:01:10.674" starttime="20150615 10:01:10.672"></status>
</kw>
<msg timestamp="20150615 10:01:10.676" level="INFO">${return_log_entry} = 2015-06-15 10:01:10,602 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20150615 10:01:10.675" starttime="20150615 10:01:10.660"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20150615 10:01:10.685" starttime="20150615 10:01:10.683"></status>
</kw>
<msg timestamp="20150615 10:01:10.686" level="INFO">${return_log_entry} = 2015-06-15 10:01:10,602 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20150615 10:01:10.686" starttime="20150615 10:01:10.677"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20150615 10:01:10.697" starttime="20150615 10:01:10.694"></status>
</kw>
<msg timestamp="20150615 10:01:10.699" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20150615 10:01:10.698" starttime="20150615 10:01:10.688"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20150615 10:01:10.711" starttime="20150615 10:01:10.709"></status>
</kw>
<msg timestamp="20150615 10:01:10.712" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20150615 10:01:10.712" starttime="20150615 10:01:10.700"></status>
</kw>
<msg timestamp="20150615 10:01:10.715" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20150615 10:01:10.714" starttime="20150615 10:01:10.615"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20150615 10:01:10.729" starttime="20150615 10:01:10.727"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20150615 10:01:10.732" starttime="20150615 10:01:10.730"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20150615 10:01:10.736" starttime="20150615 10:01:10.734"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20150615 10:01:10.751" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20150615 10:01:10.752" starttime="20150615 10:01:10.744"></status>
</kw>
<status status="PASS" endtime="20150615 10:01:10.753" starttime="20150615 10:01:10.742"></status>
</kw>
<status status="PASS" endtime="20150615 10:01:10.754" starttime="20150615 10:01:10.737"></status>
</kw>
<status status="PASS" endtime="20150615 10:01:10.755" starttime="20150615 10:01:10.717"></status>
</kw>
<msg timestamp="20150615 10:01:10.757" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20150615 10:01:10.756" starttime="20150615 10:01:03.914"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20150615 10:01:10.761" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150615 10:01:10.761" starttime="20150615 10:01:10.758"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150615 10:01:10.764" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20150615 10:01:10.765" starttime="20150615 10:01:10.763"></status>
</kw>
<kw type="kw" name="${week} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date +%V</arg>
</arguments>
<msg timestamp="20150615 10:01:10.775" level="INFO">Running command 'date +%V 2&gt;&amp;1'</msg>
<msg timestamp="20150615 10:01:10.780" level="INFO">${week} = 25</msg>
<status status="PASS" endtime="20150615 10:01:10.779" starttime="20150615 10:01:10.767"></status>
</kw>
<kw type="kw" name="${year} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date +%Y</arg>
</arguments>
<msg timestamp="20150615 10:01:10.793" level="INFO">Running command 'date +%Y 2&gt;&amp;1'</msg>
<msg timestamp="20150615 10:01:10.799" level="INFO">${year} = 2015</msg>
<status status="PASS" endtime="20150615 10:01:10.798" starttime="20150615 10:01:10.783"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${YYYYwWW}</arg>
<arg>${year}w${week}</arg>
</arguments>
<msg timestamp="20150615 10:01:10.847" level="INFO">${YYYYwWW} = 2015w25</msg>
<status status="PASS" endtime="20150615 10:01:10.849" starttime="20150615 10:01:10.802"></status>
</kw>
<status status="PASS" endtime="20150615 10:01:10.852" starttime="20150615 10:01:03.871"></status>
</kw>
<test id="s1-t1" name="Run MOC Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Connect with XDR and start the log monitoring</arg>
</arguments>
<status status="PASS" endtime="20150615 10:01:10.885" starttime="20150615 10:01:10.882"></status>
</kw>
<kw type="kw" name="${ssh_connection_xdr} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150615 10:01:10.962" starttime="20150615 10:01:10.960"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150615 10:01:11.089" starttime="20150615 10:01:10.969"></status>
</kw>
<msg timestamp="20150615 10:01:11.096" level="INFO">${ssh_connection} = 1</msg>
<status status="PASS" endtime="20150615 10:01:11.093" starttime="20150615 10:01:10.963"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150615 10:01:11.117" level="INFO">Logging into '10.105.121.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150615 10:01:11.492" level="INFO">Read output: Last login: Mon Jun 15 07:56:46 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb21 ~]$</msg>
<status status="PASS" endtime="20150615 10:01:11.494" starttime="20150615 10:01:11.112"></status>
</kw>
<status status="PASS" endtime="20150615 10:01:11.496" starttime="20150615 10:01:11.100"></status>
</kw>
<msg timestamp="20150615 10:01:11.502" level="INFO">${ssh_connection} = 1</msg>
<status status="PASS" endtime="20150615 10:01:11.500" starttime="20150615 10:01:10.948"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150615 10:01:11.531" starttime="20150615 10:01:11.526"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150615 10:01:11.538" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.2.2/inew-mvno-xdr.log &gt; tmpfilemonitor1.log'.</msg>
<status status="PASS" endtime="20150615 10:01:11.546" starttime="20150615 10:01:11.533"></status>
</kw>
<status status="PASS" endtime="20150615 10:01:11.548" starttime="20150615 10:01:11.506"></status>
</kw>
<msg timestamp="20150615 10:01:11.553" level="INFO">${ssh_connection_xdr} = 1</msg>
<status status="PASS" endtime="20150615 10:01:11.551" starttime="20150615 10:01:10.922"></status>
</kw>
<kw type="kw" name="${ssh_connection_in} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN_MOC_LOG_FILE_PATH}${IN_LOG_FILE_NAME}</arg>
<arg>host=${IN-APP HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150615 10:01:11.601" starttime="20150615 10:01:11.599"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150615 10:01:11.653" starttime="20150615 10:01:11.608"></status>
</kw>
<msg timestamp="20150615 10:01:11.657" level="INFO">${ssh_connection} = 2</msg>
<status status="PASS" endtime="20150615 10:01:11.656" starttime="20150615 10:01:11.602"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150615 10:01:11.677" level="INFO">Logging into '10.105.121.135:22' as 'qa_automation'.</msg>
<msg timestamp="20150615 10:01:11.992" level="INFO">Read output: Last login: Mon Jun 15 07:56:47 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb21 ~]$</msg>
<status status="PASS" endtime="20150615 10:01:11.994" starttime="20150615 10:01:11.672"></status>
</kw>
<status status="PASS" endtime="20150615 10:01:11.996" starttime="20150615 10:01:11.660"></status>
</kw>
<msg timestamp="20150615 10:01:12.002" level="INFO">${ssh_connection} = 2</msg>
<status status="PASS" endtime="20150615 10:01:12.000" starttime="20150615 10:01:11.589"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150615 10:01:12.031" starttime="20150615 10:01:12.026"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150615 10:01:12.038" level="INFO">Starting command 'tail -f /var/log/inew/core-in/1.0.0/moc/partition/currentinew-in.log &gt; tmpfilemonitor2.log'.</msg>
<status status="PASS" endtime="20150615 10:01:12.043" starttime="20150615 10:01:12.033"></status>
</kw>
<status status="PASS" endtime="20150615 10:01:12.045" starttime="20150615 10:01:12.006"></status>
</kw>
<msg timestamp="20150615 10:01:12.051" level="INFO">${ssh_connection_in} = 2</msg>
<status status="PASS" endtime="20150615 10:01:12.048" starttime="20150615 10:01:11.575"></status>
</kw>
<kw type="kw" name="${ssh_connection_crce} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE_LOG_FILE_PATH}</arg>
<arg>host=${CRCE HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150615 10:01:12.100" starttime="20150615 10:01:12.099"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150615 10:01:12.607" starttime="20150615 10:01:12.107"></status>
</kw>
<msg timestamp="20150615 10:01:12.611" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20150615 10:01:12.609" starttime="20150615 10:01:12.102"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150615 10:01:12.632" level="INFO">Logging into '10.105.121.125:22' as 'qa_automation'.</msg>
<msg timestamp="20150615 10:01:13.602" level="INFO">Read output: Last login: Mon Jun 15 07:56:51 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb21 ~]$</msg>
<status status="PASS" endtime="20150615 10:01:13.603" starttime="20150615 10:01:12.627"></status>
</kw>
<status status="PASS" endtime="20150615 10:01:13.604" starttime="20150615 10:01:12.614"></status>
</kw>
<msg timestamp="20150615 10:01:13.607" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20150615 10:01:13.606" starttime="20150615 10:01:12.088"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150615 10:01:13.620" starttime="20150615 10:01:13.618"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150615 10:01:13.623" level="INFO">Starting command 'tail -f /var/log/inew/crce/5.2.13/negret-0.log &gt; tmpfilemonitor3.log'.</msg>
<status status="PASS" endtime="20150615 10:01:13.627" starttime="20150615 10:01:13.621"></status>
</kw>
<status status="PASS" endtime="20150615 10:01:13.628" starttime="20150615 10:01:13.609"></status>
</kw>
<msg timestamp="20150615 10:01:13.630" level="INFO">${ssh_connection_crce} = 3</msg>
<status status="PASS" endtime="20150615 10:01:13.629" starttime="20150615 10:01:12.075"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run Auto-MOC *******</arg>
</arguments>
<status status="PASS" endtime="20150615 10:01:13.633" starttime="20150615 10:01:13.631"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the MOC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150615 10:01:13.636" level="INFO">Running the MOC call...</msg>
<status status="PASS" endtime="20150615 10:01:13.637" starttime="20150615 10:01:13.634"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MOC 1s">
<doc>Runs a standard MOC 1s session</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MOC CGS">
<doc>Runs a standard MOC session (meaning a session that needs only mscAddress and mocBPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>moc1s</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_moc_req}</arg>
<arg>${queue_moc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20150615 10:01:13.671" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv</msg>
<status status="PASS" endtime="20150615 10:01:13.670" starttime="20150615 10:01:13.668"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20150615 10:01:13.674" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv</msg>
<status status="PASS" endtime="20150615 10:01:13.674" starttime="20150615 10:01:13.672"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20150615 10:01:13.678" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini</msg>
<status status="PASS" endtime="20150615 10:01:13.677" starttime="20150615 10:01:13.676"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20150615 10:01:13.682" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc1s.cgs</msg>
<status status="PASS" endtime="20150615 10:01:13.681" starttime="20150615 10:01:13.679"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20150615 10:01:13.685" starttime="20150615 10:01:13.683"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20150615 10:01:13.689" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150615 10:01:13.690" starttime="20150615 10:01:13.686"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20150615 10:01:13.693" starttime="20150615 10:01:13.691"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mocBPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20150615 10:01:13.697" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150615 10:01:13.698" starttime="20150615 10:01:13.694"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20150615 10:01:13.703" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150615 10:01:13.703" starttime="20150615 10:01:13.699"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20150615 10:01:13.706" starttime="20150615 10:01:13.704"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20150615 10:01:13.710" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150615 10:01:13.711" starttime="20150615 10:01:13.707"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MOC;${queue_moc_req};${queue_moc_res};6;1;1</arg>
</arguments>
<msg timestamp="20150615 10:01:13.716" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150615 10:01:13.717" starttime="20150615 10:01:13.712"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20150615 10:01:13.719" starttime="20150615 10:01:13.718"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20150615 10:01:13.729" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc1s.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20150615 10:01:25.914" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20150615 10:01:25.911" starttime="20150615 10:01:13.721"></status>
</kw>
<msg timestamp="20150615 10:01:25.919" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20150615 10:01:25.917" starttime="20150615 10:01:13.654"></status>
</kw>
<msg timestamp="20150615 10:01:25.924" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20150615 10:01:25.922" starttime="20150615 10:01:13.639"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20150615 10:01:30.932" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20150615 10:01:30.935" starttime="20150615 10:01:25.927"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150615 10:01:30.943" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20150615 10:01:30.945" starttime="20150615 10:01:30.939"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection_in}</arg>
<arg>MOC_${TAILED_IN_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150615 10:01:30.990" starttime="20150615 10:01:30.985"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150615 10:01:31.002" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150615 10:01:31.000" starttime="20150615 10:01:30.992"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150615 10:01:31.023" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150615 10:01:31.024" starttime="20150615 10:01:31.005"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150615 10:01:31.048" starttime="20150615 10:01:31.044"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150615 10:01:31.054" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150615 10:01:31.138" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150615 10:01:31.142" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150615 10:01:31.140" starttime="20150615 10:01:31.050"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150615 10:01:31.149" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150615 10:01:31.231" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150615 10:01:31.234" level="INFO">${processes_string} = 13439 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail
13455 ?        S      0:00 grep tail</msg>
<status status="PASS" endtime="20150615 10:01:31.233" starttime="20150615 10:01:31.145"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150615 10:01:31.244" level="INFO">@{processes_list} = [ 13439 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail | 13455 ?        S      0:00 grep tail ]</msg>
<status status="PASS" endtime="20150615 10:01:31.242" starttime="20150615 10:01:31.237"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 13439 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150615 10:01:31.256" level="INFO">${pid} = 13439</msg>
<status status="PASS" endtime="20150615 10:01:31.254" starttime="20150615 10:01:31.250"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150615 10:01:31.262" level="INFO">Executing command 'kill -9 13439'.</msg>
<msg timestamp="20150615 10:01:31.312" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150615 10:01:31.313" starttime="20150615 10:01:31.258"></status>
</kw>
<status status="PASS" endtime="20150615 10:01:31.315" starttime="20150615 10:01:31.248"></status>
</kw>
<kw type="foritem" name="${process} = 13455 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150615 10:01:31.324" level="INFO">${pid} = 13455</msg>
<status status="PASS" endtime="20150615 10:01:31.323" starttime="20150615 10:01:31.318"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150615 10:01:31.389" level="INFO">Executing command 'kill -9 13455'.</msg>
<msg timestamp="20150615 10:01:31.431" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150615 10:01:31.434" starttime="20150615 10:01:31.383"></status>
</kw>
<status status="PASS" endtime="20150615 10:01:31.435" starttime="20150615 10:01:31.316"></status>
</kw>
<status status="PASS" endtime="20150615 10:01:31.436" starttime="20150615 10:01:31.245"></status>
</kw>
<status status="PASS" endtime="20150615 10:01:31.437" starttime="20150615 10:01:31.028"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150615 10:01:31.444" level="INFO">Starting command 'cat tmpfilemonitor2.log'.</msg>
<status status="PASS" endtime="20150615 10:01:31.474" starttime="20150615 10:01:31.440"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150615 10:01:31.479" level="INFO">Reading output of command 'cat tmpfilemonitor2.log'.</msg>
<msg timestamp="20150615 10:01:31.493" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150615 10:01:31.495" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150615 10:01:31.494" starttime="20150615 10:01:31.476"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150615 10:01:31.502" level="INFO">Executing command 'rm tmpfilemonitor2.log'.</msg>
<msg timestamp="20150615 10:01:31.556" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150615 10:01:31.557" starttime="20150615 10:01:31.498"></status>
</kw>
<msg timestamp="20150615 10:01:31.562" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150615 10:01:31.560" starttime="20150615 10:01:30.970"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20150615 10:01:31.588" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MOC_ssh_tail_log-in.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MOC_ssh_tail_log-in.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150615 10:01:31.590" starttime="20150615 10:01:31.576"></status>
</kw>
<status status="PASS" endtime="20150615 10:01:31.592" starttime="20150615 10:01:31.565"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150615 10:01:31.615" starttime="20150615 10:01:31.611"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150615 10:01:31.627" starttime="20150615 10:01:31.618"></status>
</kw>
<status status="PASS" endtime="20150615 10:01:31.629" starttime="20150615 10:01:31.595"></status>
</kw>
<msg timestamp="20150615 10:01:31.633" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150615 10:01:31.631" starttime="20150615 10:01:30.951"></status>
</kw>
<kw type="kw" name="Check MOC IN log">
<doc>Checks the tailed log file of MOC call created on IN.</doc>
<arguments>
<arg>MOC_${TAILED_IN_LOG_FILE}</arg>
<arg>${rc}</arg>
</arguments>
<kw type="kw" name="${temp} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${log_file}</arg>
</arguments>
<msg timestamp="20150615 10:01:31.658" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MOC_ssh_tail_log-in.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MOC_ssh_tail_log-in.log&lt;/a&gt;'</msg>
<msg timestamp="20150615 10:01:31.661" level="INFO">${temp} = </msg>
<status status="PASS" endtime="20150615 10:01:31.660" starttime="20150615 10:01:31.654"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rel_c}</arg>
<arg>0</arg>
<arg>msg=CG session failed - check MOC IN log</arg>
</arguments>
<msg timestamp="20150615 10:01:31.668" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20150615 10:01:31.714" level="FAIL">CG session failed - check MOC IN log: 1 != 0</msg>
<status status="FAIL" endtime="20150615 10:01:31.716" starttime="20150615 10:01:31.664"></status>
</kw>
<status status="FAIL" endtime="20150615 10:01:31.718" starttime="20150615 10:01:31.637"></status>
</kw>
<doc>Test will make a MOC call, duration 1s.
Logs from XDR, IN and CRCE are collected and analysed as well as XDR DB. Before the call subscriber's
balance is set, and after the call balance is checked for correct charging.

Arguments:
none
Returns:
none
Fails:

=================================================================================</doc>
<tags>
<tag>FALABELLA_CHILE_supported</tag>
<tag>matko.sanseovic</tag>
<tag>MFC_involved</tag>
<tag>MOC_involved</tag>
<tag>MTC_involved</tag>
<tag>SMS_involved</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20150615 10:01:31.721" starttime="20150615 10:01:10.857">CG session failed - check MOC IN log: 1 != 0</status>
</test>
<kw type="teardown" name="Teardown Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Disconnect From Database</arg>
</arguments>
<status status="PASS" endtime="20150615 10:01:31.751" starttime="20150615 10:01:31.747"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Cleaning up</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150615 10:01:31.757" level="INFO">Cleaning up</msg>
<status status="PASS" endtime="20150615 10:01:31.759" starttime="20150615 10:01:31.753"></status>
</kw>
<kw type="kw" name="OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>mv *ssh_tail*.log log/</arg>
</arguments>
<msg timestamp="20150615 10:01:31.771" level="INFO">Running command 'mv *ssh_tail*.log log/ 2&gt;&amp;1'</msg>
<status status="PASS" endtime="20150615 10:01:31.779" starttime="20150615 10:01:31.761"></status>
</kw>
<status status="PASS" endtime="20150615 10:01:31.782" starttime="20150615 10:01:31.734"></status>
</kw>
<doc>This suite tests the set of "standard" calls: MOC, MTC, MFC and SMS.
It uses standardised library keywords encapsulating Call Generator's functionality. Tests try to
check other components (at the moment IN, CRCE and XDR) for evidences of calls - in log files and in DB.

============================================================</doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20150615 10:01:31.783" starttime="20150615 10:01:01.926"></status>
</suite>
<statistics>
<total>
<stat pass="0" fail="1">Critical Tests</stat>
<stat pass="0" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" info="" doc="" combined="" fail="1" links="">FALABELLA_CHILE_supported</stat>
<stat pass="0" info="" doc="" combined="" fail="1" links="">matko.sanseovic</stat>
<stat pass="0" info="" doc="" combined="" fail="1" links="">MFC_involved</stat>
<stat pass="0" info="" doc="" combined="" fail="1" links="">MOC_involved</stat>
<stat pass="0" info="" doc="" combined="" fail="1" links="">MTC_involved</stat>
<stat pass="0" info="" doc="" combined="" fail="1" links="">SMS_involved</stat>
</tag>
<suite>
<stat pass="0" id="s1" fail="1" name="Regression-Robot-Suite">Regression-Robot-Suite</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
