*** Settings ***
Documentation     This is an end-to-end testing implementation of the IN_BST_007-MaximumCallDuration
...               In Addition to the MOC and MFC calls the description 
...               of the manual TC includes additional passes for a a roaming MOC and a (roaming) MTC 
...               that is not covered by this automated test since there's
...               no possibility to have a phone outside the home netwok and simultaneously
...               have it attached to the Android Remoting System.
...               ---------------------------------------------------------------
...               Run MOC Maximum Duration
...               Run MFC Maximum Duration
...
...               Run Roaming MOC Maximum Duration  => WARNING: Not implemented
...               Run MTC Maximum Duration          => WARNING: Not implemented
...               ===============================================================================
...               Run with arguments:
...               --variable ROBOT_WORKSPACE_RESOURCE:/opt/robot/robotworkspace/robotworkspace-resource.txt 
...               --variable SUT_RESOURCE:/opt/robot/robotworkspace/suts/MEX-resource.txt
...               ============================================================
Force Tags        TNZ_supported  walter.heincz  End2EndTest
Resource          ${ROBOT_WORKSPACE_RESOURCE}  #Be aware that variables imported with a resource file are NOT visible in the local Variables table (but in all other local tables)
Resource          ${SUT_RESOURCE}
Resource          ${ROBOT WORKSPACE PATH}/libs/global-keyword-resources/android-remoting/ars_support-resource.txt
Resource          ${ROBOT WORKSPACE PATH}/libs/global-keyword-resources/crce-subscriberadmin/subscriber-admin-support-resource.txt
Resource          ../../configuration-resource.txt
Resource          ../../suite-global-keyword-resource.txt
Resource          ${ROBOT WORKSPACE PATH}/libs/global-keyword-resources/crm-support/crm_support-resource.txt
Resource          ${ROBOT WORKSPACE PATH}/libs/global-keyword-resources/cg-support/cg_support-resource.txt
Library           OperatingSystem
#Library          #Selenium2Library
Library           ${ROBOT WORKSPACE PATH}/libs/py/InewSelenium2Library.py

Suite Setup       Setup Suite        
Suite Teardown    Teardown Suite



*** Variables ***

${MOC_TICKET_CHANNEL}=   MOC
${MFC_TICKET_CHANNEL}=   MFC

#${CALL_DURATION_MILLIS}= #configured MOC_MAX_CALL_DURATION_MILLIS and MFC_MAX_CALL_DURATION_MILLIS are used

${NEWLINE}=  \n

#${CRM_PORTAL_LOGIN_URL}=             #ia initialized by SUITE SETUP
#${CRM_PORTAL_SUBSCRIBER_INPUT_URL}=  #ia initialized by SUITE SETUP





*** Keywords ***


Run Max Duration Monitored Voice Call And Check Phone 1 Ticket
    [Documentation]  Runs a call between the passed devices and checks if a CRM ticket was written for Phone 1
    ...
    ...              Arguments:               
    ...                cg_device_imsi    
    ...                cd_device_imsi    
    ...                dial_msisdn       
    ...                max_duration_secs    Maximum duration the call shall be monitored 
    ...                ticket_channel         The new ticket's expected channel 
    ...
    ...              Returns:                 Nothing - the function fails if the call or CRM query doesn't succeed
    ...              Author: walter.heincz 
    ...              =========================================================
    [Arguments]  ${cg_device_imsi}   ${cd_device_imsi}  ${dial_msisdn}    ${max_duration_secs}    ${ticket_channel}
    ${phone1_imsi}=                         Run Keyword If  '${FAKE_CALLS}'=='true'   Set Variable             ${FAKE_ATTACHED_ONNET_PHONE_1_IMSI}      #On faked calls replace the ${ATTACHED_ONNET_PHONE_1_IMSI} with the faked call subscriber imsi
    ...                                     ELSE                                      Set Variable             ${ATTACHED_ONNET_PHONE_1_IMSI}
    ${marker_ticket_timestamp}              ${type_dummy}=                            CRM Get Latest Ticket    ${phone1_imsi}
    ${MAX_CALL_DURATION_TOLERANCE_SECS}=    Set Variable    3
    ${max_limes}=                           Evaluate        ${max_duration_secs}+${MAX_CALL_DURATION_TOLERANCE_SECS}
    ${min_limes}=                           Evaluate        ${max_duration_secs}-${MAX_CALL_DURATION_TOLERANCE_SECS}
    ${max_limes_overflow}=                  Evaluate        ${max_duration_secs}+2*${MAX_CALL_DURATION_TOLERANCE_SECS}
    ${duration_secs}=                       Run Keyword If  '${FAKE_CALLS}'=='true'    Run Voice Call And Return Duration                 ${cg_device_imsi}     ${cd_device_imsi}                 ${dial_msisdn}        ${max_duration_secs}
    ...                                     ELSE                                       Run Voice Call And Return Duration                 ${cg_device_imsi}     ${cd_device_imsi}                 ${dial_msisdn}        ${max_limes_overflow}
                                            Run Keyword If  ${duration_secs} < ${min_limes}    Fail                  msg=Call duration of ${duration_secs}s < configured max duration of ${max_duration_secs}s
                                            Run Keyword If  ${max_limes} < ${duration_secs}    Fail                  msg=Call duration of ${duration_secs}s exceeded the configured max duration of ${max_duration_secs}s 
                                            Run Keyword If  '${FAKE_CALLS}'=='true'            Fake Voice Call Impact On Testbed                        ${ticket_channel}
                                            CRM New Ticket Should Exist                        ${phone1_imsi}           ${marker_ticket_timestamp}      ticket_type=Voice     ticket_channel=${ticket_channel}
  

Fake Voice Call Impact On Testbed
    [Documentation]  Runs a CG MOC 1s or CG MFC 1s session for the faked phone 1 
    ...              This FAKING strategy is neccessary during suite development time 
    ...              when there is no connection between the Android Phones's mobile network
    ...              and the testbed.
    ...              By faking the Android call's impact on the testbed with a CG session 
    ...              we can verify all other aspects of the test suite apart from 
    ...              the Android Remoting functionality.
    ...
    ...              Arguments:               
    ...                ticket_channel         Voice TC to fake (MOC, MFC)  
    ...            
    ...              Returns:                 Nothing - the function fails if the CG call doesn't succeed
    ...
    ...              Author: walter.heincz 
    ...              =========================================================
    [Arguments]  ${ticket_channel}
    ${rc}=           Run Keyword If  '${ticket_channel}'=='${MOC_TICKET_CHANNEL}'    CG Run MOC 1s                                  ${FAKE_ATTACHED_ONNET_PHONE_1_IMSI}    ${FAKE_ATTACHED_ONNET_PHONE_1_MSISDN}    ${FAKE_DESTINATION_MSISDN}    ${MSC ADDRESS}    ${CALLSGEN HOME}    ${CALLSGEN JAR NAME}    ${CG UNIFIED WS PATH}    ${AMQ-SIG HOST}   ${AMQ-SIG PORT}    ${AMQ-SIG MOC REQ QUEUE}    ${AMQ-SIG MOC RES QUEUE}                      
                     ...    ELSE IF  '${ticket_channel}'=='${MFC_TICKET_CHANNEL}'    CG Run MFC 1s    ${FAKE_ORIGINATION_MSISDN}    ${FAKE_ATTACHED_ONNET_PHONE_1_IMSI}    ${FAKE_ATTACHED_ONNET_PHONE_1_MSISDN}    ${FAKE_DESTINATION_MSISDN}    ${MSC ADDRESS}    ${CALLSGEN HOME}    ${CALLSGEN JAR NAME}    ${CG UNIFIED WS PATH}    ${AMQ-SIG HOST}   ${AMQ-SIG PORT}    ${AMQ-SIG MFC REQ QUEUE}    ${AMQ-SIG MFC RES QUEUE}                      
                     ...    ELSE                                                     Fail              msg=Fake Voice Call Impact On Testbed - unsupported ticket_channel=${ticket_channel}          
                     Should be equal as Integers  ${rc}  0   msg=Faking CG session failed





*** Test Cases ***



Run MOC Maximum Duration
    [Documentation]  Runs an on-net Phone 1 Call to on-net Phone 2 by dialing Phone 2 MSISDN format 1 and checks if it's automatically released after the configured MOC_MAX_CALL_DURATION_SECS
    ...              Plus MOC ticket existance check for Phone 1 subscriber
    ...              =========================================================
    [Setup]          Open Browser    ${CRM_PORTAL_LOGIN_URL}    firefox
                     Run Max Duration Monitored Voice Call And Check Phone 1 Ticket    ${ATTACHED_ONNET_PHONE_1_IMSI}             ${ATTACHED_ONNET_PHONE_2_IMSI}    ${ATTACHED_PHONE_2_MSISDN_FORMAT1}    ${MOC_MAX_CALL_DURATION_SECS}    ${MOC_TICKET_CHANNEL}
    [Teardown]       Close Browser    

Run MFC Maximum Duration
    [Documentation]  Runs a pseudo fix-net Phone 13 Call to on-net Phone 2 by dialing Phone 1 MSISDN format 1
    ...              which is forwarded to Phone 2 and checks if it's automatically released after the configured MFC_MAX_CALL_DURATION_SECS
    ...              Plus MFC ticket existance check for Phone 1 subscriber
    ...              =========================================================
    [Setup]          RunKeywords    Enable Call Forwarding Phone1 to Phone2    AND    Open Browser    ${CRM_PORTAL_LOGIN_URL}    firefox
                     Run Max Duration Monitored Voice Call And Check Phone 1 Ticket    ${ATTACHED_PSEUDO_FIXNET_PHONE_13_IMSI}    ${ATTACHED_ONNET_PHONE_2_IMSI}    ${ATTACHED_PHONE_1_MSISDN_FORMAT1}    ${MFC_MAX_CALL_DURATION_SECS}    ${MFC_TICKET_CHANNEL}
    [Teardown]       RunKeywords    Disable Call Forwarding Phone 1    AND    Close Browser    


Run Roaming MOC Maximum Duration - NOT IMPLEMENTED
    Log    "Testcase NOT implemented"  level=INFO

Run Roaming MTC Maximum Duration - NOT IMPLEMENTED
    Log    "Testcase NOT implemented"  level=INFO

