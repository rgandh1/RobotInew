<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 2.8.7 (Jython 2.7rc1 on java1.7.0_79)" generated="20150709 15:32:10.499">
<suite source="/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/MOC/PrePaid/OnNet/MOC_PREPAID_ONNET-ShortDuration-robot-suite.txt" id="s1" name="MOC PREPAID ONNET-ShortDuration-robot-suite">
<kw type="setup" name="Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20150709 15:32:12.950" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20150709 15:32:12.954" level="INFO">${date} = Thu Jul  9 15:32:12 CEST 2015</msg>
<status status="PASS" endtime="20150709 15:32:12.953" starttime="20150709 15:32:12.937"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:32:12.959" level="INFO">Date and time: Thu Jul  9 15:32:12 CEST 2015</msg>
<status status="PASS" endtime="20150709 15:32:12.960" starttime="20150709 15:32:12.956"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:32:12.964" level="INFO">Target IN machine: 10.105.113.135</msg>
<status status="PASS" endtime="20150709 15:32:12.965" starttime="20150709 15:32:12.962"></status>
</kw>
<kw type="kw" name="${in_version} = calls-resource.Check IN Version">
<doc>Checks the version of the running service</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:32:13.210" starttime="20150709 15:32:12.979"></status>
</kw>
<kw type="kw" name="${output_login} = SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
</arguments>
<msg timestamp="20150709 15:32:13.225" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:32:14.538" level="INFO">Read output: Last login: Thu Jul  9 11:56:16 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$[m</msg>
<msg timestamp="20150709 15:32:14.545" level="INFO">${output_login} = Last login: Thu Jul  9 11:56:16 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$[m </msg>
<status status="PASS" endtime="20150709 15:32:14.541" starttime="20150709 15:32:13.218"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output_login}</arg>
</arguments>
<msg timestamp="20150709 15:32:14.555" level="INFO">Last login: Thu Jul  9 11:56:16 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$[m </msg>
<status status="PASS" endtime="20150709 15:32:14.557" starttime="20150709 15:32:14.549"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service inew-mvno-corein-services status</arg>
</arguments>
<msg timestamp="20150709 15:32:14.566" level="INFO">Executing command 'sudo service inew-mvno-corein-services status'.</msg>
<msg timestamp="20150709 15:32:17.343" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:32:17.349" level="INFO">${output} =  inew-mvna-corein-router-mfc-3.0.1
I-New MVNA TNZ - Core - Service 3.0.1 2015.03.26-15:26:48 is running PID: 2349 
 inew-mvna-corein-router-moc-3.0.1
I-New MVNA TNZ - Core - Service 3.0.1 2015.03.26-1...</msg>
<status status="PASS" endtime="20150709 15:32:17.346" starttime="20150709 15:32:14.561"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20150709 15:32:17.362" level="INFO">${version_r} =  3.0.1 2015.03.26-15:26:48 is running PID: 11348 </msg>
<status status="PASS" endtime="20150709 15:32:17.360" starttime="20150709 15:32:17.354"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20150709 15:32:17.374" level="INFO">${version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20150709 15:32:17.372" starttime="20150709 15:32:17.366"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:32:17.387" starttime="20150709 15:32:17.378"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN version: ${version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:32:17.398" level="INFO">IN version:  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20150709 15:32:17.400" starttime="20150709 15:32:17.392"></status>
</kw>
<msg timestamp="20150709 15:32:17.407" level="INFO">${in_version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20150709 15:32:17.404" starttime="20150709 15:32:12.967"></status>
</kw>
<kw type="kw" name="${xdr_version} = calls-resource.Check XDR Version">
<doc>Checks the version of the running service</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${XDR HOST}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:32:17.507" starttime="20150709 15:32:17.436"></status>
</kw>
<kw type="kw" name="${output_login} = SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
</arguments>
<msg timestamp="20150709 15:32:17.521" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:32:18.769" level="INFO">Read output: Last login: Thu Jul  9 13:21:09 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$[m</msg>
<msg timestamp="20150709 15:32:18.774" level="INFO">${output_login} = Last login: Thu Jul  9 13:21:09 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$[m </msg>
<status status="PASS" endtime="20150709 15:32:18.772" starttime="20150709 15:32:17.511"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output_login}</arg>
</arguments>
<msg timestamp="20150709 15:32:18.783" level="INFO">Last login: Thu Jul  9 13:21:09 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$[m </msg>
<status status="PASS" endtime="20150709 15:32:18.785" starttime="20150709 15:32:18.778"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service inew-mvno-xdr status</arg>
</arguments>
<msg timestamp="20150709 15:32:18.793" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20150709 15:32:19.229" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:32:19.234" level="INFO">${output} = I-New UMS MVNO - XDR - Server 5.3.1.25016 is running PID: 4192 </msg>
<status status="PASS" endtime="20150709 15:32:19.232" starttime="20150709 15:32:18.788"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20150709 15:32:19.247" level="INFO">${version_r} =  5.3.1.25016 is running PID: 4192 </msg>
<status status="PASS" endtime="20150709 15:32:19.245" starttime="20150709 15:32:19.238"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20150709 15:32:19.260" level="INFO">${version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20150709 15:32:19.258" starttime="20150709 15:32:19.250"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:32:19.272" starttime="20150709 15:32:19.263"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR version: ${version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:32:19.283" level="INFO">XDR version:  5.3.1.25016 </msg>
<status status="PASS" endtime="20150709 15:32:19.285" starttime="20150709 15:32:19.277"></status>
</kw>
<msg timestamp="20150709 15:32:19.293" level="INFO">${xdr_version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20150709 15:32:19.290" starttime="20150709 15:32:17.411"></status>
</kw>
<kw type="kw" name="${crce_version} = calls-resource.Check CRCE Version">
<doc>Checks the version of the running service</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${CRCE HOST}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:32:19.379" starttime="20150709 15:32:19.319"></status>
</kw>
<kw type="kw" name="${output_login} = SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
</arguments>
<msg timestamp="20150709 15:32:19.388" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:32:20.666" level="INFO">Read output: Last login: Thu Jul  9 11:56:23 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$[m</msg>
<msg timestamp="20150709 15:32:20.673" level="INFO">${output_login} = Last login: Thu Jul  9 11:56:23 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$[m </msg>
<status status="PASS" endtime="20150709 15:32:20.669" starttime="20150709 15:32:19.382"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output_login}</arg>
</arguments>
<msg timestamp="20150709 15:32:20.680" level="INFO">Last login: Thu Jul  9 11:56:23 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$[m </msg>
<status status="PASS" endtime="20150709 15:32:20.682" starttime="20150709 15:32:20.676"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service inew-mvno-crce status</arg>
</arguments>
<msg timestamp="20150709 15:32:20.688" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20150709 15:32:20.899" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:32:20.902" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.3.14.26930
Negret Rating &amp; Charging Engine 5.3.14.26930 is running (PID:25709, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20150709 15:32:20.901" starttime="20150709 15:32:20.685"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20150709 15:32:20.912" level="INFO">${version_r} =  5.3.14.26930 is running (PID:25709, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20150709 15:32:20.911" starttime="20150709 15:32:20.906"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20150709 15:32:20.921" level="INFO">${version} =  5.3.14.26930 </msg>
<status status="PASS" endtime="20150709 15:32:20.920" starttime="20150709 15:32:20.916"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:32:20.929" starttime="20150709 15:32:20.925"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE version: ${version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:32:20.939" level="INFO">CRCE version:  5.3.14.26930 </msg>
<status status="PASS" endtime="20150709 15:32:20.941" starttime="20150709 15:32:20.934"></status>
</kw>
<msg timestamp="20150709 15:32:20.947" level="INFO">${crce_version} =  5.3.14.26930 </msg>
<status status="PASS" endtime="20150709 15:32:20.944" starttime="20150709 15:32:19.297"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20150709 15:32:20.955" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20150709 15:32:20.953" starttime="20150709 15:32:20.950"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>1</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20150709 15:32:20.997" level="INFO">msg=crce_host=10.105.113.125</msg>
<status status="PASS" endtime="20150709 15:32:20.998" starttime="20150709 15:32:20.992"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20150709 15:32:21.006" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20150709 15:32:21.007" starttime="20150709 15:32:21.001"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20150709 15:32:21.014" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20150709 15:32:21.016" starttime="20150709 15:32:21.010"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20150709 15:32:21.023" level="INFO">msg=amount=1</msg>
<status status="PASS" endtime="20150709 15:32:21.025" starttime="20150709 15:32:21.019"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20150709 15:32:21.032" level="INFO">msg=imsiRangeStart=530052041010000</msg>
<status status="PASS" endtime="20150709 15:32:21.033" starttime="20150709 15:32:21.027"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20150709 15:32:21.041" level="INFO">msg=msisdnRangeStart=642041010000</msg>
<status status="PASS" endtime="20150709 15:32:21.042" starttime="20150709 15:32:21.036"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20150709 15:32:21.049" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20150709 15:32:21.051" starttime="20150709 15:32:21.045"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20150709 15:32:21.058" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20150709 15:32:21.059" starttime="20150709 15:32:21.053"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20150709 15:32:21.066" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20150709 15:32:21.068" starttime="20150709 15:32:21.062"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20150709 15:32:21.073" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20150709 15:32:21.074" starttime="20150709 15:32:21.071"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20150709 15:32:21.093" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/MOC/PrePaid/OnNet/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/MOC/PrePaid/OnNet/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150709 15:32:21.094" starttime="20150709 15:32:21.090"></status>
</kw>
<status status="PASS" endtime="20150709 15:32:21.095" starttime="20150709 15:32:21.087"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20150709 15:32:21.102" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/MOC/PrePaid/OnNet/soapui.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/MOC/PrePaid/OnNet/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150709 15:32:21.102" starttime="20150709 15:32:21.098"></status>
</kw>
<status status="PASS" endtime="20150709 15:32:21.103" starttime="20150709 15:32:21.096"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20150709 15:32:21.109" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/MOC/PrePaid/OnNet/soapui-errors.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/MOC/PrePaid/OnNet/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150709 15:32:21.110" starttime="20150709 15:32:21.107"></status>
</kw>
<status status="PASS" endtime="20150709 15:32:21.111" starttime="20150709 15:32:21.105"></status>
</kw>
<status status="PASS" endtime="20150709 15:32:21.112" starttime="20150709 15:32:21.076"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20150709 15:32:21.117" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20150709 15:32:21.117" starttime="20150709 15:32:21.113"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:32:21.121" starttime="20150709 15:32:21.119"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:32:21.124" starttime="20150709 15:32:21.122"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:32:21.127" starttime="20150709 15:32:21.125"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20150709 15:32:21.130" starttime="20150709 15:32:21.129"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20150709 15:32:21.133" starttime="20150709 15:32:21.132"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:32:21.137" starttime="20150709 15:32:21.135"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:32:21.140" starttime="20150709 15:32:21.138"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:32:21.143" starttime="20150709 15:32:21.141"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:32:21.147" starttime="20150709 15:32:21.145"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:32:21.150" starttime="20150709 15:32:21.148"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:32:21.154" starttime="20150709 15:32:21.151"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:32:21.157" starttime="20150709 15:32:21.155"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:32:21.162" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20150709 15:32:59.517" level="INFO">15:32:21,521 WARN  [SoapUI] Missing folder [/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/MOC/PrePaid/OnNet/ext] for external libraries
15:32:21,522 INFO  [DefaultSoapUICore] Creating new settings at [/home/msanseovic/soapui-settings.xml]
15:32:23,412 INFO  [WsdlProject] Loaded project from [file:/opt/robot/robotworkspace/libs/global-keyword-resources/crce-subscriberadmin/robot_crce_bridge-soapui-project.xml]
15:32:23,431 INFO  [SoapUITestCaseRunner] Setting project property [crceHost] to [10.105.113.125]
15:32:23,431 INFO  [SoapUITestCaseRunner] Setting project property [crcePort] to [8080]
15:32:23,431 INFO  [SoapUITestCaseRunner] Setting project property [crceWebservicesBasePath] to [/inew-mvno-crce-webservices/]
15:32:23,431 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.amount] to [1]
15:32:23,431 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.imsiRangeStart] to [530052041010000]
15:32:23,432 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.msisdnRangeStart] to [642041010000]
15:32:23,432 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.type] to [PREPAID]
15:32:23,432 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.languageid] to [1]
15:32:23,432 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.tariffId] to [101001]
15:32:23,432 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.balance] to [10000000]
15:32:23,432 INFO  [SoapUITestCaseRunner] Running SoapUI tests in project [Robotframework_CRCE-Bridge]
15:32:23,433 INFO  [SoapUITestCaseRunner] Running TestCase [createTestSubscribers]
15:32:23,443 INFO  [SoapUITestCaseRunner] Running SoapUI testcase [createTestSubscribers]
15:32:23,450 INFO  [SoapUITestCaseRunner] running step [init_repeat_counter]
15:32:23,892 INFO  [SoapUITestCaseRunner] running step [01_init_next_subscriber]
15:32:23,954 INFO  [SoapUITestCaseRunner] running step [getSubscriberProfileByImsi]
15:32:24,290 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
15:32:24,290 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
15:32:43,462 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
15:32:43,471 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
15:32:43,659 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
15:32:43,659 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
15:32:43,659 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
15:32:43,660 INFO  [SoapUITestCaseRunner] running step [cancel_on_SOAP_error]
15:32:43,741 INFO  [SoapUITestCaseRunner] running step [transfer_response_values]
15:32:44,013 INFO  [SoapUITestCaseRunner] running step [cancel_on_CRCE_error_OR_skip_delete_on_UnknownSubscriber]
15:32:44,040 INFO  [SoapUITestCaseRunner] running step [deleteSubscriber]
15:32:44,042 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
15:32:44,044 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
15:32:44,044 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
15:32:53,950 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
15:32:53,950 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
15:32:53,958 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
15:32:53,958 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
15:32:53,958 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
15:32:53,959 INFO  [SoapUITestCaseRunner] running step [2nd_cancel_on_SOAP_error]
15:32:54,033 INFO  [SoapUITestCaseRunner] running step [2nd_transfer_response_values]
15:32:54,040 INFO  [SoapUITestCaseRunner] running step [cancel_on_deletion_error]
15:32:54,091 INFO  [SoapUITestCaseRunner] running step [02_createSubscriber]
15:32:54,094 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
15:32:54,096 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
15:32:54,096 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
15:32:54,990 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
15:32:54,991 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
15:32:54,997 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
15:32:54,997 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
15:32:54,998 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
15:32:54,998 INFO  [SoapUITestCaseRunner] running step [3rd_cancel_on_SOAP_error]
15:32:55,068 INFO  [SoapUITestCaseRunner] running step [3rd_transfer_response_values]
15:32:55,079 INFO  [SoapUITestCaseRunner] running step [cancel_on_create_error]
15:32:55,122 INFO  [SoapUITestCaseRunner] running step [activateSubscriber]
15:32:55,126 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
15:32:55,128 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
15:32:55,128 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
15:32:56,812 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
15:32:56,812 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
15:32:56,819 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
15:32:56,820 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
15:32:56,820 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
15:32:56,820 INFO  [SoapUITestCaseRunner] running step [4th_cancel_on_SOAP_error]
15:32:56,894 INFO  [SoapUITestCaseRunner] running step [4th_transfer_response_values]
15:32:56,900 INFO  [SoapUITestCaseRunner] running step [cancel_on_activate_error]
15:32:56,946 INFO  [SoapUITestCaseRunner] running step [getMainAccount]
15:32:56,949 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
15:32:56,951 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
15:32:56,951 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/accounts HTTP/1.1
15:32:58,116 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
15:32:58,117 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
15:32:58,131 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
15:32:58,131 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
15:32:58,131 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
15:32:58,131 INFO  [SoapUITestCaseRunner] running step [5th_cancel_on_SOAP_error]
15:32:58,196 INFO  [SoapUITestCaseRunner] running step [5th_transfer_response_values]
15:32:58,217 INFO  [SoapUITestCaseRunner] running step [cancel_on_getmainaccount_error]
15:32:58,262 INFO  [SoapUITestCaseRunner] running step [setBalance]
15:32:58,266 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
15:32:58,268 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
15:32:58,268 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/account_administration HTTP/1.1
15:32:59,298 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
15:32:59,298 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
15:32:59,311 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
15:32:59,311 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
15:32:59,311 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
15:32:59,311 INFO  [SoapUITestCaseRunner] running step [6th_cancel_on_SOAP_error]
15:32:59,377 INFO  [SoapUITestCaseRunner] running step [6th_transfer_response_values]
15:32:59,387 INFO  [SoapUITestCaseRunner] running step [cancel_on_setbalance_error]
15:32:59,429 INFO  [SoapUITestCaseRunner] running step [repeat_01_amount_times]
15:32:59,466 INFO  [SoapUITestCaseRunner] running step [finish_successful]
15:32:59,499 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK
15:32:59,500 INFO  [SoapUITestCaseRunner] Finished running SoapUI testcase [createTestSubscribers], time taken: 36014ms, status: FINISHED
15:32:59,500 INFO  [SoapUITestCaseRunner] TestCase [createTestSubscribers] finished with status [FINISHED] in 36014ms</msg>
<status status="PASS" endtime="20150709 15:32:59.543" starttime="20150709 15:32:21.160"></status>
</kw>
<msg timestamp="20150709 15:32:59.554" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20150709 15:32:59.555" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20150709 15:32:59.552" starttime="20150709 15:32:21.158"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20150709 15:32:59.580" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20150709 15:32:59.579" starttime="20150709 15:32:59.576"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20150709 15:32:59.585" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20150709 15:32:59.584" starttime="20150709 15:32:59.582"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20150709 15:32:59.589" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20150709 15:32:59.589" starttime="20150709 15:32:59.586"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20150709 15:32:59.597" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/MOC/PrePaid/OnNet/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/MOC/PrePaid/OnNet/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20150709 15:32:59.604" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20150709 15:32:59.605" starttime="20150709 15:32:59.594"></status>
</kw>
<msg timestamp="20150709 15:32:59.607" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20150709 15:32:59.608" level="INFO">${return_log_entry} = 2015-07-09 15:32:59,499 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20150709 15:32:59.606" starttime="20150709 15:32:59.591"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:32:59.624" starttime="20150709 15:32:59.622"></status>
</kw>
<msg timestamp="20150709 15:32:59.626" level="INFO">${return_log_entry} = 2015-07-09 15:32:59,499 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20150709 15:32:59.625" starttime="20150709 15:32:59.609"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:32:59.635" starttime="20150709 15:32:59.633"></status>
</kw>
<msg timestamp="20150709 15:32:59.637" level="INFO">${return_log_entry} = 2015-07-09 15:32:59,499 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20150709 15:32:59.636" starttime="20150709 15:32:59.627"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:32:59.648" starttime="20150709 15:32:59.645"></status>
</kw>
<msg timestamp="20150709 15:32:59.649" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20150709 15:32:59.648" starttime="20150709 15:32:59.639"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:32:59.661" starttime="20150709 15:32:59.659"></status>
</kw>
<msg timestamp="20150709 15:32:59.663" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20150709 15:32:59.662" starttime="20150709 15:32:59.651"></status>
</kw>
<msg timestamp="20150709 15:32:59.665" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20150709 15:32:59.665" starttime="20150709 15:32:59.559"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:32:59.681" starttime="20150709 15:32:59.678"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:32:59.684" starttime="20150709 15:32:59.682"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:32:59.687" starttime="20150709 15:32:59.685"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20150709 15:32:59.703" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/MOC/PrePaid/OnNet/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/MOC/PrePaid/OnNet/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20150709 15:32:59.704" starttime="20150709 15:32:59.697"></status>
</kw>
<status status="PASS" endtime="20150709 15:32:59.705" starttime="20150709 15:32:59.694"></status>
</kw>
<status status="PASS" endtime="20150709 15:32:59.706" starttime="20150709 15:32:59.688"></status>
</kw>
<status status="PASS" endtime="20150709 15:32:59.707" starttime="20150709 15:32:59.667"></status>
</kw>
<msg timestamp="20150709 15:32:59.709" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20150709 15:32:59.708" starttime="20150709 15:32:20.961"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20150709 15:32:59.713" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150709 15:32:59.714" starttime="20150709 15:32:59.711"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:32:59.717" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20150709 15:32:59.718" starttime="20150709 15:32:59.715"></status>
</kw>
<status status="PASS" endtime="20150709 15:32:59.719" starttime="20150709 15:32:12.927"></status>
</kw>
<test id="s1-t1" name="Run MOC Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MOC 1s *******</arg>
</arguments>
<status status="PASS" endtime="20150709 15:32:59.733" starttime="20150709 15:32:59.732"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the MOC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:32:59.737" level="INFO">Running the MOC call...</msg>
<status status="PASS" endtime="20150709 15:32:59.737" starttime="20150709 15:32:59.735"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MOC 1s">
<doc>Runs a standard MOC 1s session</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MOC CGS">
<doc>Runs a standard MOC session (meaning a session that needs only mscAddress and mocBPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>moc1s</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_moc_req}</arg>
<arg>${queue_moc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20150709 15:32:59.780" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv</msg>
<status status="PASS" endtime="20150709 15:32:59.779" starttime="20150709 15:32:59.777"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20150709 15:32:59.784" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv</msg>
<status status="PASS" endtime="20150709 15:32:59.784" starttime="20150709 15:32:59.781"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20150709 15:32:59.788" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini</msg>
<status status="PASS" endtime="20150709 15:32:59.788" starttime="20150709 15:32:59.786"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20150709 15:32:59.792" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc1s.cgs</msg>
<status status="PASS" endtime="20150709 15:32:59.792" starttime="20150709 15:32:59.790"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20150709 15:32:59.795" starttime="20150709 15:32:59.794"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20150709 15:32:59.800" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150709 15:32:59.801" starttime="20150709 15:32:59.796"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20150709 15:32:59.804" starttime="20150709 15:32:59.802"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mocBPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20150709 15:32:59.808" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150709 15:32:59.809" starttime="20150709 15:32:59.805"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20150709 15:32:59.813" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150709 15:32:59.814" starttime="20150709 15:32:59.810"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20150709 15:32:59.817" starttime="20150709 15:32:59.815"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20150709 15:32:59.821" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150709 15:32:59.822" starttime="20150709 15:32:59.818"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MOC;${queue_moc_req};${queue_moc_res};6;1;1</arg>
</arguments>
<msg timestamp="20150709 15:32:59.827" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150709 15:32:59.828" starttime="20150709 15:32:59.823"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20150709 15:32:59.831" starttime="20150709 15:32:59.829"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20150709 15:32:59.844" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc1s.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20150709 15:33:09.001" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:33:08.998" starttime="20150709 15:32:59.832"></status>
</kw>
<msg timestamp="20150709 15:33:09.007" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:33:09.005" starttime="20150709 15:32:59.759"></status>
</kw>
<msg timestamp="20150709 15:33:09.013" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:33:09.011" starttime="20150709 15:32:59.740"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20150709 15:33:14.022" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20150709 15:33:14.025" starttime="20150709 15:33:09.016"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:33:14.033" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20150709 15:33:14.035" starttime="20150709 15:33:14.029"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Checking Subscriber's Account Balance *******</arg>
</arguments>
<status status="PASS" endtime="20150709 15:33:14.042" starttime="20150709 15:33:14.038"></status>
</kw>
<kw type="kw" name="calls-resource.Check Subscriber Balance">
<doc>Check the CRCE DB entry for test subscriber's monetary account balance.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${EXPECTED_BALANCE_1S_MOC}</arg>
</arguments>
<kw type="kw" name="dblib_support-resource.DBLIB Connect to PostgresDB">
<doc>this helper shields testsuite developers from the necessity to know driver and connection string details.</doc>
<arguments>
<arg>${CRCE DB HOST}</arg>
<arg>${CRCE DB PORT}</arg>
<arg>${CRCE DB NAME}</arg>
<arg>${CRCE DB USER}</arg>
<arg>${CRCE DB PWD}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Connect To Database">
<doc></doc>
<arguments>
<arg>org.postgresql.Driver</arg>
<arg>jdbc:postgresql://${host}:${port}/${dbName}</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:33:14.233" starttime="20150709 15:33:14.088"></status>
</kw>
<status status="PASS" endtime="20150709 15:33:14.236" starttime="20150709 15:33:14.066"></status>
</kw>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select balance from acc_subscriber_accounts where category=1 and subscriber_id in (select id from profiler_subscriber_profiles where msisdn='${subscriber}');</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150709 15:33:14.262" starttime="20150709 15:33:14.258"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:33:15.625" starttime="20150709 15:33:14.265"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150709 15:33:15.634" starttime="20150709 15:33:15.630"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150709 15:33:15.641" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/MOC/PrePaid/OnNet/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/MOC/PrePaid/OnNet/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150709 15:33:15.645" level="INFO">${queryResultSetLines} = 9980000|
</msg>
<status status="PASS" endtime="20150709 15:33:15.644" starttime="20150709 15:33:15.637"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150709 15:33:15.651" starttime="20150709 15:33:15.648"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150709 15:33:15.658" level="INFO">1 lines returned</msg>
<msg timestamp="20150709 15:33:15.661" level="INFO">@{queryResultSet} = [ 9980000| ]</msg>
<status status="PASS" endtime="20150709 15:33:15.660" starttime="20150709 15:33:15.654"></status>
</kw>
<msg timestamp="20150709 15:33:15.667" level="INFO">@{queryRows} = [ 9980000| ]</msg>
<status status="PASS" endtime="20150709 15:33:15.664" starttime="20150709 15:33:14.240"></status>
</kw>
<kw type="kw" name="@{fields} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>@{queryRows}[0]</arg>
<arg>|</arg>
</arguments>
<msg timestamp="20150709 15:33:15.676" level="INFO">@{fields} = [ 9980000 |  ]</msg>
<status status="PASS" endtime="20150709 15:33:15.674" starttime="20150709 15:33:15.670"></status>
</kw>
<kw type="kw" name="${balance} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{fields}[0]</arg>
</arguments>
<msg timestamp="20150709 15:33:15.684" level="INFO">${balance} = 9980000</msg>
<status status="PASS" endtime="20150709 15:33:15.683" starttime="20150709 15:33:15.679"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Disconnect From Database">
<doc></doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:33:15.691" level="INFO">SQL Warnings on this connection: null</msg>
<status status="PASS" endtime="20150709 15:33:15.692" starttime="20150709 15:33:15.687"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${balance}</arg>
<arg>${expected_bal}</arg>
<arg>msg=Balance ${balance} NOT OK!</arg>
</arguments>
<msg timestamp="20150709 15:33:15.702" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150709 15:33:15.703" starttime="20150709 15:33:15.695"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Balance= ${balance} OK!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:33:15.710" level="INFO">Balance= 9980000 OK!</msg>
<status status="PASS" endtime="20150709 15:33:15.712" starttime="20150709 15:33:15.706"></status>
</kw>
<status status="PASS" endtime="20150709 15:33:15.714" starttime="20150709 15:33:14.045"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close All Connections">
<doc>Closes all open connections.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:33:15.722" starttime="20150709 15:33:15.718"></status>
</kw>
<doc>Test will make a MOC call, duration 1s.

Arguments:
none
Returns:
none
Fails:

=================================================================================</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MOC_involved</tag>
<tag>TNZ_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20150709 15:33:15.725" starttime="20150709 15:32:59.721"></status>
</test>
<kw type="teardown" name="Teardown Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Cleaning up</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:33:15.757" level="INFO">Cleaning up</msg>
<status status="PASS" endtime="20150709 15:33:15.759" starttime="20150709 15:33:15.753"></status>
</kw>
<kw type="kw" name="OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>mv *ssh_tail*.log log/</arg>
</arguments>
<msg timestamp="20150709 15:33:15.771" level="INFO">Running command 'mv *ssh_tail*.log log/ 2&gt;&amp;1'</msg>
<status status="PASS" endtime="20150709 15:33:15.779" starttime="20150709 15:33:15.762"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close All Connections">
<doc>Closes all open connections.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:33:15.785" starttime="20150709 15:33:15.782"></status>
</kw>
<status status="PASS" endtime="20150709 15:33:15.787" starttime="20150709 15:33:15.737"></status>
</kw>
<doc>Testing the prepaid MOC call, duration is 30s - shorter than one slice (less than 60s)

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20150709 15:33:15.789" starttime="20150709 15:32:10.512"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="0">Critical Tests</stat>
<stat pass="1" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="1" info="" doc="" combined="" fail="0" links="">matko.sanseovic</stat>
<stat pass="1" info="" doc="" combined="" fail="0" links="">MOC_involved</stat>
<stat pass="1" info="" doc="" combined="" fail="0" links="">TNZ_supported</stat>
</tag>
<suite>
<stat pass="1" id="s1" fail="0" name="MOC PREPAID ONNET-ShortDuration-robot-suite">MOC PREPAID ONNET-ShortDuration-robot-suite</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
